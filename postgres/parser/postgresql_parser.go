// Code generated from /home/kovacs/Projects/github.com/mVIII/sqlparsers/postgres/PostgreSQLParser.g4 by ANTLR 4.7.1. DO NOT EDIT.

package parser // PostgreSQLParser
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 838, 5680,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156,
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160,
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165,
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 4, 168, 9, 168, 4, 169, 9, 169,
	4, 170, 9, 170, 4, 171, 9, 171, 4, 172, 9, 172, 4, 173, 9, 173, 4, 174,
	9, 174, 4, 175, 9, 175, 4, 176, 9, 176, 4, 177, 9, 177, 4, 178, 9, 178,
	4, 179, 9, 179, 4, 180, 9, 180, 4, 181, 9, 181, 4, 182, 9, 182, 4, 183,
	9, 183, 4, 184, 9, 184, 4, 185, 9, 185, 4, 186, 9, 186, 4, 187, 9, 187,
	4, 188, 9, 188, 4, 189, 9, 189, 4, 190, 9, 190, 4, 191, 9, 191, 4, 192,
	9, 192, 4, 193, 9, 193, 4, 194, 9, 194, 4, 195, 9, 195, 4, 196, 9, 196,
	4, 197, 9, 197, 4, 198, 9, 198, 4, 199, 9, 199, 4, 200, 9, 200, 4, 201,
	9, 201, 4, 202, 9, 202, 4, 203, 9, 203, 4, 204, 9, 204, 4, 205, 9, 205,
	4, 206, 9, 206, 4, 207, 9, 207, 4, 208, 9, 208, 4, 209, 9, 209, 4, 210,
	9, 210, 4, 211, 9, 211, 4, 212, 9, 212, 4, 213, 9, 213, 4, 214, 9, 214,
	4, 215, 9, 215, 4, 216, 9, 216, 4, 217, 9, 217, 4, 218, 9, 218, 4, 219,
	9, 219, 4, 220, 9, 220, 4, 221, 9, 221, 4, 222, 9, 222, 4, 223, 9, 223,
	4, 224, 9, 224, 4, 225, 9, 225, 4, 226, 9, 226, 4, 227, 9, 227, 4, 228,
	9, 228, 4, 229, 9, 229, 4, 230, 9, 230, 4, 231, 9, 231, 4, 232, 9, 232,
	4, 233, 9, 233, 4, 234, 9, 234, 4, 235, 9, 235, 4, 236, 9, 236, 4, 237,
	9, 237, 4, 238, 9, 238, 4, 239, 9, 239, 4, 240, 9, 240, 4, 241, 9, 241,
	4, 242, 9, 242, 4, 243, 9, 243, 4, 244, 9, 244, 4, 245, 9, 245, 4, 246,
	9, 246, 4, 247, 9, 247, 4, 248, 9, 248, 4, 249, 9, 249, 4, 250, 9, 250,
	4, 251, 9, 251, 4, 252, 9, 252, 4, 253, 9, 253, 4, 254, 9, 254, 4, 255,
	9, 255, 4, 256, 9, 256, 4, 257, 9, 257, 4, 258, 9, 258, 4, 259, 9, 259,
	4, 260, 9, 260, 4, 261, 9, 261, 4, 262, 9, 262, 4, 263, 9, 263, 4, 264,
	9, 264, 4, 265, 9, 265, 4, 266, 9, 266, 4, 267, 9, 267, 4, 268, 9, 268,
	3, 2, 3, 2, 3, 2, 6, 2, 540, 10, 2, 13, 2, 14, 2, 541, 3, 2, 3, 2, 5, 2,
	546, 10, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 602, 10, 3, 3, 4,
	3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 646, 10, 5, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 5, 6, 678, 10, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,
	3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,
	3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 707, 10, 7, 3, 8,
	3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8,
	3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 730, 10, 8, 3, 9,
	3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3,
	11, 5, 11, 744, 10, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 5, 11, 760, 10, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 5, 11, 769, 10, 11, 3, 11,
	3, 11, 5, 11, 773, 10, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 5, 11,
	812, 10, 11, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3,
	12, 3, 12, 3, 12, 3, 12, 5, 12, 826, 10, 12, 3, 12, 3, 12, 3, 12, 3, 12,
	3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 837, 10, 12, 3, 12, 3, 12, 3,
	12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 847, 10, 12, 3, 13, 3, 13,
	3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 855, 10, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 5, 13, 864, 10, 13, 3, 14, 3, 14, 3, 15, 3, 15,
	5, 15, 870, 10, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 876, 10, 15, 3,
	15, 5, 15, 879, 10, 15, 3, 15, 3, 15, 5, 15, 883, 10, 15, 3, 15, 3, 15,
	5, 15, 887, 10, 15, 3, 15, 3, 15, 5, 15, 891, 10, 15, 3, 15, 3, 15, 5,
	15, 895, 10, 15, 3, 15, 3, 15, 3, 15, 5, 15, 900, 10, 15, 3, 15, 3, 15,
	3, 15, 3, 15, 5, 15, 906, 10, 15, 3, 15, 3, 15, 5, 15, 910, 10, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 919, 10, 15, 3, 15,
	3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 927, 10, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 936, 10, 15, 3, 15, 3, 15, 3, 15,
	3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 945, 10, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 955, 10, 15, 3, 15, 3, 15, 3, 15,
	3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 965, 10, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 974, 10, 15, 3, 15, 3, 15, 3, 15,
	5, 15, 979, 10, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 985, 10, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 994, 10, 15, 3, 15,
	3, 15, 5, 15, 998, 10, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 1005,
	10, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 1012, 10, 15, 3, 15,
	3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15,
	3, 15, 3, 15, 5, 15, 1038, 10, 15, 5, 15, 1040, 10, 15, 3, 16, 3, 16, 3,
	16, 7, 16, 1045, 10, 16, 12, 16, 14, 16, 1048, 11, 16, 3, 17, 3, 17, 3,
	17, 3, 17, 3, 17, 5, 17, 1055, 10, 17, 3, 17, 5, 17, 1058, 10, 17, 3, 17,
	3, 17, 5, 17, 1062, 10, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3,
	17, 5, 17, 1071, 10, 17, 3, 17, 5, 17, 1074, 10, 17, 3, 17, 3, 17, 5, 17,
	1078, 10, 17, 3, 17, 3, 17, 5, 17, 1082, 10, 17, 3, 17, 3, 17, 3, 17, 3,
	17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 1093, 10, 17, 3, 17, 3, 17,
	3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 1105, 10,
	17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 1112, 10, 17, 3, 18, 3, 18,
	3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3,
	19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19,
	5, 19, 1137, 10, 19, 3, 20, 3, 20, 3, 20, 3, 20, 5, 20, 1143, 10, 20, 3,
	20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 5, 20, 1154,
	10, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20,
	3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 5, 20, 1173, 10,
	20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20,
	5, 20, 1185, 10, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3,
	20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 5, 20, 1201, 10, 20, 3, 20,
	3, 20, 3, 20, 3, 20, 5, 20, 1207, 10, 20, 5, 20, 1209, 10, 20, 3, 21, 3,
	21, 5, 21, 1213, 10, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21,
	3, 21, 5, 21, 1223, 10, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3,
	21, 5, 21, 1232, 10, 21, 5, 21, 1234, 10, 21, 3, 22, 3, 22, 3, 22, 3, 22,
	3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 5, 22, 1245, 10, 22, 3, 23, 3, 23, 3,
	24, 3, 24, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25,
	3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3,
	25, 3, 25, 5, 25, 1272, 10, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25,
	3, 25, 3, 25, 3, 25, 3, 25, 5, 25, 1284, 10, 25, 3, 26, 3, 26, 3, 27, 3,
	27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27,
	3, 27, 3, 27, 3, 27, 3, 27, 5, 27, 1304, 10, 27, 3, 27, 3, 27, 5, 27, 1308,
	10, 27, 3, 27, 3, 27, 3, 27, 5, 27, 1313, 10, 27, 5, 27, 1315, 10, 27,
	3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 5, 28, 1323, 10, 28, 3, 28, 3,
	28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 5, 28, 1333, 10, 28, 3, 28,
	3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 5, 28, 1343, 10, 28, 3,
	28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28,
	3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3,
	28, 3, 28, 3, 28, 5, 28, 1369, 10, 28, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29,
	3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3,
	29, 3, 29, 3, 29, 5, 29, 1389, 10, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29,
	5, 29, 1396, 10, 29, 3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 1402, 10, 30, 3,
	30, 6, 30, 1405, 10, 30, 13, 30, 14, 30, 1406, 3, 30, 3, 30, 3, 30, 3,
	30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 1420, 10, 30,
	3, 30, 3, 30, 3, 30, 5, 30, 1425, 10, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3,
	30, 5, 30, 1432, 10, 30, 3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 1438, 10, 30,
	3, 30, 3, 30, 3, 30, 5, 30, 1443, 10, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3,
	30, 3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 1454, 10, 30, 3, 30, 3, 30, 3, 30,
	5, 30, 1459, 10, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 1467,
	10, 30, 3, 30, 3, 30, 3, 30, 5, 30, 1472, 10, 30, 3, 30, 3, 30, 5, 30,
	1476, 10, 30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3,
	31, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32,
	3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 5, 32, 1502, 10, 32, 5, 32, 1504, 10,
	32, 3, 33, 3, 33, 3, 33, 3, 33, 5, 33, 1510, 10, 33, 3, 33, 3, 33, 3, 34,
	5, 34, 1515, 10, 34, 3, 34, 3, 34, 5, 34, 1519, 10, 34, 3, 34, 3, 34, 5,
	34, 1523, 10, 34, 3, 34, 3, 34, 5, 34, 1527, 10, 34, 7, 34, 1529, 10, 34,
	12, 34, 14, 34, 1532, 11, 34, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35,
	3, 35, 5, 35, 1541, 10, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 5, 35, 1548,
	10, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35,
	3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 5, 35, 1564, 10, 35, 3, 36, 3, 36, 3,
	36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 5, 36, 1574, 10, 36, 3, 36, 3, 36,
	3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3,
	36, 3, 36, 5, 36, 1590, 10, 36, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37,
	3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3,
	37, 5, 37, 1609, 10, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37,
	3, 37, 3, 37, 3, 37, 5, 37, 1621, 10, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3,
	37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37,
	3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3,
	37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 5, 37, 1655, 10, 37, 3, 38,
	3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3,
	38, 3, 38, 3, 38, 5, 38, 1671, 10, 38, 3, 39, 3, 39, 3, 40, 3, 40, 3, 40,
	3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3,
	40, 3, 40, 5, 40, 1690, 10, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40,
	3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 5,
	40, 1708, 10, 40, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41,
	3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3,
	41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41,
	3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3,
	41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41,
	3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 5, 41, 1769,
	10, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41,
	3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3,
	41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41,
	5, 41, 1801, 10, 41, 3, 42, 3, 42, 3, 43, 3, 43, 3, 44, 3, 44, 3, 44, 3,
	44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44,
	3, 44, 3, 44, 3, 44, 3, 44, 5, 44, 1825, 10, 44, 3, 45, 3, 45, 3, 45, 3,
	45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45,
	3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 5, 45, 1846, 10, 45, 3, 46, 3, 46, 3,
	47, 3, 47, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48,
	3, 48, 3, 48, 3, 48, 3, 49, 3, 49, 3, 50, 3, 50, 5, 50, 1868, 10, 50, 3,
	50, 3, 50, 3, 50, 3, 50, 3, 50, 5, 50, 1875, 10, 50, 3, 51, 3, 51, 3, 52,
	3, 52, 3, 53, 3, 53, 3, 54, 3, 54, 3, 55, 3, 55, 3, 56, 3, 56, 3, 57, 3,
	57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57,
	3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3,
	57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57,
	3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 5, 57, 1928, 10, 57, 3, 58, 3,
	58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 59, 3, 59, 3, 59,
	3, 59, 3, 59, 5, 59, 1944, 10, 59, 3, 59, 5, 59, 1947, 10, 59, 3, 59, 3,
	59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59,
	3, 59, 3, 59, 5, 59, 1963, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 1969,
	10, 59, 3, 59, 3, 59, 5, 59, 1973, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59,
	5, 59, 1979, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 1985, 10, 59, 3,
	59, 3, 59, 3, 59, 3, 59, 5, 59, 1991, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59,
	5, 59, 1997, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 2003, 10, 59, 3,
	59, 3, 59, 3, 59, 3, 59, 5, 59, 2009, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59,
	5, 59, 2015, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 2021, 10, 59, 3,
	59, 3, 59, 3, 59, 3, 59, 5, 59, 2027, 10, 59, 3, 59, 3, 59, 5, 59, 2031,
	10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 2037, 10, 59, 3, 59, 3, 59,
	3, 59, 3, 59, 5, 59, 2043, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 2049,
	10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 2058, 10,
	59, 3, 59, 5, 59, 2061, 10, 59, 3, 59, 5, 59, 2064, 10, 59, 3, 59, 3, 59,
	3, 59, 5, 59, 2069, 10, 59, 3, 59, 5, 59, 2072, 10, 59, 3, 59, 3, 59, 3,
	59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59,
	3, 59, 5, 59, 2088, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 2094, 10,
	59, 3, 59, 3, 59, 5, 59, 2098, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59,
	2104, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 2110, 10, 59, 3, 59, 3,
	59, 5, 59, 2114, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59,
	3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3,
	59, 3, 59, 3, 59, 3, 59, 5, 59, 2137, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59,
	5, 59, 2143, 10, 59, 3, 59, 3, 59, 5, 59, 2147, 10, 59, 3, 59, 3, 59, 3,
	59, 3, 59, 5, 59, 2153, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 2159,
	10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 2165, 10, 59, 3, 59, 3, 59,
	3, 59, 3, 59, 5, 59, 2171, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 2177,
	10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 2183, 10, 59, 3, 59, 3, 59,
	3, 59, 3, 59, 5, 59, 2189, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 2195,
	10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 2201, 10, 59, 3, 59, 3, 59,
	5, 59, 2205, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 2211, 10, 59, 3,
	59, 3, 59, 3, 59, 3, 59, 5, 59, 2217, 10, 59, 3, 59, 3, 59, 5, 59, 2221,
	10, 59, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60,
	3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 5, 60, 2237, 10, 60, 3, 60, 3, 60, 3,
	60, 3, 60, 5, 60, 2243, 10, 60, 3, 60, 3, 60, 3, 60, 3, 60, 5, 60, 2249,
	10, 60, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61,
	3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 5, 61, 2269,
	10, 61, 3, 62, 3, 62, 3, 62, 7, 62, 2274, 10, 62, 12, 62, 14, 62, 2277,
	11, 62, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 5, 63, 2284, 10, 63, 3, 63,
	3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 5, 63, 2296,
	10, 63, 3, 63, 3, 63, 3, 63, 3, 63, 5, 63, 2302, 10, 63, 3, 64, 3, 64,
	5, 64, 2306, 10, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3,
	64, 3, 64, 3, 65, 3, 65, 3, 65, 3, 65, 5, 65, 2321, 10, 65, 3, 65, 3, 65,
	3, 65, 5, 65, 2326, 10, 65, 3, 65, 3, 65, 3, 65, 5, 65, 2331, 10, 65, 3,
	65, 3, 65, 3, 65, 5, 65, 2336, 10, 65, 3, 65, 3, 65, 3, 65, 5, 65, 2341,
	10, 65, 3, 65, 3, 65, 3, 65, 5, 65, 2346, 10, 65, 3, 65, 3, 65, 3, 65,
	5, 65, 2351, 10, 65, 3, 65, 3, 65, 3, 65, 5, 65, 2356, 10, 65, 3, 65, 3,
	65, 3, 65, 3, 65, 5, 65, 2362, 10, 65, 3, 65, 3, 65, 3, 65, 5, 65, 2367,
	10, 65, 3, 66, 3, 66, 5, 66, 2371, 10, 66, 3, 66, 3, 66, 3, 66, 3, 66,
	3, 66, 3, 66, 3, 66, 3, 66, 5, 66, 2381, 10, 66, 3, 67, 3, 67, 3, 67, 3,
	67, 5, 67, 2387, 10, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 7, 67,
	2395, 10, 67, 12, 67, 14, 67, 2398, 11, 67, 3, 68, 3, 68, 3, 68, 3, 68,
	3, 68, 3, 68, 7, 68, 2406, 10, 68, 12, 68, 14, 68, 2409, 11, 68, 3, 68,
	3, 68, 3, 68, 7, 68, 2414, 10, 68, 12, 68, 14, 68, 2417, 11, 68, 3, 69,
	3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 5, 69, 2427, 10, 69, 3,
	69, 3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 3, 70, 3, 70, 3, 70, 3, 70, 7, 70,
	2439, 10, 70, 12, 70, 14, 70, 2442, 11, 70, 3, 71, 3, 71, 3, 71, 3, 71,
	3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 7, 71, 2453, 10, 71, 12, 71, 14, 71,
	2456, 11, 71, 3, 71, 3, 71, 3, 71, 3, 71, 5, 71, 2462, 10, 71, 3, 71, 3,
	71, 3, 71, 3, 71, 3, 71, 5, 71, 2469, 10, 71, 3, 72, 3, 72, 3, 72, 3, 72,
	3, 72, 3, 72, 5, 72, 2477, 10, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3,
	72, 3, 72, 3, 72, 3, 72, 5, 72, 2488, 10, 72, 3, 72, 3, 72, 5, 72, 2492,
	10, 72, 3, 72, 3, 72, 3, 72, 5, 72, 2497, 10, 72, 3, 72, 3, 72, 3, 72,
	3, 72, 3, 72, 3, 72, 3, 72, 5, 72, 2506, 10, 72, 3, 73, 3, 73, 3, 73, 5,
	73, 2511, 10, 73, 3, 73, 3, 73, 3, 73, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74,
	2520, 10, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3,
	74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2535, 10, 74, 3, 74, 3, 74, 3, 74,
	3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3,
	74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 6, 74, 2556, 10, 74, 13, 74, 14,
	74, 2557, 5, 74, 2560, 10, 74, 3, 75, 3, 75, 5, 75, 2564, 10, 75, 3, 75,
	3, 75, 5, 75, 2568, 10, 75, 3, 75, 3, 75, 3, 75, 5, 75, 2573, 10, 75, 3,
	75, 5, 75, 2576, 10, 75, 3, 75, 3, 75, 3, 75, 3, 75, 5, 75, 2582, 10, 75,
	3, 75, 3, 75, 5, 75, 2586, 10, 75, 3, 75, 3, 75, 5, 75, 2590, 10, 75, 3,
	76, 3, 76, 3, 76, 5, 76, 2595, 10, 76, 3, 76, 5, 76, 2598, 10, 76, 3, 76,
	3, 76, 3, 76, 3, 76, 3, 76, 5, 76, 2605, 10, 76, 3, 76, 5, 76, 2608, 10,
	76, 3, 76, 5, 76, 2611, 10, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76,
	5, 76, 2619, 10, 76, 3, 76, 3, 76, 5, 76, 2623, 10, 76, 5, 76, 2625, 10,
	76, 3, 77, 3, 77, 3, 77, 3, 77, 3, 77, 3, 77, 5, 77, 2633, 10, 77, 3, 77,
	3, 77, 3, 77, 3, 77, 3, 77, 5, 77, 2640, 10, 77, 3, 77, 5, 77, 2643, 10,
	77, 3, 77, 3, 77, 5, 77, 2647, 10, 77, 3, 77, 3, 77, 3, 77, 3, 77, 5, 77,
	2653, 10, 77, 3, 77, 5, 77, 2656, 10, 77, 3, 78, 3, 78, 3, 78, 3, 78, 3,
	78, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78, 5, 78, 2669, 10, 78, 3, 78,
	3, 78, 3, 78, 3, 78, 5, 78, 2675, 10, 78, 3, 78, 3, 78, 3, 78, 3, 78, 5,
	78, 2681, 10, 78, 3, 78, 3, 78, 3, 78, 3, 78, 5, 78, 2687, 10, 78, 3, 78,
	3, 78, 3, 78, 3, 78, 5, 78, 2693, 10, 78, 3, 78, 3, 78, 3, 78, 3, 78, 5,
	78, 2699, 10, 78, 3, 78, 3, 78, 5, 78, 2703, 10, 78, 3, 78, 3, 78, 5, 78,
	2707, 10, 78, 3, 78, 3, 78, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3,
	79, 3, 79, 3, 79, 5, 79, 2720, 10, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79,
	3, 79, 5, 79, 2728, 10, 79, 3, 79, 3, 79, 5, 79, 2732, 10, 79, 3, 79, 3,
	79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 5, 79, 2741, 10, 79, 3, 80, 3, 80,
	3, 80, 3, 80, 3, 80, 5, 80, 2748, 10, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3,
	80, 3, 80, 3, 80, 5, 80, 2757, 10, 80, 3, 80, 3, 80, 3, 80, 3, 80, 7, 80,
	2763, 10, 80, 12, 80, 14, 80, 2766, 11, 80, 3, 81, 3, 81, 3, 81, 3, 81,
	3, 81, 3, 81, 3, 81, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5,
	82, 2782, 10, 82, 3, 82, 3, 82, 5, 82, 2786, 10, 82, 3, 82, 3, 82, 3, 82,
	3, 82, 3, 82, 5, 82, 2793, 10, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3,
	82, 5, 82, 2801, 10, 82, 3, 83, 3, 83, 3, 83, 3, 83, 5, 83, 2807, 10, 83,
	3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3,
	83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 5, 83, 2827, 10, 83,
	3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3,
	83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 6, 83, 2848,
	10, 83, 13, 83, 14, 83, 2849, 5, 83, 2852, 10, 83, 3, 84, 3, 84, 3, 85,
	3, 85, 3, 85, 5, 85, 2859, 10, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3,
	85, 3, 85, 3, 85, 3, 85, 5, 85, 2870, 10, 85, 3, 85, 3, 85, 5, 85, 2874,
	10, 85, 3, 85, 3, 85, 5, 85, 2878, 10, 85, 3, 86, 3, 86, 3, 86, 3, 86,
	3, 86, 5, 86, 2885, 10, 86, 3, 86, 5, 86, 2888, 10, 86, 3, 86, 3, 86, 3,
	86, 3, 86, 3, 86, 5, 86, 2895, 10, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86,
	3, 86, 3, 86, 3, 86, 5, 86, 2905, 10, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3,
	86, 3, 86, 3, 86, 5, 86, 2914, 10, 86, 3, 87, 3, 87, 5, 87, 2918, 10, 87,
	3, 87, 3, 87, 3, 87, 3, 87, 5, 87, 2924, 10, 87, 3, 87, 3, 87, 3, 87, 5,
	87, 2929, 10, 87, 3, 87, 5, 87, 2932, 10, 87, 3, 87, 3, 87, 3, 87, 3, 87,
	5, 87, 2938, 10, 87, 3, 87, 3, 87, 3, 87, 3, 87, 5, 87, 2944, 10, 87, 3,
	87, 3, 87, 5, 87, 2948, 10, 87, 3, 87, 5, 87, 2951, 10, 87, 3, 87, 3, 87,
	5, 87, 2955, 10, 87, 3, 87, 5, 87, 2958, 10, 87, 3, 87, 5, 87, 2961, 10,
	87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 5, 87, 2970, 10, 87,
	5, 87, 2972, 10, 87, 3, 88, 3, 88, 3, 89, 3, 89, 3, 90, 3, 90, 3, 91, 3,
	91, 3, 91, 3, 91, 3, 91, 5, 91, 2985, 10, 91, 3, 91, 3, 91, 3, 91, 3, 92,
	3, 92, 3, 92, 3, 92, 7, 92, 2994, 10, 92, 12, 92, 14, 92, 2997, 11, 92,
	3, 92, 3, 92, 3, 93, 3, 93, 3, 93, 3, 93, 5, 93, 3005, 10, 93, 3, 94, 3,
	94, 3, 95, 3, 95, 3, 96, 3, 96, 3, 97, 3, 97, 3, 98, 3, 98, 3, 99, 3, 99,
	3, 100, 3, 100, 3, 101, 3, 101, 3, 102, 3, 102, 3, 103, 3, 103, 3, 104,
	3, 104, 3, 105, 3, 105, 3, 105, 5, 105, 3032, 10, 105, 3, 105, 5, 105,
	3035, 10, 105, 3, 105, 5, 105, 3038, 10, 105, 3, 105, 3, 105, 3, 105, 3,
	105, 3, 105, 3, 105, 5, 105, 3046, 10, 105, 3, 105, 3, 105, 3, 105, 3,
	105, 3, 105, 5, 105, 3053, 10, 105, 3, 105, 3, 105, 3, 105, 5, 105, 3058,
	10, 105, 3, 105, 3, 105, 5, 105, 3062, 10, 105, 3, 105, 3, 105, 5, 105,
	3066, 10, 105, 3, 106, 3, 106, 3, 107, 3, 107, 3, 108, 5, 108, 3073, 10,
	108, 3, 108, 3, 108, 3, 108, 5, 108, 3078, 10, 108, 3, 108, 3, 108, 5,
	108, 3082, 10, 108, 3, 108, 5, 108, 3085, 10, 108, 3, 108, 5, 108, 3088,
	10, 108, 3, 108, 3, 108, 5, 108, 3092, 10, 108, 3, 108, 3, 108, 3, 108,
	3, 108, 3, 108, 5, 108, 3099, 10, 108, 3, 108, 5, 108, 3102, 10, 108, 3,
	109, 3, 109, 3, 109, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3,
	110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3,
	110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3,
	110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3,
	110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 5, 110, 3148,
	10, 110, 3, 111, 3, 111, 3, 111, 3, 111, 3, 111, 5, 111, 3155, 10, 111,
	3, 111, 3, 111, 5, 111, 3159, 10, 111, 3, 112, 3, 112, 3, 112, 3, 112,
	5, 112, 3165, 10, 112, 3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 3, 113,
	3, 113, 3, 113, 3, 113, 5, 113, 3176, 10, 113, 3, 113, 3, 113, 3, 113,
	3, 113, 3, 113, 3, 113, 5, 113, 3184, 10, 113, 3, 114, 3, 114, 3, 114,
	3, 114, 5, 114, 3190, 10, 114, 3, 114, 3, 114, 5, 114, 3194, 10, 114, 3,
	115, 3, 115, 3, 115, 3, 115, 5, 115, 3200, 10, 115, 3, 115, 3, 115, 5,
	115, 3204, 10, 115, 3, 116, 3, 116, 3, 116, 3, 116, 5, 116, 3210, 10, 116,
	3, 116, 3, 116, 3, 117, 3, 117, 3, 117, 3, 117, 5, 117, 3218, 10, 117,
	3, 117, 3, 117, 5, 117, 3222, 10, 117, 3, 118, 3, 118, 3, 118, 3, 118,
	3, 118, 5, 118, 3229, 10, 118, 3, 118, 3, 118, 5, 118, 3233, 10, 118, 3,
	119, 3, 119, 3, 119, 3, 119, 5, 119, 3239, 10, 119, 3, 119, 3, 119, 5,
	119, 3243, 10, 119, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 5,
	120, 3251, 10, 120, 3, 120, 3, 120, 5, 120, 3255, 10, 120, 3, 121, 3, 121,
	3, 121, 3, 121, 3, 121, 5, 121, 3262, 10, 121, 3, 121, 3, 121, 5, 121,
	3266, 10, 121, 3, 122, 3, 122, 3, 122, 3, 122, 5, 122, 3272, 10, 122, 3,
	122, 3, 122, 5, 122, 3276, 10, 122, 3, 123, 3, 123, 3, 123, 3, 123, 5,
	123, 3282, 10, 123, 3, 123, 3, 123, 3, 124, 3, 124, 3, 124, 5, 124, 3289,
	10, 124, 3, 124, 3, 124, 5, 124, 3293, 10, 124, 3, 124, 3, 124, 5, 124,
	3297, 10, 124, 3, 125, 3, 125, 5, 125, 3301, 10, 125, 3, 125, 3, 125, 3,
	125, 5, 125, 3306, 10, 125, 3, 125, 3, 125, 5, 125, 3310, 10, 125, 3, 126,
	3, 126, 3, 126, 3, 126, 3, 126, 5, 126, 3317, 10, 126, 3, 126, 3, 126,
	5, 126, 3321, 10, 126, 3, 127, 3, 127, 3, 128, 3, 128, 3, 128, 3, 128,
	3, 128, 5, 128, 3330, 10, 128, 3, 128, 3, 128, 3, 128, 3, 128, 5, 128,
	3336, 10, 128, 3, 129, 3, 129, 3, 129, 3, 129, 3, 129, 5, 129, 3343, 10,
	129, 3, 129, 3, 129, 3, 129, 3, 129, 5, 129, 3349, 10, 129, 3, 130, 3,
	130, 3, 130, 3, 130, 3, 130, 5, 130, 3356, 10, 130, 3, 131, 3, 131, 3,
	131, 3, 131, 5, 131, 3362, 10, 131, 3, 131, 3, 131, 3, 131, 3, 131, 5,
	131, 3368, 10, 131, 3, 132, 3, 132, 3, 132, 3, 132, 5, 132, 3374, 10, 132,
	3, 132, 3, 132, 5, 132, 3378, 10, 132, 3, 133, 3, 133, 3, 133, 3, 133,
	5, 133, 3384, 10, 133, 3, 133, 3, 133, 3, 134, 3, 134, 3, 134, 3, 134,
	5, 134, 3392, 10, 134, 3, 134, 3, 134, 3, 134, 3, 134, 5, 134, 3398, 10,
	134, 3, 135, 3, 135, 3, 135, 3, 135, 5, 135, 3404, 10, 135, 3, 135, 3,
	135, 5, 135, 3408, 10, 135, 3, 136, 3, 136, 3, 136, 3, 136, 5, 136, 3414,
	10, 136, 3, 136, 3, 136, 5, 136, 3418, 10, 136, 3, 137, 3, 137, 3, 137,
	3, 137, 5, 137, 3424, 10, 137, 3, 137, 3, 137, 5, 137, 3428, 10, 137, 3,
	138, 3, 138, 3, 138, 3, 138, 5, 138, 3434, 10, 138, 3, 138, 3, 138, 3,
	139, 3, 139, 3, 139, 3, 139, 5, 139, 3442, 10, 139, 3, 139, 3, 139, 5,
	139, 3446, 10, 139, 3, 140, 3, 140, 3, 140, 3, 140, 5, 140, 3452, 10, 140,
	3, 140, 3, 140, 5, 140, 3456, 10, 140, 3, 141, 3, 141, 3, 141, 3, 141,
	5, 141, 3462, 10, 141, 3, 141, 3, 141, 3, 142, 3, 142, 3, 142, 3, 142,
	3, 142, 3, 142, 5, 142, 3472, 10, 142, 3, 142, 3, 142, 5, 142, 3476, 10,
	142, 3, 143, 3, 143, 3, 143, 3, 143, 3, 143, 3, 143, 5, 143, 3484, 10,
	143, 3, 143, 3, 143, 5, 143, 3488, 10, 143, 3, 144, 3, 144, 3, 144, 3,
	144, 3, 144, 3, 144, 5, 144, 3496, 10, 144, 3, 144, 3, 144, 5, 144, 3500,
	10, 144, 3, 145, 3, 145, 3, 145, 3, 145, 3, 145, 3, 145, 5, 145, 3508,
	10, 145, 3, 145, 3, 145, 5, 145, 3512, 10, 145, 3, 146, 3, 146, 3, 146,
	3, 146, 5, 146, 3518, 10, 146, 3, 146, 3, 146, 3, 146, 3, 146, 3, 146,
	3, 146, 3, 147, 3, 147, 3, 147, 3, 147, 5, 147, 3530, 10, 147, 3, 147,
	3, 147, 3, 147, 3, 147, 5, 147, 3536, 10, 147, 3, 148, 3, 148, 3, 148,
	3, 148, 5, 148, 3542, 10, 148, 3, 148, 3, 148, 5, 148, 3546, 10, 148, 3,
	149, 3, 149, 3, 149, 3, 149, 5, 149, 3552, 10, 149, 3, 149, 3, 149, 3,
	150, 3, 150, 3, 150, 3, 150, 3, 150, 5, 150, 3561, 10, 150, 3, 150, 3,
	150, 3, 150, 3, 150, 3, 150, 3, 150, 5, 150, 3569, 10, 150, 3, 150, 3,
	150, 3, 150, 3, 151, 3, 151, 3, 151, 3, 151, 5, 151, 3578, 10, 151, 3,
	151, 3, 151, 5, 151, 3582, 10, 151, 3, 152, 3, 152, 3, 152, 5, 152, 3587,
	10, 152, 3, 153, 3, 153, 5, 153, 3591, 10, 153, 3, 153, 5, 153, 3594, 10,
	153, 3, 153, 3, 153, 3, 153, 3, 153, 3, 153, 7, 153, 3601, 10, 153, 12,
	153, 14, 153, 3604, 11, 153, 3, 153, 3, 153, 5, 153, 3608, 10, 153, 3,
	153, 3, 153, 3, 153, 3, 153, 3, 153, 3, 153, 3, 153, 3, 153, 3, 153, 5,
	153, 3619, 10, 153, 3, 154, 3, 154, 3, 155, 3, 155, 3, 156, 3, 156, 3,
	157, 5, 157, 3628, 10, 157, 3, 157, 3, 157, 3, 157, 3, 157, 3, 157, 5,
	157, 3635, 10, 157, 3, 157, 3, 157, 3, 157, 3, 157, 5, 157, 3641, 10, 157,
	3, 157, 3, 157, 5, 157, 3645, 10, 157, 3, 157, 5, 157, 3648, 10, 157, 3,
	157, 3, 157, 3, 157, 3, 157, 5, 157, 3654, 10, 157, 3, 157, 3, 157, 3,
	157, 3, 157, 3, 157, 3, 157, 5, 157, 3662, 10, 157, 3, 157, 3, 157, 3,
	157, 5, 157, 3667, 10, 157, 3, 157, 5, 157, 3670, 10, 157, 3, 157, 3, 157,
	3, 157, 3, 157, 3, 157, 3, 157, 3, 157, 5, 157, 3679, 10, 157, 5, 157,
	3681, 10, 157, 5, 157, 3683, 10, 157, 3, 157, 5, 157, 3686, 10, 157, 3,
	158, 3, 158, 3, 158, 3, 159, 3, 159, 3, 160, 3, 160, 5, 160, 3695, 10,
	160, 3, 160, 5, 160, 3698, 10, 160, 3, 160, 3, 160, 5, 160, 3702, 10, 160,
	3, 160, 3, 160, 3, 160, 3, 160, 3, 160, 3, 160, 3, 160, 3, 160, 3, 160,
	3, 160, 3, 160, 3, 160, 3, 160, 3, 160, 3, 160, 3, 160, 3, 160, 5, 160,
	3721, 10, 160, 3, 160, 5, 160, 3724, 10, 160, 3, 160, 5, 160, 3727, 10,
	160, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3,
	161, 3, 161, 3, 161, 3, 161, 3, 161, 5, 161, 3742, 10, 161, 3, 161, 3,
	161, 5, 161, 3746, 10, 161, 5, 161, 3748, 10, 161, 3, 161, 5, 161, 3751,
	10, 161, 5, 161, 3753, 10, 161, 3, 161, 3, 161, 3, 162, 3, 162, 3, 162,
	3, 162, 5, 162, 3761, 10, 162, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163,
	3, 163, 5, 163, 3769, 10, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163,
	3, 163, 5, 163, 3777, 10, 163, 3, 164, 3, 164, 3, 164, 3, 164, 3, 165,
	3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 5, 165, 3789, 10, 165, 3, 165,
	3, 165, 3, 165, 3, 165, 5, 165, 3795, 10, 165, 7, 165, 3797, 10, 165, 12,
	165, 14, 165, 3800, 11, 165, 3, 165, 3, 165, 3, 165, 3, 165, 5, 165, 3806,
	10, 165, 3, 166, 3, 166, 3, 167, 3, 167, 3, 167, 3, 167, 5, 167, 3814,
	10, 167, 3, 167, 3, 167, 3, 167, 3, 168, 3, 168, 5, 168, 3821, 10, 168,
	3, 168, 3, 168, 3, 169, 3, 169, 3, 169, 5, 169, 3828, 10, 169, 3, 170,
	3, 170, 3, 171, 3, 171, 5, 171, 3834, 10, 171, 3, 172, 3, 172, 3, 172,
	3, 172, 3, 173, 3, 173, 5, 173, 3842, 10, 173, 3, 173, 3, 173, 5, 173,
	3846, 10, 173, 3, 173, 3, 173, 3, 174, 3, 174, 3, 174, 3, 175, 3, 175,
	3, 175, 3, 175, 5, 175, 3857, 10, 175, 3, 175, 3, 175, 3, 175, 3, 175,
	3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175,
	3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175,
	3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175,
	3, 175, 3, 175, 3, 175, 3, 175, 5, 175, 3894, 10, 175, 3, 175, 3, 175,
	3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175,
	3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 5, 175, 3914, 10,
	175, 3, 175, 3, 175, 3, 175, 3, 176, 5, 176, 3920, 10, 176, 3, 176, 3,
	176, 3, 176, 5, 176, 3925, 10, 176, 3, 176, 3, 176, 5, 176, 3929, 10, 176,
	3, 176, 3, 176, 5, 176, 3933, 10, 176, 3, 176, 6, 176, 3936, 10, 176, 13,
	176, 14, 176, 3937, 3, 176, 3, 176, 6, 176, 3942, 10, 176, 13, 176, 14,
	176, 3943, 3, 176, 3, 176, 5, 176, 3948, 10, 176, 3, 176, 5, 176, 3951,
	10, 176, 3, 176, 5, 176, 3954, 10, 176, 3, 176, 5, 176, 3957, 10, 176,
	3, 176, 5, 176, 3960, 10, 176, 3, 176, 5, 176, 3963, 10, 176, 3, 176, 5,
	176, 3966, 10, 176, 3, 176, 5, 176, 3969, 10, 176, 3, 176, 5, 176, 3972,
	10, 176, 3, 176, 5, 176, 3975, 10, 176, 3, 176, 5, 176, 3978, 10, 176,
	3, 177, 5, 177, 3981, 10, 177, 3, 177, 3, 177, 3, 177, 3, 177, 5, 177,
	3987, 10, 177, 3, 177, 5, 177, 3990, 10, 177, 3, 177, 3, 177, 5, 177, 3994,
	10, 177, 3, 177, 3, 177, 5, 177, 3998, 10, 177, 3, 177, 3, 177, 5, 177,
	4002, 10, 177, 3, 177, 6, 177, 4005, 10, 177, 13, 177, 14, 177, 4006, 3,
	177, 3, 177, 6, 177, 4011, 10, 177, 13, 177, 14, 177, 4012, 3, 177, 3,
	177, 5, 177, 4017, 10, 177, 3, 177, 5, 177, 4020, 10, 177, 3, 177, 5, 177,
	4023, 10, 177, 3, 177, 5, 177, 4026, 10, 177, 3, 177, 5, 177, 4029, 10,
	177, 3, 177, 5, 177, 4032, 10, 177, 3, 177, 5, 177, 4035, 10, 177, 3, 177,
	5, 177, 4038, 10, 177, 3, 177, 5, 177, 4041, 10, 177, 3, 177, 5, 177, 4044,
	10, 177, 3, 177, 5, 177, 4047, 10, 177, 3, 178, 3, 178, 5, 178, 4051, 10,
	178, 3, 178, 3, 178, 3, 178, 7, 178, 4056, 10, 178, 12, 178, 14, 178, 4059,
	11, 178, 3, 179, 3, 179, 3, 179, 3, 179, 3, 179, 5, 179, 4066, 10, 179,
	3, 179, 3, 179, 3, 179, 3, 179, 3, 179, 3, 179, 3, 179, 5, 179, 4075, 10,
	179, 3, 179, 3, 179, 3, 180, 3, 180, 5, 180, 4081, 10, 180, 3, 180, 3,
	180, 3, 180, 3, 180, 5, 180, 4087, 10, 180, 3, 180, 3, 180, 5, 180, 4091,
	10, 180, 3, 180, 3, 180, 3, 180, 3, 180, 3, 180, 5, 180, 4098, 10, 180,
	5, 180, 4100, 10, 180, 3, 181, 3, 181, 3, 181, 3, 181, 5, 181, 4106, 10,
	181, 3, 181, 3, 181, 3, 182, 3, 182, 5, 182, 4112, 10, 182, 3, 182, 3,
	182, 3, 182, 5, 182, 4117, 10, 182, 3, 182, 3, 182, 5, 182, 4121, 10, 182,
	3, 183, 3, 183, 3, 184, 3, 184, 3, 184, 3, 184, 3, 184, 3, 184, 3, 184,
	3, 184, 3, 184, 5, 184, 4134, 10, 184, 3, 184, 3, 184, 3, 184, 3, 184,
	3, 184, 5, 184, 4141, 10, 184, 3, 184, 5, 184, 4144, 10, 184, 3, 185, 3,
	185, 3, 185, 7, 185, 4149, 10, 185, 12, 185, 14, 185, 4152, 11, 185, 3,
	186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3,
	186, 3, 186, 3, 186, 3, 186, 5, 186, 4167, 10, 186, 3, 187, 3, 187, 3,
	187, 3, 187, 3, 187, 5, 187, 4174, 10, 187, 3, 188, 3, 188, 5, 188, 4178,
	10, 188, 3, 188, 5, 188, 4181, 10, 188, 3, 188, 3, 188, 5, 188, 4185, 10,
	188, 3, 188, 3, 188, 5, 188, 4189, 10, 188, 3, 188, 5, 188, 4192, 10, 188,
	3, 188, 3, 188, 5, 188, 4196, 10, 188, 3, 188, 5, 188, 4199, 10, 188, 3,
	189, 3, 189, 3, 189, 5, 189, 4204, 10, 189, 3, 190, 5, 190, 4207, 10, 190,
	3, 190, 3, 190, 5, 190, 4211, 10, 190, 3, 190, 3, 190, 5, 190, 4215, 10,
	190, 3, 190, 5, 190, 4218, 10, 190, 3, 190, 5, 190, 4221, 10, 190, 3, 190,
	3, 190, 3, 190, 5, 190, 4226, 10, 190, 3, 190, 3, 190, 3, 190, 3, 190,
	3, 190, 5, 190, 4233, 10, 190, 3, 190, 5, 190, 4236, 10, 190, 3, 191, 3,
	191, 3, 192, 3, 192, 3, 192, 7, 192, 4243, 10, 192, 12, 192, 14, 192, 4246,
	11, 192, 3, 193, 3, 193, 3, 193, 3, 193, 3, 193, 5, 193, 4253, 10, 193,
	3, 193, 3, 193, 3, 193, 3, 193, 3, 193, 5, 193, 4260, 10, 193, 3, 193,
	3, 193, 5, 193, 4264, 10, 193, 3, 193, 5, 193, 4267, 10, 193, 3, 193, 5,
	193, 4270, 10, 193, 3, 193, 5, 193, 4273, 10, 193, 3, 193, 3, 193, 5, 193,
	4277, 10, 193, 3, 193, 5, 193, 4280, 10, 193, 3, 193, 5, 193, 4283, 10,
	193, 3, 193, 3, 193, 3, 193, 3, 193, 3, 193, 3, 193, 5, 193, 4291, 10,
	193, 5, 193, 4293, 10, 193, 5, 193, 4295, 10, 193, 3, 194, 5, 194, 4298,
	10, 194, 3, 194, 3, 194, 3, 194, 6, 194, 4303, 10, 194, 13, 194, 14, 194,
	4304, 3, 194, 3, 194, 6, 194, 4309, 10, 194, 13, 194, 14, 194, 4310, 3,
	194, 3, 194, 5, 194, 4315, 10, 194, 3, 194, 5, 194, 4318, 10, 194, 3, 194,
	5, 194, 4321, 10, 194, 3, 194, 5, 194, 4324, 10, 194, 3, 194, 5, 194, 4327,
	10, 194, 3, 194, 5, 194, 4330, 10, 194, 3, 195, 3, 195, 3, 195, 3, 195,
	5, 195, 4336, 10, 195, 5, 195, 4338, 10, 195, 3, 195, 3, 195, 3, 196, 3,
	196, 3, 196, 3, 196, 7, 196, 4346, 10, 196, 12, 196, 14, 196, 4349, 11,
	196, 3, 197, 3, 197, 3, 197, 3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 7,
	198, 4359, 10, 198, 12, 198, 14, 198, 4362, 11, 198, 3, 199, 3, 199, 3,
	199, 3, 199, 3, 199, 3, 199, 3, 199, 3, 199, 5, 199, 4372, 10, 199, 3,
	199, 3, 199, 3, 199, 5, 199, 4377, 10, 199, 7, 199, 4379, 10, 199, 12,
	199, 14, 199, 4382, 11, 199, 3, 199, 3, 199, 3, 199, 3, 199, 3, 199, 5,
	199, 4389, 10, 199, 3, 200, 3, 200, 3, 200, 3, 200, 7, 200, 4395, 10, 200,
	12, 200, 14, 200, 4398, 11, 200, 3, 200, 3, 200, 3, 201, 3, 201, 3, 201,
	3, 201, 7, 201, 4406, 10, 201, 12, 201, 14, 201, 4409, 11, 201, 3, 202,
	3, 202, 5, 202, 4413, 10, 202, 3, 202, 5, 202, 4416, 10, 202, 3, 202, 5,
	202, 4419, 10, 202, 3, 202, 3, 202, 3, 202, 5, 202, 4424, 10, 202, 3, 202,
	5, 202, 4427, 10, 202, 3, 202, 5, 202, 4430, 10, 202, 7, 202, 4432, 10,
	202, 12, 202, 14, 202, 4435, 11, 202, 3, 203, 3, 203, 5, 203, 4439, 10,
	203, 3, 203, 3, 203, 5, 203, 4443, 10, 203, 3, 204, 3, 204, 3, 204, 3,
	204, 3, 204, 3, 204, 3, 204, 3, 204, 3, 204, 3, 204, 5, 204, 4455, 10,
	204, 3, 205, 3, 205, 3, 206, 3, 206, 3, 207, 3, 207, 3, 207, 3, 207, 3,
	207, 3, 207, 3, 207, 3, 207, 5, 207, 4469, 10, 207, 3, 208, 3, 208, 3,
	208, 3, 208, 3, 208, 3, 208, 7, 208, 4477, 10, 208, 12, 208, 14, 208, 4480,
	11, 208, 3, 208, 5, 208, 4483, 10, 208, 3, 209, 3, 209, 3, 209, 3, 209,
	3, 209, 3, 209, 3, 209, 3, 210, 3, 210, 5, 210, 4494, 10, 210, 3, 210,
	7, 210, 4497, 10, 210, 12, 210, 14, 210, 4500, 11, 210, 3, 210, 3, 210,
	5, 210, 4504, 10, 210, 3, 210, 7, 210, 4507, 10, 210, 12, 210, 14, 210,
	4510, 11, 210, 3, 210, 5, 210, 4513, 10, 210, 3, 211, 3, 211, 3, 211, 3,
	211, 3, 211, 7, 211, 4520, 10, 211, 12, 211, 14, 211, 4523, 11, 211, 3,
	212, 3, 212, 5, 212, 4527, 10, 212, 3, 212, 3, 212, 3, 212, 3, 212, 5,
	212, 4533, 10, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 7,
	212, 4541, 10, 212, 12, 212, 14, 212, 4544, 11, 212, 5, 212, 4546, 10,
	212, 3, 213, 3, 213, 3, 213, 3, 213, 5, 213, 4552, 10, 213, 3, 214, 3,
	214, 3, 214, 5, 214, 4557, 10, 214, 3, 215, 3, 215, 3, 215, 5, 215, 4562,
	10, 215, 3, 215, 3, 215, 3, 215, 3, 216, 3, 216, 3, 216, 3, 216, 3, 216,
	3, 216, 3, 216, 3, 216, 5, 216, 4575, 10, 216, 3, 216, 3, 216, 3, 216,
	3, 216, 7, 216, 4581, 10, 216, 12, 216, 14, 216, 4584, 11, 216, 5, 216,
	4586, 10, 216, 3, 216, 3, 216, 3, 216, 7, 216, 4591, 10, 216, 12, 216,
	14, 216, 4594, 11, 216, 3, 217, 3, 217, 3, 217, 7, 217, 4599, 10, 217,
	12, 217, 14, 217, 4602, 11, 217, 3, 218, 3, 218, 3, 218, 3, 218, 3, 218,
	3, 218, 3, 218, 5, 218, 4611, 10, 218, 5, 218, 4613, 10, 218, 3, 219, 3,
	219, 3, 219, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3,
	220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 6,
	220, 4634, 10, 220, 13, 220, 14, 220, 4635, 3, 220, 3, 220, 3, 220, 3,
	220, 6, 220, 4642, 10, 220, 13, 220, 14, 220, 4643, 3, 220, 3, 220, 3,
	220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3,
	220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3,
	220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3,
	220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3,
	220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 5, 220, 4692,
	10, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220,
	3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 5, 220,
	4710, 10, 220, 3, 220, 3, 220, 3, 220, 5, 220, 4715, 10, 220, 3, 220, 3,
	220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3,
	220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 5, 220, 4735,
	10, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220,
	3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 5, 220,
	4753, 10, 220, 3, 220, 3, 220, 3, 220, 5, 220, 4758, 10, 220, 3, 220, 3,
	220, 5, 220, 4762, 10, 220, 3, 220, 6, 220, 4765, 10, 220, 13, 220, 14,
	220, 4766, 3, 220, 3, 220, 3, 220, 6, 220, 4772, 10, 220, 13, 220, 14,
	220, 4773, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220,
	3, 220, 3, 220, 3, 220, 5, 220, 4787, 10, 220, 3, 220, 3, 220, 3, 220,
	3, 220, 3, 220, 3, 220, 7, 220, 4795, 10, 220, 12, 220, 14, 220, 4798,
	11, 220, 3, 221, 3, 221, 3, 221, 3, 221, 3, 221, 5, 221, 4805, 10, 221,
	3, 221, 3, 221, 3, 221, 3, 221, 3, 221, 3, 221, 7, 221, 4813, 10, 221,
	12, 221, 14, 221, 4816, 11, 221, 3, 222, 3, 222, 3, 222, 3, 222, 3, 222,
	3, 222, 3, 222, 6, 222, 4825, 10, 222, 13, 222, 14, 222, 4826, 3, 222,
	3, 222, 5, 222, 4831, 10, 222, 3, 222, 3, 222, 3, 222, 3, 222, 3, 222,
	3, 222, 3, 222, 3, 222, 6, 222, 4841, 10, 222, 13, 222, 14, 222, 4842,
	3, 222, 3, 222, 5, 222, 4847, 10, 222, 3, 222, 3, 222, 5, 222, 4851, 10,
	222, 3, 223, 3, 223, 3, 223, 3, 223, 7, 223, 4857, 10, 223, 12, 223, 14,
	223, 4860, 11, 223, 3, 223, 3, 223, 3, 224, 5, 224, 4865, 10, 224, 3, 224,
	3, 224, 3, 224, 7, 224, 4870, 10, 224, 12, 224, 14, 224, 4873, 11, 224,
	3, 224, 5, 224, 4876, 10, 224, 3, 225, 5, 225, 4879, 10, 225, 3, 225, 5,
	225, 4882, 10, 225, 3, 225, 5, 225, 4885, 10, 225, 3, 226, 3, 226, 3, 226,
	7, 226, 4890, 10, 226, 12, 226, 14, 226, 4893, 11, 226, 3, 227, 3, 227,
	3, 227, 3, 227, 3, 227, 5, 227, 4900, 10, 227, 3, 228, 3, 228, 3, 228,
	7, 228, 4905, 10, 228, 12, 228, 14, 228, 4908, 11, 228, 3, 229, 3, 229,
	3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 5, 229, 4918, 10, 229,
	3, 229, 3, 229, 3, 229, 3, 229, 5, 229, 4924, 10, 229, 3, 229, 3, 229,
	3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 5, 229, 4934, 10, 229,
	3, 229, 3, 229, 3, 229, 3, 229, 5, 229, 4940, 10, 229, 3, 229, 3, 229,
	3, 229, 3, 229, 5, 229, 4946, 10, 229, 3, 229, 3, 229, 3, 229, 3, 229,
	3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 5, 229, 4957, 10, 229, 3, 229,
	3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 3, 229,
	3, 229, 3, 229, 5, 229, 4971, 10, 229, 3, 229, 5, 229, 4974, 10, 229, 3,
	229, 3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 3,
	229, 3, 229, 3, 229, 3, 229, 5, 229, 4989, 10, 229, 3, 229, 3, 229, 3,
	229, 3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 3, 229, 3,
	229, 3, 229, 3, 229, 3, 229, 3, 229, 5, 229, 5007, 10, 229, 3, 229, 3,
	229, 3, 229, 5, 229, 5012, 10, 229, 3, 229, 3, 229, 3, 229, 3, 229, 5,
	229, 5018, 10, 229, 3, 229, 3, 229, 3, 229, 5, 229, 5023, 10, 229, 3, 229,
	3, 229, 3, 229, 3, 229, 5, 229, 5029, 10, 229, 3, 229, 3, 229, 3, 229,
	3, 229, 5, 229, 5035, 10, 229, 3, 229, 3, 229, 3, 229, 3, 229, 3, 229,
	3, 229, 3, 229, 3, 229, 5, 229, 5045, 10, 229, 3, 229, 3, 229, 3, 229,
	3, 229, 5, 229, 5051, 10, 229, 3, 229, 5, 229, 5054, 10, 229, 3, 230, 3,
	230, 3, 231, 3, 231, 3, 231, 3, 231, 5, 231, 5062, 10, 231, 3, 232, 3,
	232, 3, 232, 5, 232, 5067, 10, 232, 3, 232, 3, 232, 3, 232, 7, 232, 5072,
	10, 232, 12, 232, 14, 232, 5075, 11, 232, 3, 232, 5, 232, 5078, 10, 232,
	3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 5, 232, 5087, 10,
	232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3,
	232, 3, 232, 5, 232, 5099, 10, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3,
	232, 7, 232, 5106, 10, 232, 12, 232, 14, 232, 5109, 11, 232, 5, 232, 5111,
	10, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232,
	3, 232, 3, 232, 3, 232, 3, 232, 5, 232, 5125, 10, 232, 5, 232, 5127, 10,
	232, 3, 233, 3, 233, 5, 233, 5131, 10, 233, 3, 234, 3, 234, 3, 234, 7,
	234, 5136, 10, 234, 12, 234, 14, 234, 5139, 11, 234, 3, 235, 3, 235, 3,
	235, 7, 235, 5144, 10, 235, 12, 235, 14, 235, 5147, 11, 235, 3, 236, 3,
	236, 3, 236, 5, 236, 5152, 10, 236, 3, 237, 3, 237, 3, 237, 7, 237, 5157,
	10, 237, 12, 237, 14, 237, 5160, 11, 237, 3, 238, 3, 238, 3, 239, 3, 239,
	5, 239, 5166, 10, 239, 3, 239, 3, 239, 5, 239, 5170, 10, 239, 3, 239, 7,
	239, 5173, 10, 239, 12, 239, 14, 239, 5176, 11, 239, 3, 240, 3, 240, 3,
	240, 7, 240, 5181, 10, 240, 12, 240, 14, 240, 5184, 11, 240, 3, 241, 3,
	241, 5, 241, 5188, 10, 241, 3, 242, 3, 242, 3, 243, 3, 243, 3, 243, 3,
	243, 3, 243, 3, 243, 3, 243, 3, 243, 3, 243, 3, 243, 3, 243, 7, 243, 5203,
	10, 243, 12, 243, 14, 243, 5206, 11, 243, 3, 243, 3, 243, 3, 243, 5, 243,
	5211, 10, 243, 5, 243, 5213, 10, 243, 3, 243, 3, 243, 3, 243, 3, 243, 3,
	243, 3, 243, 3, 243, 3, 243, 3, 243, 5, 243, 5224, 10, 243, 3, 243, 3,
	243, 5, 243, 5228, 10, 243, 3, 244, 3, 244, 3, 244, 3, 244, 3, 244, 7,
	244, 5235, 10, 244, 12, 244, 14, 244, 5238, 11, 244, 5, 244, 5240, 10,
	244, 3, 244, 3, 244, 3, 245, 3, 245, 5, 245, 5246, 10, 245, 3, 245, 3,
	245, 5, 245, 5250, 10, 245, 3, 245, 5, 245, 5253, 10, 245, 3, 245, 3, 245,
	3, 245, 3, 245, 3, 245, 3, 245, 7, 245, 5261, 10, 245, 12, 245, 14, 245,
	5264, 11, 245, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 5, 245,
	5272, 10, 245, 5, 245, 5274, 10, 245, 3, 245, 5, 245, 5277, 10, 245, 3,
	245, 3, 245, 3, 245, 3, 245, 5, 245, 5283, 10, 245, 3, 245, 3, 245, 3,
	245, 3, 245, 3, 245, 7, 245, 5290, 10, 245, 12, 245, 14, 245, 5293, 11,
	245, 3, 245, 3, 245, 5, 245, 5297, 10, 245, 3, 245, 5, 245, 5300, 10, 245,
	3, 245, 3, 245, 3, 245, 5, 245, 5305, 10, 245, 3, 245, 5, 245, 5308, 10,
	245, 3, 245, 5, 245, 5311, 10, 245, 3, 245, 3, 245, 3, 245, 3, 245, 3,
	245, 3, 245, 7, 245, 5319, 10, 245, 12, 245, 14, 245, 5322, 11, 245, 3,
	245, 3, 245, 3, 245, 5, 245, 5327, 10, 245, 3, 245, 3, 245, 3, 245, 3,
	245, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 7, 245, 5339, 10,
	245, 12, 245, 14, 245, 5342, 11, 245, 3, 245, 3, 245, 5, 245, 5346, 10,
	245, 3, 245, 3, 245, 5, 245, 5350, 10, 245, 3, 245, 3, 245, 5, 245, 5354,
	10, 245, 3, 245, 3, 245, 5, 245, 5358, 10, 245, 3, 245, 3, 245, 5, 245,
	5362, 10, 245, 3, 245, 5, 245, 5365, 10, 245, 7, 245, 5367, 10, 245, 12,
	245, 14, 245, 5370, 11, 245, 3, 246, 5, 246, 5373, 10, 246, 3, 246, 3,
	246, 3, 246, 3, 246, 7, 246, 5379, 10, 246, 12, 246, 14, 246, 5382, 11,
	246, 5, 246, 5384, 10, 246, 3, 246, 5, 246, 5387, 10, 246, 3, 246, 3, 246,
	3, 246, 3, 246, 3, 246, 5, 246, 5394, 10, 246, 3, 247, 5, 247, 5397, 10,
	247, 3, 247, 3, 247, 3, 247, 5, 247, 5402, 10, 247, 3, 247, 3, 247, 3,
	247, 5, 247, 5407, 10, 247, 3, 247, 3, 247, 3, 247, 5, 247, 5412, 10, 247,
	3, 247, 3, 247, 3, 247, 5, 247, 5417, 10, 247, 3, 248, 3, 248, 3, 248,
	3, 248, 3, 248, 3, 248, 3, 248, 7, 248, 5426, 10, 248, 12, 248, 14, 248,
	5429, 11, 248, 3, 248, 3, 248, 5, 248, 5433, 10, 248, 3, 249, 3, 249, 3,
	249, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 3,
	249, 5, 249, 5447, 10, 249, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 3,
	249, 3, 249, 3, 249, 5, 249, 5457, 10, 249, 3, 249, 3, 249, 3, 249, 3,
	249, 5, 249, 5463, 10, 249, 3, 249, 3, 249, 7, 249, 5467, 10, 249, 12,
	249, 14, 249, 5470, 11, 249, 3, 250, 3, 250, 5, 250, 5474, 10, 250, 3,
	250, 5, 250, 5477, 10, 250, 3, 250, 3, 250, 5, 250, 5481, 10, 250, 3, 250,
	5, 250, 5484, 10, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 5, 250,
	5491, 10, 250, 3, 250, 5, 250, 5494, 10, 250, 3, 250, 3, 250, 5, 250, 5498,
	10, 250, 3, 251, 3, 251, 3, 251, 3, 252, 6, 252, 5504, 10, 252, 13, 252,
	14, 252, 5505, 3, 253, 3, 253, 3, 253, 3, 253, 3, 253, 5, 253, 5513, 10,
	253, 3, 253, 3, 253, 3, 253, 3, 253, 5, 253, 5519, 10, 253, 3, 254, 3,
	254, 3, 254, 3, 254, 3, 254, 5, 254, 5526, 10, 254, 3, 254, 5, 254, 5529,
	10, 254, 3, 254, 5, 254, 5532, 10, 254, 3, 254, 3, 254, 5, 254, 5536, 10,
	254, 3, 255, 3, 255, 5, 255, 5540, 10, 255, 3, 255, 3, 255, 3, 255, 3,
	255, 3, 255, 3, 255, 5, 255, 5548, 10, 255, 3, 255, 3, 255, 3, 255, 3,
	255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3,
	255, 3, 255, 3, 255, 5, 255, 5565, 10, 255, 3, 255, 3, 255, 3, 255, 3,
	255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 5, 255, 5578,
	10, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255,
	3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 5, 255, 5595, 10,
	255, 3, 255, 3, 255, 3, 255, 5, 255, 5600, 10, 255, 3, 255, 3, 255, 3,
	255, 5, 255, 5605, 10, 255, 5, 255, 5607, 10, 255, 3, 255, 5, 255, 5610,
	10, 255, 3, 255, 5, 255, 5613, 10, 255, 3, 255, 3, 255, 5, 255, 5617, 10,
	255, 3, 256, 3, 256, 3, 256, 3, 256, 5, 256, 5623, 10, 256, 3, 257, 3,
	257, 3, 257, 7, 257, 5628, 10, 257, 12, 257, 14, 257, 5631, 11, 257, 3,
	258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3,
	258, 3, 258, 5, 258, 5644, 10, 258, 3, 259, 3, 259, 3, 260, 3, 260, 3,
	260, 3, 260, 3, 260, 3, 260, 5, 260, 5654, 10, 260, 3, 260, 3, 260, 3,
	260, 7, 260, 5659, 10, 260, 12, 260, 14, 260, 5662, 11, 260, 3, 261, 3,
	261, 3, 262, 3, 262, 3, 263, 3, 263, 3, 264, 3, 264, 3, 265, 3, 265, 3,
	266, 3, 266, 3, 267, 3, 267, 3, 268, 3, 268, 3, 268, 2, 7, 438, 440, 488,
	496, 518, 269, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,
	32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66,
	68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102,
	104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132,
	134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162,
	164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192,
	194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222,
	224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252,
	254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282,
	284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312,
	314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342,
	344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372,
	374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402,
	404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432,
	434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462,
	464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492,
	494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522,
	524, 526, 528, 530, 532, 534, 2, 52, 4, 2, 191, 191, 522, 522, 4, 2, 62,
	62, 477, 477, 4, 2, 22, 22, 474, 474, 6, 2, 217, 217, 219, 219, 326, 326,
	426, 426, 5, 2, 13, 13, 191, 191, 522, 522, 4, 2, 586, 586, 794, 794, 4,
	2, 268, 268, 639, 639, 3, 2, 689, 691, 4, 2, 200, 200, 612, 612, 4, 2,
	373, 373, 779, 779, 7, 2, 18, 18, 166, 166, 281, 281, 513, 513, 620, 620,
	6, 2, 166, 166, 281, 281, 513, 513, 620, 620, 4, 2, 20, 20, 284, 284, 4,
	2, 574, 574, 576, 576, 4, 2, 63, 63, 317, 317, 7, 2, 18, 18, 427, 427,
	517, 517, 574, 574, 576, 576, 4, 2, 568, 568, 623, 623, 4, 2, 18, 18, 776,
	776, 4, 2, 239, 239, 268, 268, 7, 2, 149, 149, 271, 271, 502, 502, 568,
	568, 570, 570, 4, 2, 590, 590, 652, 652, 5, 2, 574, 574, 576, 576, 838,
	838, 4, 2, 317, 317, 520, 520, 4, 2, 162, 162, 264, 264, 4, 2, 118, 118,
	476, 476, 7, 2, 24, 24, 183, 183, 238, 238, 240, 240, 641, 641, 4, 2, 134,
	134, 490, 490, 7, 2, 24, 24, 55, 55, 124, 124, 585, 585, 641, 641, 6, 2,
	654, 654, 737, 737, 754, 754, 762, 762, 4, 2, 447, 447, 498, 498, 5, 2,
	206, 206, 287, 287, 613, 613, 4, 2, 18, 18, 187, 187, 4, 2, 226, 226, 304,
	304, 4, 2, 495, 495, 498, 498, 4, 2, 226, 226, 361, 361, 3, 2, 766, 766,
	6, 2, 789, 789, 791, 791, 816, 816, 822, 822, 4, 2, 826, 826, 829, 829,
	4, 2, 18, 18, 368, 368, 4, 2, 793, 793, 820, 821, 5, 2, 768, 768, 817,
	817, 828, 828, 4, 2, 816, 816, 822, 822, 14, 2, 25, 25, 368, 368, 394,
	394, 784, 788, 795, 795, 798, 806, 809, 810, 812, 815, 818, 819, 823, 825,
	827, 827, 829, 836, 7, 2, 792, 792, 794, 794, 796, 797, 807, 808, 811,
	811, 6, 2, 268, 268, 278, 278, 399, 399, 639, 639, 4, 2, 649, 649, 651,
	651, 4, 2, 775, 776, 779, 780, 3, 2, 704, 709, 4, 2, 30, 30, 174, 174,
	111, 2, 3, 3, 6, 16, 19, 22, 26, 27, 31, 33, 35, 38, 40, 46, 48, 49, 51,
	52, 54, 54, 56, 63, 66, 79, 82, 89, 92, 95, 97, 102, 104, 105, 108, 110,
	112, 123, 125, 127, 133, 136, 138, 139, 143, 143, 145, 157, 159, 159, 162,
	169, 171, 173, 175, 176, 179, 181, 185, 186, 189, 190, 192, 196, 199, 201,
	203, 205, 207, 212, 214, 216, 218, 220, 224, 229, 231, 231, 233, 237, 241,
	249, 251, 252, 254, 255, 257, 262, 264, 267, 269, 272, 274, 274, 278, 286,
	288, 289, 291, 291, 293, 293, 296, 299, 302, 304, 307, 309, 311, 311, 314,
	317, 320, 325, 327, 327, 329, 329, 331, 345, 347, 355, 357, 362, 365, 367,
	369, 370, 372, 372, 374, 383, 385, 386, 389, 389, 391, 393, 396, 399, 401,
	402, 404, 414, 417, 424, 426, 426, 428, 429, 431, 433, 436, 436, 438, 438,
	440, 444, 446, 451, 453, 455, 457, 462, 464, 473, 475, 483, 485, 512, 514,
	520, 522, 526, 528, 529, 531, 531, 533, 560, 562, 562, 564, 565, 567, 569,
	571, 571, 573, 576, 580, 584, 588, 588, 590, 612, 615, 622, 624, 627, 629,
	630, 632, 637, 640, 640, 642, 643, 645, 645, 647, 647, 650, 653, 655, 655,
	657, 657, 754, 754, 2, 6633, 2, 536, 3, 2, 2, 2, 4, 601, 3, 2, 2, 2, 6,
	603, 3, 2, 2, 2, 8, 645, 3, 2, 2, 2, 10, 677, 3, 2, 2, 2, 12, 706, 3, 2,
	2, 2, 14, 729, 3, 2, 2, 2, 16, 731, 3, 2, 2, 2, 18, 733, 3, 2, 2, 2, 20,
	811, 3, 2, 2, 2, 22, 846, 3, 2, 2, 2, 24, 863, 3, 2, 2, 2, 26, 865, 3,
	2, 2, 2, 28, 1039, 3, 2, 2, 2, 30, 1041, 3, 2, 2, 2, 32, 1111, 3, 2, 2,
	2, 34, 1113, 3, 2, 2, 2, 36, 1136, 3, 2, 2, 2, 38, 1208, 3, 2, 2, 2, 40,
	1233, 3, 2, 2, 2, 42, 1235, 3, 2, 2, 2, 44, 1246, 3, 2, 2, 2, 46, 1248,
	3, 2, 2, 2, 48, 1283, 3, 2, 2, 2, 50, 1285, 3, 2, 2, 2, 52, 1314, 3, 2,
	2, 2, 54, 1368, 3, 2, 2, 2, 56, 1395, 3, 2, 2, 2, 58, 1475, 3, 2, 2, 2,
	60, 1477, 3, 2, 2, 2, 62, 1503, 3, 2, 2, 2, 64, 1505, 3, 2, 2, 2, 66, 1514,
	3, 2, 2, 2, 68, 1563, 3, 2, 2, 2, 70, 1589, 3, 2, 2, 2, 72, 1654, 3, 2,
	2, 2, 74, 1670, 3, 2, 2, 2, 76, 1672, 3, 2, 2, 2, 78, 1707, 3, 2, 2, 2,
	80, 1800, 3, 2, 2, 2, 82, 1802, 3, 2, 2, 2, 84, 1804, 3, 2, 2, 2, 86, 1824,
	3, 2, 2, 2, 88, 1845, 3, 2, 2, 2, 90, 1847, 3, 2, 2, 2, 92, 1849, 3, 2,
	2, 2, 94, 1851, 3, 2, 2, 2, 96, 1863, 3, 2, 2, 2, 98, 1865, 3, 2, 2, 2,
	100, 1876, 3, 2, 2, 2, 102, 1878, 3, 2, 2, 2, 104, 1880, 3, 2, 2, 2, 106,
	1882, 3, 2, 2, 2, 108, 1884, 3, 2, 2, 2, 110, 1886, 3, 2, 2, 2, 112, 1927,
	3, 2, 2, 2, 114, 1929, 3, 2, 2, 2, 116, 2220, 3, 2, 2, 2, 118, 2222, 3,
	2, 2, 2, 120, 2268, 3, 2, 2, 2, 122, 2270, 3, 2, 2, 2, 124, 2301, 3, 2,
	2, 2, 126, 2303, 3, 2, 2, 2, 128, 2316, 3, 2, 2, 2, 130, 2370, 3, 2, 2,
	2, 132, 2382, 3, 2, 2, 2, 134, 2399, 3, 2, 2, 2, 136, 2418, 3, 2, 2, 2,
	138, 2434, 3, 2, 2, 2, 140, 2443, 3, 2, 2, 2, 142, 2470, 3, 2, 2, 2, 144,
	2507, 3, 2, 2, 2, 146, 2515, 3, 2, 2, 2, 148, 2561, 3, 2, 2, 2, 150, 2624,
	3, 2, 2, 2, 152, 2626, 3, 2, 2, 2, 154, 2657, 3, 2, 2, 2, 156, 2740, 3,
	2, 2, 2, 158, 2742, 3, 2, 2, 2, 160, 2767, 3, 2, 2, 2, 162, 2774, 3, 2,
	2, 2, 164, 2802, 3, 2, 2, 2, 166, 2853, 3, 2, 2, 2, 168, 2855, 3, 2, 2,
	2, 170, 2913, 3, 2, 2, 2, 172, 2915, 3, 2, 2, 2, 174, 2973, 3, 2, 2, 2,
	176, 2975, 3, 2, 2, 2, 178, 2977, 3, 2, 2, 2, 180, 2979, 3, 2, 2, 2, 182,
	2989, 3, 2, 2, 2, 184, 3004, 3, 2, 2, 2, 186, 3006, 3, 2, 2, 2, 188, 3008,
	3, 2, 2, 2, 190, 3010, 3, 2, 2, 2, 192, 3012, 3, 2, 2, 2, 194, 3014, 3,
	2, 2, 2, 196, 3016, 3, 2, 2, 2, 198, 3018, 3, 2, 2, 2, 200, 3020, 3, 2,
	2, 2, 202, 3022, 3, 2, 2, 2, 204, 3024, 3, 2, 2, 2, 206, 3026, 3, 2, 2,
	2, 208, 3028, 3, 2, 2, 2, 210, 3067, 3, 2, 2, 2, 212, 3069, 3, 2, 2, 2,
	214, 3072, 3, 2, 2, 2, 216, 3103, 3, 2, 2, 2, 218, 3147, 3, 2, 2, 2, 220,
	3149, 3, 2, 2, 2, 222, 3160, 3, 2, 2, 2, 224, 3171, 3, 2, 2, 2, 226, 3185,
	3, 2, 2, 2, 228, 3195, 3, 2, 2, 2, 230, 3205, 3, 2, 2, 2, 232, 3213, 3,
	2, 2, 2, 234, 3223, 3, 2, 2, 2, 236, 3234, 3, 2, 2, 2, 238, 3244, 3, 2,
	2, 2, 240, 3256, 3, 2, 2, 2, 242, 3267, 3, 2, 2, 2, 244, 3277, 3, 2, 2,
	2, 246, 3285, 3, 2, 2, 2, 248, 3298, 3, 2, 2, 2, 250, 3311, 3, 2, 2, 2,
	252, 3322, 3, 2, 2, 2, 254, 3324, 3, 2, 2, 2, 256, 3337, 3, 2, 2, 2, 258,
	3350, 3, 2, 2, 2, 260, 3357, 3, 2, 2, 2, 262, 3369, 3, 2, 2, 2, 264, 3379,
	3, 2, 2, 2, 266, 3387, 3, 2, 2, 2, 268, 3399, 3, 2, 2, 2, 270, 3409, 3,
	2, 2, 2, 272, 3419, 3, 2, 2, 2, 274, 3429, 3, 2, 2, 2, 276, 3437, 3, 2,
	2, 2, 278, 3447, 3, 2, 2, 2, 280, 3457, 3, 2, 2, 2, 282, 3465, 3, 2, 2,
	2, 284, 3477, 3, 2, 2, 2, 286, 3489, 3, 2, 2, 2, 288, 3501, 3, 2, 2, 2,
	290, 3513, 3, 2, 2, 2, 292, 3525, 3, 2, 2, 2, 294, 3537, 3, 2, 2, 2, 296,
	3547, 3, 2, 2, 2, 298, 3555, 3, 2, 2, 2, 300, 3573, 3, 2, 2, 2, 302, 3583,
	3, 2, 2, 2, 304, 3607, 3, 2, 2, 2, 306, 3620, 3, 2, 2, 2, 308, 3622, 3,
	2, 2, 2, 310, 3624, 3, 2, 2, 2, 312, 3627, 3, 2, 2, 2, 314, 3687, 3, 2,
	2, 2, 316, 3690, 3, 2, 2, 2, 318, 3692, 3, 2, 2, 2, 320, 3728, 3, 2, 2,
	2, 322, 3756, 3, 2, 2, 2, 324, 3762, 3, 2, 2, 2, 326, 3778, 3, 2, 2, 2,
	328, 3782, 3, 2, 2, 2, 330, 3807, 3, 2, 2, 2, 332, 3809, 3, 2, 2, 2, 334,
	3818, 3, 2, 2, 2, 336, 3824, 3, 2, 2, 2, 338, 3829, 3, 2, 2, 2, 340, 3831,
	3, 2, 2, 2, 342, 3835, 3, 2, 2, 2, 344, 3839, 3, 2, 2, 2, 346, 3849, 3,
	2, 2, 2, 348, 3852, 3, 2, 2, 2, 350, 3919, 3, 2, 2, 2, 352, 3980, 3, 2,
	2, 2, 354, 4048, 3, 2, 2, 2, 356, 4060, 3, 2, 2, 2, 358, 4099, 3, 2, 2,
	2, 360, 4101, 3, 2, 2, 2, 362, 4120, 3, 2, 2, 2, 364, 4122, 3, 2, 2, 2,
	366, 4143, 3, 2, 2, 2, 368, 4145, 3, 2, 2, 2, 370, 4166, 3, 2, 2, 2, 372,
	4168, 3, 2, 2, 2, 374, 4175, 3, 2, 2, 2, 376, 4200, 3, 2, 2, 2, 378, 4206,
	3, 2, 2, 2, 380, 4237, 3, 2, 2, 2, 382, 4239, 3, 2, 2, 2, 384, 4294, 3,
	2, 2, 2, 386, 4297, 3, 2, 2, 2, 388, 4337, 3, 2, 2, 2, 390, 4341, 3, 2,
	2, 2, 392, 4350, 3, 2, 2, 2, 394, 4353, 3, 2, 2, 2, 396, 4388, 3, 2, 2,
	2, 398, 4390, 3, 2, 2, 2, 400, 4401, 3, 2, 2, 2, 402, 4418, 3, 2, 2, 2,
	404, 4442, 3, 2, 2, 2, 406, 4454, 3, 2, 2, 2, 408, 4456, 3, 2, 2, 2, 410,
	4458, 3, 2, 2, 2, 412, 4468, 3, 2, 2, 2, 414, 4482, 3, 2, 2, 2, 416, 4484,
	3, 2, 2, 2, 418, 4491, 3, 2, 2, 2, 420, 4514, 3, 2, 2, 2, 422, 4526, 3,
	2, 2, 2, 424, 4547, 3, 2, 2, 2, 426, 4553, 3, 2, 2, 2, 428, 4558, 3, 2,
	2, 2, 430, 4566, 3, 2, 2, 2, 432, 4595, 3, 2, 2, 2, 434, 4612, 3, 2, 2,
	2, 436, 4614, 3, 2, 2, 2, 438, 4691, 3, 2, 2, 2, 440, 4804, 3, 2, 2, 2,
	442, 4850, 3, 2, 2, 2, 444, 4852, 3, 2, 2, 2, 446, 4864, 3, 2, 2, 2, 448,
	4884, 3, 2, 2, 2, 450, 4886, 3, 2, 2, 2, 452, 4894, 3, 2, 2, 2, 454, 4901,
	3, 2, 2, 2, 456, 5053, 3, 2, 2, 2, 458, 5055, 3, 2, 2, 2, 460, 5061, 3,
	2, 2, 2, 462, 5126, 3, 2, 2, 2, 464, 5130, 3, 2, 2, 2, 466, 5132, 3, 2,
	2, 2, 468, 5140, 3, 2, 2, 2, 470, 5148, 3, 2, 2, 2, 472, 5153, 3, 2, 2,
	2, 474, 5161, 3, 2, 2, 2, 476, 5165, 3, 2, 2, 2, 478, 5177, 3, 2, 2, 2,
	480, 5187, 3, 2, 2, 2, 482, 5189, 3, 2, 2, 2, 484, 5227, 3, 2, 2, 2, 486,
	5229, 3, 2, 2, 2, 488, 5349, 3, 2, 2, 2, 490, 5393, 3, 2, 2, 2, 492, 5416,
	3, 2, 2, 2, 494, 5432, 3, 2, 2, 2, 496, 5446, 3, 2, 2, 2, 498, 5497, 3,
	2, 2, 2, 500, 5499, 3, 2, 2, 2, 502, 5503, 3, 2, 2, 2, 504, 5512, 3, 2,
	2, 2, 506, 5525, 3, 2, 2, 2, 508, 5539, 3, 2, 2, 2, 510, 5622, 3, 2, 2,
	2, 512, 5624, 3, 2, 2, 2, 514, 5643, 3, 2, 2, 2, 516, 5645, 3, 2, 2, 2,
	518, 5653, 3, 2, 2, 2, 520, 5663, 3, 2, 2, 2, 522, 5665, 3, 2, 2, 2, 524,
	5667, 3, 2, 2, 2, 526, 5669, 3, 2, 2, 2, 528, 5671, 3, 2, 2, 2, 530, 5673,
	3, 2, 2, 2, 532, 5675, 3, 2, 2, 2, 534, 5677, 3, 2, 2, 2, 536, 545, 5,
	4, 3, 2, 537, 538, 7, 837, 2, 2, 538, 540, 5, 4, 3, 2, 539, 537, 3, 2,
	2, 2, 540, 541, 3, 2, 2, 2, 541, 539, 3, 2, 2, 2, 541, 542, 3, 2, 2, 2,
	542, 543, 3, 2, 2, 2, 543, 544, 7, 837, 2, 2, 544, 546, 3, 2, 2, 2, 545,
	539, 3, 2, 2, 2, 545, 546, 3, 2, 2, 2, 546, 547, 3, 2, 2, 2, 547, 548,
	7, 2, 2, 3, 548, 3, 3, 2, 2, 2, 549, 602, 5, 6, 4, 2, 550, 602, 5, 8, 5,
	2, 551, 602, 5, 98, 50, 2, 552, 602, 5, 112, 57, 2, 553, 602, 5, 100, 51,
	2, 554, 602, 5, 102, 52, 2, 555, 602, 5, 104, 53, 2, 556, 602, 5, 106,
	54, 2, 557, 602, 5, 108, 55, 2, 558, 602, 5, 110, 56, 2, 559, 602, 5, 210,
	106, 2, 560, 602, 5, 212, 107, 2, 561, 602, 5, 214, 108, 2, 562, 602, 5,
	216, 109, 2, 563, 602, 5, 218, 110, 2, 564, 602, 5, 302, 152, 2, 565, 602,
	5, 304, 153, 2, 566, 602, 5, 306, 154, 2, 567, 602, 5, 308, 155, 2, 568,
	602, 5, 310, 156, 2, 569, 602, 5, 312, 157, 2, 570, 602, 5, 314, 158, 2,
	571, 602, 5, 316, 159, 2, 572, 602, 5, 318, 160, 2, 573, 602, 5, 320, 161,
	2, 574, 602, 5, 322, 162, 2, 575, 602, 5, 324, 163, 2, 576, 602, 5, 326,
	164, 2, 577, 602, 5, 328, 165, 2, 578, 602, 5, 330, 166, 2, 579, 602, 5,
	332, 167, 2, 580, 602, 5, 334, 168, 2, 581, 602, 5, 336, 169, 2, 582, 602,
	5, 338, 170, 2, 583, 602, 5, 340, 171, 2, 584, 602, 5, 342, 172, 2, 585,
	602, 5, 344, 173, 2, 586, 602, 5, 346, 174, 2, 587, 602, 5, 348, 175, 2,
	588, 602, 5, 350, 176, 2, 589, 602, 5, 352, 177, 2, 590, 602, 5, 358, 180,
	2, 591, 602, 5, 360, 181, 2, 592, 602, 5, 362, 182, 2, 593, 602, 5, 364,
	183, 2, 594, 602, 5, 370, 186, 2, 595, 602, 5, 372, 187, 2, 596, 602, 5,
	374, 188, 2, 597, 602, 5, 376, 189, 2, 598, 602, 5, 378, 190, 2, 599, 602,
	5, 384, 193, 2, 600, 602, 5, 386, 194, 2, 601, 549, 3, 2, 2, 2, 601, 550,
	3, 2, 2, 2, 601, 551, 3, 2, 2, 2, 601, 552, 3, 2, 2, 2, 601, 553, 3, 2,
	2, 2, 601, 554, 3, 2, 2, 2, 601, 555, 3, 2, 2, 2, 601, 556, 3, 2, 2, 2,
	601, 557, 3, 2, 2, 2, 601, 558, 3, 2, 2, 2, 601, 559, 3, 2, 2, 2, 601,
	560, 3, 2, 2, 2, 601, 561, 3, 2, 2, 2, 601, 562, 3, 2, 2, 2, 601, 563,
	3, 2, 2, 2, 601, 564, 3, 2, 2, 2, 601, 565, 3, 2, 2, 2, 601, 566, 3, 2,
	2, 2, 601, 567, 3, 2, 2, 2, 601, 568, 3, 2, 2, 2, 601, 569, 3, 2, 2, 2,
	601, 570, 3, 2, 2, 2, 601, 571, 3, 2, 2, 2, 601, 572, 3, 2, 2, 2, 601,
	573, 3, 2, 2, 2, 601, 574, 3, 2, 2, 2, 601, 575, 3, 2, 2, 2, 601, 576,
	3, 2, 2, 2, 601, 577, 3, 2, 2, 2, 601, 578, 3, 2, 2, 2, 601, 579, 3, 2,
	2, 2, 601, 580, 3, 2, 2, 2, 601, 581, 3, 2, 2, 2, 601, 582, 3, 2, 2, 2,
	601, 583, 3, 2, 2, 2, 601, 584, 3, 2, 2, 2, 601, 585, 3, 2, 2, 2, 601,
	586, 3, 2, 2, 2, 601, 587, 3, 2, 2, 2, 601, 588, 3, 2, 2, 2, 601, 589,
	3, 2, 2, 2, 601, 590, 3, 2, 2, 2, 601, 591, 3, 2, 2, 2, 601, 592, 3, 2,
	2, 2, 601, 593, 3, 2, 2, 2, 601, 594, 3, 2, 2, 2, 601, 595, 3, 2, 2, 2,
	601, 596, 3, 2, 2, 2, 601, 597, 3, 2, 2, 2, 601, 598, 3, 2, 2, 2, 601,
	599, 3, 2, 2, 2, 601, 600, 3, 2, 2, 2, 602, 5, 3, 2, 2, 2, 603, 604, 5,
	518, 260, 2, 604, 7, 3, 2, 2, 2, 605, 646, 5, 10, 6, 2, 606, 646, 5, 12,
	7, 2, 607, 646, 5, 14, 8, 2, 608, 646, 5, 16, 9, 2, 609, 646, 5, 18, 10,
	2, 610, 646, 5, 20, 11, 2, 611, 646, 5, 22, 12, 2, 612, 646, 5, 24, 13,
	2, 613, 646, 5, 26, 14, 2, 614, 646, 5, 32, 17, 2, 615, 646, 5, 34, 18,
	2, 616, 646, 5, 36, 19, 2, 617, 646, 5, 38, 20, 2, 618, 646, 5, 40, 21,
	2, 619, 646, 5, 42, 22, 2, 620, 646, 5, 44, 23, 2, 621, 646, 5, 46, 24,
	2, 622, 646, 5, 48, 25, 2, 623, 646, 5, 50, 26, 2, 624, 646, 5, 52, 27,
	2, 625, 646, 5, 54, 28, 2, 626, 646, 5, 58, 30, 2, 627, 646, 5, 60, 31,
	2, 628, 646, 5, 62, 32, 2, 629, 646, 5, 64, 33, 2, 630, 646, 5, 68, 35,
	2, 631, 646, 5, 70, 36, 2, 632, 646, 5, 72, 37, 2, 633, 646, 5, 74, 38,
	2, 634, 646, 5, 76, 39, 2, 635, 646, 5, 78, 40, 2, 636, 646, 5, 80, 41,
	2, 637, 646, 5, 82, 42, 2, 638, 646, 5, 84, 43, 2, 639, 646, 5, 86, 44,
	2, 640, 646, 5, 88, 45, 2, 641, 646, 5, 90, 46, 2, 642, 646, 5, 92, 47,
	2, 643, 646, 5, 94, 48, 2, 644, 646, 5, 96, 49, 2, 645, 605, 3, 2, 2, 2,
	645, 606, 3, 2, 2, 2, 645, 607, 3, 2, 2, 2, 645, 608, 3, 2, 2, 2, 645,
	609, 3, 2, 2, 2, 645, 610, 3, 2, 2, 2, 645, 611, 3, 2, 2, 2, 645, 612,
	3, 2, 2, 2, 645, 613, 3, 2, 2, 2, 645, 614, 3, 2, 2, 2, 645, 615, 3, 2,
	2, 2, 645, 616, 3, 2, 2, 2, 645, 617, 3, 2, 2, 2, 645, 618, 3, 2, 2, 2,
	645, 619, 3, 2, 2, 2, 645, 620, 3, 2, 2, 2, 645, 621, 3, 2, 2, 2, 645,
	622, 3, 2, 2, 2, 645, 623, 3, 2, 2, 2, 645, 624, 3, 2, 2, 2, 645, 625,
	3, 2, 2, 2, 645, 626, 3, 2, 2, 2, 645, 627, 3, 2, 2, 2, 645, 628, 3, 2,
	2, 2, 645, 629, 3, 2, 2, 2, 645, 630, 3, 2, 2, 2, 645, 631, 3, 2, 2, 2,
	645, 632, 3, 2, 2, 2, 645, 633, 3, 2, 2, 2, 645, 634, 3, 2, 2, 2, 645,
	635, 3, 2, 2, 2, 645, 636, 3, 2, 2, 2, 645, 637, 3, 2, 2, 2, 645, 638,
	3, 2, 2, 2, 645, 639, 3, 2, 2, 2, 645, 640, 3, 2, 2, 2, 645, 641, 3, 2,
	2, 2, 645, 642, 3, 2, 2, 2, 645, 643, 3, 2, 2, 2, 645, 644, 3, 2, 2, 2,
	646, 9, 3, 2, 2, 2, 647, 648, 7, 21, 2, 2, 648, 649, 7, 16, 2, 2, 649,
	650, 5, 518, 260, 2, 650, 651, 7, 769, 2, 2, 651, 652, 5, 498, 250, 2,
	652, 653, 7, 770, 2, 2, 653, 654, 7, 471, 2, 2, 654, 655, 7, 586, 2, 2,
	655, 656, 5, 518, 260, 2, 656, 678, 3, 2, 2, 2, 657, 658, 7, 21, 2, 2,
	658, 659, 7, 16, 2, 2, 659, 660, 5, 518, 260, 2, 660, 661, 7, 769, 2, 2,
	661, 662, 5, 498, 250, 2, 662, 663, 7, 770, 2, 2, 663, 664, 7, 406, 2,
	2, 664, 665, 7, 586, 2, 2, 665, 666, 5, 510, 256, 2, 666, 678, 3, 2, 2,
	2, 667, 668, 7, 21, 2, 2, 668, 669, 7, 16, 2, 2, 669, 670, 5, 518, 260,
	2, 670, 671, 7, 769, 2, 2, 671, 672, 5, 498, 250, 2, 672, 673, 7, 770,
	2, 2, 673, 674, 7, 522, 2, 2, 674, 675, 7, 502, 2, 2, 675, 676, 5, 518,
	260, 2, 676, 678, 3, 2, 2, 2, 677, 647, 3, 2, 2, 2, 677, 657, 3, 2, 2,
	2, 677, 667, 3, 2, 2, 2, 678, 11, 3, 2, 2, 2, 679, 680, 7, 21, 2, 2, 680,
	681, 7, 91, 2, 2, 681, 682, 5, 464, 233, 2, 682, 683, 7, 458, 2, 2, 683,
	684, 7, 698, 2, 2, 684, 707, 3, 2, 2, 2, 685, 686, 7, 21, 2, 2, 686, 687,
	7, 91, 2, 2, 687, 688, 5, 464, 233, 2, 688, 689, 7, 471, 2, 2, 689, 690,
	7, 586, 2, 2, 690, 691, 5, 518, 260, 2, 691, 707, 3, 2, 2, 2, 692, 693,
	7, 21, 2, 2, 693, 694, 7, 91, 2, 2, 694, 695, 5, 464, 233, 2, 695, 696,
	7, 406, 2, 2, 696, 697, 7, 586, 2, 2, 697, 698, 5, 510, 256, 2, 698, 707,
	3, 2, 2, 2, 699, 700, 7, 21, 2, 2, 700, 701, 7, 91, 2, 2, 701, 702, 5,
	464, 233, 2, 702, 703, 7, 522, 2, 2, 703, 704, 7, 502, 2, 2, 704, 705,
	5, 518, 260, 2, 705, 707, 3, 2, 2, 2, 706, 679, 3, 2, 2, 2, 706, 685, 3,
	2, 2, 2, 706, 692, 3, 2, 2, 2, 706, 699, 3, 2, 2, 2, 707, 13, 3, 2, 2,
	2, 708, 709, 7, 21, 2, 2, 709, 710, 7, 119, 2, 2, 710, 711, 5, 518, 260,
	2, 711, 712, 7, 471, 2, 2, 712, 713, 7, 586, 2, 2, 713, 714, 5, 518, 260,
	2, 714, 730, 3, 2, 2, 2, 715, 716, 7, 21, 2, 2, 716, 717, 7, 119, 2, 2,
	717, 718, 5, 518, 260, 2, 718, 719, 7, 406, 2, 2, 719, 720, 7, 586, 2,
	2, 720, 721, 5, 510, 256, 2, 721, 730, 3, 2, 2, 2, 722, 723, 7, 21, 2,
	2, 723, 724, 7, 119, 2, 2, 724, 725, 5, 518, 260, 2, 725, 726, 7, 522,
	2, 2, 726, 727, 7, 502, 2, 2, 727, 728, 5, 518, 260, 2, 728, 730, 3, 2,
	2, 2, 729, 708, 3, 2, 2, 2, 729, 715, 3, 2, 2, 2, 729, 722, 3, 2, 2, 2,
	730, 15, 3, 2, 2, 2, 731, 732, 5, 522, 262, 2, 732, 17, 3, 2, 2, 2, 733,
	734, 5, 522, 262, 2, 734, 19, 3, 2, 2, 2, 735, 736, 7, 21, 2, 2, 736, 737,
	7, 189, 2, 2, 737, 743, 5, 518, 260, 2, 738, 739, 7, 522, 2, 2, 739, 740,
	7, 158, 2, 2, 740, 744, 5, 438, 220, 2, 741, 742, 7, 191, 2, 2, 742, 744,
	7, 158, 2, 2, 743, 738, 3, 2, 2, 2, 743, 741, 3, 2, 2, 2, 744, 812, 3,
	2, 2, 2, 745, 746, 7, 21, 2, 2, 746, 747, 7, 189, 2, 2, 747, 748, 5, 518,
	260, 2, 748, 749, 9, 2, 2, 2, 749, 750, 7, 368, 2, 2, 750, 751, 7, 373,
	2, 2, 751, 812, 3, 2, 2, 2, 752, 753, 7, 21, 2, 2, 753, 754, 7, 189, 2,
	2, 754, 755, 5, 518, 260, 2, 755, 756, 7, 13, 2, 2, 756, 759, 5, 130, 66,
	2, 757, 758, 7, 368, 2, 2, 758, 760, 7, 630, 2, 2, 759, 757, 3, 2, 2, 2,
	759, 760, 3, 2, 2, 2, 760, 812, 3, 2, 2, 2, 761, 762, 7, 21, 2, 2, 762,
	763, 7, 189, 2, 2, 763, 764, 5, 518, 260, 2, 764, 765, 7, 191, 2, 2, 765,
	768, 7, 111, 2, 2, 766, 767, 7, 693, 2, 2, 767, 769, 7, 214, 2, 2, 768,
	766, 3, 2, 2, 2, 768, 769, 3, 2, 2, 2, 769, 770, 3, 2, 2, 2, 770, 772,
	5, 518, 260, 2, 771, 773, 9, 3, 2, 2, 772, 771, 3, 2, 2, 2, 772, 773, 3,
	2, 2, 2, 773, 812, 3, 2, 2, 2, 774, 775, 7, 21, 2, 2, 775, 776, 7, 189,
	2, 2, 776, 777, 5, 518, 260, 2, 777, 778, 7, 471, 2, 2, 778, 779, 7, 111,
	2, 2, 779, 780, 5, 518, 260, 2, 780, 781, 7, 586, 2, 2, 781, 782, 5, 518,
	260, 2, 782, 812, 3, 2, 2, 2, 783, 784, 7, 21, 2, 2, 784, 785, 7, 189,
	2, 2, 785, 786, 5, 518, 260, 2, 786, 787, 7, 631, 2, 2, 787, 788, 7, 111,
	2, 2, 788, 789, 5, 518, 260, 2, 789, 812, 3, 2, 2, 2, 790, 791, 7, 21,
	2, 2, 791, 792, 7, 189, 2, 2, 792, 793, 5, 518, 260, 2, 793, 794, 7, 406,
	2, 2, 794, 795, 7, 586, 2, 2, 795, 796, 5, 510, 256, 2, 796, 812, 3, 2,
	2, 2, 797, 798, 7, 21, 2, 2, 798, 799, 7, 189, 2, 2, 799, 800, 5, 518,
	260, 2, 800, 801, 7, 471, 2, 2, 801, 802, 7, 586, 2, 2, 802, 803, 5, 518,
	260, 2, 803, 812, 3, 2, 2, 2, 804, 805, 7, 21, 2, 2, 805, 806, 7, 189,
	2, 2, 806, 807, 5, 518, 260, 2, 807, 808, 7, 522, 2, 2, 808, 809, 7, 502,
	2, 2, 809, 810, 5, 518, 260, 2, 810, 812, 3, 2, 2, 2, 811, 735, 3, 2, 2,
	2, 811, 745, 3, 2, 2, 2, 811, 752, 3, 2, 2, 2, 811, 761, 3, 2, 2, 2, 811,
	774, 3, 2, 2, 2, 811, 783, 3, 2, 2, 2, 811, 790, 3, 2, 2, 2, 811, 797,
	3, 2, 2, 2, 811, 804, 3, 2, 2, 2, 812, 21, 3, 2, 2, 2, 813, 814, 7, 21,
	2, 2, 814, 815, 7, 701, 2, 2, 815, 816, 7, 599, 2, 2, 816, 817, 5, 518,
	260, 2, 817, 818, 7, 182, 2, 2, 818, 847, 3, 2, 2, 2, 819, 820, 7, 21,
	2, 2, 820, 821, 7, 701, 2, 2, 821, 822, 7, 599, 2, 2, 822, 823, 5, 518,
	260, 2, 823, 825, 7, 198, 2, 2, 824, 826, 9, 4, 2, 2, 825, 824, 3, 2, 2,
	2, 825, 826, 3, 2, 2, 2, 826, 847, 3, 2, 2, 2, 827, 828, 7, 21, 2, 2, 828,
	829, 7, 701, 2, 2, 829, 830, 7, 599, 2, 2, 830, 831, 5, 518, 260, 2, 831,
	832, 7, 406, 2, 2, 832, 836, 7, 586, 2, 2, 833, 837, 5, 518, 260, 2, 834,
	837, 7, 144, 2, 2, 835, 837, 7, 521, 2, 2, 836, 833, 3, 2, 2, 2, 836, 834,
	3, 2, 2, 2, 836, 835, 3, 2, 2, 2, 837, 847, 3, 2, 2, 2, 838, 839, 7, 21,
	2, 2, 839, 840, 7, 701, 2, 2, 840, 841, 7, 599, 2, 2, 841, 842, 5, 518,
	260, 2, 842, 843, 7, 471, 2, 2, 843, 844, 7, 586, 2, 2, 844, 845, 5, 518,
	260, 2, 845, 847, 3, 2, 2, 2, 846, 813, 3, 2, 2, 2, 846, 819, 3, 2, 2,
	2, 846, 827, 3, 2, 2, 2, 846, 838, 3, 2, 2, 2, 847, 23, 3, 2, 2, 2, 848,
	849, 7, 21, 2, 2, 849, 850, 7, 218, 2, 2, 850, 851, 5, 518, 260, 2, 851,
	854, 7, 620, 2, 2, 852, 853, 7, 586, 2, 2, 853, 855, 5, 518, 260, 2, 854,
	852, 3, 2, 2, 2, 854, 855, 3, 2, 2, 2, 855, 864, 3, 2, 2, 2, 856, 857,
	7, 21, 2, 2, 857, 858, 7, 218, 2, 2, 858, 859, 5, 518, 260, 2, 859, 860,
	7, 522, 2, 2, 860, 861, 7, 502, 2, 2, 861, 862, 5, 518, 260, 2, 862, 864,
	3, 2, 2, 2, 863, 848, 3, 2, 2, 2, 863, 856, 3, 2, 2, 2, 864, 25, 3, 2,
	2, 2, 865, 866, 5, 522, 262, 2, 866, 27, 3, 2, 2, 2, 867, 869, 7, 13, 2,
	2, 868, 870, 7, 96, 2, 2, 869, 868, 3, 2, 2, 2, 869, 870, 3, 2, 2, 2, 870,
	871, 3, 2, 2, 2, 871, 872, 5, 526, 264, 2, 872, 875, 5, 476, 239, 2, 873,
	874, 7, 90, 2, 2, 874, 876, 5, 518, 260, 2, 875, 873, 3, 2, 2, 2, 875,
	876, 3, 2, 2, 2, 876, 878, 3, 2, 2, 2, 877, 879, 5, 502, 252, 2, 878, 877,
	3, 2, 2, 2, 878, 879, 3, 2, 2, 2, 879, 1040, 3, 2, 2, 2, 880, 882, 7, 191,
	2, 2, 881, 883, 7, 96, 2, 2, 882, 881, 3, 2, 2, 2, 882, 883, 3, 2, 2, 2,
	883, 886, 3, 2, 2, 2, 884, 885, 7, 693, 2, 2, 885, 887, 7, 214, 2, 2, 886,
	884, 3, 2, 2, 2, 886, 887, 3, 2, 2, 2, 887, 888, 3, 2, 2, 2, 888, 890,
	5, 526, 264, 2, 889, 891, 9, 3, 2, 2, 890, 889, 3, 2, 2, 2, 890, 891, 3,
	2, 2, 2, 891, 1040, 3, 2, 2, 2, 892, 894, 7, 21, 2, 2, 893, 895, 7, 96,
	2, 2, 894, 893, 3, 2, 2, 2, 894, 895, 3, 2, 2, 2, 895, 896, 3, 2, 2, 2,
	896, 899, 5, 526, 264, 2, 897, 898, 7, 522, 2, 2, 898, 900, 7, 148, 2,
	2, 899, 897, 3, 2, 2, 2, 899, 900, 3, 2, 2, 2, 900, 901, 3, 2, 2, 2, 901,
	902, 7, 607, 2, 2, 902, 905, 5, 476, 239, 2, 903, 904, 7, 90, 2, 2, 904,
	906, 5, 518, 260, 2, 905, 903, 3, 2, 2, 2, 905, 906, 3, 2, 2, 2, 906, 1040,
	3, 2, 2, 2, 907, 909, 7, 21, 2, 2, 908, 910, 7, 96, 2, 2, 909, 908, 3,
	2, 2, 2, 909, 910, 3, 2, 2, 2, 910, 911, 3, 2, 2, 2, 911, 912, 5, 526,
	264, 2, 912, 913, 7, 522, 2, 2, 913, 914, 7, 158, 2, 2, 914, 915, 5, 438,
	220, 2, 915, 1040, 3, 2, 2, 2, 916, 918, 7, 21, 2, 2, 917, 919, 7, 96,
	2, 2, 918, 917, 3, 2, 2, 2, 918, 919, 3, 2, 2, 2, 919, 920, 3, 2, 2, 2,
	920, 921, 5, 526, 264, 2, 921, 922, 7, 191, 2, 2, 922, 923, 7, 158, 2,
	2, 923, 1040, 3, 2, 2, 2, 924, 926, 7, 21, 2, 2, 925, 927, 7, 96, 2, 2,
	926, 925, 3, 2, 2, 2, 926, 927, 3, 2, 2, 2, 927, 928, 3, 2, 2, 2, 928,
	929, 5, 526, 264, 2, 929, 930, 9, 2, 2, 2, 930, 931, 7, 368, 2, 2, 931,
	932, 7, 373, 2, 2, 932, 1040, 3, 2, 2, 2, 933, 935, 7, 21, 2, 2, 934, 936,
	7, 96, 2, 2, 935, 934, 3, 2, 2, 2, 935, 936, 3, 2, 2, 2, 936, 937, 3, 2,
	2, 2, 937, 938, 5, 526, 264, 2, 938, 939, 7, 522, 2, 2, 939, 940, 7, 551,
	2, 2, 940, 941, 7, 286, 2, 2, 941, 1040, 3, 2, 2, 2, 942, 944, 7, 21, 2,
	2, 943, 945, 7, 96, 2, 2, 944, 943, 3, 2, 2, 2, 944, 945, 3, 2, 2, 2, 945,
	946, 3, 2, 2, 2, 946, 947, 5, 526, 264, 2, 947, 948, 7, 522, 2, 2, 948,
	949, 7, 769, 2, 2, 949, 950, 5, 472, 237, 2, 950, 951, 7, 770, 2, 2, 951,
	1040, 3, 2, 2, 2, 952, 954, 7, 21, 2, 2, 953, 955, 7, 96, 2, 2, 954, 953,
	3, 2, 2, 2, 954, 955, 3, 2, 2, 2, 955, 956, 3, 2, 2, 2, 956, 957, 5, 526,
	264, 2, 957, 958, 7, 475, 2, 2, 958, 959, 7, 769, 2, 2, 959, 960, 5, 468,
	235, 2, 960, 961, 7, 770, 2, 2, 961, 1040, 3, 2, 2, 2, 962, 964, 7, 21,
	2, 2, 963, 965, 7, 96, 2, 2, 964, 963, 3, 2, 2, 2, 964, 965, 3, 2, 2, 2,
	965, 966, 3, 2, 2, 2, 966, 967, 5, 526, 264, 2, 967, 968, 7, 522, 2, 2,
	968, 969, 7, 556, 2, 2, 969, 970, 9, 5, 2, 2, 970, 1040, 3, 2, 2, 2, 971,
	973, 7, 21, 2, 2, 972, 974, 7, 96, 2, 2, 973, 972, 3, 2, 2, 2, 973, 974,
	3, 2, 2, 2, 974, 975, 3, 2, 2, 2, 975, 976, 5, 526, 264, 2, 976, 978, 7,
	393, 2, 2, 977, 979, 9, 6, 2, 2, 978, 977, 3, 2, 2, 2, 978, 979, 3, 2,
	2, 2, 979, 1040, 3, 2, 2, 2, 980, 981, 7, 13, 2, 2, 981, 984, 5, 508, 255,
	2, 982, 983, 7, 368, 2, 2, 983, 985, 7, 630, 2, 2, 984, 982, 3, 2, 2, 2,
	984, 985, 3, 2, 2, 2, 985, 1040, 3, 2, 2, 2, 986, 987, 7, 631, 2, 2, 987,
	988, 7, 111, 2, 2, 988, 1040, 5, 520, 261, 2, 989, 990, 7, 191, 2, 2, 990,
	993, 7, 111, 2, 2, 991, 992, 7, 693, 2, 2, 992, 994, 7, 214, 2, 2, 993,
	991, 3, 2, 2, 2, 993, 994, 3, 2, 2, 2, 994, 995, 3, 2, 2, 2, 995, 997,
	5, 520, 261, 2, 996, 998, 9, 3, 2, 2, 997, 996, 3, 2, 2, 2, 997, 998, 3,
	2, 2, 2, 998, 1040, 3, 2, 2, 2, 999, 1000, 7, 182, 2, 2, 1000, 1004, 7,
	599, 2, 2, 1001, 1005, 5, 520, 261, 2, 1002, 1005, 7, 18, 2, 2, 1003, 1005,
	7, 623, 2, 2, 1004, 1001, 3, 2, 2, 2, 1004, 1002, 3, 2, 2, 2, 1004, 1003,
	3, 2, 2, 2, 1004, 1005, 3, 2, 2, 2, 1005, 1040, 3, 2, 2, 2, 1006, 1007,
	7, 198, 2, 2, 1007, 1011, 7, 599, 2, 2, 1008, 1012, 5, 520, 261, 2, 1009,
	1012, 7, 18, 2, 2, 1010, 1012, 7, 623, 2, 2, 1011, 1008, 3, 2, 2, 2, 1011,
	1009, 3, 2, 2, 2, 1011, 1010, 3, 2, 2, 2, 1011, 1012, 3, 2, 2, 2, 1012,
	1040, 3, 2, 2, 2, 1013, 1014, 7, 198, 2, 2, 1014, 1015, 7, 474, 2, 2, 1015,
	1016, 7, 599, 2, 2, 1016, 1040, 5, 520, 261, 2, 1017, 1018, 7, 198, 2,
	2, 1018, 1019, 7, 22, 2, 2, 1019, 1020, 7, 599, 2, 2, 1020, 1040, 5, 520,
	261, 2, 1021, 1022, 7, 522, 2, 2, 1022, 1023, 7, 649, 2, 2, 1023, 1040,
	7, 385, 2, 2, 1024, 1025, 7, 522, 2, 2, 1025, 1026, 7, 651, 2, 2, 1026,
	1040, 7, 385, 2, 2, 1027, 1028, 7, 662, 2, 2, 1028, 1040, 5, 518, 260,
	2, 1029, 1030, 7, 362, 2, 2, 1030, 1031, 7, 662, 2, 2, 1031, 1040, 5, 518,
	260, 2, 1032, 1033, 7, 406, 2, 2, 1033, 1034, 7, 586, 2, 2, 1034, 1040,
	5, 510, 256, 2, 1035, 1037, 7, 393, 2, 2, 1036, 1038, 9, 6, 2, 2, 1037,
	1036, 3, 2, 2, 2, 1037, 1038, 3, 2, 2, 2, 1038, 1040, 3, 2, 2, 2, 1039,
	867, 3, 2, 2, 2, 1039, 880, 3, 2, 2, 2, 1039, 892, 3, 2, 2, 2, 1039, 907,
	3, 2, 2, 2, 1039, 916, 3, 2, 2, 2, 1039, 924, 3, 2, 2, 2, 1039, 933, 3,
	2, 2, 2, 1039, 942, 3, 2, 2, 2, 1039, 952, 3, 2, 2, 2, 1039, 962, 3, 2,
	2, 2, 1039, 971, 3, 2, 2, 2, 1039, 980, 3, 2, 2, 2, 1039, 986, 3, 2, 2,
	2, 1039, 989, 3, 2, 2, 2, 1039, 999, 3, 2, 2, 2, 1039, 1006, 3, 2, 2, 2,
	1039, 1013, 3, 2, 2, 2, 1039, 1017, 3, 2, 2, 2, 1039, 1021, 3, 2, 2, 2,
	1039, 1024, 3, 2, 2, 2, 1039, 1027, 3, 2, 2, 2, 1039, 1029, 3, 2, 2, 2,
	1039, 1032, 3, 2, 2, 2, 1039, 1035, 3, 2, 2, 2, 1040, 29, 3, 2, 2, 2, 1041,
	1046, 5, 28, 15, 2, 1042, 1043, 7, 763, 2, 2, 1043, 1045, 5, 28, 15, 2,
	1044, 1042, 3, 2, 2, 2, 1045, 1048, 3, 2, 2, 2, 1046, 1044, 3, 2, 2, 2,
	1046, 1047, 3, 2, 2, 2, 1047, 31, 3, 2, 2, 2, 1048, 1046, 3, 2, 2, 2, 1049,
	1050, 7, 21, 2, 2, 1050, 1051, 7, 232, 2, 2, 1051, 1054, 7, 570, 2, 2,
	1052, 1053, 7, 693, 2, 2, 1053, 1055, 7, 214, 2, 2, 1054, 1052, 3, 2, 2,
	2, 1054, 1055, 3, 2, 2, 2, 1055, 1057, 3, 2, 2, 2, 1056, 1058, 7, 388,
	2, 2, 1057, 1056, 3, 2, 2, 2, 1057, 1058, 3, 2, 2, 2, 1058, 1059, 3, 2,
	2, 2, 1059, 1061, 5, 518, 260, 2, 1060, 1062, 7, 768, 2, 2, 1061, 1060,
	3, 2, 2, 2, 1061, 1062, 3, 2, 2, 2, 1062, 1063, 3, 2, 2, 2, 1063, 1064,
	5, 30, 16, 2, 1064, 1112, 3, 2, 2, 2, 1065, 1066, 7, 21, 2, 2, 1066, 1067,
	7, 232, 2, 2, 1067, 1070, 7, 570, 2, 2, 1068, 1069, 7, 693, 2, 2, 1069,
	1071, 7, 214, 2, 2, 1070, 1068, 3, 2, 2, 2, 1070, 1071, 3, 2, 2, 2, 1071,
	1073, 3, 2, 2, 2, 1072, 1074, 7, 388, 2, 2, 1073, 1072, 3, 2, 2, 2, 1073,
	1074, 3, 2, 2, 2, 1074, 1075, 3, 2, 2, 2, 1075, 1077, 5, 518, 260, 2, 1076,
	1078, 7, 768, 2, 2, 1077, 1076, 3, 2, 2, 2, 1077, 1078, 3, 2, 2, 2, 1078,
	1079, 3, 2, 2, 2, 1079, 1081, 7, 471, 2, 2, 1080, 1082, 7, 96, 2, 2, 1081,
	1080, 3, 2, 2, 2, 1081, 1082, 3, 2, 2, 2, 1082, 1083, 3, 2, 2, 2, 1083,
	1084, 5, 526, 264, 2, 1084, 1085, 7, 586, 2, 2, 1085, 1086, 5, 518, 260,
	2, 1086, 1112, 3, 2, 2, 2, 1087, 1088, 7, 21, 2, 2, 1088, 1089, 7, 232,
	2, 2, 1089, 1092, 7, 570, 2, 2, 1090, 1091, 7, 693, 2, 2, 1091, 1093, 7,
	214, 2, 2, 1092, 1090, 3, 2, 2, 2, 1092, 1093, 3, 2, 2, 2, 1093, 1094,
	3, 2, 2, 2, 1094, 1095, 5, 518, 260, 2, 1095, 1096, 7, 471, 2, 2, 1096,
	1097, 7, 586, 2, 2, 1097, 1098, 5, 518, 260, 2, 1098, 1112, 3, 2, 2, 2,
	1099, 1100, 7, 21, 2, 2, 1100, 1101, 7, 232, 2, 2, 1101, 1104, 7, 570,
	2, 2, 1102, 1103, 7, 693, 2, 2, 1103, 1105, 7, 214, 2, 2, 1104, 1102, 3,
	2, 2, 2, 1104, 1105, 3, 2, 2, 2, 1105, 1106, 3, 2, 2, 2, 1106, 1107, 5,
	518, 260, 2, 1107, 1108, 7, 522, 2, 2, 1108, 1109, 7, 502, 2, 2, 1109,
	1110, 5, 518, 260, 2, 1110, 1112, 3, 2, 2, 2, 1111, 1049, 3, 2, 2, 2, 1111,
	1065, 3, 2, 2, 2, 1111, 1087, 3, 2, 2, 2, 1111, 1099, 3, 2, 2, 2, 1112,
	33, 3, 2, 2, 2, 1113, 1114, 5, 522, 262, 2, 1114, 35, 3, 2, 2, 2, 1115,
	1116, 7, 21, 2, 2, 1116, 1117, 7, 253, 2, 2, 1117, 1118, 5, 510, 256, 2,
	1118, 1119, 7, 13, 2, 2, 1119, 1120, 7, 623, 2, 2, 1120, 1121, 5, 468,
	235, 2, 1121, 1137, 3, 2, 2, 2, 1122, 1123, 7, 21, 2, 2, 1123, 1124, 7,
	253, 2, 2, 1124, 1125, 5, 510, 256, 2, 1125, 1126, 7, 191, 2, 2, 1126,
	1127, 7, 623, 2, 2, 1127, 1128, 5, 468, 235, 2, 1128, 1137, 3, 2, 2, 2,
	1129, 1130, 7, 21, 2, 2, 1130, 1131, 7, 253, 2, 2, 1131, 1132, 5, 518,
	260, 2, 1132, 1133, 7, 471, 2, 2, 1133, 1134, 7, 586, 2, 2, 1134, 1135,
	5, 518, 260, 2, 1135, 1137, 3, 2, 2, 2, 1136, 1115, 3, 2, 2, 2, 1136, 1122,
	3, 2, 2, 2, 1136, 1129, 3, 2, 2, 2, 1137, 37, 3, 2, 2, 2, 1138, 1139, 7,
	21, 2, 2, 1139, 1142, 7, 271, 2, 2, 1140, 1141, 7, 693, 2, 2, 1141, 1143,
	7, 214, 2, 2, 1142, 1140, 3, 2, 2, 2, 1142, 1143, 3, 2, 2, 2, 1143, 1144,
	3, 2, 2, 2, 1144, 1145, 5, 518, 260, 2, 1145, 1146, 7, 471, 2, 2, 1146,
	1147, 7, 586, 2, 2, 1147, 1148, 5, 518, 260, 2, 1148, 1209, 3, 2, 2, 2,
	1149, 1150, 7, 21, 2, 2, 1150, 1153, 7, 271, 2, 2, 1151, 1152, 7, 693,
	2, 2, 1152, 1154, 7, 214, 2, 2, 1153, 1151, 3, 2, 2, 2, 1153, 1154, 3,
	2, 2, 2, 1154, 1155, 3, 2, 2, 2, 1155, 1156, 5, 518, 260, 2, 1156, 1157,
	7, 522, 2, 2, 1157, 1158, 7, 573, 2, 2, 1158, 1159, 5, 518, 260, 2, 1159,
	1209, 3, 2, 2, 2, 1160, 1161, 7, 21, 2, 2, 1161, 1162, 7, 271, 2, 2, 1162,
	1163, 5, 518, 260, 2, 1163, 1164, 7, 170, 2, 2, 1164, 1165, 7, 387, 2,
	2, 1165, 1166, 7, 218, 2, 2, 1166, 1167, 5, 518, 260, 2, 1167, 1209, 3,
	2, 2, 2, 1168, 1169, 7, 21, 2, 2, 1169, 1172, 7, 271, 2, 2, 1170, 1171,
	7, 693, 2, 2, 1171, 1173, 7, 214, 2, 2, 1172, 1170, 3, 2, 2, 2, 1172, 1173,
	3, 2, 2, 2, 1173, 1174, 3, 2, 2, 2, 1174, 1175, 5, 518, 260, 2, 1175, 1176,
	7, 522, 2, 2, 1176, 1177, 7, 769, 2, 2, 1177, 1178, 5, 472, 237, 2, 1178,
	1179, 7, 770, 2, 2, 1179, 1209, 3, 2, 2, 2, 1180, 1181, 7, 21, 2, 2, 1181,
	1184, 7, 271, 2, 2, 1182, 1183, 7, 693, 2, 2, 1183, 1185, 7, 214, 2, 2,
	1184, 1182, 3, 2, 2, 2, 1184, 1185, 3, 2, 2, 2, 1185, 1186, 3, 2, 2, 2,
	1186, 1187, 7, 475, 2, 2, 1187, 1188, 7, 769, 2, 2, 1188, 1189, 5, 468,
	235, 2, 1189, 1190, 7, 770, 2, 2, 1190, 1209, 3, 2, 2, 2, 1191, 1192, 7,
	21, 2, 2, 1192, 1193, 7, 271, 2, 2, 1193, 1194, 7, 18, 2, 2, 1194, 1195,
	7, 268, 2, 2, 1195, 1196, 7, 573, 2, 2, 1196, 1200, 5, 518, 260, 2, 1197,
	1198, 7, 721, 2, 2, 1198, 1199, 7, 56, 2, 2, 1199, 1201, 5, 468, 235, 2,
	1200, 1197, 3, 2, 2, 2, 1200, 1201, 3, 2, 2, 2, 1201, 1202, 3, 2, 2, 2,
	1202, 1203, 7, 522, 2, 2, 1203, 1204, 7, 573, 2, 2, 1204, 1206, 5, 518,
	260, 2, 1205, 1207, 7, 372, 2, 2, 1206, 1205, 3, 2, 2, 2, 1206, 1207, 3,
	2, 2, 2, 1207, 1209, 3, 2, 2, 2, 1208, 1138, 3, 2, 2, 2, 1208, 1149, 3,
	2, 2, 2, 1208, 1160, 3, 2, 2, 2, 1208, 1168, 3, 2, 2, 2, 1208, 1180, 3,
	2, 2, 2, 1208, 1191, 3, 2, 2, 2, 1209, 39, 3, 2, 2, 2, 1210, 1212, 7, 21,
	2, 2, 1211, 1213, 7, 442, 2, 2, 1212, 1211, 3, 2, 2, 2, 1212, 1213, 3,
	2, 2, 2, 1213, 1214, 3, 2, 2, 2, 1214, 1215, 7, 302, 2, 2, 1215, 1216,
	5, 518, 260, 2, 1216, 1217, 7, 471, 2, 2, 1217, 1218, 7, 586, 2, 2, 1218,
	1219, 5, 518, 260, 2, 1219, 1234, 3, 2, 2, 2, 1220, 1222, 7, 21, 2, 2,
	1221, 1223, 7, 442, 2, 2, 1222, 1221, 3, 2, 2, 2, 1222, 1223, 3, 2, 2,
	2, 1223, 1224, 3, 2, 2, 2, 1224, 1225, 7, 302, 2, 2, 1225, 1226, 5, 518,
	260, 2, 1226, 1227, 7, 406, 2, 2, 1227, 1231, 7, 586, 2, 2, 1228, 1232,
	5, 518, 260, 2, 1229, 1232, 7, 144, 2, 2, 1230, 1232, 7, 521, 2, 2, 1231,
	1228, 3, 2, 2, 2, 1231, 1229, 3, 2, 2, 2, 1231, 1230, 3, 2, 2, 2, 1232,
	1234, 3, 2, 2, 2, 1233, 1210, 3, 2, 2, 2, 1233, 1220, 3, 2, 2, 2, 1234,
	41, 3, 2, 2, 2, 1235, 1236, 7, 21, 2, 2, 1236, 1237, 7, 303, 2, 2, 1237,
	1238, 7, 379, 2, 2, 1238, 1239, 7, 776, 2, 2, 1239, 1240, 7, 406, 2, 2,
	1240, 1244, 7, 586, 2, 2, 1241, 1245, 5, 518, 260, 2, 1242, 1245, 7, 144,
	2, 2, 1243, 1245, 7, 521, 2, 2, 1244, 1241, 3, 2, 2, 2, 1244, 1242, 3,
	2, 2, 2, 1244, 1243, 3, 2, 2, 2, 1245, 43, 3, 2, 2, 2, 1246, 1247, 5, 522,
	262, 2, 1247, 45, 3, 2, 2, 2, 1248, 1249, 5, 522, 262, 2, 1249, 47, 3,
	2, 2, 2, 1250, 1251, 7, 21, 2, 2, 1251, 1252, 7, 391, 2, 2, 1252, 1253,
	7, 83, 2, 2, 1253, 1254, 5, 518, 260, 2, 1254, 1255, 7, 628, 2, 2, 1255,
	1256, 5, 480, 241, 2, 1256, 1257, 7, 471, 2, 2, 1257, 1258, 7, 586, 2,
	2, 1258, 1259, 5, 518, 260, 2, 1259, 1284, 3, 2, 2, 2, 1260, 1261, 7, 21,
	2, 2, 1261, 1262, 7, 391, 2, 2, 1262, 1263, 7, 83, 2, 2, 1263, 1264, 5,
	518, 260, 2, 1264, 1265, 7, 628, 2, 2, 1265, 1266, 5, 480, 241, 2, 1266,
	1267, 7, 406, 2, 2, 1267, 1271, 7, 586, 2, 2, 1268, 1272, 5, 518, 260,
	2, 1269, 1272, 7, 144, 2, 2, 1270, 1272, 7, 521, 2, 2, 1271, 1268, 3, 2,
	2, 2, 1271, 1269, 3, 2, 2, 2, 1271, 1270, 3, 2, 2, 2, 1272, 1284, 3, 2,
	2, 2, 1273, 1274, 7, 21, 2, 2, 1274, 1275, 7, 391, 2, 2, 1275, 1276, 7,
	83, 2, 2, 1276, 1277, 5, 518, 260, 2, 1277, 1278, 7, 628, 2, 2, 1278, 1279,
	5, 480, 241, 2, 1279, 1280, 7, 522, 2, 2, 1280, 1281, 7, 502, 2, 2, 1281,
	1282, 5, 518, 260, 2, 1282, 1284, 3, 2, 2, 2, 1283, 1250, 3, 2, 2, 2, 1283,
	1260, 3, 2, 2, 2, 1283, 1273, 3, 2, 2, 2, 1284, 49, 3, 2, 2, 2, 1285, 1286,
	5, 522, 262, 2, 1286, 51, 3, 2, 2, 2, 1287, 1288, 7, 21, 2, 2, 1288, 1289,
	7, 720, 2, 2, 1289, 1290, 5, 518, 260, 2, 1290, 1291, 7, 387, 2, 2, 1291,
	1292, 5, 518, 260, 2, 1292, 1293, 7, 471, 2, 2, 1293, 1294, 7, 586, 2,
	2, 1294, 1295, 5, 518, 260, 2, 1295, 1315, 3, 2, 2, 2, 1296, 1297, 7, 21,
	2, 2, 1297, 1298, 7, 720, 2, 2, 1298, 1299, 5, 518, 260, 2, 1299, 1300,
	7, 387, 2, 2, 1300, 1303, 5, 518, 260, 2, 1301, 1302, 7, 586, 2, 2, 1302,
	1304, 5, 512, 257, 2, 1303, 1301, 3, 2, 2, 2, 1303, 1304, 3, 2, 2, 2, 1304,
	1307, 3, 2, 2, 2, 1305, 1306, 7, 628, 2, 2, 1306, 1308, 5, 496, 249, 2,
	1307, 1305, 3, 2, 2, 2, 1307, 1308, 3, 2, 2, 2, 1308, 1312, 3, 2, 2, 2,
	1309, 1310, 7, 649, 2, 2, 1310, 1311, 7, 80, 2, 2, 1311, 1313, 5, 496,
	249, 2, 1312, 1309, 3, 2, 2, 2, 1312, 1313, 3, 2, 2, 2, 1313, 1315, 3,
	2, 2, 2, 1314, 1287, 3, 2, 2, 2, 1314, 1296, 3, 2, 2, 2, 1315, 53, 3, 2,
	2, 2, 1316, 1317, 7, 21, 2, 2, 1317, 1318, 7, 445, 2, 2, 1318, 1319, 5,
	518, 260, 2, 1319, 1320, 7, 13, 2, 2, 1320, 1322, 7, 570, 2, 2, 1321, 1323,
	7, 388, 2, 2, 1322, 1321, 3, 2, 2, 2, 1322, 1323, 3, 2, 2, 2, 1323, 1324,
	3, 2, 2, 2, 1324, 1325, 5, 468, 235, 2, 1325, 1369, 3, 2, 2, 2, 1326, 1327,
	7, 21, 2, 2, 1327, 1328, 7, 445, 2, 2, 1328, 1329, 5, 518, 260, 2, 1329,
	1330, 7, 522, 2, 2, 1330, 1332, 7, 570, 2, 2, 1331, 1333, 7, 388, 2, 2,
	1332, 1331, 3, 2, 2, 2, 1332, 1333, 3, 2, 2, 2, 1333, 1334, 3, 2, 2, 2,
	1334, 1335, 5, 468, 235, 2, 1335, 1369, 3, 2, 2, 2, 1336, 1337, 7, 21,
	2, 2, 1337, 1338, 7, 445, 2, 2, 1338, 1339, 5, 518, 260, 2, 1339, 1340,
	7, 191, 2, 2, 1340, 1342, 7, 570, 2, 2, 1341, 1343, 7, 388, 2, 2, 1342,
	1341, 3, 2, 2, 2, 1342, 1343, 3, 2, 2, 2, 1343, 1344, 3, 2, 2, 2, 1344,
	1345, 5, 468, 235, 2, 1345, 1369, 3, 2, 2, 2, 1346, 1347, 7, 21, 2, 2,
	1347, 1348, 7, 445, 2, 2, 1348, 1349, 5, 518, 260, 2, 1349, 1350, 7, 522,
	2, 2, 1350, 1351, 7, 769, 2, 2, 1351, 1352, 5, 472, 237, 2, 1352, 1353,
	7, 770, 2, 2, 1353, 1369, 3, 2, 2, 2, 1354, 1355, 7, 21, 2, 2, 1355, 1356,
	7, 445, 2, 2, 1356, 1357, 5, 518, 260, 2, 1357, 1358, 7, 406, 2, 2, 1358,
	1359, 7, 586, 2, 2, 1359, 1360, 5, 510, 256, 2, 1360, 1369, 3, 2, 2, 2,
	1361, 1362, 7, 21, 2, 2, 1362, 1363, 7, 445, 2, 2, 1363, 1364, 5, 518,
	260, 2, 1364, 1365, 7, 471, 2, 2, 1365, 1366, 7, 586, 2, 2, 1366, 1367,
	5, 464, 233, 2, 1367, 1369, 3, 2, 2, 2, 1368, 1316, 3, 2, 2, 2, 1368, 1326,
	3, 2, 2, 2, 1368, 1336, 3, 2, 2, 2, 1368, 1346, 3, 2, 2, 2, 1368, 1354,
	3, 2, 2, 2, 1368, 1361, 3, 2, 2, 2, 1369, 55, 3, 2, 2, 2, 1370, 1396, 7,
	658, 2, 2, 1371, 1396, 7, 659, 2, 2, 1372, 1396, 7, 130, 2, 2, 1373, 1396,
	7, 363, 2, 2, 1374, 1396, 7, 660, 2, 2, 1375, 1396, 7, 661, 2, 2, 1376,
	1396, 7, 662, 2, 2, 1377, 1396, 7, 663, 2, 2, 1378, 1396, 7, 664, 2, 2,
	1379, 1396, 7, 665, 2, 2, 1380, 1396, 7, 666, 2, 2, 1381, 1396, 7, 667,
	2, 2, 1382, 1396, 7, 668, 2, 2, 1383, 1396, 7, 669, 2, 2, 1384, 1385, 7,
	109, 2, 2, 1385, 1386, 7, 313, 2, 2, 1386, 1396, 7, 286, 2, 2, 1387, 1389,
	7, 200, 2, 2, 1388, 1387, 3, 2, 2, 2, 1388, 1389, 3, 2, 2, 2, 1389, 1390,
	3, 2, 2, 2, 1390, 1391, 7, 420, 2, 2, 1391, 1396, 7, 779, 2, 2, 1392, 1393,
	7, 630, 2, 2, 1393, 1394, 7, 619, 2, 2, 1394, 1396, 7, 779, 2, 2, 1395,
	1370, 3, 2, 2, 2, 1395, 1371, 3, 2, 2, 2, 1395, 1372, 3, 2, 2, 2, 1395,
	1373, 3, 2, 2, 2, 1395, 1374, 3, 2, 2, 2, 1395, 1375, 3, 2, 2, 2, 1395,
	1376, 3, 2, 2, 2, 1395, 1377, 3, 2, 2, 2, 1395, 1378, 3, 2, 2, 2, 1395,
	1379, 3, 2, 2, 2, 1395, 1380, 3, 2, 2, 2, 1395, 1381, 3, 2, 2, 2, 1395,
	1382, 3, 2, 2, 2, 1395, 1383, 3, 2, 2, 2, 1395, 1384, 3, 2, 2, 2, 1395,
	1388, 3, 2, 2, 2, 1395, 1392, 3, 2, 2, 2, 1396, 57, 3, 2, 2, 2, 1397, 1398,
	7, 21, 2, 2, 1398, 1399, 7, 488, 2, 2, 1399, 1401, 5, 510, 256, 2, 1400,
	1402, 7, 649, 2, 2, 1401, 1400, 3, 2, 2, 2, 1401, 1402, 3, 2, 2, 2, 1402,
	1404, 3, 2, 2, 2, 1403, 1405, 5, 56, 29, 2, 1404, 1403, 3, 2, 2, 2, 1405,
	1406, 3, 2, 2, 2, 1406, 1404, 3, 2, 2, 2, 1406, 1407, 3, 2, 2, 2, 1407,
	1476, 3, 2, 2, 2, 1408, 1409, 7, 21, 2, 2, 1409, 1410, 7, 488, 2, 2, 1410,
	1411, 5, 464, 233, 2, 1411, 1412, 7, 471, 2, 2, 1412, 1413, 7, 586, 2,
	2, 1413, 1414, 5, 464, 233, 2, 1414, 1476, 3, 2, 2, 2, 1415, 1416, 7, 21,
	2, 2, 1416, 1419, 7, 488, 2, 2, 1417, 1420, 5, 510, 256, 2, 1418, 1420,
	7, 18, 2, 2, 1419, 1417, 3, 2, 2, 2, 1419, 1418, 3, 2, 2, 2, 1420, 1424,
	3, 2, 2, 2, 1421, 1422, 7, 268, 2, 2, 1422, 1423, 7, 149, 2, 2, 1423, 1425,
	5, 464, 233, 2, 1424, 1421, 3, 2, 2, 2, 1424, 1425, 3, 2, 2, 2, 1425, 1426,
	3, 2, 2, 2, 1426, 1427, 7, 522, 2, 2, 1427, 1428, 5, 518, 260, 2, 1428,
	1431, 9, 7, 2, 2, 1429, 1432, 5, 514, 258, 2, 1430, 1432, 7, 158, 2, 2,
	1431, 1429, 3, 2, 2, 2, 1431, 1430, 3, 2, 2, 2, 1432, 1476, 3, 2, 2, 2,
	1433, 1434, 7, 21, 2, 2, 1434, 1437, 7, 488, 2, 2, 1435, 1438, 5, 510,
	256, 2, 1436, 1438, 7, 18, 2, 2, 1437, 1435, 3, 2, 2, 2, 1437, 1436, 3,
	2, 2, 2, 1438, 1442, 3, 2, 2, 2, 1439, 1440, 7, 268, 2, 2, 1440, 1441,
	7, 149, 2, 2, 1441, 1443, 5, 464, 233, 2, 1442, 1439, 3, 2, 2, 2, 1442,
	1443, 3, 2, 2, 2, 1443, 1444, 3, 2, 2, 2, 1444, 1445, 7, 522, 2, 2, 1445,
	1446, 5, 518, 260, 2, 1446, 1447, 7, 239, 2, 2, 1447, 1448, 7, 136, 2,
	2, 1448, 1476, 3, 2, 2, 2, 1449, 1450, 7, 21, 2, 2, 1450, 1453, 7, 488,
	2, 2, 1451, 1454, 5, 510, 256, 2, 1452, 1454, 7, 18, 2, 2, 1453, 1451,
	3, 2, 2, 2, 1453, 1452, 3, 2, 2, 2, 1454, 1458, 3, 2, 2, 2, 1455, 1456,
	7, 268, 2, 2, 1456, 1457, 7, 149, 2, 2, 1457, 1459, 5, 464, 233, 2, 1458,
	1455, 3, 2, 2, 2, 1458, 1459, 3, 2, 2, 2, 1459, 1460, 3, 2, 2, 2, 1460,
	1461, 7, 475, 2, 2, 1461, 1476, 5, 518, 260, 2, 1462, 1463, 7, 21, 2, 2,
	1463, 1466, 7, 488, 2, 2, 1464, 1467, 5, 510, 256, 2, 1465, 1467, 7, 18,
	2, 2, 1466, 1464, 3, 2, 2, 2, 1466, 1465, 3, 2, 2, 2, 1467, 1471, 3, 2,
	2, 2, 1468, 1469, 7, 268, 2, 2, 1469, 1470, 7, 149, 2, 2, 1470, 1472, 5,
	464, 233, 2, 1471, 1468, 3, 2, 2, 2, 1471, 1472, 3, 2, 2, 2, 1472, 1473,
	3, 2, 2, 2, 1473, 1474, 7, 475, 2, 2, 1474, 1476, 7, 18, 2, 2, 1475, 1397,
	3, 2, 2, 2, 1475, 1408, 3, 2, 2, 2, 1475, 1415, 3, 2, 2, 2, 1475, 1433,
	3, 2, 2, 2, 1475, 1449, 3, 2, 2, 2, 1475, 1462, 3, 2, 2, 2, 1476, 59, 3,
	2, 2, 2, 1477, 1478, 7, 21, 2, 2, 1478, 1479, 7, 499, 2, 2, 1479, 1480,
	5, 464, 233, 2, 1480, 1481, 7, 387, 2, 2, 1481, 1482, 5, 518, 260, 2, 1482,
	1483, 7, 471, 2, 2, 1483, 1484, 7, 586, 2, 2, 1484, 1485, 5, 464, 233,
	2, 1485, 61, 3, 2, 2, 2, 1486, 1487, 7, 21, 2, 2, 1487, 1488, 7, 502, 2,
	2, 1488, 1489, 5, 518, 260, 2, 1489, 1490, 7, 471, 2, 2, 1490, 1491, 7,
	586, 2, 2, 1491, 1492, 5, 518, 260, 2, 1492, 1504, 3, 2, 2, 2, 1493, 1494,
	7, 21, 2, 2, 1494, 1495, 7, 502, 2, 2, 1495, 1496, 5, 518, 260, 2, 1496,
	1497, 7, 406, 2, 2, 1497, 1501, 7, 586, 2, 2, 1498, 1502, 5, 518, 260,
	2, 1499, 1502, 7, 144, 2, 2, 1500, 1502, 7, 521, 2, 2, 1501, 1498, 3, 2,
	2, 2, 1501, 1499, 3, 2, 2, 2, 1501, 1500, 3, 2, 2, 2, 1502, 1504, 3, 2,
	2, 2, 1503, 1486, 3, 2, 2, 2, 1503, 1493, 3, 2, 2, 2, 1504, 63, 3, 2, 2,
	2, 1505, 1506, 7, 21, 2, 2, 1506, 1509, 7, 516, 2, 2, 1507, 1508, 7, 693,
	2, 2, 1508, 1510, 7, 214, 2, 2, 1509, 1507, 3, 2, 2, 2, 1509, 1510, 3,
	2, 2, 2, 1510, 1511, 3, 2, 2, 2, 1511, 1512, 5, 464, 233, 2, 1512, 65,
	3, 2, 2, 2, 1513, 1515, 9, 6, 2, 2, 1514, 1513, 3, 2, 2, 2, 1514, 1515,
	3, 2, 2, 2, 1515, 1516, 3, 2, 2, 2, 1516, 1518, 5, 518, 260, 2, 1517, 1519,
	5, 514, 258, 2, 1518, 1517, 3, 2, 2, 2, 1518, 1519, 3, 2, 2, 2, 1519, 1530,
	3, 2, 2, 2, 1520, 1522, 7, 763, 2, 2, 1521, 1523, 9, 6, 2, 2, 1522, 1521,
	3, 2, 2, 2, 1522, 1523, 3, 2, 2, 2, 1523, 1524, 3, 2, 2, 2, 1524, 1526,
	5, 518, 260, 2, 1525, 1527, 5, 514, 258, 2, 1526, 1525, 3, 2, 2, 2, 1526,
	1527, 3, 2, 2, 2, 1527, 1529, 3, 2, 2, 2, 1528, 1520, 3, 2, 2, 2, 1529,
	1532, 3, 2, 2, 2, 1530, 1528, 3, 2, 2, 2, 1530, 1531, 3, 2, 2, 2, 1531,
	67, 3, 2, 2, 2, 1532, 1530, 3, 2, 2, 2, 1533, 1534, 7, 21, 2, 2, 1534,
	1535, 7, 703, 2, 2, 1535, 1547, 5, 518, 260, 2, 1536, 1537, 7, 698, 2,
	2, 1537, 1548, 7, 779, 2, 2, 1538, 1539, 7, 698, 2, 2, 1539, 1541, 7, 779,
	2, 2, 1540, 1538, 3, 2, 2, 2, 1540, 1541, 3, 2, 2, 2, 1541, 1542, 3, 2,
	2, 2, 1542, 1543, 7, 393, 2, 2, 1543, 1544, 7, 769, 2, 2, 1544, 1545, 5,
	66, 34, 2, 1545, 1546, 7, 770, 2, 2, 1546, 1548, 3, 2, 2, 2, 1547, 1536,
	3, 2, 2, 2, 1547, 1540, 3, 2, 2, 2, 1548, 1564, 3, 2, 2, 2, 1549, 1550,
	7, 21, 2, 2, 1550, 1551, 7, 703, 2, 2, 1551, 1552, 5, 518, 260, 2, 1552,
	1553, 7, 406, 2, 2, 1553, 1554, 7, 586, 2, 2, 1554, 1555, 5, 510, 256,
	2, 1555, 1564, 3, 2, 2, 2, 1556, 1557, 7, 21, 2, 2, 1557, 1558, 7, 703,
	2, 2, 1558, 1559, 5, 518, 260, 2, 1559, 1560, 7, 471, 2, 2, 1560, 1561,
	7, 586, 2, 2, 1561, 1562, 5, 464, 233, 2, 1562, 1564, 3, 2, 2, 2, 1563,
	1533, 3, 2, 2, 2, 1563, 1549, 3, 2, 2, 2, 1563, 1556, 3, 2, 2, 2, 1564,
	69, 3, 2, 2, 2, 1565, 1566, 7, 21, 2, 2, 1566, 1567, 7, 551, 2, 2, 1567,
	1568, 5, 518, 260, 2, 1568, 1569, 7, 406, 2, 2, 1569, 1573, 7, 586, 2,
	2, 1570, 1574, 5, 518, 260, 2, 1571, 1574, 7, 144, 2, 2, 1572, 1574, 7,
	521, 2, 2, 1573, 1570, 3, 2, 2, 2, 1573, 1571, 3, 2, 2, 2, 1573, 1572,
	3, 2, 2, 2, 1574, 1590, 3, 2, 2, 2, 1575, 1576, 7, 21, 2, 2, 1576, 1577,
	7, 551, 2, 2, 1577, 1578, 5, 518, 260, 2, 1578, 1579, 7, 471, 2, 2, 1579,
	1580, 7, 586, 2, 2, 1580, 1581, 5, 518, 260, 2, 1581, 1590, 3, 2, 2, 2,
	1582, 1583, 7, 21, 2, 2, 1583, 1584, 7, 551, 2, 2, 1584, 1585, 5, 518,
	260, 2, 1585, 1586, 7, 522, 2, 2, 1586, 1587, 7, 502, 2, 2, 1587, 1588,
	5, 518, 260, 2, 1588, 1590, 3, 2, 2, 2, 1589, 1565, 3, 2, 2, 2, 1589, 1575,
	3, 2, 2, 2, 1589, 1582, 3, 2, 2, 2, 1590, 71, 3, 2, 2, 2, 1591, 1592, 7,
	21, 2, 2, 1592, 1593, 7, 563, 2, 2, 1593, 1594, 5, 518, 260, 2, 1594, 1595,
	7, 109, 2, 2, 1595, 1596, 5, 514, 258, 2, 1596, 1655, 3, 2, 2, 2, 1597,
	1598, 7, 21, 2, 2, 1598, 1599, 7, 563, 2, 2, 1599, 1600, 5, 518, 260, 2,
	1600, 1601, 7, 522, 2, 2, 1601, 1602, 7, 445, 2, 2, 1602, 1608, 5, 466,
	234, 2, 1603, 1604, 7, 649, 2, 2, 1604, 1605, 7, 769, 2, 2, 1605, 1606,
	5, 472, 237, 2, 1606, 1607, 7, 770, 2, 2, 1607, 1609, 3, 2, 2, 2, 1608,
	1603, 3, 2, 2, 2, 1608, 1609, 3, 2, 2, 2, 1609, 1655, 3, 2, 2, 2, 1610,
	1611, 7, 21, 2, 2, 1611, 1612, 7, 563, 2, 2, 1612, 1613, 5, 518, 260, 2,
	1613, 1614, 7, 458, 2, 2, 1614, 1620, 7, 445, 2, 2, 1615, 1616, 7, 649,
	2, 2, 1616, 1617, 7, 769, 2, 2, 1617, 1618, 5, 472, 237, 2, 1618, 1619,
	7, 770, 2, 2, 1619, 1621, 3, 2, 2, 2, 1620, 1615, 3, 2, 2, 2, 1620, 1621,
	3, 2, 2, 2, 1621, 1655, 3, 2, 2, 2, 1622, 1623, 7, 21, 2, 2, 1623, 1624,
	7, 563, 2, 2, 1624, 1625, 5, 518, 260, 2, 1625, 1626, 7, 198, 2, 2, 1626,
	1655, 3, 2, 2, 2, 1627, 1628, 7, 21, 2, 2, 1628, 1629, 7, 563, 2, 2, 1629,
	1630, 5, 518, 260, 2, 1630, 1631, 7, 182, 2, 2, 1631, 1655, 3, 2, 2, 2,
	1632, 1633, 7, 21, 2, 2, 1633, 1634, 7, 563, 2, 2, 1634, 1635, 5, 518,
	260, 2, 1635, 1636, 7, 522, 2, 2, 1636, 1637, 7, 769, 2, 2, 1637, 1638,
	5, 472, 237, 2, 1638, 1639, 7, 770, 2, 2, 1639, 1655, 3, 2, 2, 2, 1640,
	1641, 7, 21, 2, 2, 1641, 1642, 7, 563, 2, 2, 1642, 1643, 5, 518, 260, 2,
	1643, 1644, 7, 406, 2, 2, 1644, 1645, 7, 586, 2, 2, 1645, 1646, 5, 510,
	256, 2, 1646, 1655, 3, 2, 2, 2, 1647, 1648, 7, 21, 2, 2, 1648, 1649, 7,
	563, 2, 2, 1649, 1650, 5, 518, 260, 2, 1650, 1651, 7, 471, 2, 2, 1651,
	1652, 7, 586, 2, 2, 1652, 1653, 5, 518, 260, 2, 1653, 1655, 3, 2, 2, 2,
	1654, 1591, 3, 2, 2, 2, 1654, 1597, 3, 2, 2, 2, 1654, 1610, 3, 2, 2, 2,
	1654, 1622, 3, 2, 2, 2, 1654, 1627, 3, 2, 2, 2, 1654, 1632, 3, 2, 2, 2,
	1654, 1640, 3, 2, 2, 2, 1654, 1647, 3, 2, 2, 2, 1655, 73, 3, 2, 2, 2, 1656,
	1657, 7, 21, 2, 2, 1657, 1658, 7, 568, 2, 2, 1658, 1659, 7, 522, 2, 2,
	1659, 1660, 7, 781, 2, 2, 1660, 1661, 9, 7, 2, 2, 1661, 1671, 5, 514, 258,
	2, 1662, 1663, 7, 21, 2, 2, 1663, 1664, 7, 568, 2, 2, 1664, 1665, 7, 475,
	2, 2, 1665, 1671, 7, 781, 2, 2, 1666, 1667, 7, 21, 2, 2, 1667, 1668, 7,
	568, 2, 2, 1668, 1669, 7, 475, 2, 2, 1669, 1671, 7, 18, 2, 2, 1670, 1656,
	3, 2, 2, 2, 1670, 1662, 3, 2, 2, 2, 1670, 1666, 3, 2, 2, 2, 1671, 75, 3,
	2, 2, 2, 1672, 1673, 5, 522, 262, 2, 1673, 77, 3, 2, 2, 2, 1674, 1675,
	7, 21, 2, 2, 1675, 1676, 7, 573, 2, 2, 1676, 1677, 5, 518, 260, 2, 1677,
	1678, 7, 471, 2, 2, 1678, 1679, 7, 586, 2, 2, 1679, 1680, 5, 518, 260,
	2, 1680, 1708, 3, 2, 2, 2, 1681, 1682, 7, 21, 2, 2, 1682, 1683, 7, 573,
	2, 2, 1683, 1684, 5, 518, 260, 2, 1684, 1685, 7, 406, 2, 2, 1685, 1689,
	7, 586, 2, 2, 1686, 1690, 5, 518, 260, 2, 1687, 1690, 7, 144, 2, 2, 1688,
	1690, 7, 521, 2, 2, 1689, 1686, 3, 2, 2, 2, 1689, 1687, 3, 2, 2, 2, 1689,
	1688, 3, 2, 2, 2, 1690, 1708, 3, 2, 2, 2, 1691, 1692, 7, 21, 2, 2, 1692,
	1693, 7, 573, 2, 2, 1693, 1694, 5, 518, 260, 2, 1694, 1695, 7, 522, 2,
	2, 1695, 1696, 7, 769, 2, 2, 1696, 1697, 5, 472, 237, 2, 1697, 1698, 7,
	770, 2, 2, 1698, 1708, 3, 2, 2, 2, 1699, 1700, 7, 21, 2, 2, 1700, 1701,
	7, 573, 2, 2, 1701, 1702, 5, 518, 260, 2, 1702, 1703, 7, 475, 2, 2, 1703,
	1704, 7, 769, 2, 2, 1704, 1705, 5, 468, 235, 2, 1705, 1706, 7, 770, 2,
	2, 1706, 1708, 3, 2, 2, 2, 1707, 1674, 3, 2, 2, 2, 1707, 1681, 3, 2, 2,
	2, 1707, 1691, 3, 2, 2, 2, 1707, 1699, 3, 2, 2, 2, 1708, 79, 3, 2, 2, 2,
	1709, 1710, 7, 21, 2, 2, 1710, 1711, 7, 754, 2, 2, 1711, 1712, 7, 509,
	2, 2, 1712, 1713, 7, 106, 2, 2, 1713, 1714, 5, 518, 260, 2, 1714, 1715,
	7, 13, 2, 2, 1715, 1716, 7, 328, 2, 2, 1716, 1717, 7, 230, 2, 2, 1717,
	1718, 5, 468, 235, 2, 1718, 1719, 7, 649, 2, 2, 1719, 1720, 5, 468, 235,
	2, 1720, 1801, 3, 2, 2, 2, 1721, 1722, 7, 21, 2, 2, 1722, 1723, 7, 754,
	2, 2, 1723, 1724, 7, 509, 2, 2, 1724, 1725, 7, 106, 2, 2, 1725, 1726, 5,
	518, 260, 2, 1726, 1727, 7, 21, 2, 2, 1727, 1728, 7, 328, 2, 2, 1728, 1729,
	7, 230, 2, 2, 1729, 1730, 5, 468, 235, 2, 1730, 1731, 7, 649, 2, 2, 1731,
	1732, 5, 468, 235, 2, 1732, 1801, 3, 2, 2, 2, 1733, 1734, 7, 21, 2, 2,
	1734, 1735, 7, 754, 2, 2, 1735, 1736, 7, 509, 2, 2, 1736, 1737, 7, 106,
	2, 2, 1737, 1738, 5, 518, 260, 2, 1738, 1739, 7, 21, 2, 2, 1739, 1740,
	7, 328, 2, 2, 1740, 1741, 7, 473, 2, 2, 1741, 1742, 5, 518, 260, 2, 1742,
	1743, 7, 649, 2, 2, 1743, 1744, 5, 518, 260, 2, 1744, 1801, 3, 2, 2, 2,
	1745, 1746, 7, 21, 2, 2, 1746, 1747, 7, 754, 2, 2, 1747, 1748, 7, 509,
	2, 2, 1748, 1749, 7, 106, 2, 2, 1749, 1750, 5, 518, 260, 2, 1750, 1751,
	7, 21, 2, 2, 1751, 1752, 7, 328, 2, 2, 1752, 1753, 7, 230, 2, 2, 1753,
	1754, 5, 468, 235, 2, 1754, 1755, 7, 473, 2, 2, 1755, 1756, 5, 518, 260,
	2, 1756, 1757, 7, 649, 2, 2, 1757, 1758, 5, 518, 260, 2, 1758, 1801, 3,
	2, 2, 2, 1759, 1760, 7, 21, 2, 2, 1760, 1761, 7, 754, 2, 2, 1761, 1762,
	7, 509, 2, 2, 1762, 1763, 7, 106, 2, 2, 1763, 1764, 5, 518, 260, 2, 1764,
	1765, 7, 191, 2, 2, 1765, 1768, 7, 328, 2, 2, 1766, 1767, 7, 693, 2, 2,
	1767, 1769, 7, 214, 2, 2, 1768, 1766, 3, 2, 2, 2, 1768, 1769, 3, 2, 2,
	2, 1769, 1770, 3, 2, 2, 2, 1770, 1771, 7, 230, 2, 2, 1771, 1772, 5, 468,
	235, 2, 1772, 1801, 3, 2, 2, 2, 1773, 1774, 7, 21, 2, 2, 1774, 1775, 7,
	754, 2, 2, 1775, 1776, 7, 509, 2, 2, 1776, 1777, 7, 106, 2, 2, 1777, 1778,
	5, 518, 260, 2, 1778, 1779, 7, 471, 2, 2, 1779, 1780, 7, 586, 2, 2, 1780,
	1781, 5, 518, 260, 2, 1781, 1801, 3, 2, 2, 2, 1782, 1783, 7, 21, 2, 2,
	1783, 1784, 7, 754, 2, 2, 1784, 1785, 7, 509, 2, 2, 1785, 1786, 7, 106,
	2, 2, 1786, 1787, 5, 518, 260, 2, 1787, 1788, 7, 406, 2, 2, 1788, 1789,
	7, 586, 2, 2, 1789, 1790, 5, 510, 256, 2, 1790, 1801, 3, 2, 2, 2, 1791,
	1792, 7, 21, 2, 2, 1792, 1793, 7, 754, 2, 2, 1793, 1794, 7, 509, 2, 2,
	1794, 1795, 7, 106, 2, 2, 1795, 1796, 5, 518, 260, 2, 1796, 1797, 7, 522,
	2, 2, 1797, 1798, 7, 502, 2, 2, 1798, 1799, 5, 518, 260, 2, 1799, 1801,
	3, 2, 2, 2, 1800, 1709, 3, 2, 2, 2, 1800, 1721, 3, 2, 2, 2, 1800, 1733,
	3, 2, 2, 2, 1800, 1745, 3, 2, 2, 2, 1800, 1759, 3, 2, 2, 2, 1800, 1773,
	3, 2, 2, 2, 1800, 1782, 3, 2, 2, 2, 1800, 1791, 3, 2, 2, 2, 1801, 81, 3,
	2, 2, 2, 1802, 1803, 5, 522, 262, 2, 1803, 83, 3, 2, 2, 2, 1804, 1805,
	5, 522, 262, 2, 1805, 85, 3, 2, 2, 2, 1806, 1807, 7, 21, 2, 2, 1807, 1808,
	7, 754, 2, 2, 1808, 1809, 7, 509, 2, 2, 1809, 1810, 7, 575, 2, 2, 1810,
	1811, 5, 518, 260, 2, 1811, 1812, 7, 471, 2, 2, 1812, 1813, 7, 586, 2,
	2, 1813, 1814, 5, 518, 260, 2, 1814, 1825, 3, 2, 2, 2, 1815, 1816, 7, 21,
	2, 2, 1816, 1817, 7, 754, 2, 2, 1817, 1818, 7, 509, 2, 2, 1818, 1819, 7,
	575, 2, 2, 1819, 1820, 5, 518, 260, 2, 1820, 1821, 7, 522, 2, 2, 1821,
	1822, 7, 502, 2, 2, 1822, 1823, 5, 518, 260, 2, 1823, 1825, 3, 2, 2, 2,
	1824, 1806, 3, 2, 2, 2, 1824, 1815, 3, 2, 2, 2, 1825, 87, 3, 2, 2, 2, 1826,
	1827, 7, 21, 2, 2, 1827, 1828, 7, 599, 2, 2, 1828, 1829, 5, 518, 260, 2,
	1829, 1830, 7, 387, 2, 2, 1830, 1831, 5, 518, 260, 2, 1831, 1832, 7, 471,
	2, 2, 1832, 1833, 7, 586, 2, 2, 1833, 1834, 5, 518, 260, 2, 1834, 1846,
	3, 2, 2, 2, 1835, 1836, 7, 21, 2, 2, 1836, 1837, 7, 599, 2, 2, 1837, 1838,
	5, 518, 260, 2, 1838, 1839, 7, 387, 2, 2, 1839, 1840, 5, 518, 260, 2, 1840,
	1841, 7, 170, 2, 2, 1841, 1842, 7, 387, 2, 2, 1842, 1843, 7, 218, 2, 2,
	1843, 1844, 5, 518, 260, 2, 1844, 1846, 3, 2, 2, 2, 1845, 1826, 3, 2, 2,
	2, 1845, 1835, 3, 2, 2, 2, 1846, 89, 3, 2, 2, 2, 1847, 1848, 5, 522, 262,
	2, 1848, 91, 3, 2, 2, 2, 1849, 1850, 5, 522, 262, 2, 1850, 93, 3, 2, 2,
	2, 1851, 1852, 7, 21, 2, 2, 1852, 1853, 7, 623, 2, 2, 1853, 1854, 7, 328,
	2, 2, 1854, 1855, 7, 230, 2, 2, 1855, 1856, 5, 510, 256, 2, 1856, 1857,
	7, 703, 2, 2, 1857, 1858, 5, 518, 260, 2, 1858, 1859, 7, 393, 2, 2, 1859,
	1860, 7, 769, 2, 2, 1860, 1861, 5, 66, 34, 2, 1861, 1862, 7, 770, 2, 2,
	1862, 95, 3, 2, 2, 2, 1863, 1864, 5, 522, 262, 2, 1864, 97, 3, 2, 2, 2,
	1865, 1867, 7, 24, 2, 2, 1866, 1868, 7, 641, 2, 2, 1867, 1866, 3, 2, 2,
	2, 1867, 1868, 3, 2, 2, 2, 1868, 1869, 3, 2, 2, 2, 1869, 1874, 5, 474,
	238, 2, 1870, 1871, 7, 769, 2, 2, 1871, 1872, 5, 466, 234, 2, 1872, 1873,
	7, 770, 2, 2, 1873, 1875, 3, 2, 2, 2, 1874, 1870, 3, 2, 2, 2, 1874, 1875,
	3, 2, 2, 2, 1875, 99, 3, 2, 2, 2, 1876, 1877, 5, 522, 262, 2, 1877, 101,
	3, 2, 2, 2, 1878, 1879, 5, 522, 262, 2, 1879, 103, 3, 2, 2, 2, 1880, 1881,
	5, 522, 262, 2, 1881, 105, 3, 2, 2, 2, 1882, 1883, 5, 522, 262, 2, 1883,
	107, 3, 2, 2, 2, 1884, 1885, 5, 522, 262, 2, 1885, 109, 3, 2, 2, 2, 1886,
	1887, 5, 522, 262, 2, 1887, 111, 3, 2, 2, 2, 1888, 1928, 5, 114, 58, 2,
	1889, 1928, 5, 116, 59, 2, 1890, 1928, 5, 118, 60, 2, 1891, 1928, 5, 124,
	63, 2, 1892, 1928, 5, 126, 64, 2, 1893, 1928, 5, 128, 65, 2, 1894, 1928,
	5, 132, 67, 2, 1895, 1928, 5, 136, 69, 2, 1896, 1928, 5, 140, 71, 2, 1897,
	1928, 5, 142, 72, 2, 1898, 1928, 5, 144, 73, 2, 1899, 1928, 5, 146, 74,
	2, 1900, 1928, 5, 148, 75, 2, 1901, 1928, 5, 150, 76, 2, 1902, 1928, 5,
	152, 77, 2, 1903, 1928, 5, 154, 78, 2, 1904, 1928, 5, 158, 80, 2, 1905,
	1928, 5, 160, 81, 2, 1906, 1928, 5, 162, 82, 2, 1907, 1928, 5, 164, 83,
	2, 1908, 1928, 5, 168, 85, 2, 1909, 1928, 5, 170, 86, 2, 1910, 1928, 5,
	172, 87, 2, 1911, 1928, 5, 174, 88, 2, 1912, 1928, 5, 176, 89, 2, 1913,
	1928, 5, 178, 90, 2, 1914, 1928, 5, 180, 91, 2, 1915, 1928, 5, 186, 94,
	2, 1916, 1928, 5, 188, 95, 2, 1917, 1928, 5, 190, 96, 2, 1918, 1928, 5,
	192, 97, 2, 1919, 1928, 5, 194, 98, 2, 1920, 1928, 5, 196, 99, 2, 1921,
	1928, 5, 198, 100, 2, 1922, 1928, 5, 200, 101, 2, 1923, 1928, 5, 202, 102,
	2, 1924, 1928, 5, 204, 103, 2, 1925, 1928, 5, 206, 104, 2, 1926, 1928,
	5, 208, 105, 2, 1927, 1888, 3, 2, 2, 2, 1927, 1889, 3, 2, 2, 2, 1927, 1890,
	3, 2, 2, 2, 1927, 1891, 3, 2, 2, 2, 1927, 1892, 3, 2, 2, 2, 1927, 1893,
	3, 2, 2, 2, 1927, 1894, 3, 2, 2, 2, 1927, 1895, 3, 2, 2, 2, 1927, 1896,
	3, 2, 2, 2, 1927, 1897, 3, 2, 2, 2, 1927, 1898, 3, 2, 2, 2, 1927, 1899,
	3, 2, 2, 2, 1927, 1900, 3, 2, 2, 2, 1927, 1901, 3, 2, 2, 2, 1927, 1902,
	3, 2, 2, 2, 1927, 1903, 3, 2, 2, 2, 1927, 1904, 3, 2, 2, 2, 1927, 1905,
	3, 2, 2, 2, 1927, 1906, 3, 2, 2, 2, 1927, 1907, 3, 2, 2, 2, 1927, 1908,
	3, 2, 2, 2, 1927, 1909, 3, 2, 2, 2, 1927, 1910, 3, 2, 2, 2, 1927, 1911,
	3, 2, 2, 2, 1927, 1912, 3, 2, 2, 2, 1927, 1913, 3, 2, 2, 2, 1927, 1914,
	3, 2, 2, 2, 1927, 1915, 3, 2, 2, 2, 1927, 1916, 3, 2, 2, 2, 1927, 1917,
	3, 2, 2, 2, 1927, 1918, 3, 2, 2, 2, 1927, 1919, 3, 2, 2, 2, 1927, 1920,
	3, 2, 2, 2, 1927, 1921, 3, 2, 2, 2, 1927, 1922, 3, 2, 2, 2, 1927, 1923,
	3, 2, 2, 2, 1927, 1924, 3, 2, 2, 2, 1927, 1925, 3, 2, 2, 2, 1927, 1926,
	3, 2, 2, 2, 1928, 113, 3, 2, 2, 2, 1929, 1930, 7, 128, 2, 2, 1930, 1931,
	7, 10, 2, 2, 1931, 1932, 7, 339, 2, 2, 1932, 1933, 5, 464, 233, 2, 1933,
	1934, 7, 607, 2, 2, 1934, 1935, 7, 271, 2, 2, 1935, 1936, 7, 255, 2, 2,
	1936, 1937, 5, 464, 233, 2, 1937, 115, 3, 2, 2, 2, 1938, 1939, 7, 128,
	2, 2, 1939, 1940, 7, 16, 2, 2, 1940, 1941, 5, 464, 233, 2, 1941, 1943,
	7, 769, 2, 2, 1942, 1944, 9, 8, 2, 2, 1943, 1942, 3, 2, 2, 2, 1943, 1944,
	3, 2, 2, 2, 1944, 1946, 3, 2, 2, 2, 1945, 1947, 5, 464, 233, 2, 1946, 1945,
	3, 2, 2, 2, 1946, 1947, 3, 2, 2, 2, 1947, 1948, 3, 2, 2, 2, 1948, 1949,
	5, 478, 240, 2, 1949, 1950, 7, 770, 2, 2, 1950, 1951, 7, 769, 2, 2, 1951,
	1952, 7, 670, 2, 2, 1952, 1953, 7, 794, 2, 2, 1953, 1954, 5, 518, 260,
	2, 1954, 1955, 7, 763, 2, 2, 1955, 1956, 7, 671, 2, 2, 1956, 1957, 7, 794,
	2, 2, 1957, 1962, 5, 518, 260, 2, 1958, 1959, 7, 763, 2, 2, 1959, 1960,
	7, 672, 2, 2, 1960, 1961, 7, 794, 2, 2, 1961, 1963, 7, 776, 2, 2, 1962,
	1958, 3, 2, 2, 2, 1962, 1963, 3, 2, 2, 2, 1963, 1968, 3, 2, 2, 2, 1964,
	1965, 7, 763, 2, 2, 1965, 1966, 7, 673, 2, 2, 1966, 1967, 7, 794, 2, 2,
	1967, 1969, 5, 518, 260, 2, 1968, 1964, 3, 2, 2, 2, 1968, 1969, 3, 2, 2,
	2, 1969, 1972, 3, 2, 2, 2, 1970, 1971, 7, 763, 2, 2, 1971, 1973, 7, 674,
	2, 2, 1972, 1970, 3, 2, 2, 2, 1972, 1973, 3, 2, 2, 2, 1973, 1978, 3, 2,
	2, 2, 1974, 1975, 7, 763, 2, 2, 1975, 1976, 7, 675, 2, 2, 1976, 1977, 7,
	794, 2, 2, 1977, 1979, 5, 518, 260, 2, 1978, 1974, 3, 2, 2, 2, 1978, 1979,
	3, 2, 2, 2, 1979, 1984, 3, 2, 2, 2, 1980, 1981, 7, 763, 2, 2, 1981, 1982,
	7, 676, 2, 2, 1982, 1983, 7, 794, 2, 2, 1983, 1985, 5, 518, 260, 2, 1984,
	1980, 3, 2, 2, 2, 1984, 1985, 3, 2, 2, 2, 1985, 1990, 3, 2, 2, 2, 1986,
	1987, 7, 763, 2, 2, 1987, 1988, 7, 677, 2, 2, 1988, 1989, 7, 794, 2, 2,
	1989, 1991, 5, 518, 260, 2, 1990, 1986, 3, 2, 2, 2, 1990, 1991, 3, 2, 2,
	2, 1991, 1996, 3, 2, 2, 2, 1992, 1993, 7, 763, 2, 2, 1993, 1994, 7, 678,
	2, 2, 1994, 1995, 7, 794, 2, 2, 1995, 1997, 5, 438, 220, 2, 1996, 1992,
	3, 2, 2, 2, 1996, 1997, 3, 2, 2, 2, 1997, 2002, 3, 2, 2, 2, 1998, 1999,
	7, 763, 2, 2, 1999, 2000, 7, 679, 2, 2, 2000, 2001, 7, 794, 2, 2, 2001,
	2003, 5, 518, 260, 2, 2002, 1998, 3, 2, 2, 2, 2002, 2003, 3, 2, 2, 2, 2003,
	2008, 3, 2, 2, 2, 2004, 2005, 7, 763, 2, 2, 2005, 2006, 7, 680, 2, 2, 2006,
	2007, 7, 794, 2, 2, 2007, 2009, 5, 518, 260, 2, 2008, 2004, 3, 2, 2, 2,
	2008, 2009, 3, 2, 2, 2, 2009, 2014, 3, 2, 2, 2, 2010, 2011, 7, 763, 2,
	2, 2011, 2012, 7, 681, 2, 2, 2012, 2013, 7, 794, 2, 2, 2013, 2015, 5, 518,
	260, 2, 2014, 2010, 3, 2, 2, 2, 2014, 2015, 3, 2, 2, 2, 2015, 2020, 3,
	2, 2, 2, 2016, 2017, 7, 763, 2, 2, 2017, 2018, 7, 682, 2, 2, 2018, 2019,
	7, 794, 2, 2, 2019, 2021, 7, 776, 2, 2, 2020, 2016, 3, 2, 2, 2, 2020, 2021,
	3, 2, 2, 2, 2021, 2026, 3, 2, 2, 2, 2022, 2023, 7, 763, 2, 2, 2023, 2024,
	7, 683, 2, 2, 2024, 2025, 7, 794, 2, 2, 2025, 2027, 5, 518, 260, 2, 2026,
	2022, 3, 2, 2, 2, 2026, 2027, 3, 2, 2, 2, 2027, 2030, 3, 2, 2, 2, 2028,
	2029, 7, 763, 2, 2, 2029, 2031, 7, 684, 2, 2, 2030, 2028, 3, 2, 2, 2, 2030,
	2031, 3, 2, 2, 2, 2031, 2036, 3, 2, 2, 2, 2032, 2033, 7, 763, 2, 2, 2033,
	2034, 7, 685, 2, 2, 2034, 2035, 7, 794, 2, 2, 2035, 2037, 5, 518, 260,
	2, 2036, 2032, 3, 2, 2, 2, 2036, 2037, 3, 2, 2, 2, 2037, 2042, 3, 2, 2,
	2, 2038, 2039, 7, 763, 2, 2, 2039, 2040, 7, 686, 2, 2, 2040, 2041, 7, 794,
	2, 2, 2041, 2043, 5, 518, 260, 2, 2042, 2038, 3, 2, 2, 2, 2042, 2043, 3,
	2, 2, 2, 2043, 2048, 3, 2, 2, 2, 2044, 2045, 7, 763, 2, 2, 2045, 2046,
	7, 687, 2, 2, 2046, 2047, 7, 794, 2, 2, 2047, 2049, 9, 9, 2, 2, 2048, 2044,
	3, 2, 2, 2, 2048, 2049, 3, 2, 2, 2, 2049, 2050, 3, 2, 2, 2, 2050, 2051,
	7, 770, 2, 2, 2051, 2221, 3, 2, 2, 2, 2052, 2053, 7, 128, 2, 2, 2053, 2054,
	7, 16, 2, 2, 2054, 2055, 5, 464, 233, 2, 2055, 2063, 7, 769, 2, 2, 2056,
	2058, 9, 8, 2, 2, 2057, 2056, 3, 2, 2, 2, 2057, 2058, 3, 2, 2, 2, 2058,
	2060, 3, 2, 2, 2, 2059, 2061, 5, 464, 233, 2, 2060, 2059, 3, 2, 2, 2, 2060,
	2061, 3, 2, 2, 2, 2061, 2062, 3, 2, 2, 2, 2062, 2064, 5, 478, 240, 2, 2063,
	2057, 3, 2, 2, 2, 2063, 2064, 3, 2, 2, 2, 2064, 2065, 3, 2, 2, 2, 2065,
	2066, 7, 395, 2, 2, 2066, 2068, 7, 56, 2, 2, 2067, 2069, 9, 8, 2, 2, 2068,
	2067, 3, 2, 2, 2, 2068, 2069, 3, 2, 2, 2, 2069, 2071, 3, 2, 2, 2, 2070,
	2072, 5, 464, 233, 2, 2071, 2070, 3, 2, 2, 2, 2071, 2072, 3, 2, 2, 2, 2072,
	2073, 3, 2, 2, 2, 2073, 2074, 5, 478, 240, 2, 2074, 2075, 7, 770, 2, 2,
	2075, 2076, 7, 769, 2, 2, 2076, 2077, 7, 670, 2, 2, 2077, 2078, 7, 794,
	2, 2, 2078, 2079, 5, 518, 260, 2, 2079, 2080, 7, 763, 2, 2, 2080, 2081,
	7, 671, 2, 2, 2081, 2082, 7, 794, 2, 2, 2082, 2087, 5, 518, 260, 2, 2083,
	2084, 7, 763, 2, 2, 2084, 2085, 7, 672, 2, 2, 2085, 2086, 7, 794, 2, 2,
	2086, 2088, 7, 776, 2, 2, 2087, 2083, 3, 2, 2, 2, 2087, 2088, 3, 2, 2,
	2, 2088, 2093, 3, 2, 2, 2, 2089, 2090, 7, 763, 2, 2, 2090, 2091, 7, 673,
	2, 2, 2091, 2092, 7, 794, 2, 2, 2092, 2094, 5, 518, 260, 2, 2093, 2089,
	3, 2, 2, 2, 2093, 2094, 3, 2, 2, 2, 2094, 2097, 3, 2, 2, 2, 2095, 2096,
	7, 763, 2, 2, 2096, 2098, 7, 674, 2, 2, 2097, 2095, 3, 2, 2, 2, 2097, 2098,
	3, 2, 2, 2, 2098, 2103, 3, 2, 2, 2, 2099, 2100, 7, 763, 2, 2, 2100, 2101,
	7, 678, 2, 2, 2101, 2102, 7, 794, 2, 2, 2102, 2104, 5, 438, 220, 2, 2103,
	2099, 3, 2, 2, 2, 2103, 2104, 3, 2, 2, 2, 2104, 2109, 3, 2, 2, 2, 2105,
	2106, 7, 763, 2, 2, 2106, 2107, 7, 687, 2, 2, 2107, 2108, 7, 794, 2, 2,
	2108, 2110, 9, 9, 2, 2, 2109, 2105, 3, 2, 2, 2, 2109, 2110, 3, 2, 2, 2,
	2110, 2113, 3, 2, 2, 2, 2111, 2112, 7, 763, 2, 2, 2112, 2114, 7, 688, 2,
	2, 2113, 2111, 3, 2, 2, 2, 2113, 2114, 3, 2, 2, 2, 2114, 2115, 3, 2, 2,
	2, 2115, 2116, 7, 770, 2, 2, 2116, 2221, 3, 2, 2, 2, 2117, 2118, 7, 128,
	2, 2, 2118, 2119, 7, 16, 2, 2, 2119, 2120, 5, 464, 233, 2, 2120, 2121,
	7, 769, 2, 2, 2121, 2122, 7, 692, 2, 2, 2122, 2123, 7, 794, 2, 2, 2123,
	2124, 5, 476, 239, 2, 2124, 2125, 7, 763, 2, 2, 2125, 2126, 7, 670, 2,
	2, 2126, 2127, 7, 794, 2, 2, 2127, 2128, 5, 518, 260, 2, 2128, 2129, 7,
	763, 2, 2, 2129, 2130, 7, 671, 2, 2, 2130, 2131, 7, 794, 2, 2, 2131, 2136,
	5, 518, 260, 2, 2132, 2133, 7, 763, 2, 2, 2133, 2134, 7, 672, 2, 2, 2134,
	2135, 7, 794, 2, 2, 2135, 2137, 7, 776, 2, 2, 2136, 2132, 3, 2, 2, 2, 2136,
	2137, 3, 2, 2, 2, 2137, 2142, 3, 2, 2, 2, 2138, 2139, 7, 763, 2, 2, 2139,
	2140, 7, 673, 2, 2, 2140, 2141, 7, 794, 2, 2, 2141, 2143, 5, 518, 260,
	2, 2142, 2138, 3, 2, 2, 2, 2142, 2143, 3, 2, 2, 2, 2143, 2146, 3, 2, 2,
	2, 2144, 2145, 7, 763, 2, 2, 2145, 2147, 7, 674, 2, 2, 2146, 2144, 3, 2,
	2, 2, 2146, 2147, 3, 2, 2, 2, 2147, 2152, 3, 2, 2, 2, 2148, 2149, 7, 763,
	2, 2, 2149, 2150, 7, 675, 2, 2, 2150, 2151, 7, 794, 2, 2, 2151, 2153, 5,
	518, 260, 2, 2152, 2148, 3, 2, 2, 2, 2152, 2153, 3, 2, 2, 2, 2153, 2158,
	3, 2, 2, 2, 2154, 2155, 7, 763, 2, 2, 2155, 2156, 7, 676, 2, 2, 2156, 2157,
	7, 794, 2, 2, 2157, 2159, 5, 518, 260, 2, 2158, 2154, 3, 2, 2, 2, 2158,
	2159, 3, 2, 2, 2, 2159, 2164, 3, 2, 2, 2, 2160, 2161, 7, 763, 2, 2, 2161,
	2162, 7, 677, 2, 2, 2162, 2163, 7, 794, 2, 2, 2163, 2165, 5, 518, 260,
	2, 2164, 2160, 3, 2, 2, 2, 2164, 2165, 3, 2, 2, 2, 2165, 2170, 3, 2, 2,
	2, 2166, 2167, 7, 763, 2, 2, 2167, 2168, 7, 678, 2, 2, 2168, 2169, 7, 794,
	2, 2, 2169, 2171, 5, 438, 220, 2, 2170, 2166, 3, 2, 2, 2, 2170, 2171, 3,
	2, 2, 2, 2171, 2176, 3, 2, 2, 2, 2172, 2173, 7, 763, 2, 2, 2173, 2174,
	7, 679, 2, 2, 2174, 2175, 7, 794, 2, 2, 2175, 2177, 5, 518, 260, 2, 2176,
	2172, 3, 2, 2, 2, 2176, 2177, 3, 2, 2, 2, 2177, 2182, 3, 2, 2, 2, 2178,
	2179, 7, 763, 2, 2, 2179, 2180, 7, 680, 2, 2, 2180, 2181, 7, 794, 2, 2,
	2181, 2183, 5, 518, 260, 2, 2182, 2178, 3, 2, 2, 2, 2182, 2183, 3, 2, 2,
	2, 2183, 2188, 3, 2, 2, 2, 2184, 2185, 7, 763, 2, 2, 2185, 2186, 7, 681,
	2, 2, 2186, 2187, 7, 794, 2, 2, 2187, 2189, 5, 518, 260, 2, 2188, 2184,
	3, 2, 2, 2, 2188, 2189, 3, 2, 2, 2, 2189, 2194, 3, 2, 2, 2, 2190, 2191,
	7, 763, 2, 2, 2191, 2192, 7, 682, 2, 2, 2192, 2193, 7, 794, 2, 2, 2193,
	2195, 7, 776, 2, 2, 2194, 2190, 3, 2, 2, 2, 2194, 2195, 3, 2, 2, 2, 2195,
	2200, 3, 2, 2, 2, 2196, 2197, 7, 763, 2, 2, 2197, 2198, 7, 683, 2, 2, 2198,
	2199, 7, 794, 2, 2, 2199, 2201, 5, 518, 260, 2, 2200, 2196, 3, 2, 2, 2,
	2200, 2201, 3, 2, 2, 2, 2201, 2204, 3, 2, 2, 2, 2202, 2203, 7, 763, 2,
	2, 2203, 2205, 7, 684, 2, 2, 2204, 2202, 3, 2, 2, 2, 2204, 2205, 3, 2,
	2, 2, 2205, 2210, 3, 2, 2, 2, 2206, 2207, 7, 763, 2, 2, 2207, 2208, 7,
	685, 2, 2, 2208, 2209, 7, 794, 2, 2, 2209, 2211, 5, 518, 260, 2, 2210,
	2206, 3, 2, 2, 2, 2210, 2211, 3, 2, 2, 2, 2211, 2216, 3, 2, 2, 2, 2212,
	2213, 7, 763, 2, 2, 2213, 2214, 7, 686, 2, 2, 2214, 2215, 7, 794, 2, 2,
	2215, 2217, 5, 518, 260, 2, 2216, 2212, 3, 2, 2, 2, 2216, 2217, 3, 2, 2,
	2, 2217, 2218, 3, 2, 2, 2, 2218, 2219, 7, 770, 2, 2, 2219, 2221, 3, 2,
	2, 2, 2220, 1938, 3, 2, 2, 2, 2220, 2052, 3, 2, 2, 2, 2220, 2117, 3, 2,
	2, 2, 2221, 117, 3, 2, 2, 2, 2222, 2223, 7, 128, 2, 2, 2223, 2224, 7, 65,
	2, 2, 2224, 2225, 7, 769, 2, 2, 2225, 2226, 5, 476, 239, 2, 2226, 2227,
	7, 29, 2, 2, 2227, 2228, 5, 476, 239, 2, 2228, 2242, 7, 770, 2, 2, 2229,
	2230, 7, 649, 2, 2, 2230, 2231, 7, 241, 2, 2, 2231, 2236, 5, 518, 260,
	2, 2232, 2233, 7, 769, 2, 2, 2233, 2234, 5, 478, 240, 2, 2234, 2235, 7,
	770, 2, 2, 2235, 2237, 3, 2, 2, 2, 2236, 2232, 3, 2, 2, 2, 2236, 2237,
	3, 2, 2, 2, 2237, 2243, 3, 2, 2, 2, 2238, 2239, 7, 651, 2, 2, 2239, 2243,
	7, 241, 2, 2, 2240, 2241, 7, 649, 2, 2, 2241, 2243, 7, 278, 2, 2, 2242,
	2229, 3, 2, 2, 2, 2242, 2238, 3, 2, 2, 2, 2242, 2240, 3, 2, 2, 2, 2243,
	2248, 3, 2, 2, 2, 2244, 2245, 7, 29, 2, 2, 2245, 2249, 7, 33, 2, 2, 2246,
	2247, 7, 29, 2, 2, 2247, 2249, 7, 267, 2, 2, 2248, 2244, 3, 2, 2, 2, 2248,
	2246, 3, 2, 2, 2, 2248, 2249, 3, 2, 2, 2, 2249, 119, 3, 2, 2, 2, 2250,
	2251, 7, 694, 2, 2, 2251, 2252, 7, 794, 2, 2, 2252, 2269, 5, 438, 220,
	2, 2253, 2254, 7, 695, 2, 2, 2254, 2255, 7, 794, 2, 2, 2255, 2269, 5, 438,
	220, 2, 2256, 2257, 7, 696, 2, 2, 2257, 2258, 7, 794, 2, 2, 2258, 2269,
	5, 438, 220, 2, 2259, 2260, 7, 697, 2, 2, 2260, 2261, 7, 794, 2, 2, 2261,
	2269, 5, 438, 220, 2, 2262, 2263, 7, 698, 2, 2, 2263, 2264, 7, 794, 2,
	2, 2264, 2269, 5, 438, 220, 2, 2265, 2266, 7, 780, 2, 2, 2266, 2267, 7,
	794, 2, 2, 2267, 2269, 5, 438, 220, 2, 2268, 2250, 3, 2, 2, 2, 2268, 2253,
	3, 2, 2, 2, 2268, 2256, 3, 2, 2, 2, 2268, 2259, 3, 2, 2, 2, 2268, 2262,
	3, 2, 2, 2, 2268, 2265, 3, 2, 2, 2, 2269, 121, 3, 2, 2, 2, 2270, 2275,
	5, 120, 61, 2, 2271, 2272, 7, 763, 2, 2, 2272, 2274, 5, 120, 61, 2, 2273,
	2271, 3, 2, 2, 2, 2274, 2277, 3, 2, 2, 2, 2275, 2273, 3, 2, 2, 2, 2275,
	2276, 3, 2, 2, 2, 2276, 123, 3, 2, 2, 2, 2277, 2275, 3, 2, 2, 2, 2278,
	2279, 7, 128, 2, 2, 2279, 2283, 7, 91, 2, 2, 2280, 2281, 7, 693, 2, 2,
	2281, 2282, 7, 368, 2, 2, 2282, 2284, 7, 214, 2, 2, 2283, 2280, 3, 2, 2,
	2, 2283, 2284, 3, 2, 2, 2, 2284, 2285, 3, 2, 2, 2, 2285, 2286, 5, 464,
	233, 2, 2286, 2287, 7, 769, 2, 2, 2287, 2288, 5, 122, 62, 2, 2288, 2289,
	7, 770, 2, 2, 2289, 2302, 3, 2, 2, 2, 2290, 2291, 7, 128, 2, 2, 2291, 2295,
	7, 91, 2, 2, 2292, 2293, 7, 693, 2, 2, 2293, 2294, 7, 368, 2, 2, 2294,
	2296, 7, 214, 2, 2, 2295, 2292, 3, 2, 2, 2, 2295, 2296, 3, 2, 2, 2, 2296,
	2297, 3, 2, 2, 2, 2297, 2298, 5, 464, 233, 2, 2298, 2299, 7, 239, 2, 2,
	2299, 2300, 5, 464, 233, 2, 2300, 2302, 3, 2, 2, 2, 2301, 2278, 3, 2, 2,
	2, 2301, 2290, 3, 2, 2, 2, 2302, 125, 3, 2, 2, 2, 2303, 2305, 7, 128, 2,
	2, 2304, 2306, 7, 158, 2, 2, 2305, 2304, 3, 2, 2, 2, 2305, 2306, 3, 2,
	2, 2, 2306, 2307, 3, 2, 2, 2, 2307, 2308, 7, 119, 2, 2, 2308, 2309, 5,
	518, 260, 2, 2309, 2310, 7, 230, 2, 2, 2310, 2311, 7, 779, 2, 2, 2311,
	2312, 7, 586, 2, 2, 2312, 2313, 7, 779, 2, 2, 2313, 2314, 7, 239, 2, 2,
	2314, 2315, 5, 464, 233, 2, 2315, 127, 3, 2, 2, 2, 2316, 2317, 7, 128,
	2, 2, 2317, 2318, 7, 149, 2, 2, 2318, 2320, 5, 464, 233, 2, 2319, 2321,
	7, 649, 2, 2, 2320, 2319, 3, 2, 2, 2, 2320, 2321, 3, 2, 2, 2, 2321, 2325,
	3, 2, 2, 2, 2322, 2323, 7, 406, 2, 2, 2323, 2324, 7, 794, 2, 2, 2324, 2326,
	5, 464, 233, 2, 2325, 2322, 3, 2, 2, 2, 2325, 2326, 3, 2, 2, 2, 2326, 2330,
	3, 2, 2, 2, 2327, 2328, 7, 575, 2, 2, 2328, 2329, 7, 794, 2, 2, 2329, 2331,
	5, 464, 233, 2, 2330, 2327, 3, 2, 2, 2, 2330, 2331, 3, 2, 2, 2, 2331, 2335,
	3, 2, 2, 2, 2332, 2333, 7, 199, 2, 2, 2333, 2334, 7, 794, 2, 2, 2334, 2336,
	5, 464, 233, 2, 2335, 2332, 3, 2, 2, 2, 2335, 2336, 3, 2, 2, 2, 2336, 2340,
	3, 2, 2, 2, 2337, 2338, 7, 695, 2, 2, 2338, 2339, 7, 794, 2, 2, 2339, 2341,
	5, 464, 233, 2, 2340, 2337, 3, 2, 2, 2, 2340, 2341, 3, 2, 2, 2, 2341, 2345,
	3, 2, 2, 2, 2342, 2343, 7, 696, 2, 2, 2343, 2344, 7, 794, 2, 2, 2344, 2346,
	5, 464, 233, 2, 2345, 2342, 3, 2, 2, 2, 2345, 2346, 3, 2, 2, 2, 2346, 2350,
	3, 2, 2, 2, 2347, 2348, 7, 573, 2, 2, 2348, 2349, 7, 794, 2, 2, 2349, 2351,
	5, 464, 233, 2, 2350, 2347, 3, 2, 2, 2, 2350, 2351, 3, 2, 2, 2, 2351, 2355,
	3, 2, 2, 2, 2352, 2353, 7, 699, 2, 2, 2353, 2354, 7, 794, 2, 2, 2354, 2356,
	5, 464, 233, 2, 2355, 2352, 3, 2, 2, 2, 2355, 2356, 3, 2, 2, 2, 2356, 2361,
	3, 2, 2, 2, 2357, 2358, 7, 109, 2, 2, 2358, 2359, 7, 313, 2, 2, 2359, 2360,
	7, 794, 2, 2, 2360, 2362, 7, 776, 2, 2, 2361, 2357, 3, 2, 2, 2, 2361, 2362,
	3, 2, 2, 2, 2362, 2366, 3, 2, 2, 2, 2363, 2364, 7, 700, 2, 2, 2364, 2365,
	7, 794, 2, 2, 2365, 2367, 7, 776, 2, 2, 2366, 2363, 3, 2, 2, 2, 2366, 2367,
	3, 2, 2, 2, 2367, 129, 3, 2, 2, 2, 2368, 2369, 7, 111, 2, 2, 2369, 2371,
	5, 464, 233, 2, 2370, 2368, 3, 2, 2, 2, 2370, 2371, 3, 2, 2, 2, 2371, 2380,
	3, 2, 2, 2, 2372, 2373, 7, 368, 2, 2, 2373, 2381, 7, 373, 2, 2, 2374, 2381,
	7, 373, 2, 2, 2375, 2376, 7, 80, 2, 2, 2376, 2377, 7, 769, 2, 2, 2377,
	2378, 5, 438, 220, 2, 2378, 2379, 7, 770, 2, 2, 2379, 2381, 3, 2, 2, 2,
	2380, 2372, 3, 2, 2, 2, 2380, 2374, 3, 2, 2, 2, 2380, 2375, 3, 2, 2, 2,
	2381, 131, 3, 2, 2, 2, 2382, 2383, 7, 128, 2, 2, 2383, 2384, 7, 189, 2,
	2, 2384, 2386, 5, 464, 233, 2, 2385, 2387, 7, 29, 2, 2, 2386, 2385, 3,
	2, 2, 2, 2386, 2387, 3, 2, 2, 2, 2387, 2388, 3, 2, 2, 2, 2388, 2396, 5,
	476, 239, 2, 2389, 2390, 7, 90, 2, 2, 2390, 2395, 5, 464, 233, 2, 2391,
	2392, 7, 158, 2, 2, 2392, 2395, 5, 438, 220, 2, 2393, 2395, 5, 130, 66,
	2, 2394, 2389, 3, 2, 2, 2, 2394, 2391, 3, 2, 2, 2, 2394, 2393, 3, 2, 2,
	2, 2395, 2398, 3, 2, 2, 2, 2396, 2394, 3, 2, 2, 2, 2396, 2397, 3, 2, 2,
	2, 2397, 133, 3, 2, 2, 2, 2398, 2396, 3, 2, 2, 2, 2399, 2400, 5, 518, 260,
	2, 2400, 2401, 7, 268, 2, 2, 2401, 2402, 7, 769, 2, 2, 2402, 2407, 7, 779,
	2, 2, 2403, 2404, 7, 763, 2, 2, 2404, 2406, 7, 779, 2, 2, 2405, 2403, 3,
	2, 2, 2, 2406, 2409, 3, 2, 2, 2, 2407, 2405, 3, 2, 2, 2, 2407, 2408, 3,
	2, 2, 2, 2408, 2410, 3, 2, 2, 2, 2409, 2407, 3, 2, 2, 2, 2410, 2415, 7,
	770, 2, 2, 2411, 2412, 7, 25, 2, 2, 2412, 2414, 5, 134, 68, 2, 2413, 2411,
	3, 2, 2, 2, 2414, 2417, 3, 2, 2, 2, 2415, 2413, 3, 2, 2, 2, 2415, 2416,
	3, 2, 2, 2, 2416, 135, 3, 2, 2, 2, 2417, 2415, 3, 2, 2, 2, 2418, 2419,
	7, 128, 2, 2, 2419, 2420, 7, 701, 2, 2, 2420, 2421, 7, 599, 2, 2, 2421,
	2422, 5, 518, 260, 2, 2422, 2423, 7, 387, 2, 2, 2423, 2426, 5, 518, 260,
	2, 2424, 2425, 7, 644, 2, 2, 2425, 2427, 5, 134, 68, 2, 2426, 2424, 3,
	2, 2, 2, 2426, 2427, 3, 2, 2, 2, 2427, 2428, 3, 2, 2, 2, 2428, 2429, 7,
	212, 2, 2, 2429, 2430, 7, 443, 2, 2, 2430, 2431, 5, 518, 260, 2, 2431,
	2432, 7, 769, 2, 2, 2432, 2433, 7, 770, 2, 2, 2433, 137, 3, 2, 2, 2, 2434,
	2435, 5, 464, 233, 2, 2435, 2440, 7, 779, 2, 2, 2436, 2437, 7, 763, 2,
	2, 2437, 2439, 5, 138, 70, 2, 2438, 2436, 3, 2, 2, 2, 2439, 2442, 3, 2,
	2, 2, 2440, 2438, 3, 2, 2, 2, 2440, 2441, 3, 2, 2, 2, 2441, 139, 3, 2,
	2, 2, 2442, 2440, 3, 2, 2, 2, 2443, 2444, 7, 128, 2, 2, 2444, 2445, 7,
	232, 2, 2, 2445, 2446, 7, 148, 2, 2, 2446, 2447, 7, 702, 2, 2, 2447, 2454,
	5, 518, 260, 2, 2448, 2449, 7, 255, 2, 2, 2449, 2453, 5, 518, 260, 2, 2450,
	2451, 7, 362, 2, 2, 2451, 2453, 7, 255, 2, 2, 2452, 2448, 3, 2, 2, 2, 2452,
	2450, 3, 2, 2, 2, 2453, 2456, 3, 2, 2, 2, 2454, 2452, 3, 2, 2, 2, 2454,
	2455, 3, 2, 2, 2, 2455, 2461, 3, 2, 2, 2, 2456, 2454, 3, 2, 2, 2, 2457,
	2458, 7, 632, 2, 2, 2458, 2462, 5, 518, 260, 2, 2459, 2460, 7, 362, 2,
	2, 2460, 2462, 7, 632, 2, 2, 2461, 2457, 3, 2, 2, 2, 2461, 2459, 3, 2,
	2, 2, 2461, 2462, 3, 2, 2, 2, 2462, 2468, 3, 2, 2, 2, 2463, 2464, 7, 393,
	2, 2, 2464, 2465, 7, 769, 2, 2, 2465, 2466, 5, 138, 70, 2, 2466, 2467,
	7, 770, 2, 2, 2467, 2469, 3, 2, 2, 2, 2468, 2463, 3, 2, 2, 2, 2468, 2469,
	3, 2, 2, 2, 2469, 141, 3, 2, 2, 2, 2470, 2471, 7, 128, 2, 2, 2471, 2472,
	7, 232, 2, 2, 2472, 2476, 7, 570, 2, 2, 2473, 2474, 7, 693, 2, 2, 2474,
	2475, 7, 368, 2, 2, 2475, 2477, 7, 214, 2, 2, 2476, 2473, 3, 2, 2, 2, 2476,
	2477, 3, 2, 2, 2, 2477, 2478, 3, 2, 2, 2, 2478, 2479, 5, 518, 260, 2, 2479,
	2480, 7, 769, 2, 2, 2480, 2481, 5, 518, 260, 2, 2481, 2487, 5, 518, 260,
	2, 2482, 2483, 7, 393, 2, 2, 2483, 2484, 7, 769, 2, 2, 2484, 2485, 5, 138,
	70, 2, 2485, 2486, 7, 770, 2, 2, 2486, 2488, 3, 2, 2, 2, 2487, 2482, 3,
	2, 2, 2, 2487, 2488, 3, 2, 2, 2, 2488, 2491, 3, 2, 2, 2, 2489, 2490, 7,
	90, 2, 2, 2490, 2492, 5, 120, 61, 2, 2491, 2489, 3, 2, 2, 2, 2491, 2492,
	3, 2, 2, 2, 2492, 2493, 3, 2, 2, 2, 2493, 2496, 7, 770, 2, 2, 2494, 2495,
	7, 274, 2, 2, 2495, 2497, 5, 466, 234, 2, 2496, 2494, 3, 2, 2, 2, 2496,
	2497, 3, 2, 2, 2, 2497, 2498, 3, 2, 2, 2, 2498, 2499, 7, 703, 2, 2, 2499,
	2505, 5, 464, 233, 2, 2500, 2501, 7, 393, 2, 2, 2501, 2502, 7, 769, 2,
	2, 2502, 2503, 5, 138, 70, 2, 2503, 2504, 7, 770, 2, 2, 2504, 2506, 3,
	2, 2, 2, 2505, 2500, 3, 2, 2, 2, 2505, 2506, 3, 2, 2, 2, 2506, 143, 3,
	2, 2, 2, 2507, 2510, 7, 128, 2, 2, 2508, 2509, 7, 394, 2, 2, 2509, 2511,
	7, 473, 2, 2, 2510, 2508, 3, 2, 2, 2, 2510, 2511, 3, 2, 2, 2, 2511, 2512,
	3, 2, 2, 2, 2512, 2513, 7, 241, 2, 2, 2513, 2514, 5, 464, 233, 2, 2514,
	145, 3, 2, 2, 2, 2515, 2516, 7, 128, 2, 2, 2516, 2517, 7, 253, 2, 2, 2517,
	2559, 5, 518, 260, 2, 2518, 2520, 7, 649, 2, 2, 2519, 2518, 3, 2, 2, 2,
	2519, 2520, 3, 2, 2, 2, 2520, 2555, 3, 2, 2, 2, 2521, 2556, 7, 658, 2,
	2, 2522, 2556, 7, 659, 2, 2, 2523, 2556, 7, 130, 2, 2, 2524, 2556, 7, 363,
	2, 2, 2525, 2556, 7, 660, 2, 2, 2526, 2556, 7, 661, 2, 2, 2527, 2556, 7,
	131, 2, 2, 2528, 2556, 7, 364, 2, 2, 2529, 2556, 7, 662, 2, 2, 2530, 2556,
	7, 663, 2, 2, 2531, 2556, 7, 664, 2, 2, 2532, 2556, 7, 665, 2, 2, 2533,
	2535, 9, 10, 2, 2, 2534, 2533, 3, 2, 2, 2, 2534, 2535, 3, 2, 2, 2, 2535,
	2536, 3, 2, 2, 2, 2536, 2537, 7, 420, 2, 2, 2537, 2556, 9, 11, 2, 2, 2538,
	2539, 7, 630, 2, 2, 2539, 2540, 7, 619, 2, 2, 2540, 2556, 7, 779, 2, 2,
	2541, 2542, 7, 268, 2, 2, 2542, 2543, 7, 488, 2, 2, 2543, 2556, 5, 466,
	234, 2, 2544, 2545, 7, 268, 2, 2, 2545, 2546, 7, 253, 2, 2, 2546, 2556,
	5, 466, 234, 2, 2547, 2548, 7, 488, 2, 2, 2548, 2556, 5, 466, 234, 2, 2549,
	2550, 7, 14, 2, 2, 2550, 2556, 5, 466, 234, 2, 2551, 2552, 7, 623, 2, 2,
	2552, 2556, 5, 466, 234, 2, 2553, 2554, 7, 567, 2, 2, 2554, 2556, 7, 776,
	2, 2, 2555, 2521, 3, 2, 2, 2, 2555, 2522, 3, 2, 2, 2, 2555, 2523, 3, 2,
	2, 2, 2555, 2524, 3, 2, 2, 2, 2555, 2525, 3, 2, 2, 2, 2555, 2526, 3, 2,
	2, 2, 2555, 2527, 3, 2, 2, 2, 2555, 2528, 3, 2, 2, 2, 2555, 2529, 3, 2,
	2, 2, 2555, 2530, 3, 2, 2, 2, 2555, 2531, 3, 2, 2, 2, 2555, 2532, 3, 2,
	2, 2, 2555, 2534, 3, 2, 2, 2, 2555, 2538, 3, 2, 2, 2, 2555, 2541, 3, 2,
	2, 2, 2555, 2544, 3, 2, 2, 2, 2555, 2547, 3, 2, 2, 2, 2555, 2549, 3, 2,
	2, 2, 2555, 2551, 3, 2, 2, 2, 2555, 2553, 3, 2, 2, 2, 2556, 2557, 3, 2,
	2, 2, 2557, 2555, 3, 2, 2, 2, 2557, 2558, 3, 2, 2, 2, 2558, 2560, 3, 2,
	2, 2, 2559, 2519, 3, 2, 2, 2, 2559, 2560, 3, 2, 2, 2, 2560, 147, 3, 2,
	2, 2, 2561, 2563, 7, 128, 2, 2, 2562, 2564, 7, 614, 2, 2, 2563, 2562, 3,
	2, 2, 2, 2563, 2564, 3, 2, 2, 2, 2564, 2565, 3, 2, 2, 2, 2565, 2567, 7,
	271, 2, 2, 2566, 2568, 7, 710, 2, 2, 2567, 2566, 3, 2, 2, 2, 2567, 2568,
	3, 2, 2, 2, 2568, 2575, 3, 2, 2, 2, 2569, 2570, 7, 693, 2, 2, 2570, 2571,
	7, 368, 2, 2, 2571, 2573, 7, 214, 2, 2, 2572, 2569, 3, 2, 2, 2, 2572, 2573,
	3, 2, 2, 2, 2573, 2574, 3, 2, 2, 2, 2574, 2576, 5, 518, 260, 2, 2575, 2572,
	3, 2, 2, 2, 2575, 2576, 3, 2, 2, 2, 2576, 2577, 3, 2, 2, 2, 2577, 2578,
	7, 387, 2, 2, 2578, 2581, 5, 518, 260, 2, 2579, 2580, 7, 628, 2, 2, 2580,
	2582, 5, 480, 241, 2, 2581, 2579, 3, 2, 2, 2, 2581, 2582, 3, 2, 2, 2, 2582,
	2585, 3, 2, 2, 2, 2583, 2584, 7, 573, 2, 2, 2584, 2586, 5, 518, 260, 2,
	2585, 2583, 3, 2, 2, 2, 2585, 2586, 3, 2, 2, 2, 2586, 2589, 3, 2, 2, 2,
	2587, 2588, 7, 646, 2, 2, 2588, 2590, 5, 496, 249, 2, 2589, 2587, 3, 2,
	2, 2, 2589, 2590, 3, 2, 2, 2, 2590, 149, 3, 2, 2, 2, 2591, 2594, 7, 128,
	2, 2, 2592, 2593, 7, 394, 2, 2, 2593, 2595, 7, 473, 2, 2, 2594, 2592, 3,
	2, 2, 2, 2594, 2595, 3, 2, 2, 2, 2595, 2597, 3, 2, 2, 2, 2596, 2598, 7,
	442, 2, 2, 2597, 2596, 3, 2, 2, 2, 2597, 2598, 3, 2, 2, 2, 2598, 2599,
	3, 2, 2, 2, 2599, 2600, 7, 302, 2, 2, 2600, 2625, 5, 518, 260, 2, 2601,
	2604, 7, 128, 2, 2, 2602, 2603, 7, 394, 2, 2, 2603, 2605, 7, 473, 2, 2,
	2604, 2602, 3, 2, 2, 2, 2604, 2605, 3, 2, 2, 2, 2605, 2607, 3, 2, 2, 2,
	2606, 2608, 7, 606, 2, 2, 2607, 2606, 3, 2, 2, 2, 2607, 2608, 3, 2, 2,
	2, 2608, 2610, 3, 2, 2, 2, 2609, 2611, 7, 442, 2, 2, 2610, 2609, 3, 2,
	2, 2, 2610, 2611, 3, 2, 2, 2, 2611, 2612, 3, 2, 2, 2, 2612, 2613, 7, 302,
	2, 2, 2613, 2614, 5, 518, 260, 2, 2614, 2615, 7, 255, 2, 2, 2615, 2618,
	5, 518, 260, 2, 2616, 2617, 7, 711, 2, 2, 2617, 2619, 5, 518, 260, 2, 2618,
	2616, 3, 2, 2, 2, 2618, 2619, 3, 2, 2, 2, 2619, 2622, 3, 2, 2, 2, 2620,
	2621, 7, 632, 2, 2, 2621, 2623, 5, 518, 260, 2, 2622, 2620, 3, 2, 2, 2,
	2622, 2623, 3, 2, 2, 2, 2623, 2625, 3, 2, 2, 2, 2624, 2591, 3, 2, 2, 2,
	2624, 2601, 3, 2, 2, 2, 2625, 151, 3, 2, 2, 2, 2626, 2627, 7, 128, 2, 2,
	2627, 2628, 7, 712, 2, 2, 2628, 2632, 7, 642, 2, 2, 2629, 2630, 7, 693,
	2, 2, 2630, 2631, 7, 368, 2, 2, 2631, 2633, 7, 214, 2, 2, 2632, 2629, 3,
	2, 2, 2, 2632, 2633, 3, 2, 2, 2, 2633, 2634, 3, 2, 2, 2, 2634, 2639, 5,
	518, 260, 2, 2635, 2636, 7, 769, 2, 2, 2636, 2637, 5, 468, 235, 2, 2637,
	2638, 7, 770, 2, 2, 2638, 2640, 3, 2, 2, 2, 2639, 2635, 3, 2, 2, 2, 2639,
	2640, 3, 2, 2, 2, 2640, 2642, 3, 2, 2, 2, 2641, 2643, 7, 649, 2, 2, 2642,
	2641, 3, 2, 2, 2, 2642, 2643, 3, 2, 2, 2, 2643, 2646, 3, 2, 2, 2, 2644,
	2645, 7, 573, 2, 2, 2645, 2647, 5, 518, 260, 2, 2646, 2644, 3, 2, 2, 2,
	2646, 2647, 3, 2, 2, 2, 2647, 2648, 3, 2, 2, 2, 2648, 2649, 7, 29, 2, 2,
	2649, 2655, 5, 350, 176, 2, 2650, 2652, 7, 649, 2, 2, 2651, 2653, 7, 362,
	2, 2, 2652, 2651, 3, 2, 2, 2, 2652, 2653, 3, 2, 2, 2, 2653, 2654, 3, 2,
	2, 2, 2654, 2656, 7, 148, 2, 2, 2655, 2650, 3, 2, 2, 2, 2655, 2656, 3,
	2, 2, 2, 2656, 153, 3, 2, 2, 2, 2657, 2658, 7, 128, 2, 2, 2658, 2659, 7,
	391, 2, 2, 2659, 2660, 5, 518, 260, 2, 2660, 2661, 7, 769, 2, 2, 2661,
	2662, 7, 443, 2, 2, 2662, 2663, 7, 794, 2, 2, 2663, 2668, 5, 518, 260,
	2, 2664, 2665, 7, 763, 2, 2, 2665, 2666, 7, 713, 2, 2, 2666, 2667, 7, 794,
	2, 2, 2667, 2669, 5, 464, 233, 2, 2668, 2664, 3, 2, 2, 2, 2668, 2669, 3,
	2, 2, 2, 2669, 2674, 3, 2, 2, 2, 2670, 2671, 7, 763, 2, 2, 2671, 2672,
	7, 714, 2, 2, 2672, 2673, 7, 794, 2, 2, 2673, 2675, 5, 464, 233, 2, 2674,
	2670, 3, 2, 2, 2, 2674, 2675, 3, 2, 2, 2, 2675, 2680, 3, 2, 2, 2, 2676,
	2677, 7, 763, 2, 2, 2677, 2678, 7, 715, 2, 2, 2678, 2679, 7, 794, 2, 2,
	2679, 2681, 5, 464, 233, 2, 2680, 2676, 3, 2, 2, 2, 2680, 2681, 3, 2, 2,
	2, 2681, 2686, 3, 2, 2, 2, 2682, 2683, 7, 763, 2, 2, 2683, 2684, 7, 716,
	2, 2, 2684, 2685, 7, 794, 2, 2, 2685, 2687, 5, 464, 233, 2, 2686, 2682,
	3, 2, 2, 2, 2686, 2687, 3, 2, 2, 2, 2687, 2692, 3, 2, 2, 2, 2688, 2689,
	7, 763, 2, 2, 2689, 2690, 7, 477, 2, 2, 2690, 2691, 7, 794, 2, 2, 2691,
	2693, 5, 464, 233, 2, 2692, 2688, 3, 2, 2, 2, 2692, 2693, 3, 2, 2, 2, 2693,
	2698, 3, 2, 2, 2, 2694, 2695, 7, 763, 2, 2, 2695, 2696, 7, 295, 2, 2, 2696,
	2697, 7, 794, 2, 2, 2697, 2699, 5, 464, 233, 2, 2698, 2694, 3, 2, 2, 2,
	2698, 2699, 3, 2, 2, 2, 2699, 2702, 3, 2, 2, 2, 2700, 2701, 7, 763, 2,
	2, 2701, 2703, 7, 717, 2, 2, 2702, 2700, 3, 2, 2, 2, 2702, 2703, 3, 2,
	2, 2, 2703, 2706, 3, 2, 2, 2, 2704, 2705, 7, 763, 2, 2, 2705, 2707, 7,
	718, 2, 2, 2706, 2704, 3, 2, 2, 2, 2706, 2707, 3, 2, 2, 2, 2707, 2708,
	3, 2, 2, 2, 2708, 2709, 7, 770, 2, 2, 2709, 155, 3, 2, 2, 2, 2710, 2711,
	7, 391, 2, 2, 2711, 2712, 7, 776, 2, 2, 2712, 2719, 5, 518, 260, 2, 2713,
	2714, 7, 769, 2, 2, 2714, 2715, 5, 518, 260, 2, 2715, 2716, 7, 763, 2,
	2, 2716, 2717, 5, 518, 260, 2, 2717, 2718, 7, 770, 2, 2, 2718, 2720, 3,
	2, 2, 2, 2719, 2713, 3, 2, 2, 2, 2719, 2720, 3, 2, 2, 2, 2720, 2741, 3,
	2, 2, 2, 2721, 2722, 7, 241, 2, 2, 2722, 2731, 7, 776, 2, 2, 2723, 2724,
	7, 769, 2, 2, 2724, 2727, 5, 518, 260, 2, 2725, 2726, 7, 763, 2, 2, 2726,
	2728, 5, 518, 260, 2, 2727, 2725, 3, 2, 2, 2, 2727, 2728, 3, 2, 2, 2, 2728,
	2729, 3, 2, 2, 2, 2729, 2730, 7, 770, 2, 2, 2730, 2732, 3, 2, 2, 2, 2731,
	2723, 3, 2, 2, 2, 2731, 2732, 3, 2, 2, 2, 2732, 2733, 3, 2, 2, 2, 2733,
	2734, 5, 518, 260, 2, 2734, 2735, 7, 769, 2, 2, 2735, 2736, 5, 478, 240,
	2, 2736, 2737, 7, 770, 2, 2, 2737, 2741, 3, 2, 2, 2, 2738, 2739, 7, 556,
	2, 2, 2739, 2741, 5, 518, 260, 2, 2740, 2710, 3, 2, 2, 2, 2740, 2721, 3,
	2, 2, 2, 2740, 2738, 3, 2, 2, 2, 2741, 157, 3, 2, 2, 2, 2742, 2743, 7,
	128, 2, 2, 2743, 2744, 7, 391, 2, 2, 2744, 2745, 7, 83, 2, 2, 2745, 2747,
	5, 518, 260, 2, 2746, 2748, 7, 158, 2, 2, 2747, 2746, 3, 2, 2, 2, 2747,
	2748, 3, 2, 2, 2, 2748, 2749, 3, 2, 2, 2, 2749, 2750, 7, 230, 2, 2, 2750,
	2751, 7, 607, 2, 2, 2751, 2752, 5, 518, 260, 2, 2752, 2753, 7, 628, 2,
	2, 2753, 2756, 5, 480, 241, 2, 2754, 2755, 7, 719, 2, 2, 2755, 2757, 5,
	518, 260, 2, 2756, 2754, 3, 2, 2, 2, 2756, 2757, 3, 2, 2, 2, 2757, 2758,
	3, 2, 2, 2, 2758, 2759, 7, 29, 2, 2, 2759, 2764, 5, 156, 79, 2, 2760, 2761,
	7, 763, 2, 2, 2761, 2763, 5, 156, 79, 2, 2762, 2760, 3, 2, 2, 2, 2763,
	2766, 3, 2, 2, 2, 2764, 2762, 3, 2, 2, 2, 2764, 2765, 3, 2, 2, 2, 2765,
	159, 3, 2, 2, 2, 2766, 2764, 3, 2, 2, 2, 2767, 2768, 7, 128, 2, 2, 2768,
	2769, 7, 391, 2, 2, 2769, 2770, 7, 719, 2, 2, 2770, 2771, 5, 518, 260,
	2, 2771, 2772, 7, 628, 2, 2, 2772, 2773, 5, 480, 241, 2, 2773, 161, 3,
	2, 2, 2, 2774, 2775, 7, 128, 2, 2, 2775, 2776, 7, 720, 2, 2, 2776, 2777,
	5, 518, 260, 2, 2777, 2778, 7, 387, 2, 2, 2778, 2781, 5, 518, 260, 2, 2779,
	2780, 7, 230, 2, 2, 2780, 2782, 9, 12, 2, 2, 2781, 2779, 3, 2, 2, 2, 2781,
	2782, 3, 2, 2, 2, 2782, 2785, 3, 2, 2, 2, 2783, 2784, 7, 586, 2, 2, 2784,
	2786, 5, 510, 256, 2, 2785, 2783, 3, 2, 2, 2, 2785, 2786, 3, 2, 2, 2, 2786,
	2792, 3, 2, 2, 2, 2787, 2788, 7, 628, 2, 2, 2788, 2789, 7, 769, 2, 2, 2789,
	2790, 5, 496, 249, 2, 2790, 2791, 7, 770, 2, 2, 2791, 2793, 3, 2, 2, 2,
	2792, 2787, 3, 2, 2, 2, 2792, 2793, 3, 2, 2, 2, 2793, 2800, 3, 2, 2, 2,
	2794, 2795, 7, 649, 2, 2, 2795, 2796, 7, 80, 2, 2, 2796, 2797, 7, 769,
	2, 2, 2797, 2798, 5, 496, 249, 2, 2798, 2799, 7, 770, 2, 2, 2799, 2801,
	3, 2, 2, 2, 2800, 2794, 3, 2, 2, 2, 2800, 2801, 3, 2, 2, 2, 2801, 163,
	3, 2, 2, 2, 2802, 2803, 7, 128, 2, 2, 2803, 2804, 7, 488, 2, 2, 2804, 2851,
	5, 510, 256, 2, 2805, 2807, 7, 649, 2, 2, 2806, 2805, 3, 2, 2, 2, 2806,
	2807, 3, 2, 2, 2, 2807, 2847, 3, 2, 2, 2, 2808, 2848, 7, 658, 2, 2, 2809,
	2848, 7, 659, 2, 2, 2810, 2848, 7, 130, 2, 2, 2811, 2848, 7, 363, 2, 2,
	2812, 2848, 7, 660, 2, 2, 2813, 2848, 7, 661, 2, 2, 2814, 2848, 7, 662,
	2, 2, 2815, 2848, 7, 663, 2, 2, 2816, 2848, 7, 664, 2, 2, 2817, 2848, 7,
	665, 2, 2, 2818, 2848, 7, 666, 2, 2, 2819, 2848, 7, 667, 2, 2, 2820, 2848,
	7, 668, 2, 2, 2821, 2848, 7, 669, 2, 2, 2822, 2823, 7, 109, 2, 2, 2823,
	2824, 7, 313, 2, 2, 2824, 2848, 7, 776, 2, 2, 2825, 2827, 7, 200, 2, 2,
	2826, 2825, 3, 2, 2, 2, 2826, 2827, 3, 2, 2, 2, 2827, 2828, 3, 2, 2, 2,
	2828, 2829, 7, 420, 2, 2, 2829, 2848, 9, 11, 2, 2, 2830, 2831, 7, 630,
	2, 2, 2831, 2832, 7, 619, 2, 2, 2832, 2848, 7, 779, 2, 2, 2833, 2834, 7,
	268, 2, 2, 2834, 2835, 7, 488, 2, 2, 2835, 2848, 5, 466, 234, 2, 2836,
	2837, 7, 268, 2, 2, 2837, 2838, 7, 253, 2, 2, 2838, 2848, 5, 466, 234,
	2, 2839, 2840, 7, 488, 2, 2, 2840, 2848, 5, 466, 234, 2, 2841, 2842, 7,
	14, 2, 2, 2842, 2848, 5, 466, 234, 2, 2843, 2844, 7, 623, 2, 2, 2844, 2848,
	5, 466, 234, 2, 2845, 2846, 7, 567, 2, 2, 2846, 2848, 7, 776, 2, 2, 2847,
	2808, 3, 2, 2, 2, 2847, 2809, 3, 2, 2, 2, 2847, 2810, 3, 2, 2, 2, 2847,
	2811, 3, 2, 2, 2, 2847, 2812, 3, 2, 2, 2, 2847, 2813, 3, 2, 2, 2, 2847,
	2814, 3, 2, 2, 2, 2847, 2815, 3, 2, 2, 2, 2847, 2816, 3, 2, 2, 2, 2847,
	2817, 3, 2, 2, 2, 2847, 2818, 3, 2, 2, 2, 2847, 2819, 3, 2, 2, 2, 2847,
	2820, 3, 2, 2, 2, 2847, 2821, 3, 2, 2, 2, 2847, 2822, 3, 2, 2, 2, 2847,
	2826, 3, 2, 2, 2, 2847, 2830, 3, 2, 2, 2, 2847, 2833, 3, 2, 2, 2, 2847,
	2836, 3, 2, 2, 2, 2847, 2839, 3, 2, 2, 2, 2847, 2841, 3, 2, 2, 2, 2847,
	2843, 3, 2, 2, 2, 2847, 2845, 3, 2, 2, 2, 2848, 2849, 3, 2, 2, 2, 2849,
	2847, 3, 2, 2, 2, 2849, 2850, 3, 2, 2, 2, 2850, 2852, 3, 2, 2, 2, 2851,
	2806, 3, 2, 2, 2, 2851, 2852, 3, 2, 2, 2, 2852, 165, 3, 2, 2, 2, 2853,
	2854, 9, 13, 2, 2, 2854, 167, 3, 2, 2, 2, 2855, 2858, 7, 128, 2, 2, 2856,
	2857, 7, 394, 2, 2, 2857, 2859, 7, 473, 2, 2, 2858, 2856, 3, 2, 2, 2, 2858,
	2859, 3, 2, 2, 2, 2859, 2860, 3, 2, 2, 2, 2860, 2861, 7, 499, 2, 2, 2861,
	2862, 5, 464, 233, 2, 2862, 2863, 7, 29, 2, 2, 2863, 2864, 7, 387, 2, 2,
	2864, 2865, 5, 166, 84, 2, 2865, 2866, 7, 586, 2, 2, 2866, 2869, 5, 518,
	260, 2, 2867, 2868, 7, 646, 2, 2, 2868, 2870, 5, 496, 249, 2, 2869, 2867,
	3, 2, 2, 2, 2869, 2870, 3, 2, 2, 2, 2870, 2871, 3, 2, 2, 2, 2871, 2873,
	7, 188, 2, 2, 2872, 2874, 9, 14, 2, 2, 2873, 2872, 3, 2, 2, 2, 2873, 2874,
	3, 2, 2, 2, 2874, 2877, 3, 2, 2, 2, 2875, 2878, 7, 369, 2, 2, 2876, 2878,
	5, 518, 260, 2, 2877, 2875, 3, 2, 2, 2, 2877, 2876, 3, 2, 2, 2, 2878, 169,
	3, 2, 2, 2, 2879, 2880, 7, 128, 2, 2, 2880, 2881, 7, 502, 2, 2, 2881, 2884,
	5, 518, 260, 2, 2882, 2883, 7, 39, 2, 2, 2883, 2885, 5, 510, 256, 2, 2884,
	2882, 3, 2, 2, 2, 2884, 2885, 3, 2, 2, 2, 2885, 2887, 3, 2, 2, 2, 2886,
	2888, 5, 520, 261, 2, 2887, 2886, 3, 2, 2, 2, 2887, 2888, 3, 2, 2, 2, 2888,
	2914, 3, 2, 2, 2, 2889, 2890, 7, 128, 2, 2, 2890, 2891, 7, 502, 2, 2, 2891,
	2892, 7, 39, 2, 2, 2892, 2894, 5, 510, 256, 2, 2893, 2895, 5, 520, 261,
	2, 2894, 2893, 3, 2, 2, 2, 2894, 2895, 3, 2, 2, 2, 2895, 2914, 3, 2, 2,
	2, 2896, 2897, 7, 128, 2, 2, 2897, 2898, 7, 502, 2, 2, 2898, 2899, 7, 693,
	2, 2, 2899, 2900, 7, 368, 2, 2, 2900, 2901, 7, 214, 2, 2, 2901, 2904, 5,
	518, 260, 2, 2902, 2903, 7, 39, 2, 2, 2903, 2905, 5, 510, 256, 2, 2904,
	2902, 3, 2, 2, 2, 2904, 2905, 3, 2, 2, 2, 2905, 2914, 3, 2, 2, 2, 2906,
	2907, 7, 128, 2, 2, 2907, 2908, 7, 502, 2, 2, 2908, 2909, 7, 693, 2, 2,
	2909, 2910, 7, 368, 2, 2, 2910, 2911, 7, 214, 2, 2, 2911, 2912, 7, 39,
	2, 2, 2912, 2914, 5, 510, 256, 2, 2913, 2879, 3, 2, 2, 2, 2913, 2889, 3,
	2, 2, 2, 2913, 2896, 3, 2, 2, 2, 2913, 2906, 3, 2, 2, 2, 2914, 171, 3,
	2, 2, 2, 2915, 2917, 7, 128, 2, 2, 2916, 2918, 9, 15, 2, 2, 2917, 2916,
	3, 2, 2, 2, 2917, 2918, 3, 2, 2, 2, 2918, 2919, 3, 2, 2, 2, 2919, 2923,
	7, 516, 2, 2, 2920, 2921, 7, 693, 2, 2, 2921, 2922, 7, 368, 2, 2, 2922,
	2924, 7, 214, 2, 2, 2923, 2920, 3, 2, 2, 2, 2923, 2924, 3, 2, 2, 2, 2924,
	2925, 3, 2, 2, 2, 2925, 2931, 5, 518, 260, 2, 2926, 2928, 7, 270, 2, 2,
	2927, 2929, 7, 56, 2, 2, 2928, 2927, 3, 2, 2, 2, 2928, 2929, 3, 2, 2, 2,
	2929, 2930, 3, 2, 2, 2, 2930, 2932, 7, 776, 2, 2, 2931, 2926, 3, 2, 2,
	2, 2931, 2932, 3, 2, 2, 2, 2932, 2937, 3, 2, 2, 2, 2933, 2934, 7, 342,
	2, 2, 2934, 2938, 7, 776, 2, 2, 2935, 2936, 7, 362, 2, 2, 2936, 2938, 7,
	342, 2, 2, 2937, 2933, 3, 2, 2, 2, 2937, 2935, 3, 2, 2, 2, 2937, 2938,
	3, 2, 2, 2, 2938, 2943, 3, 2, 2, 2, 2939, 2940, 7, 333, 2, 2, 2940, 2944,
	7, 776, 2, 2, 2941, 2942, 7, 362, 2, 2, 2942, 2944, 7, 333, 2, 2, 2943,
	2939, 3, 2, 2, 2, 2943, 2941, 3, 2, 2, 2, 2943, 2944, 3, 2, 2, 2, 2944,
	2950, 3, 2, 2, 2, 2945, 2947, 7, 547, 2, 2, 2946, 2948, 7, 649, 2, 2, 2947,
	2946, 3, 2, 2, 2, 2947, 2948, 3, 2, 2, 2, 2948, 2949, 3, 2, 2, 2, 2949,
	2951, 7, 776, 2, 2, 2950, 2945, 3, 2, 2, 2, 2950, 2951, 3, 2, 2, 2, 2951,
	2954, 3, 2, 2, 2, 2952, 2953, 7, 58, 2, 2, 2953, 2955, 7, 776, 2, 2, 2954,
	2952, 3, 2, 2, 2, 2954, 2955, 3, 2, 2, 2, 2955, 2960, 3, 2, 2, 2, 2956,
	2958, 7, 362, 2, 2, 2957, 2956, 3, 2, 2, 2, 2957, 2958, 3, 2, 2, 2, 2958,
	2959, 3, 2, 2, 2, 2959, 2961, 7, 147, 2, 2, 2960, 2957, 3, 2, 2, 2, 2960,
	2961, 3, 2, 2, 2, 2961, 2971, 3, 2, 2, 2, 2962, 2963, 7, 721, 2, 2, 2963,
	2969, 7, 56, 2, 2, 2964, 2965, 5, 518, 260, 2, 2965, 2966, 7, 778, 2, 2,
	2966, 2967, 5, 518, 260, 2, 2967, 2970, 3, 2, 2, 2, 2968, 2970, 7, 365,
	2, 2, 2969, 2964, 3, 2, 2, 2, 2969, 2968, 3, 2, 2, 2, 2970, 2972, 3, 2,
	2, 2, 2971, 2962, 3, 2, 2, 2, 2971, 2972, 3, 2, 2, 2, 2972, 173, 3, 2,
	2, 2, 2973, 2974, 5, 522, 262, 2, 2974, 175, 3, 2, 2, 2, 2975, 2976, 5,
	522, 262, 2, 2976, 177, 3, 2, 2, 2, 2977, 2978, 5, 522, 262, 2, 2978, 179,
	3, 2, 2, 2, 2979, 2980, 7, 128, 2, 2, 2980, 2984, 7, 570, 2, 2, 2981, 2982,
	7, 693, 2, 2, 2982, 2983, 7, 368, 2, 2, 2983, 2985, 7, 214, 2, 2, 2984,
	2981, 3, 2, 2, 2, 2984, 2985, 3, 2, 2, 2, 2985, 2986, 3, 2, 2, 2, 2986,
	2987, 5, 474, 238, 2, 2987, 2988, 5, 182, 92, 2, 2988, 181, 3, 2, 2, 2,
	2989, 2990, 7, 769, 2, 2, 2990, 2995, 5, 184, 93, 2, 2991, 2992, 7, 763,
	2, 2, 2992, 2994, 5, 184, 93, 2, 2993, 2991, 3, 2, 2, 2, 2994, 2997, 3,
	2, 2, 2, 2995, 2993, 3, 2, 2, 2, 2995, 2996, 3, 2, 2, 2, 2996, 2998, 3,
	2, 2, 2, 2997, 2995, 3, 2, 2, 2, 2998, 2999, 7, 770, 2, 2, 2999, 183, 3,
	2, 2, 2, 3000, 3001, 5, 532, 267, 2, 3001, 3002, 5, 476, 239, 2, 3002,
	3005, 3, 2, 2, 2, 3003, 3005, 5, 508, 255, 2, 3004, 3000, 3, 2, 2, 2, 3004,
	3003, 3, 2, 2, 2, 3005, 185, 3, 2, 2, 2, 3006, 3007, 5, 522, 262, 2, 3007,
	187, 3, 2, 2, 2, 3008, 3009, 5, 522, 262, 2, 3009, 189, 3, 2, 2, 2, 3010,
	3011, 5, 522, 262, 2, 3011, 191, 3, 2, 2, 2, 3012, 3013, 5, 522, 262, 2,
	3013, 193, 3, 2, 2, 2, 3014, 3015, 5, 522, 262, 2, 3015, 195, 3, 2, 2,
	2, 3016, 3017, 5, 522, 262, 2, 3017, 197, 3, 2, 2, 2, 3018, 3019, 5, 522,
	262, 2, 3019, 199, 3, 2, 2, 2, 3020, 3021, 5, 522, 262, 2, 3021, 201, 3,
	2, 2, 2, 3022, 3023, 5, 522, 262, 2, 3023, 203, 3, 2, 2, 2, 3024, 3025,
	5, 522, 262, 2, 3025, 205, 3, 2, 2, 2, 3026, 3027, 5, 522, 262, 2, 3027,
	207, 3, 2, 2, 2, 3028, 3031, 7, 128, 2, 2, 3029, 3030, 7, 394, 2, 2, 3030,
	3032, 7, 473, 2, 2, 3031, 3029, 3, 2, 2, 2, 3031, 3032, 3, 2, 2, 2, 3032,
	3034, 3, 2, 2, 2, 3033, 3035, 9, 15, 2, 2, 3034, 3033, 3, 2, 2, 2, 3034,
	3035, 3, 2, 2, 2, 3035, 3037, 3, 2, 2, 2, 3036, 3038, 7, 454, 2, 2, 3037,
	3036, 3, 2, 2, 2, 3037, 3038, 3, 2, 2, 2, 3038, 3039, 3, 2, 2, 2, 3039,
	3040, 7, 642, 2, 2, 3040, 3045, 5, 464, 233, 2, 3041, 3042, 7, 769, 2,
	2, 3042, 3043, 5, 466, 234, 2, 3043, 3044, 7, 770, 2, 2, 3044, 3046, 3,
	2, 2, 2, 3045, 3041, 3, 2, 2, 2, 3045, 3046, 3, 2, 2, 2, 3046, 3052, 3,
	2, 2, 2, 3047, 3048, 7, 649, 2, 2, 3048, 3049, 7, 769, 2, 2, 3049, 3050,
	5, 472, 237, 2, 3050, 3051, 7, 770, 2, 2, 3051, 3053, 3, 2, 2, 2, 3052,
	3047, 3, 2, 2, 2, 3052, 3053, 3, 2, 2, 2, 3053, 3054, 3, 2, 2, 2, 3054,
	3057, 7, 29, 2, 2, 3055, 3058, 5, 350, 176, 2, 3056, 3058, 5, 386, 194,
	2, 3057, 3055, 3, 2, 2, 2, 3057, 3056, 3, 2, 2, 2, 3058, 3065, 3, 2, 2,
	2, 3059, 3061, 7, 649, 2, 2, 3060, 3062, 9, 16, 2, 2, 3061, 3060, 3, 2,
	2, 2, 3061, 3062, 3, 2, 2, 2, 3062, 3063, 3, 2, 2, 2, 3063, 3064, 7, 80,
	2, 2, 3064, 3066, 7, 392, 2, 2, 3065, 3059, 3, 2, 2, 2, 3065, 3066, 3,
	2, 2, 2, 3066, 209, 3, 2, 2, 2, 3067, 3068, 5, 522, 262, 2, 3068, 211,
	3, 2, 2, 2, 3069, 3070, 5, 522, 262, 2, 3070, 213, 3, 2, 2, 2, 3071, 3073,
	5, 354, 178, 2, 3072, 3071, 3, 2, 2, 2, 3072, 3073, 3, 2, 2, 2, 3073, 3074,
	3, 2, 2, 2, 3074, 3075, 7, 166, 2, 2, 3075, 3077, 7, 239, 2, 2, 3076, 3078,
	7, 388, 2, 2, 3077, 3076, 3, 2, 2, 2, 3077, 3078, 3, 2, 2, 2, 3078, 3079,
	3, 2, 2, 2, 3079, 3081, 5, 474, 238, 2, 3080, 3082, 7, 768, 2, 2, 3081,
	3080, 3, 2, 2, 2, 3081, 3082, 3, 2, 2, 2, 3082, 3087, 3, 2, 2, 2, 3083,
	3085, 7, 29, 2, 2, 3084, 3083, 3, 2, 2, 2, 3084, 3085, 3, 2, 2, 2, 3085,
	3086, 3, 2, 2, 2, 3086, 3088, 5, 528, 265, 2, 3087, 3084, 3, 2, 2, 2, 3087,
	3088, 3, 2, 2, 2, 3088, 3091, 3, 2, 2, 2, 3089, 3090, 7, 628, 2, 2, 3090,
	3092, 5, 468, 235, 2, 3091, 3089, 3, 2, 2, 2, 3091, 3092, 3, 2, 2, 2, 3092,
	3098, 3, 2, 2, 2, 3093, 3099, 5, 392, 197, 2, 3094, 3095, 7, 646, 2, 2,
	3095, 3096, 7, 136, 2, 2, 3096, 3097, 7, 382, 2, 2, 3097, 3099, 5, 518,
	260, 2, 3098, 3093, 3, 2, 2, 2, 3098, 3094, 3, 2, 2, 2, 3098, 3099, 3,
	2, 2, 2, 3099, 3101, 3, 2, 2, 2, 3100, 3102, 5, 436, 219, 2, 3101, 3100,
	3, 2, 2, 2, 3101, 3102, 3, 2, 2, 2, 3102, 215, 3, 2, 2, 2, 3103, 3104,
	7, 184, 2, 2, 3104, 3105, 9, 17, 2, 2, 3105, 217, 3, 2, 2, 2, 3106, 3148,
	5, 220, 111, 2, 3107, 3148, 5, 222, 112, 2, 3108, 3148, 5, 224, 113, 2,
	3109, 3148, 5, 226, 114, 2, 3110, 3148, 5, 228, 115, 2, 3111, 3148, 5,
	230, 116, 2, 3112, 3148, 5, 232, 117, 2, 3113, 3148, 5, 234, 118, 2, 3114,
	3148, 5, 236, 119, 2, 3115, 3148, 5, 238, 120, 2, 3116, 3148, 5, 240, 121,
	2, 3117, 3148, 5, 242, 122, 2, 3118, 3148, 5, 244, 123, 2, 3119, 3148,
	5, 246, 124, 2, 3120, 3148, 5, 248, 125, 2, 3121, 3148, 5, 250, 126, 2,
	3122, 3148, 5, 252, 127, 2, 3123, 3148, 5, 254, 128, 2, 3124, 3148, 5,
	256, 129, 2, 3125, 3148, 5, 258, 130, 2, 3126, 3148, 5, 260, 131, 2, 3127,
	3148, 5, 262, 132, 2, 3128, 3148, 5, 264, 133, 2, 3129, 3148, 5, 266, 134,
	2, 3130, 3148, 5, 268, 135, 2, 3131, 3148, 5, 270, 136, 2, 3132, 3148,
	5, 272, 137, 2, 3133, 3148, 5, 274, 138, 2, 3134, 3148, 5, 276, 139, 2,
	3135, 3148, 5, 278, 140, 2, 3136, 3148, 5, 280, 141, 2, 3137, 3148, 5,
	282, 142, 2, 3138, 3148, 5, 284, 143, 2, 3139, 3148, 5, 286, 144, 2, 3140,
	3148, 5, 288, 145, 2, 3141, 3148, 5, 290, 146, 2, 3142, 3148, 5, 292, 147,
	2, 3143, 3148, 5, 294, 148, 2, 3144, 3148, 5, 296, 149, 2, 3145, 3148,
	5, 298, 150, 2, 3146, 3148, 5, 300, 151, 2, 3147, 3106, 3, 2, 2, 2, 3147,
	3107, 3, 2, 2, 2, 3147, 3108, 3, 2, 2, 2, 3147, 3109, 3, 2, 2, 2, 3147,
	3110, 3, 2, 2, 2, 3147, 3111, 3, 2, 2, 2, 3147, 3112, 3, 2, 2, 2, 3147,
	3113, 3, 2, 2, 2, 3147, 3114, 3, 2, 2, 2, 3147, 3115, 3, 2, 2, 2, 3147,
	3116, 3, 2, 2, 2, 3147, 3117, 3, 2, 2, 2, 3147, 3118, 3, 2, 2, 2, 3147,
	3119, 3, 2, 2, 2, 3147, 3120, 3, 2, 2, 2, 3147, 3121, 3, 2, 2, 2, 3147,
	3122, 3, 2, 2, 2, 3147, 3123, 3, 2, 2, 2, 3147, 3124, 3, 2, 2, 2, 3147,
	3125, 3, 2, 2, 2, 3147, 3126, 3, 2, 2, 2, 3147, 3127, 3, 2, 2, 2, 3147,
	3128, 3, 2, 2, 2, 3147, 3129, 3, 2, 2, 2, 3147, 3130, 3, 2, 2, 2, 3147,
	3131, 3, 2, 2, 2, 3147, 3132, 3, 2, 2, 2, 3147, 3133, 3, 2, 2, 2, 3147,
	3134, 3, 2, 2, 2, 3147, 3135, 3, 2, 2, 2, 3147, 3136, 3, 2, 2, 2, 3147,
	3137, 3, 2, 2, 2, 3147, 3138, 3, 2, 2, 2, 3147, 3139, 3, 2, 2, 2, 3147,
	3140, 3, 2, 2, 2, 3147, 3141, 3, 2, 2, 2, 3147, 3142, 3, 2, 2, 2, 3147,
	3143, 3, 2, 2, 2, 3147, 3144, 3, 2, 2, 2, 3147, 3145, 3, 2, 2, 2, 3147,
	3146, 3, 2, 2, 2, 3148, 219, 3, 2, 2, 2, 3149, 3150, 7, 191, 2, 2, 3150,
	3151, 7, 10, 2, 2, 3151, 3154, 7, 339, 2, 2, 3152, 3153, 7, 693, 2, 2,
	3153, 3155, 7, 214, 2, 2, 3154, 3152, 3, 2, 2, 2, 3154, 3155, 3, 2, 2,
	2, 3155, 3156, 3, 2, 2, 2, 3156, 3158, 5, 518, 260, 2, 3157, 3159, 9, 3,
	2, 2, 3158, 3157, 3, 2, 2, 2, 3158, 3159, 3, 2, 2, 2, 3159, 221, 3, 2,
	2, 2, 3160, 3161, 7, 191, 2, 2, 3161, 3164, 7, 16, 2, 2, 3162, 3163, 7,
	693, 2, 2, 3163, 3165, 7, 214, 2, 2, 3164, 3162, 3, 2, 2, 2, 3164, 3165,
	3, 2, 2, 2, 3165, 3166, 3, 2, 2, 2, 3166, 3167, 5, 518, 260, 2, 3167, 3168,
	7, 769, 2, 2, 3168, 3169, 5, 498, 250, 2, 3169, 3170, 7, 770, 2, 2, 3170,
	223, 3, 2, 2, 2, 3171, 3172, 7, 191, 2, 2, 3172, 3175, 7, 65, 2, 2, 3173,
	3174, 7, 693, 2, 2, 3174, 3176, 7, 214, 2, 2, 3175, 3173, 3, 2, 2, 2, 3175,
	3176, 3, 2, 2, 2, 3176, 3177, 3, 2, 2, 2, 3177, 3178, 7, 769, 2, 2, 3178,
	3179, 5, 476, 239, 2, 3179, 3180, 7, 29, 2, 2, 3180, 3181, 5, 518, 260,
	2, 3181, 3183, 7, 770, 2, 2, 3182, 3184, 9, 3, 2, 2, 3183, 3182, 3, 2,
	2, 2, 3183, 3184, 3, 2, 2, 2, 3184, 225, 3, 2, 2, 2, 3185, 3186, 7, 191,
	2, 2, 3186, 3189, 7, 91, 2, 2, 3187, 3188, 7, 693, 2, 2, 3188, 3190, 7,
	214, 2, 2, 3189, 3187, 3, 2, 2, 2, 3189, 3190, 3, 2, 2, 2, 3190, 3191,
	3, 2, 2, 2, 3191, 3193, 5, 468, 235, 2, 3192, 3194, 9, 3, 2, 2, 3193, 3192,
	3, 2, 2, 2, 3193, 3194, 3, 2, 2, 2, 3194, 227, 3, 2, 2, 2, 3195, 3196,
	7, 191, 2, 2, 3196, 3199, 7, 119, 2, 2, 3197, 3198, 7, 693, 2, 2, 3198,
	3200, 7, 214, 2, 2, 3199, 3197, 3, 2, 2, 2, 3199, 3200, 3, 2, 2, 2, 3200,
	3201, 3, 2, 2, 2, 3201, 3203, 5, 518, 260, 2, 3202, 3204, 9, 3, 2, 2, 3203,
	3202, 3, 2, 2, 2, 3203, 3204, 3, 2, 2, 2, 3204, 229, 3, 2, 2, 2, 3205,
	3206, 7, 191, 2, 2, 3206, 3209, 7, 149, 2, 2, 3207, 3208, 7, 693, 2, 2,
	3208, 3210, 7, 214, 2, 2, 3209, 3207, 3, 2, 2, 2, 3209, 3210, 3, 2, 2,
	2, 3210, 3211, 3, 2, 2, 2, 3211, 3212, 5, 518, 260, 2, 3212, 231, 3, 2,
	2, 2, 3213, 3214, 7, 191, 2, 2, 3214, 3217, 7, 189, 2, 2, 3215, 3216, 7,
	693, 2, 2, 3216, 3218, 7, 214, 2, 2, 3217, 3215, 3, 2, 2, 2, 3217, 3218,
	3, 2, 2, 2, 3218, 3219, 3, 2, 2, 2, 3219, 3221, 5, 468, 235, 2, 3220, 3222,
	9, 3, 2, 2, 3221, 3220, 3, 2, 2, 2, 3221, 3222, 3, 2, 2, 2, 3222, 233,
	3, 2, 2, 2, 3223, 3224, 7, 191, 2, 2, 3224, 3225, 7, 701, 2, 2, 3225, 3228,
	7, 599, 2, 2, 3226, 3227, 7, 693, 2, 2, 3227, 3229, 7, 214, 2, 2, 3228,
	3226, 3, 2, 2, 2, 3228, 3229, 3, 2, 2, 2, 3229, 3230, 3, 2, 2, 2, 3230,
	3232, 5, 518, 260, 2, 3231, 3233, 9, 3, 2, 2, 3232, 3231, 3, 2, 2, 2, 3232,
	3233, 3, 2, 2, 2, 3233, 235, 3, 2, 2, 2, 3234, 3235, 7, 191, 2, 2, 3235,
	3238, 7, 218, 2, 2, 3236, 3237, 7, 693, 2, 2, 3237, 3239, 7, 214, 2, 2,
	3238, 3236, 3, 2, 2, 2, 3238, 3239, 3, 2, 2, 2, 3239, 3240, 3, 2, 2, 2,
	3240, 3242, 5, 468, 235, 2, 3241, 3243, 9, 3, 2, 2, 3242, 3241, 3, 2, 2,
	2, 3242, 3243, 3, 2, 2, 2, 3243, 237, 3, 2, 2, 2, 3244, 3245, 7, 191, 2,
	2, 3245, 3246, 7, 232, 2, 2, 3246, 3247, 7, 148, 2, 2, 3247, 3250, 7, 702,
	2, 2, 3248, 3249, 7, 693, 2, 2, 3249, 3251, 7, 214, 2, 2, 3250, 3248, 3,
	2, 2, 2, 3250, 3251, 3, 2, 2, 2, 3251, 3252, 3, 2, 2, 2, 3252, 3254, 5,
	468, 235, 2, 3253, 3255, 9, 3, 2, 2, 3254, 3253, 3, 2, 2, 2, 3254, 3255,
	3, 2, 2, 2, 3255, 239, 3, 2, 2, 2, 3256, 3257, 7, 191, 2, 2, 3257, 3258,
	7, 232, 2, 2, 3258, 3261, 7, 570, 2, 2, 3259, 3260, 7, 693, 2, 2, 3260,
	3262, 7, 214, 2, 2, 3261, 3259, 3, 2, 2, 2, 3261, 3262, 3, 2, 2, 2, 3262,
	3263, 3, 2, 2, 2, 3263, 3265, 5, 468, 235, 2, 3264, 3266, 9, 3, 2, 2, 3265,
	3264, 3, 2, 2, 2, 3265, 3266, 3, 2, 2, 2, 3266, 241, 3, 2, 2, 2, 3267,
	3268, 7, 191, 2, 2, 3268, 3271, 7, 241, 2, 2, 3269, 3270, 7, 693, 2, 2,
	3270, 3272, 7, 214, 2, 2, 3271, 3269, 3, 2, 2, 2, 3271, 3272, 3, 2, 2,
	2, 3272, 3273, 3, 2, 2, 2, 3273, 3275, 5, 454, 228, 2, 3274, 3276, 9, 3,
	2, 2, 3275, 3274, 3, 2, 2, 2, 3275, 3276, 3, 2, 2, 2, 3276, 243, 3, 2,
	2, 2, 3277, 3278, 7, 191, 2, 2, 3278, 3281, 7, 253, 2, 2, 3279, 3280, 7,
	693, 2, 2, 3280, 3282, 7, 214, 2, 2, 3281, 3279, 3, 2, 2, 2, 3281, 3282,
	3, 2, 2, 2, 3282, 3283, 3, 2, 2, 2, 3283, 3284, 5, 468, 235, 2, 3284, 245,
	3, 2, 2, 2, 3285, 3286, 7, 191, 2, 2, 3286, 3288, 7, 271, 2, 2, 3287, 3289,
	7, 710, 2, 2, 3288, 3287, 3, 2, 2, 2, 3288, 3289, 3, 2, 2, 2, 3289, 3292,
	3, 2, 2, 2, 3290, 3291, 7, 693, 2, 2, 3291, 3293, 7, 214, 2, 2, 3292, 3290,
	3, 2, 2, 2, 3292, 3293, 3, 2, 2, 2, 3293, 3294, 3, 2, 2, 2, 3294, 3296,
	5, 466, 234, 2, 3295, 3297, 9, 3, 2, 2, 3296, 3295, 3, 2, 2, 2, 3296, 3297,
	3, 2, 2, 2, 3297, 247, 3, 2, 2, 2, 3298, 3300, 7, 191, 2, 2, 3299, 3301,
	7, 442, 2, 2, 3300, 3299, 3, 2, 2, 2, 3300, 3301, 3, 2, 2, 2, 3301, 3302,
	3, 2, 2, 2, 3302, 3305, 7, 302, 2, 2, 3303, 3304, 7, 693, 2, 2, 3304, 3306,
	7, 214, 2, 2, 3305, 3303, 3, 2, 2, 2, 3305, 3306, 3, 2, 2, 2, 3306, 3307,
	3, 2, 2, 2, 3307, 3309, 5, 518, 260, 2, 3308, 3310, 9, 3, 2, 2, 3309, 3308,
	3, 2, 2, 2, 3309, 3310, 3, 2, 2, 2, 3310, 249, 3, 2, 2, 2, 3311, 3312,
	7, 191, 2, 2, 3312, 3313, 7, 712, 2, 2, 3313, 3316, 7, 642, 2, 2, 3314,
	3315, 7, 693, 2, 2, 3315, 3317, 7, 214, 2, 2, 3316, 3314, 3, 2, 2, 2, 3316,
	3317, 3, 2, 2, 2, 3317, 3318, 3, 2, 2, 2, 3318, 3320, 5, 468, 235, 2, 3319,
	3321, 9, 3, 2, 2, 3320, 3319, 3, 2, 2, 2, 3320, 3321, 3, 2, 2, 2, 3321,
	251, 3, 2, 2, 2, 3322, 3323, 5, 522, 262, 2, 3323, 253, 3, 2, 2, 2, 3324,
	3325, 7, 191, 2, 2, 3325, 3326, 7, 391, 2, 2, 3326, 3329, 7, 83, 2, 2,
	3327, 3328, 7, 693, 2, 2, 3328, 3330, 7, 214, 2, 2, 3329, 3327, 3, 2, 2,
	2, 3329, 3330, 3, 2, 2, 2, 3330, 3331, 3, 2, 2, 2, 3331, 3332, 5, 518,
	260, 2, 3332, 3333, 7, 628, 2, 2, 3333, 3335, 5, 480, 241, 2, 3334, 3336,
	9, 3, 2, 2, 3335, 3334, 3, 2, 2, 2, 3335, 3336, 3, 2, 2, 2, 3336, 255,
	3, 2, 2, 2, 3337, 3338, 7, 191, 2, 2, 3338, 3339, 7, 391, 2, 2, 3339, 3342,
	7, 719, 2, 2, 3340, 3341, 7, 693, 2, 2, 3341, 3343, 7, 214, 2, 2, 3342,
	3340, 3, 2, 2, 2, 3342, 3343, 3, 2, 2, 2, 3343, 3344, 3, 2, 2, 2, 3344,
	3345, 5, 518, 260, 2, 3345, 3346, 7, 628, 2, 2, 3346, 3348, 5, 480, 241,
	2, 3347, 3349, 9, 3, 2, 2, 3348, 3347, 3, 2, 2, 2, 3348, 3349, 3, 2, 2,
	2, 3349, 257, 3, 2, 2, 2, 3350, 3351, 7, 191, 2, 2, 3351, 3352, 7, 721,
	2, 2, 3352, 3353, 7, 56, 2, 2, 3353, 3355, 5, 512, 257, 2, 3354, 3356,
	9, 3, 2, 2, 3355, 3354, 3, 2, 2, 2, 3355, 3356, 3, 2, 2, 2, 3356, 259,
	3, 2, 2, 2, 3357, 3358, 7, 191, 2, 2, 3358, 3361, 7, 720, 2, 2, 3359, 3360,
	7, 693, 2, 2, 3360, 3362, 7, 214, 2, 2, 3361, 3359, 3, 2, 2, 2, 3361, 3362,
	3, 2, 2, 2, 3362, 3363, 3, 2, 2, 2, 3363, 3364, 5, 518, 260, 2, 3364, 3365,
	7, 387, 2, 2, 3365, 3367, 5, 518, 260, 2, 3366, 3368, 9, 3, 2, 2, 3367,
	3366, 3, 2, 2, 2, 3367, 3368, 3, 2, 2, 2, 3368, 261, 3, 2, 2, 2, 3369,
	3370, 7, 191, 2, 2, 3370, 3373, 7, 445, 2, 2, 3371, 3372, 7, 693, 2, 2,
	3372, 3374, 7, 214, 2, 2, 3373, 3371, 3, 2, 2, 2, 3373, 3374, 3, 2, 2,
	2, 3374, 3375, 3, 2, 2, 2, 3375, 3377, 5, 468, 235, 2, 3376, 3378, 9, 3,
	2, 2, 3377, 3376, 3, 2, 2, 2, 3377, 3378, 3, 2, 2, 2, 3378, 263, 3, 2,
	2, 2, 3379, 3380, 7, 191, 2, 2, 3380, 3383, 7, 488, 2, 2, 3381, 3382, 7,
	693, 2, 2, 3382, 3384, 7, 214, 2, 2, 3383, 3381, 3, 2, 2, 2, 3383, 3384,
	3, 2, 2, 2, 3384, 3385, 3, 2, 2, 2, 3385, 3386, 5, 468, 235, 2, 3386, 265,
	3, 2, 2, 2, 3387, 3388, 7, 191, 2, 2, 3388, 3391, 7, 499, 2, 2, 3389, 3390,
	7, 693, 2, 2, 3390, 3392, 7, 214, 2, 2, 3391, 3389, 3, 2, 2, 2, 3391, 3392,
	3, 2, 2, 2, 3392, 3393, 3, 2, 2, 2, 3393, 3394, 5, 464, 233, 2, 3394, 3395,
	7, 387, 2, 2, 3395, 3397, 5, 518, 260, 2, 3396, 3398, 9, 3, 2, 2, 3397,
	3396, 3, 2, 2, 2, 3397, 3398, 3, 2, 2, 2, 3398, 267, 3, 2, 2, 2, 3399,
	3400, 7, 191, 2, 2, 3400, 3403, 7, 502, 2, 2, 3401, 3402, 7, 693, 2, 2,
	3402, 3404, 7, 214, 2, 2, 3403, 3401, 3, 2, 2, 2, 3403, 3404, 3, 2, 2,
	2, 3404, 3405, 3, 2, 2, 2, 3405, 3407, 5, 468, 235, 2, 3406, 3408, 9, 3,
	2, 2, 3407, 3406, 3, 2, 2, 2, 3407, 3408, 3, 2, 2, 2, 3408, 269, 3, 2,
	2, 2, 3409, 3410, 7, 191, 2, 2, 3410, 3413, 7, 516, 2, 2, 3411, 3412, 7,
	693, 2, 2, 3412, 3414, 7, 214, 2, 2, 3413, 3411, 3, 2, 2, 2, 3413, 3414,
	3, 2, 2, 2, 3414, 3415, 3, 2, 2, 2, 3415, 3417, 5, 468, 235, 2, 3416, 3418,
	9, 3, 2, 2, 3417, 3416, 3, 2, 2, 2, 3417, 3418, 3, 2, 2, 2, 3418, 271,
	3, 2, 2, 2, 3419, 3420, 7, 191, 2, 2, 3420, 3423, 7, 703, 2, 2, 3421, 3422,
	7, 693, 2, 2, 3422, 3424, 7, 214, 2, 2, 3423, 3421, 3, 2, 2, 2, 3423, 3424,
	3, 2, 2, 2, 3424, 3425, 3, 2, 2, 2, 3425, 3427, 5, 468, 235, 2, 3426, 3428,
	9, 3, 2, 2, 3427, 3426, 3, 2, 2, 2, 3427, 3428, 3, 2, 2, 2, 3428, 273,
	3, 2, 2, 2, 3429, 3430, 7, 191, 2, 2, 3430, 3433, 7, 551, 2, 2, 3431, 3432,
	7, 693, 2, 2, 3432, 3434, 7, 214, 2, 2, 3433, 3431, 3, 2, 2, 2, 3433, 3434,
	3, 2, 2, 2, 3434, 3435, 3, 2, 2, 2, 3435, 3436, 5, 468, 235, 2, 3436, 275,
	3, 2, 2, 2, 3437, 3438, 7, 191, 2, 2, 3438, 3441, 7, 563, 2, 2, 3439, 3440,
	7, 693, 2, 2, 3440, 3442, 7, 214, 2, 2, 3441, 3439, 3, 2, 2, 2, 3441, 3442,
	3, 2, 2, 2, 3442, 3443, 3, 2, 2, 2, 3443, 3445, 5, 518, 260, 2, 3444, 3446,
	9, 3, 2, 2, 3445, 3444, 3, 2, 2, 2, 3445, 3446, 3, 2, 2, 2, 3446, 277,
	3, 2, 2, 2, 3447, 3448, 7, 191, 2, 2, 3448, 3451, 7, 570, 2, 2, 3449, 3450,
	7, 693, 2, 2, 3450, 3452, 7, 214, 2, 2, 3451, 3449, 3, 2, 2, 2, 3451, 3452,
	3, 2, 2, 2, 3452, 3453, 3, 2, 2, 2, 3453, 3455, 5, 468, 235, 2, 3454, 3456,
	9, 3, 2, 2, 3455, 3454, 3, 2, 2, 2, 3455, 3456, 3, 2, 2, 2, 3456, 279,
	3, 2, 2, 2, 3457, 3458, 7, 191, 2, 2, 3458, 3461, 7, 573, 2, 2, 3459, 3460,
	7, 693, 2, 2, 3460, 3462, 7, 214, 2, 2, 3461, 3459, 3, 2, 2, 2, 3461, 3462,
	3, 2, 2, 2, 3462, 3463, 3, 2, 2, 2, 3463, 3464, 5, 518, 260, 2, 3464, 281,
	3, 2, 2, 2, 3465, 3466, 7, 191, 2, 2, 3466, 3467, 7, 754, 2, 2, 3467, 3468,
	7, 509, 2, 2, 3468, 3471, 7, 106, 2, 2, 3469, 3470, 7, 693, 2, 2, 3470,
	3472, 7, 214, 2, 2, 3471, 3469, 3, 2, 2, 2, 3471, 3472, 3, 2, 2, 2, 3472,
	3473, 3, 2, 2, 2, 3473, 3475, 5, 518, 260, 2, 3474, 3476, 9, 3, 2, 2, 3475,
	3474, 3, 2, 2, 2, 3475, 3476, 3, 2, 2, 2, 3476, 283, 3, 2, 2, 2, 3477,
	3478, 7, 191, 2, 2, 3478, 3479, 7, 754, 2, 2, 3479, 3480, 7, 509, 2, 2,
	3480, 3483, 7, 181, 2, 2, 3481, 3482, 7, 693, 2, 2, 3482, 3484, 7, 214,
	2, 2, 3483, 3481, 3, 2, 2, 2, 3483, 3484, 3, 2, 2, 2, 3484, 3485, 3, 2,
	2, 2, 3485, 3487, 5, 518, 260, 2, 3486, 3488, 9, 3, 2, 2, 3487, 3486, 3,
	2, 2, 2, 3487, 3488, 3, 2, 2, 2, 3488, 285, 3, 2, 2, 2, 3489, 3490, 7,
	191, 2, 2, 3490, 3491, 7, 754, 2, 2, 3491, 3492, 7, 509, 2, 2, 3492, 3495,
	7, 416, 2, 2, 3493, 3494, 7, 693, 2, 2, 3494, 3496, 7, 214, 2, 2, 3495,
	3493, 3, 2, 2, 2, 3495, 3496, 3, 2, 2, 2, 3496, 3497, 3, 2, 2, 2, 3497,
	3499, 5, 518, 260, 2, 3498, 3500, 9, 3, 2, 2, 3499, 3498, 3, 2, 2, 2, 3499,
	3500, 3, 2, 2, 2, 3500, 287, 3, 2, 2, 2, 3501, 3502, 7, 191, 2, 2, 3502,
	3503, 7, 754, 2, 2, 3503, 3504, 7, 509, 2, 2, 3504, 3507, 7, 575, 2, 2,
	3505, 3506, 7, 693, 2, 2, 3506, 3508, 7, 214, 2, 2, 3507, 3505, 3, 2, 2,
	2, 3507, 3508, 3, 2, 2, 2, 3508, 3509, 3, 2, 2, 2, 3509, 3511, 5, 518,
	260, 2, 3510, 3512, 9, 3, 2, 2, 3511, 3510, 3, 2, 2, 2, 3511, 3512, 3,
	2, 2, 2, 3512, 289, 3, 2, 2, 2, 3513, 3514, 7, 191, 2, 2, 3514, 3517, 7,
	594, 2, 2, 3515, 3516, 7, 693, 2, 2, 3516, 3518, 7, 214, 2, 2, 3517, 3515,
	3, 2, 2, 2, 3517, 3518, 3, 2, 2, 2, 3518, 3519, 3, 2, 2, 2, 3519, 3520,
	7, 230, 2, 2, 3520, 3521, 5, 518, 260, 2, 3521, 3522, 7, 302, 2, 2, 3522,
	3523, 5, 518, 260, 2, 3523, 3524, 9, 3, 2, 2, 3524, 291, 3, 2, 2, 2, 3525,
	3526, 7, 191, 2, 2, 3526, 3529, 7, 599, 2, 2, 3527, 3528, 7, 693, 2, 2,
	3528, 3530, 7, 214, 2, 2, 3529, 3527, 3, 2, 2, 2, 3529, 3530, 3, 2, 2,
	2, 3530, 3531, 3, 2, 2, 2, 3531, 3532, 5, 518, 260, 2, 3532, 3533, 7, 387,
	2, 2, 3533, 3535, 5, 518, 260, 2, 3534, 3536, 9, 3, 2, 2, 3535, 3534, 3,
	2, 2, 2, 3535, 3536, 3, 2, 2, 2, 3536, 293, 3, 2, 2, 2, 3537, 3538, 7,
	191, 2, 2, 3538, 3541, 7, 607, 2, 2, 3539, 3540, 7, 693, 2, 2, 3540, 3542,
	7, 214, 2, 2, 3541, 3539, 3, 2, 2, 2, 3541, 3542, 3, 2, 2, 2, 3542, 3543,
	3, 2, 2, 2, 3543, 3545, 5, 468, 235, 2, 3544, 3546, 9, 3, 2, 2, 3545, 3544,
	3, 2, 2, 2, 3545, 3546, 3, 2, 2, 2, 3546, 295, 3, 2, 2, 2, 3547, 3548,
	7, 191, 2, 2, 3548, 3551, 7, 623, 2, 2, 3549, 3550, 7, 693, 2, 2, 3550,
	3552, 7, 214, 2, 2, 3551, 3549, 3, 2, 2, 2, 3551, 3552, 3, 2, 2, 2, 3552,
	3553, 3, 2, 2, 2, 3553, 3554, 5, 468, 235, 2, 3554, 297, 3, 2, 2, 2, 3555,
	3556, 7, 191, 2, 2, 3556, 3557, 7, 623, 2, 2, 3557, 3560, 7, 328, 2, 2,
	3558, 3559, 7, 693, 2, 2, 3559, 3561, 7, 214, 2, 2, 3560, 3558, 3, 2, 2,
	2, 3560, 3561, 3, 2, 2, 2, 3561, 3562, 3, 2, 2, 2, 3562, 3568, 7, 230,
	2, 2, 3563, 3569, 5, 464, 233, 2, 3564, 3569, 7, 623, 2, 2, 3565, 3569,
	7, 144, 2, 2, 3566, 3569, 7, 521, 2, 2, 3567, 3569, 7, 444, 2, 2, 3568,
	3563, 3, 2, 2, 2, 3568, 3564, 3, 2, 2, 2, 3568, 3565, 3, 2, 2, 2, 3568,
	3566, 3, 2, 2, 2, 3568, 3567, 3, 2, 2, 2, 3569, 3570, 3, 2, 2, 2, 3570,
	3571, 7, 703, 2, 2, 3571, 3572, 5, 518, 260, 2, 3572, 299, 3, 2, 2, 2,
	3573, 3574, 7, 191, 2, 2, 3574, 3577, 7, 642, 2, 2, 3575, 3576, 7, 693,
	2, 2, 3576, 3578, 7, 214, 2, 2, 3577, 3575, 3, 2, 2, 2, 3577, 3578, 3,
	2, 2, 2, 3578, 3579, 3, 2, 2, 2, 3579, 3581, 5, 468, 235, 2, 3580, 3582,
	9, 3, 2, 2, 3581, 3580, 3, 2, 2, 2, 3581, 3582, 3, 2, 2, 2, 3582, 301,
	3, 2, 2, 2, 3583, 3584, 7, 212, 2, 2, 3584, 3586, 5, 518, 260, 2, 3585,
	3587, 5, 444, 223, 2, 3586, 3585, 3, 2, 2, 2, 3586, 3587, 3, 2, 2, 2, 3587,
	303, 3, 2, 2, 2, 3588, 3590, 7, 216, 2, 2, 3589, 3591, 7, 24, 2, 2, 3590,
	3589, 3, 2, 2, 2, 3590, 3591, 3, 2, 2, 2, 3591, 3593, 3, 2, 2, 2, 3592,
	3594, 7, 641, 2, 2, 3593, 3592, 3, 2, 2, 2, 3593, 3594, 3, 2, 2, 2, 3594,
	3608, 3, 2, 2, 2, 3595, 3596, 7, 216, 2, 2, 3596, 3597, 7, 769, 2, 2, 3597,
	3602, 5, 404, 203, 2, 3598, 3599, 7, 763, 2, 2, 3599, 3601, 5, 404, 203,
	2, 3600, 3598, 3, 2, 2, 2, 3601, 3604, 3, 2, 2, 2, 3602, 3600, 3, 2, 2,
	2, 3602, 3603, 3, 2, 2, 2, 3603, 3605, 3, 2, 2, 2, 3604, 3602, 3, 2, 2,
	2, 3605, 3606, 7, 770, 2, 2, 3606, 3608, 3, 2, 2, 2, 3607, 3588, 3, 2,
	2, 2, 3607, 3595, 3, 2, 2, 2, 3608, 3618, 3, 2, 2, 2, 3609, 3619, 5, 350,
	176, 2, 3610, 3619, 5, 312, 157, 2, 3611, 3619, 5, 378, 190, 2, 3612, 3619,
	5, 214, 108, 2, 3613, 3619, 5, 386, 194, 2, 3614, 3619, 5, 302, 152, 2,
	3615, 3619, 5, 212, 107, 2, 3616, 3619, 5, 186, 94, 2, 3617, 3619, 5, 152,
	77, 2, 3618, 3609, 3, 2, 2, 2, 3618, 3610, 3, 2, 2, 2, 3618, 3611, 3, 2,
	2, 2, 3618, 3612, 3, 2, 2, 2, 3618, 3613, 3, 2, 2, 2, 3618, 3614, 3, 2,
	2, 2, 3618, 3615, 3, 2, 2, 2, 3618, 3616, 3, 2, 2, 2, 3618, 3617, 3, 2,
	2, 2, 3619, 305, 3, 2, 2, 2, 3620, 3621, 5, 522, 262, 2, 3621, 307, 3,
	2, 2, 2, 3622, 3623, 5, 522, 262, 2, 3623, 309, 3, 2, 2, 2, 3624, 3625,
	5, 522, 262, 2, 3625, 311, 3, 2, 2, 2, 3626, 3628, 5, 354, 178, 2, 3627,
	3626, 3, 2, 2, 2, 3627, 3628, 3, 2, 2, 2, 3628, 3629, 3, 2, 2, 2, 3629,
	3630, 7, 281, 2, 2, 3630, 3631, 7, 290, 2, 2, 3631, 3634, 5, 474, 238,
	2, 3632, 3633, 7, 29, 2, 2, 3633, 3635, 5, 518, 260, 2, 3634, 3632, 3,
	2, 2, 2, 3634, 3635, 3, 2, 2, 2, 3635, 3640, 3, 2, 2, 2, 3636, 3637, 7,
	769, 2, 2, 3637, 3638, 5, 466, 234, 2, 3638, 3639, 7, 770, 2, 2, 3639,
	3641, 3, 2, 2, 2, 3640, 3636, 3, 2, 2, 2, 3640, 3641, 3, 2, 2, 2, 3641,
	3647, 3, 2, 2, 2, 3642, 3644, 7, 405, 2, 2, 3643, 3645, 9, 18, 2, 2, 3644,
	3643, 3, 2, 2, 2, 3644, 3645, 3, 2, 2, 2, 3645, 3646, 3, 2, 2, 2, 3646,
	3648, 7, 633, 2, 2, 3647, 3642, 3, 2, 2, 2, 3647, 3648, 3, 2, 2, 2, 3648,
	3653, 3, 2, 2, 2, 3649, 3650, 7, 158, 2, 2, 3650, 3654, 7, 634, 2, 2, 3651,
	3654, 5, 350, 176, 2, 3652, 3654, 5, 386, 194, 2, 3653, 3649, 3, 2, 2,
	2, 3653, 3651, 3, 2, 2, 2, 3653, 3652, 3, 2, 2, 2, 3654, 3682, 3, 2, 2,
	2, 3655, 3656, 7, 387, 2, 2, 3656, 3661, 7, 107, 2, 2, 3657, 3658, 7, 769,
	2, 2, 3658, 3659, 5, 526, 264, 2, 3659, 3660, 7, 770, 2, 2, 3660, 3662,
	3, 2, 2, 2, 3661, 3657, 3, 2, 2, 2, 3661, 3662, 3, 2, 2, 2, 3662, 3666,
	3, 2, 2, 2, 3663, 3664, 7, 387, 2, 2, 3664, 3665, 7, 111, 2, 2, 3665, 3667,
	5, 526, 264, 2, 3666, 3663, 3, 2, 2, 2, 3666, 3667, 3, 2, 2, 2, 3667, 3669,
	3, 2, 2, 2, 3668, 3670, 5, 392, 197, 2, 3669, 3668, 3, 2, 2, 2, 3669, 3670,
	3, 2, 2, 2, 3670, 3680, 3, 2, 2, 2, 3671, 3672, 7, 188, 2, 2, 3672, 3681,
	7, 369, 2, 2, 3673, 3674, 7, 188, 2, 2, 3674, 3675, 7, 620, 2, 2, 3675,
	3676, 7, 522, 2, 2, 3676, 3678, 5, 432, 217, 2, 3677, 3679, 5, 392, 197,
	2, 3678, 3677, 3, 2, 2, 2, 3678, 3679, 3, 2, 2, 2, 3679, 3681, 3, 2, 2,
	2, 3680, 3671, 3, 2, 2, 2, 3680, 3673, 3, 2, 2, 2, 3681, 3683, 3, 2, 2,
	2, 3682, 3655, 3, 2, 2, 2, 3682, 3683, 3, 2, 2, 2, 3683, 3685, 3, 2, 2,
	2, 3684, 3686, 5, 436, 219, 2, 3685, 3684, 3, 2, 2, 2, 3685, 3686, 3, 2,
	2, 2, 3686, 313, 3, 2, 2, 2, 3687, 3688, 7, 314, 2, 2, 3688, 3689, 5, 518,
	260, 2, 3689, 315, 3, 2, 2, 2, 3690, 3691, 5, 522, 262, 2, 3691, 317, 3,
	2, 2, 2, 3692, 3694, 7, 322, 2, 2, 3693, 3695, 7, 570, 2, 2, 3694, 3693,
	3, 2, 2, 2, 3694, 3695, 3, 2, 2, 2, 3695, 3697, 3, 2, 2, 2, 3696, 3698,
	7, 388, 2, 2, 3697, 3696, 3, 2, 2, 2, 3697, 3698, 3, 2, 2, 2, 3698, 3699,
	3, 2, 2, 2, 3699, 3701, 5, 464, 233, 2, 3700, 3702, 7, 768, 2, 2, 3701,
	3700, 3, 2, 2, 2, 3701, 3702, 3, 2, 2, 2, 3702, 3723, 3, 2, 2, 2, 3703,
	3720, 7, 268, 2, 2, 3704, 3705, 7, 10, 2, 2, 3705, 3721, 7, 525, 2, 2,
	3706, 3707, 7, 495, 2, 2, 3707, 3721, 7, 525, 2, 2, 3708, 3709, 7, 495,
	2, 2, 3709, 3721, 7, 210, 2, 2, 3710, 3711, 7, 525, 2, 2, 3711, 3712, 7,
	620, 2, 2, 3712, 3721, 7, 210, 2, 2, 3713, 3721, 7, 525, 2, 2, 3714, 3715,
	7, 525, 2, 2, 3715, 3716, 7, 495, 2, 2, 3716, 3721, 7, 210, 2, 2, 3717,
	3721, 7, 210, 2, 2, 3718, 3719, 7, 10, 2, 2, 3719, 3721, 7, 210, 2, 2,
	3720, 3704, 3, 2, 2, 2, 3720, 3706, 3, 2, 2, 2, 3720, 3708, 3, 2, 2, 2,
	3720, 3710, 3, 2, 2, 2, 3720, 3713, 3, 2, 2, 2, 3720, 3714, 3, 2, 2, 2,
	3720, 3717, 3, 2, 2, 2, 3720, 3718, 3, 2, 2, 2, 3721, 3722, 3, 2, 2, 2,
	3722, 3724, 7, 344, 2, 2, 3723, 3703, 3, 2, 2, 2, 3723, 3724, 3, 2, 2,
	2, 3724, 3726, 3, 2, 2, 2, 3725, 3727, 7, 372, 2, 2, 3726, 3725, 3, 2,
	2, 2, 3726, 3727, 3, 2, 2, 2, 3727, 319, 3, 2, 2, 2, 3728, 3752, 7, 350,
	2, 2, 3729, 3748, 7, 361, 2, 2, 3730, 3748, 7, 440, 2, 2, 3731, 3748, 7,
	226, 2, 2, 3732, 3748, 7, 304, 2, 2, 3733, 3734, 7, 9, 2, 2, 3734, 3748,
	7, 286, 2, 2, 3735, 3736, 7, 469, 2, 2, 3736, 3748, 7, 776, 2, 2, 3737,
	3748, 7, 776, 2, 2, 3738, 3748, 7, 18, 2, 2, 3739, 3741, 7, 235, 2, 2,
	3740, 3742, 9, 19, 2, 2, 3741, 3740, 3, 2, 2, 2, 3741, 3742, 3, 2, 2, 2,
	3742, 3748, 3, 2, 2, 2, 3743, 3745, 7, 41, 2, 2, 3744, 3746, 9, 19, 2,
	2, 3745, 3744, 3, 2, 2, 2, 3745, 3746, 3, 2, 2, 2, 3746, 3748, 3, 2, 2,
	2, 3747, 3729, 3, 2, 2, 2, 3747, 3730, 3, 2, 2, 2, 3747, 3731, 3, 2, 2,
	2, 3747, 3732, 3, 2, 2, 2, 3747, 3733, 3, 2, 2, 2, 3747, 3735, 3, 2, 2,
	2, 3747, 3737, 3, 2, 2, 2, 3747, 3738, 3, 2, 2, 2, 3747, 3739, 3, 2, 2,
	2, 3747, 3743, 3, 2, 2, 2, 3748, 3750, 3, 2, 2, 2, 3749, 3751, 9, 20, 2,
	2, 3750, 3749, 3, 2, 2, 2, 3750, 3751, 3, 2, 2, 2, 3751, 3753, 3, 2, 2,
	2, 3752, 3747, 3, 2, 2, 2, 3752, 3753, 3, 2, 2, 2, 3753, 3754, 3, 2, 2,
	2, 3754, 3755, 5, 464, 233, 2, 3755, 321, 3, 2, 2, 2, 3756, 3757, 7, 370,
	2, 2, 3757, 3760, 5, 464, 233, 2, 3758, 3759, 7, 763, 2, 2, 3759, 3761,
	7, 779, 2, 2, 3760, 3758, 3, 2, 2, 2, 3760, 3761, 3, 2, 2, 2, 3761, 323,
	3, 2, 2, 2, 3762, 3763, 7, 436, 2, 2, 3763, 3768, 5, 518, 260, 2, 3764,
	3765, 7, 769, 2, 2, 3765, 3766, 5, 478, 240, 2, 3766, 3767, 7, 770, 2,
	2, 3767, 3769, 3, 2, 2, 2, 3768, 3764, 3, 2, 2, 2, 3768, 3769, 3, 2, 2,
	2, 3769, 3770, 3, 2, 2, 2, 3770, 3776, 7, 29, 2, 2, 3771, 3777, 5, 350,
	176, 2, 3772, 3777, 5, 312, 157, 2, 3773, 3777, 5, 378, 190, 2, 3774, 3777,
	5, 214, 108, 2, 3775, 3777, 5, 386, 194, 2, 3776, 3771, 3, 2, 2, 2, 3776,
	3772, 3, 2, 2, 2, 3776, 3773, 3, 2, 2, 2, 3776, 3774, 3, 2, 2, 2, 3776,
	3775, 3, 2, 2, 2, 3777, 325, 3, 2, 2, 2, 3778, 3779, 7, 436, 2, 2, 3779,
	3780, 7, 590, 2, 2, 3780, 3781, 5, 464, 233, 2, 3781, 327, 3, 2, 2, 2,
	3782, 3783, 7, 452, 2, 2, 3783, 3784, 7, 721, 2, 2, 3784, 3788, 7, 56,
	2, 2, 3785, 3789, 5, 518, 260, 2, 3786, 3789, 7, 144, 2, 2, 3787, 3789,
	7, 521, 2, 2, 3788, 3785, 3, 2, 2, 2, 3788, 3786, 3, 2, 2, 2, 3788, 3787,
	3, 2, 2, 2, 3789, 3798, 3, 2, 2, 2, 3790, 3794, 7, 763, 2, 2, 3791, 3795,
	5, 518, 260, 2, 3792, 3795, 7, 144, 2, 2, 3793, 3795, 7, 521, 2, 2, 3794,
	3791, 3, 2, 2, 2, 3794, 3792, 3, 2, 2, 2, 3794, 3793, 3, 2, 2, 2, 3795,
	3797, 3, 2, 2, 2, 3796, 3790, 3, 2, 2, 2, 3797, 3800, 3, 2, 2, 2, 3798,
	3796, 3, 2, 2, 2, 3798, 3799, 3, 2, 2, 2, 3799, 3801, 3, 2, 2, 2, 3800,
	3798, 3, 2, 2, 2, 3801, 3805, 7, 586, 2, 2, 3802, 3806, 5, 518, 260, 2,
	3803, 3806, 7, 144, 2, 2, 3804, 3806, 7, 521, 2, 2, 3805, 3802, 3, 2, 2,
	2, 3805, 3803, 3, 2, 2, 2, 3805, 3804, 3, 2, 2, 2, 3806, 329, 3, 2, 2,
	2, 3807, 3808, 5, 522, 262, 2, 3808, 331, 3, 2, 2, 2, 3809, 3813, 7, 468,
	2, 2, 3810, 3811, 7, 769, 2, 2, 3811, 3812, 7, 641, 2, 2, 3812, 3814, 7,
	770, 2, 2, 3813, 3810, 3, 2, 2, 2, 3813, 3814, 3, 2, 2, 2, 3814, 3815,
	3, 2, 2, 2, 3815, 3816, 9, 21, 2, 2, 3816, 3817, 5, 518, 260, 2, 3817,
	333, 3, 2, 2, 2, 3818, 3820, 7, 470, 2, 2, 3819, 3821, 7, 500, 2, 2, 3820,
	3819, 3, 2, 2, 2, 3820, 3821, 3, 2, 2, 2, 3821, 3822, 3, 2, 2, 2, 3822,
	3823, 5, 518, 260, 2, 3823, 335, 3, 2, 2, 2, 3824, 3827, 7, 475, 2, 2,
	3825, 3828, 5, 518, 260, 2, 3826, 3828, 7, 18, 2, 2, 3827, 3825, 3, 2,
	2, 2, 3827, 3826, 3, 2, 2, 2, 3828, 337, 3, 2, 2, 2, 3829, 3830, 5, 522,
	262, 2, 3830, 339, 3, 2, 2, 2, 3831, 3833, 7, 489, 2, 2, 3832, 3834, 9,
	22, 2, 2, 3833, 3832, 3, 2, 2, 2, 3833, 3834, 3, 2, 2, 2, 3834, 341, 3,
	2, 2, 2, 3835, 3836, 7, 489, 2, 2, 3836, 3837, 7, 437, 2, 2, 3837, 3838,
	7, 776, 2, 2, 3838, 343, 3, 2, 2, 2, 3839, 3841, 7, 489, 2, 2, 3840, 3842,
	9, 22, 2, 2, 3841, 3840, 3, 2, 2, 2, 3841, 3842, 3, 2, 2, 2, 3842, 3843,
	3, 2, 2, 2, 3843, 3845, 7, 586, 2, 2, 3844, 3846, 7, 500, 2, 2, 3845, 3844,
	3, 2, 2, 2, 3845, 3846, 3, 2, 2, 2, 3846, 3847, 3, 2, 2, 2, 3847, 3848,
	5, 518, 260, 2, 3848, 345, 3, 2, 2, 2, 3849, 3850, 7, 500, 2, 2, 3850,
	3851, 5, 518, 260, 2, 3851, 347, 3, 2, 2, 2, 3852, 3853, 7, 512, 2, 2,
	3853, 3856, 7, 300, 2, 2, 3854, 3855, 7, 230, 2, 2, 3855, 3857, 5, 464,
	233, 2, 3856, 3854, 3, 2, 2, 2, 3856, 3857, 3, 2, 2, 2, 3857, 3858, 3,
	2, 2, 2, 3858, 3913, 7, 387, 2, 2, 3859, 3860, 7, 570, 2, 2, 3860, 3914,
	5, 518, 260, 2, 3861, 3862, 7, 96, 2, 2, 3862, 3863, 5, 518, 260, 2, 3863,
	3864, 7, 778, 2, 2, 3864, 3865, 5, 526, 264, 2, 3865, 3914, 3, 2, 2, 2,
	3866, 3867, 7, 16, 2, 2, 3867, 3868, 5, 518, 260, 2, 3868, 3869, 7, 769,
	2, 2, 3869, 3870, 5, 498, 250, 2, 3870, 3871, 7, 770, 2, 2, 3871, 3914,
	3, 2, 2, 2, 3872, 3873, 7, 149, 2, 2, 3873, 3914, 5, 518, 260, 2, 3874,
	3875, 7, 189, 2, 2, 3875, 3914, 5, 518, 260, 2, 3876, 3877, 7, 701, 2,
	2, 3877, 3878, 7, 599, 2, 2, 3878, 3914, 5, 518, 260, 2, 3879, 3880, 7,
	232, 2, 2, 3880, 3881, 7, 570, 2, 2, 3881, 3914, 5, 518, 260, 2, 3882,
	3883, 7, 241, 2, 2, 3883, 3884, 5, 518, 260, 2, 3884, 3885, 5, 452, 227,
	2, 3885, 3914, 3, 2, 2, 2, 3886, 3887, 7, 303, 2, 2, 3887, 3888, 7, 379,
	2, 2, 3888, 3914, 7, 776, 2, 2, 3889, 3890, 7, 712, 2, 2, 3890, 3891, 7,
	642, 2, 2, 3891, 3914, 5, 518, 260, 2, 3892, 3894, 7, 442, 2, 2, 3893,
	3892, 3, 2, 2, 2, 3893, 3894, 3, 2, 2, 2, 3894, 3895, 3, 2, 2, 2, 3895,
	3896, 7, 302, 2, 2, 3896, 3914, 5, 518, 260, 2, 3897, 3898, 7, 445, 2,
	2, 3898, 3914, 5, 518, 260, 2, 3899, 3900, 7, 488, 2, 2, 3900, 3914, 5,
	518, 260, 2, 3901, 3902, 7, 502, 2, 2, 3902, 3914, 5, 518, 260, 2, 3903,
	3904, 7, 516, 2, 2, 3904, 3914, 5, 518, 260, 2, 3905, 3906, 7, 563, 2,
	2, 3906, 3914, 5, 518, 260, 2, 3907, 3908, 7, 573, 2, 2, 3908, 3914, 5,
	518, 260, 2, 3909, 3910, 7, 607, 2, 2, 3910, 3914, 5, 518, 260, 2, 3911,
	3912, 7, 642, 2, 2, 3912, 3914, 5, 518, 260, 2, 3913, 3859, 3, 2, 2, 2,
	3913, 3861, 3, 2, 2, 2, 3913, 3866, 3, 2, 2, 2, 3913, 3872, 3, 2, 2, 2,
	3913, 3874, 3, 2, 2, 2, 3913, 3876, 3, 2, 2, 2, 3913, 3879, 3, 2, 2, 2,
	3913, 3882, 3, 2, 2, 2, 3913, 3886, 3, 2, 2, 2, 3913, 3889, 3, 2, 2, 2,
	3913, 3893, 3, 2, 2, 2, 3913, 3897, 3, 2, 2, 2, 3913, 3899, 3, 2, 2, 2,
	3913, 3901, 3, 2, 2, 2, 3913, 3903, 3, 2, 2, 2, 3913, 3905, 3, 2, 2, 2,
	3913, 3907, 3, 2, 2, 2, 3913, 3909, 3, 2, 2, 2, 3913, 3911, 3, 2, 2, 2,
	3914, 3915, 3, 2, 2, 2, 3915, 3916, 7, 292, 2, 2, 3916, 3917, 7, 779, 2,
	2, 3917, 349, 3, 2, 2, 2, 3918, 3920, 5, 354, 178, 2, 3919, 3918, 3, 2,
	2, 2, 3919, 3920, 3, 2, 2, 2, 3920, 3947, 3, 2, 2, 2, 3921, 3922, 7, 513,
	2, 2, 3922, 3924, 5, 388, 195, 2, 3923, 3925, 5, 390, 196, 2, 3924, 3923,
	3, 2, 2, 2, 3924, 3925, 3, 2, 2, 2, 3925, 3948, 3, 2, 2, 2, 3926, 3928,
	7, 570, 2, 2, 3927, 3929, 7, 388, 2, 2, 3928, 3927, 3, 2, 2, 2, 3928, 3929,
	3, 2, 2, 2, 3929, 3930, 3, 2, 2, 2, 3930, 3932, 5, 474, 238, 2, 3931, 3933,
	7, 768, 2, 2, 3932, 3931, 3, 2, 2, 2, 3932, 3933, 3, 2, 2, 2, 3933, 3948,
	3, 2, 2, 2, 3934, 3936, 7, 769, 2, 2, 3935, 3934, 3, 2, 2, 2, 3936, 3937,
	3, 2, 2, 2, 3937, 3935, 3, 2, 2, 2, 3937, 3938, 3, 2, 2, 2, 3938, 3939,
	3, 2, 2, 2, 3939, 3941, 5, 350, 176, 2, 3940, 3942, 7, 770, 2, 2, 3941,
	3940, 3, 2, 2, 2, 3942, 3943, 3, 2, 2, 2, 3943, 3941, 3, 2, 2, 2, 3943,
	3944, 3, 2, 2, 2, 3944, 3945, 3, 2, 2, 2, 3945, 3946, 5, 418, 210, 2, 3946,
	3948, 3, 2, 2, 2, 3947, 3921, 3, 2, 2, 2, 3947, 3926, 3, 2, 2, 2, 3947,
	3935, 3, 2, 2, 2, 3948, 3950, 3, 2, 2, 2, 3949, 3951, 5, 392, 197, 2, 3950,
	3949, 3, 2, 2, 2, 3950, 3951, 3, 2, 2, 2, 3951, 3953, 3, 2, 2, 2, 3952,
	3954, 5, 394, 198, 2, 3953, 3952, 3, 2, 2, 2, 3953, 3954, 3, 2, 2, 2, 3954,
	3956, 3, 2, 2, 2, 3955, 3957, 5, 400, 201, 2, 3956, 3955, 3, 2, 2, 2, 3956,
	3957, 3, 2, 2, 2, 3957, 3959, 3, 2, 2, 2, 3958, 3960, 5, 416, 209, 2, 3959,
	3958, 3, 2, 2, 2, 3959, 3960, 3, 2, 2, 2, 3960, 3962, 3, 2, 2, 2, 3961,
	3963, 5, 418, 210, 2, 3962, 3961, 3, 2, 2, 2, 3962, 3963, 3, 2, 2, 2, 3963,
	3965, 3, 2, 2, 2, 3964, 3966, 5, 420, 211, 2, 3965, 3964, 3, 2, 2, 2, 3965,
	3966, 3, 2, 2, 2, 3966, 3968, 3, 2, 2, 2, 3967, 3969, 5, 424, 213, 2, 3968,
	3967, 3, 2, 2, 2, 3968, 3969, 3, 2, 2, 2, 3969, 3971, 3, 2, 2, 2, 3970,
	3972, 5, 426, 214, 2, 3971, 3970, 3, 2, 2, 2, 3971, 3972, 3, 2, 2, 2, 3972,
	3974, 3, 2, 2, 2, 3973, 3975, 5, 428, 215, 2, 3974, 3973, 3, 2, 2, 2, 3974,
	3975, 3, 2, 2, 2, 3975, 3977, 3, 2, 2, 2, 3976, 3978, 5, 430, 216, 2, 3977,
	3976, 3, 2, 2, 2, 3977, 3978, 3, 2, 2, 2, 3978, 351, 3, 2, 2, 2, 3979,
	3981, 5, 354, 178, 2, 3980, 3979, 3, 2, 2, 2, 3980, 3981, 3, 2, 2, 2, 3981,
	4016, 3, 2, 2, 2, 3982, 3983, 7, 513, 2, 2, 3983, 3984, 5, 388, 195, 2,
	3984, 3986, 7, 290, 2, 2, 3985, 3987, 9, 23, 2, 2, 3986, 3985, 3, 2, 2,
	2, 3986, 3987, 3, 2, 2, 2, 3987, 3989, 3, 2, 2, 2, 3988, 3990, 7, 570,
	2, 2, 3989, 3988, 3, 2, 2, 2, 3989, 3990, 3, 2, 2, 2, 3990, 3991, 3, 2,
	2, 2, 3991, 3993, 5, 474, 238, 2, 3992, 3994, 5, 390, 196, 2, 3993, 3992,
	3, 2, 2, 2, 3993, 3994, 3, 2, 2, 2, 3994, 4017, 3, 2, 2, 2, 3995, 3997,
	7, 570, 2, 2, 3996, 3998, 7, 388, 2, 2, 3997, 3996, 3, 2, 2, 2, 3997, 3998,
	3, 2, 2, 2, 3998, 3999, 3, 2, 2, 2, 3999, 4001, 5, 474, 238, 2, 4000, 4002,
	7, 768, 2, 2, 4001, 4000, 3, 2, 2, 2, 4001, 4002, 3, 2, 2, 2, 4002, 4017,
	3, 2, 2, 2, 4003, 4005, 7, 769, 2, 2, 4004, 4003, 3, 2, 2, 2, 4005, 4006,
	3, 2, 2, 2, 4006, 4004, 3, 2, 2, 2, 4006, 4007, 3, 2, 2, 2, 4007, 4008,
	3, 2, 2, 2, 4008, 4010, 5, 350, 176, 2, 4009, 4011, 7, 770, 2, 2, 4010,
	4009, 3, 2, 2, 2, 4011, 4012, 3, 2, 2, 2, 4012, 4010, 3, 2, 2, 2, 4012,
	4013, 3, 2, 2, 2, 4013, 4014, 3, 2, 2, 2, 4014, 4015, 5, 418, 210, 2, 4015,
	4017, 3, 2, 2, 2, 4016, 3982, 3, 2, 2, 2, 4016, 3995, 3, 2, 2, 2, 4016,
	4004, 3, 2, 2, 2, 4017, 4019, 3, 2, 2, 2, 4018, 4020, 5, 392, 197, 2, 4019,
	4018, 3, 2, 2, 2, 4019, 4020, 3, 2, 2, 2, 4020, 4022, 3, 2, 2, 2, 4021,
	4023, 5, 394, 198, 2, 4022, 4021, 3, 2, 2, 2, 4022, 4023, 3, 2, 2, 2, 4023,
	4025, 3, 2, 2, 2, 4024, 4026, 5, 400, 201, 2, 4025, 4024, 3, 2, 2, 2, 4025,
	4026, 3, 2, 2, 2, 4026, 4028, 3, 2, 2, 2, 4027, 4029, 5, 416, 209, 2, 4028,
	4027, 3, 2, 2, 2, 4028, 4029, 3, 2, 2, 2, 4029, 4031, 3, 2, 2, 2, 4030,
	4032, 5, 418, 210, 2, 4031, 4030, 3, 2, 2, 2, 4031, 4032, 3, 2, 2, 2, 4032,
	4034, 3, 2, 2, 2, 4033, 4035, 5, 420, 211, 2, 4034, 4033, 3, 2, 2, 2, 4034,
	4035, 3, 2, 2, 2, 4035, 4037, 3, 2, 2, 2, 4036, 4038, 5, 424, 213, 2, 4037,
	4036, 3, 2, 2, 2, 4037, 4038, 3, 2, 2, 2, 4038, 4040, 3, 2, 2, 2, 4039,
	4041, 5, 426, 214, 2, 4040, 4039, 3, 2, 2, 2, 4040, 4041, 3, 2, 2, 2, 4041,
	4043, 3, 2, 2, 2, 4042, 4044, 5, 428, 215, 2, 4043, 4042, 3, 2, 2, 2, 4043,
	4044, 3, 2, 2, 2, 4044, 4046, 3, 2, 2, 2, 4045, 4047, 5, 430, 216, 2, 4046,
	4045, 3, 2, 2, 2, 4046, 4047, 3, 2, 2, 2, 4047, 353, 3, 2, 2, 2, 4048,
	4050, 7, 649, 2, 2, 4049, 4051, 7, 454, 2, 2, 4050, 4049, 3, 2, 2, 2, 4050,
	4051, 3, 2, 2, 2, 4051, 4052, 3, 2, 2, 2, 4052, 4057, 5, 356, 179, 2, 4053,
	4054, 7, 763, 2, 2, 4054, 4056, 5, 356, 179, 2, 4055, 4053, 3, 2, 2, 2,
	4056, 4059, 3, 2, 2, 2, 4057, 4055, 3, 2, 2, 2, 4057, 4058, 3, 2, 2, 2,
	4058, 355, 3, 2, 2, 2, 4059, 4057, 3, 2, 2, 2, 4060, 4065, 5, 474, 238,
	2, 4061, 4062, 7, 769, 2, 2, 4062, 4063, 5, 466, 234, 2, 4063, 4064, 7,
	770, 2, 2, 4064, 4066, 3, 2, 2, 2, 4065, 4061, 3, 2, 2, 2, 4065, 4066,
	3, 2, 2, 2, 4066, 4067, 3, 2, 2, 2, 4067, 4068, 7, 29, 2, 2, 4068, 4074,
	7, 769, 2, 2, 4069, 4075, 5, 350, 176, 2, 4070, 4075, 5, 312, 157, 2, 4071,
	4075, 5, 214, 108, 2, 4072, 4075, 5, 378, 190, 2, 4073, 4075, 5, 386, 194,
	2, 4074, 4069, 3, 2, 2, 2, 4074, 4070, 3, 2, 2, 2, 4074, 4071, 3, 2, 2,
	2, 4074, 4072, 3, 2, 2, 2, 4074, 4073, 3, 2, 2, 2, 4075, 4076, 3, 2, 2,
	2, 4076, 4077, 7, 770, 2, 2, 4077, 357, 3, 2, 2, 2, 4078, 4080, 7, 522,
	2, 2, 4079, 4081, 9, 24, 2, 2, 4080, 4079, 3, 2, 2, 2, 4080, 4081, 3, 2,
	2, 2, 4081, 4082, 3, 2, 2, 2, 4082, 4083, 5, 518, 260, 2, 4083, 4086, 9,
	7, 2, 2, 4084, 4087, 5, 514, 258, 2, 4085, 4087, 7, 158, 2, 2, 4086, 4084,
	3, 2, 2, 2, 4086, 4085, 3, 2, 2, 2, 4087, 4100, 3, 2, 2, 2, 4088, 4090,
	7, 522, 2, 2, 4089, 4091, 9, 24, 2, 2, 4090, 4089, 3, 2, 2, 2, 4090, 4091,
	3, 2, 2, 2, 4091, 4092, 3, 2, 2, 2, 4092, 4093, 7, 581, 2, 2, 4093, 4097,
	7, 657, 2, 2, 4094, 4098, 5, 458, 230, 2, 4095, 4098, 7, 317, 2, 2, 4096,
	4098, 7, 158, 2, 2, 4097, 4094, 3, 2, 2, 2, 4097, 4095, 3, 2, 2, 2, 4097,
	4096, 3, 2, 2, 2, 4098, 4100, 3, 2, 2, 2, 4099, 4078, 3, 2, 2, 2, 4099,
	4088, 3, 2, 2, 2, 4100, 359, 3, 2, 2, 2, 4101, 4102, 7, 522, 2, 2, 4102,
	4105, 7, 115, 2, 2, 4103, 4106, 7, 18, 2, 2, 4104, 4106, 5, 468, 235, 2,
	4105, 4103, 3, 2, 2, 2, 4105, 4104, 3, 2, 2, 2, 4106, 4107, 3, 2, 2, 2,
	4107, 4108, 9, 25, 2, 2, 4108, 361, 3, 2, 2, 2, 4109, 4111, 7, 522, 2,
	2, 4110, 4112, 9, 24, 2, 2, 4111, 4110, 3, 2, 2, 2, 4111, 4112, 3, 2, 2,
	2, 4112, 4113, 3, 2, 2, 2, 4113, 4116, 7, 488, 2, 2, 4114, 4117, 5, 510,
	256, 2, 4115, 4117, 7, 365, 2, 2, 4116, 4114, 3, 2, 2, 2, 4116, 4115, 3,
	2, 2, 2, 4117, 4121, 3, 2, 2, 2, 4118, 4119, 7, 475, 2, 2, 4119, 4121,
	7, 488, 2, 2, 4120, 4109, 3, 2, 2, 2, 4120, 4118, 3, 2, 2, 2, 4121, 363,
	3, 2, 2, 2, 4122, 4123, 5, 522, 262, 2, 4123, 365, 3, 2, 2, 2, 4124, 4125,
	7, 293, 2, 2, 4125, 4133, 7, 311, 2, 2, 4126, 4134, 7, 518, 2, 2, 4127,
	4128, 7, 472, 2, 2, 4128, 4134, 7, 449, 2, 2, 4129, 4130, 7, 449, 2, 2,
	4130, 4134, 7, 102, 2, 2, 4131, 4132, 7, 449, 2, 2, 4132, 4134, 7, 610,
	2, 2, 4133, 4126, 3, 2, 2, 2, 4133, 4127, 3, 2, 2, 2, 4133, 4129, 3, 2,
	2, 2, 4133, 4131, 3, 2, 2, 2, 4134, 4144, 3, 2, 2, 2, 4135, 4136, 7, 449,
	2, 2, 4136, 4144, 7, 653, 2, 2, 4137, 4138, 7, 449, 2, 2, 4138, 4144, 7,
	388, 2, 2, 4139, 4141, 7, 368, 2, 2, 4140, 4139, 3, 2, 2, 2, 4140, 4141,
	3, 2, 2, 2, 4141, 4142, 3, 2, 2, 2, 4142, 4144, 7, 161, 2, 2, 4143, 4124,
	3, 2, 2, 2, 4143, 4135, 3, 2, 2, 2, 4143, 4137, 3, 2, 2, 2, 4143, 4140,
	3, 2, 2, 2, 4144, 367, 3, 2, 2, 2, 4145, 4150, 5, 366, 184, 2, 4146, 4147,
	7, 763, 2, 2, 4147, 4149, 5, 366, 184, 2, 4148, 4146, 3, 2, 2, 2, 4149,
	4152, 3, 2, 2, 2, 4150, 4148, 3, 2, 2, 2, 4150, 4151, 3, 2, 2, 2, 4151,
	369, 3, 2, 2, 2, 4152, 4150, 3, 2, 2, 2, 4153, 4154, 7, 522, 2, 2, 4154,
	4155, 7, 590, 2, 2, 4155, 4167, 5, 368, 185, 2, 4156, 4157, 7, 522, 2,
	2, 4157, 4158, 7, 590, 2, 2, 4158, 4159, 7, 532, 2, 2, 4159, 4167, 7, 779,
	2, 2, 4160, 4161, 7, 522, 2, 2, 4161, 4162, 7, 520, 2, 2, 4162, 4163, 7,
	78, 2, 2, 4163, 4164, 7, 29, 2, 2, 4164, 4165, 7, 590, 2, 2, 4165, 4167,
	5, 368, 185, 2, 4166, 4153, 3, 2, 2, 2, 4166, 4156, 3, 2, 2, 2, 4166, 4160,
	3, 2, 2, 2, 4167, 371, 3, 2, 2, 2, 4168, 4173, 7, 526, 2, 2, 4169, 4174,
	5, 518, 260, 2, 4170, 4171, 7, 581, 2, 2, 4171, 4174, 7, 657, 2, 2, 4172,
	4174, 7, 18, 2, 2, 4173, 4169, 3, 2, 2, 2, 4173, 4170, 3, 2, 2, 2, 4173,
	4172, 3, 2, 2, 2, 4174, 373, 3, 2, 2, 2, 4175, 4177, 7, 605, 2, 2, 4176,
	4178, 7, 570, 2, 2, 4177, 4176, 3, 2, 2, 2, 4177, 4178, 3, 2, 2, 2, 4178,
	4180, 3, 2, 2, 2, 4179, 4181, 7, 388, 2, 2, 4180, 4179, 3, 2, 2, 2, 4180,
	4181, 3, 2, 2, 2, 4181, 4182, 3, 2, 2, 2, 4182, 4184, 5, 474, 238, 2, 4183,
	4185, 7, 768, 2, 2, 4184, 4183, 3, 2, 2, 2, 4184, 4185, 3, 2, 2, 2, 4185,
	4191, 3, 2, 2, 2, 4186, 4188, 7, 763, 2, 2, 4187, 4189, 7, 388, 2, 2, 4188,
	4187, 3, 2, 2, 2, 4188, 4189, 3, 2, 2, 2, 4189, 4190, 3, 2, 2, 2, 4190,
	4192, 5, 468, 235, 2, 4191, 4186, 3, 2, 2, 2, 4191, 4192, 3, 2, 2, 2, 4192,
	4195, 3, 2, 2, 2, 4193, 4194, 9, 26, 2, 2, 4194, 4196, 7, 261, 2, 2, 4195,
	4193, 3, 2, 2, 2, 4195, 4196, 3, 2, 2, 2, 4196, 4198, 3, 2, 2, 2, 4197,
	4199, 9, 3, 2, 2, 4198, 4197, 3, 2, 2, 2, 4198, 4199, 3, 2, 2, 2, 4199,
	375, 3, 2, 2, 2, 4200, 4203, 7, 616, 2, 2, 4201, 4204, 5, 518, 260, 2,
	4202, 4204, 7, 768, 2, 2, 4203, 4201, 3, 2, 2, 2, 4203, 4202, 3, 2, 2,
	2, 4204, 377, 3, 2, 2, 2, 4205, 4207, 5, 354, 178, 2, 4206, 4205, 3, 2,
	2, 2, 4206, 4207, 3, 2, 2, 2, 4207, 4208, 3, 2, 2, 2, 4208, 4210, 7, 620,
	2, 2, 4209, 4211, 7, 388, 2, 2, 4210, 4209, 3, 2, 2, 2, 4210, 4211, 3,
	2, 2, 2, 4211, 4212, 3, 2, 2, 2, 4212, 4214, 5, 474, 238, 2, 4213, 4215,
	7, 768, 2, 2, 4214, 4213, 3, 2, 2, 2, 4214, 4215, 3, 2, 2, 2, 4215, 4220,
	3, 2, 2, 2, 4216, 4218, 7, 29, 2, 2, 4217, 4216, 3, 2, 2, 2, 4217, 4218,
	3, 2, 2, 2, 4218, 4219, 3, 2, 2, 2, 4219, 4221, 5, 518, 260, 2, 4220, 4217,
	3, 2, 2, 2, 4220, 4221, 3, 2, 2, 2, 4221, 4222, 3, 2, 2, 2, 4222, 4223,
	7, 522, 2, 2, 4223, 4225, 5, 432, 217, 2, 4224, 4226, 5, 390, 196, 2, 4225,
	4224, 3, 2, 2, 2, 4225, 4226, 3, 2, 2, 2, 4226, 4232, 3, 2, 2, 2, 4227,
	4233, 5, 392, 197, 2, 4228, 4229, 7, 646, 2, 2, 4229, 4230, 7, 136, 2,
	2, 4230, 4231, 7, 382, 2, 2, 4231, 4233, 5, 518, 260, 2, 4232, 4227, 3,
	2, 2, 2, 4232, 4228, 3, 2, 2, 2, 4232, 4233, 3, 2, 2, 2, 4233, 4235, 3,
	2, 2, 2, 4234, 4236, 5, 436, 219, 2, 4235, 4234, 3, 2, 2, 2, 4235, 4236,
	3, 2, 2, 2, 4236, 379, 3, 2, 2, 2, 4237, 4238, 9, 27, 2, 2, 4238, 381,
	3, 2, 2, 2, 4239, 4244, 5, 380, 191, 2, 4240, 4241, 7, 763, 2, 2, 4241,
	4243, 5, 380, 191, 2, 4242, 4240, 3, 2, 2, 2, 4243, 4246, 3, 2, 2, 2, 4244,
	4242, 3, 2, 2, 2, 4244, 4245, 3, 2, 2, 2, 4245, 383, 3, 2, 2, 2, 4246,
	4244, 3, 2, 2, 2, 4247, 4252, 7, 629, 2, 2, 4248, 4249, 7, 769, 2, 2, 4249,
	4250, 5, 382, 192, 2, 4250, 4251, 7, 770, 2, 2, 4251, 4253, 3, 2, 2, 2,
	4252, 4248, 3, 2, 2, 2, 4252, 4253, 3, 2, 2, 2, 4253, 4254, 3, 2, 2, 2,
	4254, 4259, 5, 474, 238, 2, 4255, 4256, 7, 769, 2, 2, 4256, 4257, 5, 402,
	202, 2, 4257, 4258, 7, 770, 2, 2, 4258, 4260, 3, 2, 2, 2, 4259, 4255, 3,
	2, 2, 2, 4259, 4260, 3, 2, 2, 2, 4260, 4295, 3, 2, 2, 2, 4261, 4263, 7,
	629, 2, 2, 4262, 4264, 7, 240, 2, 2, 4263, 4262, 3, 2, 2, 2, 4263, 4264,
	3, 2, 2, 2, 4264, 4266, 3, 2, 2, 2, 4265, 4267, 7, 238, 2, 2, 4266, 4265,
	3, 2, 2, 2, 4266, 4267, 3, 2, 2, 2, 4267, 4269, 3, 2, 2, 2, 4268, 4270,
	7, 641, 2, 2, 4269, 4268, 3, 2, 2, 2, 4269, 4270, 3, 2, 2, 2, 4270, 4272,
	3, 2, 2, 2, 4271, 4273, 5, 474, 238, 2, 4272, 4271, 3, 2, 2, 2, 4272, 4273,
	3, 2, 2, 2, 4273, 4295, 3, 2, 2, 2, 4274, 4276, 7, 629, 2, 2, 4275, 4277,
	7, 240, 2, 2, 4276, 4275, 3, 2, 2, 2, 4276, 4277, 3, 2, 2, 2, 4277, 4279,
	3, 2, 2, 2, 4278, 4280, 7, 238, 2, 2, 4279, 4278, 3, 2, 2, 2, 4279, 4280,
	3, 2, 2, 2, 4280, 4282, 3, 2, 2, 2, 4281, 4283, 7, 641, 2, 2, 4282, 4281,
	3, 2, 2, 2, 4282, 4283, 3, 2, 2, 2, 4283, 4284, 3, 2, 2, 2, 4284, 4292,
	7, 24, 2, 2, 4285, 4290, 5, 474, 238, 2, 4286, 4287, 7, 769, 2, 2, 4287,
	4288, 5, 402, 202, 2, 4288, 4289, 7, 770, 2, 2, 4289, 4291, 3, 2, 2, 2,
	4290, 4286, 3, 2, 2, 2, 4290, 4291, 3, 2, 2, 2, 4291, 4293, 3, 2, 2, 2,
	4292, 4285, 3, 2, 2, 2, 4292, 4293, 3, 2, 2, 2, 4293, 4295, 3, 2, 2, 2,
	4294, 4247, 3, 2, 2, 2, 4294, 4261, 3, 2, 2, 2, 4294, 4274, 3, 2, 2, 2,
	4295, 385, 3, 2, 2, 2, 4296, 4298, 5, 354, 178, 2, 4297, 4296, 3, 2, 2,
	2, 4297, 4298, 3, 2, 2, 2, 4298, 4314, 3, 2, 2, 2, 4299, 4300, 7, 634,
	2, 2, 4300, 4315, 5, 446, 224, 2, 4301, 4303, 7, 769, 2, 2, 4302, 4301,
	3, 2, 2, 2, 4303, 4304, 3, 2, 2, 2, 4304, 4302, 3, 2, 2, 2, 4304, 4305,
	3, 2, 2, 2, 4305, 4306, 3, 2, 2, 2, 4306, 4308, 5, 386, 194, 2, 4307, 4309,
	7, 770, 2, 2, 4308, 4307, 3, 2, 2, 2, 4309, 4310, 3, 2, 2, 2, 4310, 4308,
	3, 2, 2, 2, 4310, 4311, 3, 2, 2, 2, 4311, 4312, 3, 2, 2, 2, 4312, 4313,
	5, 418, 210, 2, 4313, 4315, 3, 2, 2, 2, 4314, 4299, 3, 2, 2, 2, 4314, 4302,
	3, 2, 2, 2, 4315, 4317, 3, 2, 2, 2, 4316, 4318, 5, 420, 211, 2, 4317, 4316,
	3, 2, 2, 2, 4317, 4318, 3, 2, 2, 2, 4318, 4320, 3, 2, 2, 2, 4319, 4321,
	5, 418, 210, 2, 4320, 4319, 3, 2, 2, 2, 4320, 4321, 3, 2, 2, 2, 4321, 4323,
	3, 2, 2, 2, 4322, 4324, 5, 424, 213, 2, 4323, 4322, 3, 2, 2, 2, 4323, 4324,
	3, 2, 2, 2, 4324, 4326, 3, 2, 2, 2, 4325, 4327, 5, 426, 214, 2, 4326, 4325,
	3, 2, 2, 2, 4326, 4327, 3, 2, 2, 2, 4327, 4329, 3, 2, 2, 2, 4328, 4330,
	5, 428, 215, 2, 4329, 4328, 3, 2, 2, 2, 4329, 4330, 3, 2, 2, 2, 4330, 387,
	3, 2, 2, 2, 4331, 4338, 7, 18, 2, 2, 4332, 4335, 7, 187, 2, 2, 4333, 4334,
	7, 387, 2, 2, 4334, 4336, 5, 444, 223, 2, 4335, 4333, 3, 2, 2, 2, 4335,
	4336, 3, 2, 2, 2, 4336, 4338, 3, 2, 2, 2, 4337, 4331, 3, 2, 2, 2, 4337,
	4332, 3, 2, 2, 2, 4337, 4338, 3, 2, 2, 2, 4338, 4339, 3, 2, 2, 2, 4339,
	4340, 5, 402, 202, 2, 4340, 389, 3, 2, 2, 2, 4341, 4342, 7, 239, 2, 2,
	4342, 4347, 5, 488, 245, 2, 4343, 4344, 7, 763, 2, 2, 4344, 4346, 5, 488,
	245, 2, 4345, 4343, 3, 2, 2, 2, 4346, 4349, 3, 2, 2, 2, 4347, 4345, 3,
	2, 2, 2, 4347, 4348, 3, 2, 2, 2, 4348, 391, 3, 2, 2, 2, 4349, 4347, 3,
	2, 2, 2, 4350, 4351, 7, 646, 2, 2, 4351, 4352, 5, 496, 249, 2, 4352, 393,
	3, 2, 2, 2, 4353, 4354, 7, 253, 2, 2, 4354, 4355, 7, 56, 2, 2, 4355, 4360,
	5, 396, 199, 2, 4356, 4357, 7, 763, 2, 2, 4357, 4359, 5, 396, 199, 2, 4358,
	4356, 3, 2, 2, 2, 4359, 4362, 3, 2, 2, 2, 4360, 4358, 3, 2, 2, 2, 4360,
	4361, 3, 2, 2, 2, 4361, 395, 3, 2, 2, 2, 4362, 4360, 3, 2, 2, 2, 4363,
	4364, 7, 769, 2, 2, 4364, 4389, 7, 770, 2, 2, 4365, 4389, 5, 438, 220,
	2, 4366, 4389, 5, 444, 223, 2, 4367, 4368, 9, 28, 2, 2, 4368, 4371, 7,
	769, 2, 2, 4369, 4372, 5, 438, 220, 2, 4370, 4372, 5, 444, 223, 2, 4371,
	4369, 3, 2, 2, 2, 4371, 4370, 3, 2, 2, 2, 4372, 4380, 3, 2, 2, 2, 4373,
	4376, 7, 763, 2, 2, 4374, 4377, 5, 438, 220, 2, 4375, 4377, 5, 444, 223,
	2, 4376, 4374, 3, 2, 2, 2, 4376, 4375, 3, 2, 2, 2, 4377, 4379, 3, 2, 2,
	2, 4378, 4373, 3, 2, 2, 2, 4379, 4382, 3, 2, 2, 2, 4380, 4378, 3, 2, 2,
	2, 4380, 4381, 3, 2, 2, 2, 4381, 4383, 3, 2, 2, 2, 4382, 4380, 3, 2, 2,
	2, 4383, 4384, 7, 770, 2, 2, 4384, 4389, 3, 2, 2, 2, 4385, 4386, 7, 254,
	2, 2, 4386, 4387, 7, 524, 2, 2, 4387, 4389, 5, 398, 200, 2, 4388, 4363,
	3, 2, 2, 2, 4388, 4365, 3, 2, 2, 2, 4388, 4366, 3, 2, 2, 2, 4388, 4367,
	3, 2, 2, 2, 4388, 4385, 3, 2, 2, 2, 4389, 397, 3, 2, 2, 2, 4390, 4391,
	7, 769, 2, 2, 4391, 4396, 5, 396, 199, 2, 4392, 4393, 7, 763, 2, 2, 4393,
	4395, 5, 396, 199, 2, 4394, 4392, 3, 2, 2, 2, 4395, 4398, 3, 2, 2, 2, 4396,
	4394, 3, 2, 2, 2, 4396, 4397, 3, 2, 2, 2, 4397, 4399, 3, 2, 2, 2, 4398,
	4396, 3, 2, 2, 2, 4399, 4400, 7, 770, 2, 2, 4400, 399, 3, 2, 2, 2, 4401,
	4402, 7, 256, 2, 2, 4402, 4407, 5, 496, 249, 2, 4403, 4404, 7, 763, 2,
	2, 4404, 4406, 5, 496, 249, 2, 4405, 4403, 3, 2, 2, 2, 4406, 4409, 3, 2,
	2, 2, 4407, 4405, 3, 2, 2, 2, 4407, 4408, 3, 2, 2, 2, 4408, 401, 3, 2,
	2, 2, 4409, 4407, 3, 2, 2, 2, 4410, 4415, 5, 438, 220, 2, 4411, 4413, 7,
	29, 2, 2, 4412, 4411, 3, 2, 2, 2, 4412, 4413, 3, 2, 2, 2, 4413, 4414, 3,
	2, 2, 2, 4414, 4416, 5, 464, 233, 2, 4415, 4412, 3, 2, 2, 2, 4415, 4416,
	3, 2, 2, 2, 4416, 4419, 3, 2, 2, 2, 4417, 4419, 7, 768, 2, 2, 4418, 4410,
	3, 2, 2, 2, 4418, 4417, 3, 2, 2, 2, 4419, 4433, 3, 2, 2, 2, 4420, 4429,
	7, 763, 2, 2, 4421, 4426, 5, 438, 220, 2, 4422, 4424, 7, 29, 2, 2, 4423,
	4422, 3, 2, 2, 2, 4423, 4424, 3, 2, 2, 2, 4424, 4425, 3, 2, 2, 2, 4425,
	4427, 5, 464, 233, 2, 4426, 4423, 3, 2, 2, 2, 4426, 4427, 3, 2, 2, 2, 4427,
	4430, 3, 2, 2, 2, 4428, 4430, 7, 768, 2, 2, 4429, 4421, 3, 2, 2, 2, 4429,
	4428, 3, 2, 2, 2, 4430, 4432, 3, 2, 2, 2, 4431, 4420, 3, 2, 2, 2, 4432,
	4435, 3, 2, 2, 2, 4433, 4431, 3, 2, 2, 2, 4433, 4434, 3, 2, 2, 2, 4434,
	403, 3, 2, 2, 2, 4435, 4433, 3, 2, 2, 2, 4436, 4438, 9, 29, 2, 2, 4437,
	4439, 5, 514, 258, 2, 4438, 4437, 3, 2, 2, 2, 4438, 4439, 3, 2, 2, 2, 4439,
	4443, 3, 2, 2, 2, 4440, 4441, 7, 233, 2, 2, 4441, 4443, 9, 30, 2, 2, 4442,
	4436, 3, 2, 2, 2, 4442, 4440, 3, 2, 2, 2, 4443, 405, 3, 2, 2, 2, 4444,
	4445, 7, 609, 2, 2, 4445, 4455, 7, 432, 2, 2, 4446, 4447, 7, 776, 2, 2,
	4447, 4455, 7, 432, 2, 2, 4448, 4449, 7, 136, 2, 2, 4449, 4455, 7, 495,
	2, 2, 4450, 4451, 7, 776, 2, 2, 4451, 4455, 7, 229, 2, 2, 4452, 4453, 7,
	609, 2, 2, 4453, 4455, 7, 229, 2, 2, 4454, 4444, 3, 2, 2, 2, 4454, 4446,
	3, 2, 2, 2, 4454, 4448, 3, 2, 2, 2, 4454, 4450, 3, 2, 2, 2, 4454, 4452,
	3, 2, 2, 2, 4455, 407, 3, 2, 2, 2, 4456, 4457, 5, 406, 204, 2, 4457, 409,
	3, 2, 2, 2, 4458, 4459, 5, 406, 204, 2, 4459, 411, 3, 2, 2, 2, 4460, 4461,
	9, 31, 2, 2, 4461, 4469, 5, 408, 205, 2, 4462, 4463, 9, 31, 2, 2, 4463,
	4464, 7, 45, 2, 2, 4464, 4465, 5, 408, 205, 2, 4465, 4466, 7, 25, 2, 2,
	4466, 4467, 5, 410, 206, 2, 4467, 4469, 3, 2, 2, 2, 4468, 4460, 3, 2, 2,
	2, 4468, 4462, 3, 2, 2, 2, 4469, 413, 3, 2, 2, 2, 4470, 4483, 5, 534, 268,
	2, 4471, 4472, 7, 418, 2, 2, 4472, 4473, 7, 56, 2, 2, 4473, 4478, 5, 438,
	220, 2, 4474, 4475, 7, 763, 2, 2, 4475, 4477, 5, 438, 220, 2, 4476, 4474,
	3, 2, 2, 2, 4477, 4480, 3, 2, 2, 2, 4478, 4476, 3, 2, 2, 2, 4478, 4479,
	3, 2, 2, 2, 4479, 4483, 3, 2, 2, 2, 4480, 4478, 3, 2, 2, 2, 4481, 4483,
	5, 420, 211, 2, 4482, 4470, 3, 2, 2, 2, 4482, 4471, 3, 2, 2, 2, 4482, 4481,
	3, 2, 2, 2, 4483, 415, 3, 2, 2, 2, 4484, 4485, 7, 648, 2, 2, 4485, 4486,
	5, 534, 268, 2, 4486, 4487, 7, 29, 2, 2, 4487, 4488, 7, 769, 2, 2, 4488,
	4489, 5, 414, 208, 2, 4489, 4490, 7, 770, 2, 2, 4490, 417, 3, 2, 2, 2,
	4491, 4493, 9, 32, 2, 2, 4492, 4494, 9, 33, 2, 2, 4493, 4492, 3, 2, 2,
	2, 4493, 4494, 3, 2, 2, 2, 4494, 4498, 3, 2, 2, 2, 4495, 4497, 7, 769,
	2, 2, 4496, 4495, 3, 2, 2, 2, 4497, 4500, 3, 2, 2, 2, 4498, 4496, 3, 2,
	2, 2, 4498, 4499, 3, 2, 2, 2, 4499, 4503, 3, 2, 2, 2, 4500, 4498, 3, 2,
	2, 2, 4501, 4504, 5, 350, 176, 2, 4502, 4504, 5, 386, 194, 2, 4503, 4501,
	3, 2, 2, 2, 4503, 4502, 3, 2, 2, 2, 4504, 4508, 3, 2, 2, 2, 4505, 4507,
	7, 770, 2, 2, 4506, 4505, 3, 2, 2, 2, 4507, 4510, 3, 2, 2, 2, 4508, 4506,
	3, 2, 2, 2, 4508, 4509, 3, 2, 2, 2, 4509, 4512, 3, 2, 2, 2, 4510, 4508,
	3, 2, 2, 2, 4511, 4513, 5, 418, 210, 2, 4512, 4511, 3, 2, 2, 2, 4512, 4513,
	3, 2, 2, 2, 4513, 419, 3, 2, 2, 2, 4514, 4515, 7, 395, 2, 2, 4515, 4516,
	7, 56, 2, 2, 4516, 4521, 5, 422, 212, 2, 4517, 4518, 7, 763, 2, 2, 4518,
	4520, 5, 422, 212, 2, 4519, 4517, 3, 2, 2, 2, 4520, 4523, 3, 2, 2, 2, 4521,
	4519, 3, 2, 2, 2, 4521, 4522, 3, 2, 2, 2, 4522, 421, 3, 2, 2, 2, 4523,
	4521, 3, 2, 2, 2, 4524, 4527, 5, 438, 220, 2, 4525, 4527, 7, 780, 2, 2,
	4526, 4524, 3, 2, 2, 2, 4526, 4525, 3, 2, 2, 2, 4527, 4532, 3, 2, 2, 2,
	4528, 4533, 7, 30, 2, 2, 4529, 4533, 7, 174, 2, 2, 4530, 4531, 7, 628,
	2, 2, 4531, 4533, 5, 438, 220, 2, 4532, 4528, 3, 2, 2, 2, 4532, 4529, 3,
	2, 2, 2, 4532, 4530, 3, 2, 2, 2, 4532, 4533, 3, 2, 2, 2, 4533, 4545, 3,
	2, 2, 2, 4534, 4535, 7, 376, 2, 2, 4535, 4536, 9, 34, 2, 2, 4536, 4542,
	3, 2, 2, 2, 4537, 4538, 7, 763, 2, 2, 4538, 4539, 7, 376, 2, 2, 4539, 4541,
	9, 34, 2, 2, 4540, 4537, 3, 2, 2, 2, 4541, 4544, 3, 2, 2, 2, 4542, 4540,
	3, 2, 2, 2, 4542, 4543, 3, 2, 2, 2, 4543, 4546, 3, 2, 2, 2, 4544, 4542,
	3, 2, 2, 2, 4545, 4534, 3, 2, 2, 2, 4545, 4546, 3, 2, 2, 2, 4546, 423,
	3, 2, 2, 2, 4547, 4551, 7, 313, 2, 2, 4548, 4552, 7, 776, 2, 2, 4549, 4552,
	7, 18, 2, 2, 4550, 4552, 5, 484, 243, 2, 4551, 4548, 3, 2, 2, 2, 4551,
	4549, 3, 2, 2, 2, 4551, 4550, 3, 2, 2, 2, 4552, 425, 3, 2, 2, 2, 4553,
	4554, 7, 384, 2, 2, 4554, 4556, 7, 776, 2, 2, 4555, 4557, 9, 35, 2, 2,
	4556, 4555, 3, 2, 2, 2, 4556, 4557, 3, 2, 2, 2, 4557, 427, 3, 2, 2, 2,
	4558, 4559, 7, 222, 2, 2, 4559, 4561, 9, 36, 2, 2, 4560, 4562, 7, 776,
	2, 2, 4561, 4560, 3, 2, 2, 2, 4561, 4562, 3, 2, 2, 2, 4562, 4563, 3, 2,
	2, 2, 4563, 4564, 9, 35, 2, 2, 4564, 4565, 7, 388, 2, 2, 4565, 429, 3,
	2, 2, 2, 4566, 4574, 7, 230, 2, 2, 4567, 4575, 7, 620, 2, 2, 4568, 4569,
	7, 362, 2, 2, 4569, 4570, 7, 297, 2, 2, 4570, 4575, 7, 620, 2, 2, 4571,
	4575, 7, 525, 2, 2, 4572, 4573, 7, 297, 2, 2, 4573, 4575, 7, 525, 2, 2,
	4574, 4567, 3, 2, 2, 2, 4574, 4568, 3, 2, 2, 2, 4574, 4571, 3, 2, 2, 2,
	4574, 4572, 3, 2, 2, 2, 4575, 4585, 3, 2, 2, 2, 4576, 4577, 7, 382, 2,
	2, 4577, 4582, 5, 474, 238, 2, 4578, 4579, 7, 763, 2, 2, 4579, 4581, 5,
	474, 238, 2, 4580, 4578, 3, 2, 2, 2, 4581, 4584, 3, 2, 2, 2, 4582, 4580,
	3, 2, 2, 2, 4582, 4583, 3, 2, 2, 2, 4583, 4586, 3, 2, 2, 2, 4584, 4582,
	3, 2, 2, 2, 4585, 4576, 3, 2, 2, 2, 4585, 4586, 3, 2, 2, 2, 4586, 4592,
	3, 2, 2, 2, 4587, 4591, 7, 372, 2, 2, 4588, 4589, 7, 530, 2, 2, 4589, 4591,
	7, 323, 2, 2, 4590, 4587, 3, 2, 2, 2, 4590, 4588, 3, 2, 2, 2, 4591, 4594,
	3, 2, 2, 2, 4592, 4590, 3, 2, 2, 2, 4592, 4593, 3, 2, 2, 2, 4593, 431,
	3, 2, 2, 2, 4594, 4592, 3, 2, 2, 2, 4595, 4600, 5, 434, 218, 2, 4596, 4597,
	7, 763, 2, 2, 4597, 4599, 5, 434, 218, 2, 4598, 4596, 3, 2, 2, 2, 4599,
	4602, 3, 2, 2, 2, 4600, 4598, 3, 2, 2, 2, 4600, 4601, 3, 2, 2, 2, 4601,
	433, 3, 2, 2, 2, 4602, 4600, 3, 2, 2, 2, 4603, 4613, 5, 438, 220, 2, 4604,
	4605, 7, 769, 2, 2, 4605, 4606, 5, 466, 234, 2, 4606, 4607, 7, 770, 2,
	2, 4607, 4610, 7, 794, 2, 2, 4608, 4611, 5, 438, 220, 2, 4609, 4611, 5,
	444, 223, 2, 4610, 4608, 3, 2, 2, 2, 4610, 4609, 3, 2, 2, 2, 4611, 4613,
	3, 2, 2, 2, 4612, 4603, 3, 2, 2, 2, 4612, 4604, 3, 2, 2, 2, 4613, 435,
	3, 2, 2, 2, 4614, 4615, 7, 484, 2, 2, 4615, 4616, 5, 402, 202, 2, 4616,
	437, 3, 2, 2, 2, 4617, 4618, 8, 220, 1, 2, 4618, 4692, 7, 373, 2, 2, 4619,
	4692, 7, 137, 2, 2, 4620, 4692, 7, 140, 2, 2, 4621, 4692, 7, 141, 2, 2,
	4622, 4692, 7, 142, 2, 2, 4623, 4692, 7, 144, 2, 2, 4624, 4692, 7, 158,
	2, 2, 4625, 4692, 7, 776, 2, 2, 4626, 4692, 7, 777, 2, 2, 4627, 4692, 7,
	775, 2, 2, 4628, 4692, 7, 779, 2, 2, 4629, 4692, 7, 773, 2, 2, 4630, 4692,
	7, 774, 2, 2, 4631, 4633, 7, 767, 2, 2, 4632, 4634, 10, 37, 2, 2, 4633,
	4632, 3, 2, 2, 2, 4634, 4635, 3, 2, 2, 2, 4635, 4633, 3, 2, 2, 2, 4635,
	4636, 3, 2, 2, 2, 4636, 4637, 3, 2, 2, 2, 4637, 4692, 7, 767, 2, 2, 4638,
	4639, 7, 766, 2, 2, 4639, 4641, 5, 518, 260, 2, 4640, 4642, 10, 37, 2,
	2, 4641, 4640, 3, 2, 2, 2, 4642, 4643, 3, 2, 2, 2, 4643, 4641, 3, 2, 2,
	2, 4643, 4644, 3, 2, 2, 2, 4644, 4645, 3, 2, 2, 2, 4645, 4646, 7, 766,
	2, 2, 4646, 4647, 5, 518, 260, 2, 4647, 4648, 7, 766, 2, 2, 4648, 4692,
	3, 2, 2, 2, 4649, 4692, 5, 440, 221, 2, 4650, 4692, 5, 386, 194, 2, 4651,
	4692, 5, 444, 223, 2, 4652, 4653, 7, 769, 2, 2, 4653, 4654, 5, 438, 220,
	2, 4654, 4655, 7, 770, 2, 2, 4655, 4692, 3, 2, 2, 2, 4656, 4657, 5, 456,
	229, 2, 4657, 4658, 7, 779, 2, 2, 4658, 4692, 3, 2, 2, 2, 4659, 4660, 9,
	38, 2, 2, 4660, 4692, 5, 438, 220, 33, 4661, 4662, 9, 39, 2, 2, 4662, 4692,
	5, 438, 220, 32, 4663, 4664, 9, 40, 2, 2, 4664, 4692, 5, 438, 220, 19,
	4665, 4692, 5, 484, 243, 2, 4666, 4692, 5, 518, 260, 2, 4667, 4668, 7,
	65, 2, 2, 4668, 4669, 7, 769, 2, 2, 4669, 4670, 5, 438, 220, 2, 4670, 4671,
	7, 29, 2, 2, 4671, 4672, 5, 476, 239, 2, 4672, 4673, 7, 770, 2, 2, 4673,
	4692, 3, 2, 2, 2, 4674, 4675, 5, 524, 263, 2, 4675, 4676, 7, 778, 2, 2,
	4676, 4677, 5, 526, 264, 2, 4677, 4692, 3, 2, 2, 2, 4678, 4692, 5, 442,
	222, 2, 4679, 4680, 5, 476, 239, 2, 4680, 4681, 5, 438, 220, 11, 4681,
	4692, 3, 2, 2, 2, 4682, 4692, 5, 462, 232, 2, 4683, 4692, 5, 486, 244,
	2, 4684, 4685, 7, 214, 2, 2, 4685, 4692, 5, 438, 220, 5, 4686, 4692, 7,
	782, 2, 2, 4687, 4688, 7, 769, 2, 2, 4688, 4689, 5, 350, 176, 2, 4689,
	4690, 7, 770, 2, 2, 4690, 4692, 3, 2, 2, 2, 4691, 4617, 3, 2, 2, 2, 4691,
	4619, 3, 2, 2, 2, 4691, 4620, 3, 2, 2, 2, 4691, 4621, 3, 2, 2, 2, 4691,
	4622, 3, 2, 2, 2, 4691, 4623, 3, 2, 2, 2, 4691, 4624, 3, 2, 2, 2, 4691,
	4625, 3, 2, 2, 2, 4691, 4626, 3, 2, 2, 2, 4691, 4627, 3, 2, 2, 2, 4691,
	4628, 3, 2, 2, 2, 4691, 4629, 3, 2, 2, 2, 4691, 4630, 3, 2, 2, 2, 4691,
	4631, 3, 2, 2, 2, 4691, 4638, 3, 2, 2, 2, 4691, 4649, 3, 2, 2, 2, 4691,
	4650, 3, 2, 2, 2, 4691, 4651, 3, 2, 2, 2, 4691, 4652, 3, 2, 2, 2, 4691,
	4656, 3, 2, 2, 2, 4691, 4659, 3, 2, 2, 2, 4691, 4661, 3, 2, 2, 2, 4691,
	4663, 3, 2, 2, 2, 4691, 4665, 3, 2, 2, 2, 4691, 4666, 3, 2, 2, 2, 4691,
	4667, 3, 2, 2, 2, 4691, 4674, 3, 2, 2, 2, 4691, 4678, 3, 2, 2, 2, 4691,
	4679, 3, 2, 2, 2, 4691, 4682, 3, 2, 2, 2, 4691, 4683, 3, 2, 2, 2, 4691,
	4684, 3, 2, 2, 2, 4691, 4686, 3, 2, 2, 2, 4691, 4687, 3, 2, 2, 2, 4692,
	4796, 3, 2, 2, 2, 4693, 4694, 12, 30, 2, 2, 4694, 4695, 9, 41, 2, 2, 4695,
	4795, 5, 438, 220, 31, 4696, 4697, 12, 29, 2, 2, 4697, 4698, 9, 42, 2,
	2, 4698, 4795, 5, 438, 220, 30, 4699, 4700, 12, 28, 2, 2, 4700, 4701, 9,
	43, 2, 2, 4701, 4795, 5, 438, 220, 29, 4702, 4703, 12, 27, 2, 2, 4703,
	4704, 9, 44, 2, 2, 4704, 4795, 5, 438, 220, 28, 4705, 4709, 12, 26, 2,
	2, 4706, 4707, 7, 368, 2, 2, 4707, 4710, 7, 312, 2, 2, 4708, 4710, 7, 312,
	2, 2, 4709, 4706, 3, 2, 2, 2, 4709, 4708, 3, 2, 2, 2, 4710, 4711, 3, 2,
	2, 2, 4711, 4795, 5, 438, 220, 27, 4712, 4714, 12, 25, 2, 2, 4713, 4715,
	7, 368, 2, 2, 4714, 4713, 3, 2, 2, 2, 4714, 4715, 3, 2, 2, 2, 4715, 4716,
	3, 2, 2, 2, 4716, 4717, 7, 45, 2, 2, 4717, 4718, 5, 438, 220, 2, 4718,
	4719, 7, 25, 2, 2, 4719, 4720, 5, 438, 220, 26, 4720, 4795, 3, 2, 2, 2,
	4721, 4722, 12, 24, 2, 2, 4722, 4723, 7, 268, 2, 2, 4723, 4795, 5, 438,
	220, 25, 4724, 4725, 12, 23, 2, 2, 4725, 4726, 7, 268, 2, 2, 4726, 4727,
	7, 368, 2, 2, 4727, 4795, 5, 438, 220, 24, 4728, 4729, 12, 22, 2, 2, 4729,
	4730, 9, 45, 2, 2, 4730, 4795, 5, 438, 220, 23, 4731, 4732, 12, 20, 2,
	2, 4732, 4734, 7, 292, 2, 2, 4733, 4735, 7, 368, 2, 2, 4734, 4733, 3, 2,
	2, 2, 4734, 4735, 3, 2, 2, 2, 4735, 4736, 3, 2, 2, 2, 4736, 4737, 7, 187,
	2, 2, 4737, 4738, 7, 239, 2, 2, 4738, 4795, 5, 438, 220, 21, 4739, 4740,
	12, 36, 2, 2, 4740, 4741, 7, 771, 2, 2, 4741, 4742, 5, 438, 220, 2, 4742,
	4743, 7, 772, 2, 2, 4743, 4795, 3, 2, 2, 2, 4744, 4745, 12, 31, 2, 2, 4745,
	4795, 7, 790, 2, 2, 4746, 4747, 12, 21, 2, 2, 4747, 4752, 7, 292, 2, 2,
	4748, 4753, 5, 440, 221, 2, 4749, 4753, 7, 373, 2, 2, 4750, 4751, 7, 368,
	2, 2, 4751, 4753, 7, 373, 2, 2, 4752, 4748, 3, 2, 2, 2, 4752, 4749, 3,
	2, 2, 2, 4752, 4750, 3, 2, 2, 2, 4753, 4795, 3, 2, 2, 2, 4754, 4764, 12,
	13, 2, 2, 4755, 4757, 7, 771, 2, 2, 4756, 4758, 5, 438, 220, 2, 4757, 4756,
	3, 2, 2, 2, 4757, 4758, 3, 2, 2, 2, 4758, 4759, 3, 2, 2, 2, 4759, 4761,
	7, 764, 2, 2, 4760, 4762, 5, 438, 220, 2, 4761, 4760, 3, 2, 2, 2, 4761,
	4762, 3, 2, 2, 2, 4762, 4763, 3, 2, 2, 2, 4763, 4765, 7, 772, 2, 2, 4764,
	4755, 3, 2, 2, 2, 4765, 4766, 3, 2, 2, 2, 4766, 4764, 3, 2, 2, 2, 4766,
	4767, 3, 2, 2, 2, 4767, 4795, 3, 2, 2, 2, 4768, 4771, 12, 12, 2, 2, 4769,
	4770, 7, 765, 2, 2, 4770, 4772, 5, 476, 239, 2, 4771, 4769, 3, 2, 2, 2,
	4772, 4773, 3, 2, 2, 2, 4773, 4771, 3, 2, 2, 2, 4773, 4774, 3, 2, 2, 2,
	4774, 4795, 3, 2, 2, 2, 4775, 4776, 12, 10, 2, 2, 4776, 4777, 7, 292, 2,
	2, 4777, 4778, 7, 382, 2, 2, 4778, 4779, 7, 769, 2, 2, 4779, 4780, 5, 476,
	239, 2, 4780, 4781, 7, 770, 2, 2, 4781, 4795, 3, 2, 2, 2, 4782, 4783, 12,
	9, 2, 2, 4783, 4786, 7, 778, 2, 2, 4784, 4787, 5, 518, 260, 2, 4785, 4787,
	7, 768, 2, 2, 4786, 4784, 3, 2, 2, 2, 4786, 4785, 3, 2, 2, 2, 4787, 4795,
	3, 2, 2, 2, 4788, 4789, 12, 6, 2, 2, 4789, 4790, 7, 35, 2, 2, 4790, 4791,
	7, 581, 2, 2, 4791, 4792, 7, 657, 2, 2, 4792, 4793, 3, 2, 2, 2, 4793, 4795,
	7, 779, 2, 2, 4794, 4693, 3, 2, 2, 2, 4794, 4696, 3, 2, 2, 2, 4794, 4699,
	3, 2, 2, 2, 4794, 4702, 3, 2, 2, 2, 4794, 4705, 3, 2, 2, 2, 4794, 4712,
	3, 2, 2, 2, 4794, 4721, 3, 2, 2, 2, 4794, 4724, 3, 2, 2, 2, 4794, 4728,
	3, 2, 2, 2, 4794, 4731, 3, 2, 2, 2, 4794, 4739, 3, 2, 2, 2, 4794, 4744,
	3, 2, 2, 2, 4794, 4746, 3, 2, 2, 2, 4794, 4754, 3, 2, 2, 2, 4794, 4768,
	3, 2, 2, 2, 4794, 4775, 3, 2, 2, 2, 4794, 4782, 3, 2, 2, 2, 4794, 4788,
	3, 2, 2, 2, 4795, 4798, 3, 2, 2, 2, 4796, 4794, 3, 2, 2, 2, 4796, 4797,
	3, 2, 2, 2, 4797, 439, 3, 2, 2, 2, 4798, 4796, 3, 2, 2, 2, 4799, 4800,
	8, 221, 1, 2, 4800, 4805, 7, 604, 2, 2, 4801, 4805, 7, 221, 2, 2, 4802,
	4803, 7, 368, 2, 2, 4803, 4805, 5, 440, 221, 5, 4804, 4799, 3, 2, 2, 2,
	4804, 4801, 3, 2, 2, 2, 4804, 4802, 3, 2, 2, 2, 4805, 4814, 3, 2, 2, 2,
	4806, 4807, 12, 4, 2, 2, 4807, 4808, 7, 25, 2, 2, 4808, 4813, 5, 440, 221,
	5, 4809, 4810, 12, 3, 2, 2, 4810, 4811, 7, 394, 2, 2, 4811, 4813, 5, 440,
	221, 4, 4812, 4806, 3, 2, 2, 2, 4812, 4809, 3, 2, 2, 2, 4813, 4816, 3,
	2, 2, 2, 4814, 4812, 3, 2, 2, 2, 4814, 4815, 3, 2, 2, 2, 4815, 441, 3,
	2, 2, 2, 4816, 4814, 3, 2, 2, 2, 4817, 4818, 7, 64, 2, 2, 4818, 4824, 5,
	438, 220, 2, 4819, 4820, 7, 644, 2, 2, 4820, 4821, 5, 438, 220, 2, 4821,
	4822, 7, 579, 2, 2, 4822, 4823, 5, 438, 220, 2, 4823, 4825, 3, 2, 2, 2,
	4824, 4819, 3, 2, 2, 2, 4825, 4826, 3, 2, 2, 2, 4826, 4824, 3, 2, 2, 2,
	4826, 4827, 3, 2, 2, 2, 4827, 4830, 3, 2, 2, 2, 4828, 4829, 7, 197, 2,
	2, 4829, 4831, 5, 438, 220, 2, 4830, 4828, 3, 2, 2, 2, 4830, 4831, 3, 2,
	2, 2, 4831, 4832, 3, 2, 2, 2, 4832, 4833, 7, 201, 2, 2, 4833, 4851, 3,
	2, 2, 2, 4834, 4840, 7, 64, 2, 2, 4835, 4836, 7, 644, 2, 2, 4836, 4837,
	5, 496, 249, 2, 4837, 4838, 7, 579, 2, 2, 4838, 4839, 5, 438, 220, 2, 4839,
	4841, 3, 2, 2, 2, 4840, 4835, 3, 2, 2, 2, 4841, 4842, 3, 2, 2, 2, 4842,
	4840, 3, 2, 2, 2, 4842, 4843, 3, 2, 2, 2, 4843, 4846, 3, 2, 2, 2, 4844,
	4845, 7, 197, 2, 2, 4845, 4847, 5, 438, 220, 2, 4846, 4844, 3, 2, 2, 2,
	4846, 4847, 3, 2, 2, 2, 4847, 4848, 3, 2, 2, 2, 4848, 4849, 7, 201, 2,
	2, 4849, 4851, 3, 2, 2, 2, 4850, 4817, 3, 2, 2, 2, 4850, 4834, 3, 2, 2,
	2, 4851, 443, 3, 2, 2, 2, 4852, 4853, 7, 769, 2, 2, 4853, 4858, 5, 438,
	220, 2, 4854, 4855, 7, 763, 2, 2, 4855, 4857, 5, 438, 220, 2, 4856, 4854,
	3, 2, 2, 2, 4857, 4860, 3, 2, 2, 2, 4858, 4856, 3, 2, 2, 2, 4858, 4859,
	3, 2, 2, 2, 4859, 4861, 3, 2, 2, 2, 4860, 4858, 3, 2, 2, 2, 4861, 4862,
	7, 770, 2, 2, 4862, 445, 3, 2, 2, 2, 4863, 4865, 7, 769, 2, 2, 4864, 4863,
	3, 2, 2, 2, 4864, 4865, 3, 2, 2, 2, 4865, 4866, 3, 2, 2, 2, 4866, 4871,
	5, 444, 223, 2, 4867, 4868, 7, 763, 2, 2, 4868, 4870, 5, 444, 223, 2, 4869,
	4867, 3, 2, 2, 2, 4870, 4873, 3, 2, 2, 2, 4871, 4869, 3, 2, 2, 2, 4871,
	4872, 3, 2, 2, 2, 4872, 4875, 3, 2, 2, 2, 4873, 4871, 3, 2, 2, 2, 4874,
	4876, 7, 770, 2, 2, 4875, 4874, 3, 2, 2, 2, 4875, 4876, 3, 2, 2, 2, 4876,
	447, 3, 2, 2, 2, 4877, 4879, 9, 46, 2, 2, 4878, 4877, 3, 2, 2, 2, 4878,
	4879, 3, 2, 2, 2, 4879, 4881, 3, 2, 2, 2, 4880, 4882, 5, 518, 260, 2, 4881,
	4880, 3, 2, 2, 2, 4881, 4882, 3, 2, 2, 2, 4882, 4883, 3, 2, 2, 2, 4883,
	4885, 5, 476, 239, 2, 4884, 4878, 3, 2, 2, 2, 4884, 4885, 3, 2, 2, 2, 4885,
	449, 3, 2, 2, 2, 4886, 4891, 5, 448, 225, 2, 4887, 4888, 7, 763, 2, 2,
	4888, 4890, 5, 448, 225, 2, 4889, 4887, 3, 2, 2, 2, 4890, 4893, 3, 2, 2,
	2, 4891, 4889, 3, 2, 2, 2, 4891, 4892, 3, 2, 2, 2, 4892, 451, 3, 2, 2,
	2, 4893, 4891, 3, 2, 2, 2, 4894, 4899, 5, 518, 260, 2, 4895, 4896, 7, 769,
	2, 2, 4896, 4897, 5, 450, 226, 2, 4897, 4898, 7, 770, 2, 2, 4898, 4900,
	3, 2, 2, 2, 4899, 4895, 3, 2, 2, 2, 4899, 4900, 3, 2, 2, 2, 4900, 453,
	3, 2, 2, 2, 4901, 4906, 5, 452, 227, 2, 4902, 4903, 7, 763, 2, 2, 4903,
	4905, 5, 452, 227, 2, 4904, 4902, 3, 2, 2, 2, 4905, 4908, 3, 2, 2, 2, 4906,
	4904, 3, 2, 2, 2, 4906, 4907, 3, 2, 2, 2, 4907, 455, 3, 2, 2, 2, 4908,
	4906, 3, 2, 2, 2, 4909, 5054, 7, 722, 2, 2, 4910, 5054, 7, 747, 2, 2, 4911,
	5054, 7, 46, 2, 2, 4912, 5054, 7, 723, 2, 2, 4913, 4917, 7, 48, 2, 2, 4914,
	4915, 7, 769, 2, 2, 4915, 4916, 7, 776, 2, 2, 4916, 4918, 7, 770, 2, 2,
	4917, 4914, 3, 2, 2, 2, 4917, 4918, 3, 2, 2, 2, 4918, 5054, 3, 2, 2, 2,
	4919, 4923, 7, 724, 2, 2, 4920, 4921, 7, 769, 2, 2, 4921, 4922, 7, 776,
	2, 2, 4922, 4924, 7, 770, 2, 2, 4923, 4920, 3, 2, 2, 2, 4923, 4924, 3,
	2, 2, 2, 4924, 5054, 3, 2, 2, 2, 4925, 5054, 7, 725, 2, 2, 4926, 5054,
	7, 52, 2, 2, 4927, 5054, 7, 726, 2, 2, 4928, 5054, 7, 727, 2, 2, 4929,
	4933, 7, 71, 2, 2, 4930, 4931, 7, 769, 2, 2, 4931, 4932, 7, 776, 2, 2,
	4932, 4934, 7, 770, 2, 2, 4933, 4930, 3, 2, 2, 2, 4933, 4934, 3, 2, 2,
	2, 4934, 5054, 3, 2, 2, 2, 4935, 4939, 7, 73, 2, 2, 4936, 4937, 7, 769,
	2, 2, 4937, 4938, 7, 776, 2, 2, 4938, 4940, 7, 770, 2, 2, 4939, 4936, 3,
	2, 2, 2, 4939, 4940, 3, 2, 2, 2, 4940, 5054, 3, 2, 2, 2, 4941, 4945, 7,
	728, 2, 2, 4942, 4943, 7, 769, 2, 2, 4943, 4944, 7, 776, 2, 2, 4944, 4946,
	7, 770, 2, 2, 4945, 4942, 3, 2, 2, 2, 4945, 4946, 3, 2, 2, 2, 4946, 5054,
	3, 2, 2, 2, 4947, 5054, 7, 729, 2, 2, 4948, 5054, 7, 730, 2, 2, 4949, 5054,
	7, 150, 2, 2, 4950, 4956, 7, 156, 2, 2, 4951, 4952, 7, 769, 2, 2, 4952,
	4953, 7, 776, 2, 2, 4953, 4954, 7, 763, 2, 2, 4954, 4955, 7, 776, 2, 2,
	4955, 4957, 7, 770, 2, 2, 4956, 4951, 3, 2, 2, 2, 4956, 4957, 3, 2, 2,
	2, 4957, 5054, 3, 2, 2, 2, 4958, 4959, 7, 190, 2, 2, 4959, 5054, 7, 433,
	2, 2, 4960, 5054, 7, 731, 2, 2, 4961, 5054, 7, 732, 2, 2, 4962, 5054, 7,
	733, 2, 2, 4963, 5054, 7, 285, 2, 2, 4964, 5054, 7, 735, 2, 2, 4965, 5054,
	7, 734, 2, 2, 4966, 5054, 7, 736, 2, 2, 4967, 5054, 7, 286, 2, 2, 4968,
	4970, 7, 289, 2, 2, 4969, 4971, 7, 223, 2, 2, 4970, 4969, 3, 2, 2, 2, 4970,
	4971, 3, 2, 2, 2, 4971, 4973, 3, 2, 2, 2, 4972, 4974, 7, 776, 2, 2, 4973,
	4972, 3, 2, 2, 2, 4973, 4974, 3, 2, 2, 2, 4974, 5054, 3, 2, 2, 2, 4975,
	5054, 7, 737, 2, 2, 4976, 5054, 7, 738, 2, 2, 4977, 5054, 7, 739, 2, 2,
	4978, 5054, 7, 740, 2, 2, 4979, 5054, 7, 741, 2, 2, 4980, 5054, 7, 742,
	2, 2, 4981, 5054, 7, 743, 2, 2, 4982, 4988, 7, 378, 2, 2, 4983, 4984, 7,
	769, 2, 2, 4984, 4985, 7, 776, 2, 2, 4985, 4986, 7, 763, 2, 2, 4986, 4987,
	7, 776, 2, 2, 4987, 4989, 7, 770, 2, 2, 4988, 4983, 3, 2, 2, 2, 4988, 4989,
	3, 2, 2, 2, 4989, 5054, 3, 2, 2, 2, 4990, 5054, 7, 421, 2, 2, 4991, 5054,
	7, 744, 2, 2, 4992, 5054, 7, 745, 2, 2, 4993, 5054, 7, 746, 2, 2, 4994,
	5054, 7, 451, 2, 2, 4995, 5054, 7, 748, 2, 2, 4996, 5054, 7, 749, 2, 2,
	4997, 5054, 7, 750, 2, 2, 4998, 5054, 7, 751, 2, 2, 4999, 5054, 7, 531,
	2, 2, 5000, 5054, 7, 752, 2, 2, 5001, 5054, 7, 754, 2, 2, 5002, 5006, 7,
	581, 2, 2, 5003, 5004, 7, 769, 2, 2, 5004, 5005, 7, 776, 2, 2, 5005, 5007,
	7, 770, 2, 2, 5006, 5003, 3, 2, 2, 2, 5006, 5007, 3, 2, 2, 2, 5007, 5011,
	3, 2, 2, 2, 5008, 5009, 9, 47, 2, 2, 5009, 5010, 7, 581, 2, 2, 5010, 5012,
	7, 657, 2, 2, 5011, 5008, 3, 2, 2, 2, 5011, 5012, 3, 2, 2, 2, 5012, 5054,
	3, 2, 2, 2, 5013, 5017, 7, 582, 2, 2, 5014, 5015, 7, 769, 2, 2, 5015, 5016,
	7, 776, 2, 2, 5016, 5018, 7, 770, 2, 2, 5017, 5014, 3, 2, 2, 2, 5017, 5018,
	3, 2, 2, 2, 5018, 5022, 3, 2, 2, 2, 5019, 5020, 9, 47, 2, 2, 5020, 5021,
	7, 581, 2, 2, 5021, 5023, 7, 657, 2, 2, 5022, 5019, 3, 2, 2, 2, 5022, 5023,
	3, 2, 2, 2, 5023, 5054, 3, 2, 2, 2, 5024, 5028, 7, 756, 2, 2, 5025, 5026,
	7, 769, 2, 2, 5026, 5027, 7, 776, 2, 2, 5027, 5029, 7, 770, 2, 2, 5028,
	5025, 3, 2, 2, 2, 5028, 5029, 3, 2, 2, 2, 5029, 5054, 3, 2, 2, 2, 5030,
	5034, 7, 755, 2, 2, 5031, 5032, 7, 769, 2, 2, 5032, 5033, 7, 776, 2, 2,
	5033, 5035, 7, 770, 2, 2, 5034, 5031, 3, 2, 2, 2, 5034, 5035, 3, 2, 2,
	2, 5035, 5054, 3, 2, 2, 2, 5036, 5054, 7, 757, 2, 2, 5037, 5054, 7, 758,
	2, 2, 5038, 5054, 7, 759, 2, 2, 5039, 5054, 7, 760, 2, 2, 5040, 5044, 7,
	761, 2, 2, 5041, 5042, 7, 769, 2, 2, 5042, 5043, 7, 776, 2, 2, 5043, 5045,
	7, 770, 2, 2, 5044, 5041, 3, 2, 2, 2, 5044, 5045, 3, 2, 2, 2, 5045, 5054,
	3, 2, 2, 2, 5046, 5050, 7, 637, 2, 2, 5047, 5048, 7, 769, 2, 2, 5048, 5049,
	7, 776, 2, 2, 5049, 5051, 7, 770, 2, 2, 5050, 5047, 3, 2, 2, 2, 5050, 5051,
	3, 2, 2, 2, 5051, 5054, 3, 2, 2, 2, 5052, 5054, 7, 762, 2, 2, 5053, 4909,
	3, 2, 2, 2, 5053, 4910, 3, 2, 2, 2, 5053, 4911, 3, 2, 2, 2, 5053, 4912,
	3, 2, 2, 2, 5053, 4913, 3, 2, 2, 2, 5053, 4919, 3, 2, 2, 2, 5053, 4925,
	3, 2, 2, 2, 5053, 4926, 3, 2, 2, 2, 5053, 4927, 3, 2, 2, 2, 5053, 4928,
	3, 2, 2, 2, 5053, 4929, 3, 2, 2, 2, 5053, 4935, 3, 2, 2, 2, 5053, 4941,
	3, 2, 2, 2, 5053, 4947, 3, 2, 2, 2, 5053, 4948, 3, 2, 2, 2, 5053, 4949,
	3, 2, 2, 2, 5053, 4950, 3, 2, 2, 2, 5053, 4958, 3, 2, 2, 2, 5053, 4960,
	3, 2, 2, 2, 5053, 4961, 3, 2, 2, 2, 5053, 4962, 3, 2, 2, 2, 5053, 4963,
	3, 2, 2, 2, 5053, 4964, 3, 2, 2, 2, 5053, 4965, 3, 2, 2, 2, 5053, 4966,
	3, 2, 2, 2, 5053, 4967, 3, 2, 2, 2, 5053, 4968, 3, 2, 2, 2, 5053, 4975,
	3, 2, 2, 2, 5053, 4976, 3, 2, 2, 2, 5053, 4977, 3, 2, 2, 2, 5053, 4978,
	3, 2, 2, 2, 5053, 4979, 3, 2, 2, 2, 5053, 4980, 3, 2, 2, 2, 5053, 4981,
	3, 2, 2, 2, 5053, 4982, 3, 2, 2, 2, 5053, 4990, 3, 2, 2, 2, 5053, 4991,
	3, 2, 2, 2, 5053, 4992, 3, 2, 2, 2, 5053, 4993, 3, 2, 2, 2, 5053, 4994,
	3, 2, 2, 2, 5053, 4995, 3, 2, 2, 2, 5053, 4996, 3, 2, 2, 2, 5053, 4997,
	3, 2, 2, 2, 5053, 4998, 3, 2, 2, 2, 5053, 4999, 3, 2, 2, 2, 5053, 5000,
	3, 2, 2, 2, 5053, 5001, 3, 2, 2, 2, 5053, 5002, 3, 2, 2, 2, 5053, 5013,
	3, 2, 2, 2, 5053, 5024, 3, 2, 2, 2, 5053, 5030, 3, 2, 2, 2, 5053, 5036,
	3, 2, 2, 2, 5053, 5037, 3, 2, 2, 2, 5053, 5038, 3, 2, 2, 2, 5053, 5039,
	3, 2, 2, 2, 5053, 5040, 3, 2, 2, 2, 5053, 5046, 3, 2, 2, 2, 5053, 5052,
	3, 2, 2, 2, 5054, 457, 3, 2, 2, 2, 5055, 5056, 9, 48, 2, 2, 5056, 459,
	3, 2, 2, 2, 5057, 5062, 3, 2, 2, 2, 5058, 5059, 7, 292, 2, 2, 5059, 5062,
	7, 382, 2, 2, 5060, 5062, 7, 18, 2, 2, 5061, 5057, 3, 2, 2, 2, 5061, 5058,
	3, 2, 2, 2, 5061, 5060, 3, 2, 2, 2, 5062, 461, 3, 2, 2, 2, 5063, 5064,
	5, 518, 260, 2, 5064, 5066, 7, 769, 2, 2, 5065, 5067, 9, 33, 2, 2, 5066,
	5065, 3, 2, 2, 2, 5066, 5067, 3, 2, 2, 2, 5067, 5068, 3, 2, 2, 2, 5068,
	5073, 5, 438, 220, 2, 5069, 5070, 7, 763, 2, 2, 5070, 5072, 5, 438, 220,
	2, 5071, 5069, 3, 2, 2, 2, 5072, 5075, 3, 2, 2, 2, 5073, 5071, 3, 2, 2,
	2, 5073, 5074, 3, 2, 2, 2, 5074, 5077, 3, 2, 2, 2, 5075, 5073, 3, 2, 2,
	2, 5076, 5078, 5, 420, 211, 2, 5077, 5076, 3, 2, 2, 2, 5077, 5078, 3, 2,
	2, 2, 5078, 5079, 3, 2, 2, 2, 5079, 5086, 7, 770, 2, 2, 5080, 5081, 7,
	224, 2, 2, 5081, 5082, 7, 769, 2, 2, 5082, 5083, 7, 646, 2, 2, 5083, 5084,
	5, 392, 197, 2, 5084, 5085, 7, 770, 2, 2, 5085, 5087, 3, 2, 2, 2, 5086,
	5080, 3, 2, 2, 2, 5086, 5087, 3, 2, 2, 2, 5087, 5127, 3, 2, 2, 2, 5088,
	5089, 5, 518, 260, 2, 5089, 5090, 7, 769, 2, 2, 5090, 5091, 7, 768, 2,
	2, 5091, 5098, 7, 770, 2, 2, 5092, 5093, 7, 224, 2, 2, 5093, 5094, 7, 769,
	2, 2, 5094, 5095, 7, 646, 2, 2, 5095, 5096, 5, 392, 197, 2, 5096, 5097,
	7, 770, 2, 2, 5097, 5099, 3, 2, 2, 2, 5098, 5092, 3, 2, 2, 2, 5098, 5099,
	3, 2, 2, 2, 5099, 5127, 3, 2, 2, 2, 5100, 5101, 5, 518, 260, 2, 5101, 5110,
	7, 769, 2, 2, 5102, 5107, 5, 438, 220, 2, 5103, 5104, 7, 763, 2, 2, 5104,
	5106, 5, 438, 220, 2, 5105, 5103, 3, 2, 2, 2, 5106, 5109, 3, 2, 2, 2, 5107,
	5105, 3, 2, 2, 2, 5107, 5108, 3, 2, 2, 2, 5108, 5111, 3, 2, 2, 2, 5109,
	5107, 3, 2, 2, 2, 5110, 5102, 3, 2, 2, 2, 5110, 5111, 3, 2, 2, 2, 5111,
	5112, 3, 2, 2, 2, 5112, 5113, 7, 770, 2, 2, 5113, 5114, 7, 650, 2, 2, 5114,
	5115, 7, 253, 2, 2, 5115, 5116, 7, 769, 2, 2, 5116, 5117, 5, 420, 211,
	2, 5117, 5124, 7, 770, 2, 2, 5118, 5119, 7, 224, 2, 2, 5119, 5120, 7, 769,
	2, 2, 5120, 5121, 7, 646, 2, 2, 5121, 5122, 5, 392, 197, 2, 5122, 5123,
	7, 770, 2, 2, 5123, 5125, 3, 2, 2, 2, 5124, 5118, 3, 2, 2, 2, 5124, 5125,
	3, 2, 2, 2, 5125, 5127, 3, 2, 2, 2, 5126, 5063, 3, 2, 2, 2, 5126, 5088,
	3, 2, 2, 2, 5126, 5100, 3, 2, 2, 2, 5127, 463, 3, 2, 2, 2, 5128, 5131,
	7, 779, 2, 2, 5129, 5131, 5, 518, 260, 2, 5130, 5128, 3, 2, 2, 2, 5130,
	5129, 3, 2, 2, 2, 5131, 465, 3, 2, 2, 2, 5132, 5137, 5, 464, 233, 2, 5133,
	5134, 7, 763, 2, 2, 5134, 5136, 5, 464, 233, 2, 5135, 5133, 3, 2, 2, 2,
	5136, 5139, 3, 2, 2, 2, 5137, 5135, 3, 2, 2, 2, 5137, 5138, 3, 2, 2, 2,
	5138, 467, 3, 2, 2, 2, 5139, 5137, 3, 2, 2, 2, 5140, 5145, 5, 518, 260,
	2, 5141, 5142, 7, 763, 2, 2, 5142, 5144, 5, 518, 260, 2, 5143, 5141, 3,
	2, 2, 2, 5144, 5147, 3, 2, 2, 2, 5145, 5143, 3, 2, 2, 2, 5145, 5146, 3,
	2, 2, 2, 5146, 469, 3, 2, 2, 2, 5147, 5145, 3, 2, 2, 2, 5148, 5151, 5,
	518, 260, 2, 5149, 5150, 7, 794, 2, 2, 5150, 5152, 5, 514, 258, 2, 5151,
	5149, 3, 2, 2, 2, 5151, 5152, 3, 2, 2, 2, 5152, 471, 3, 2, 2, 2, 5153,
	5158, 5, 470, 236, 2, 5154, 5155, 7, 763, 2, 2, 5155, 5157, 5, 470, 236,
	2, 5156, 5154, 3, 2, 2, 2, 5157, 5160, 3, 2, 2, 2, 5158, 5156, 3, 2, 2,
	2, 5158, 5159, 3, 2, 2, 2, 5159, 473, 3, 2, 2, 2, 5160, 5158, 3, 2, 2,
	2, 5161, 5162, 5, 518, 260, 2, 5162, 475, 3, 2, 2, 2, 5163, 5166, 5, 456,
	229, 2, 5164, 5166, 5, 518, 260, 2, 5165, 5163, 3, 2, 2, 2, 5165, 5164,
	3, 2, 2, 2, 5166, 5174, 3, 2, 2, 2, 5167, 5169, 7, 771, 2, 2, 5168, 5170,
	7, 776, 2, 2, 5169, 5168, 3, 2, 2, 2, 5169, 5170, 3, 2, 2, 2, 5170, 5171,
	3, 2, 2, 2, 5171, 5173, 7, 772, 2, 2, 5172, 5167, 3, 2, 2, 2, 5173, 5176,
	3, 2, 2, 2, 5174, 5172, 3, 2, 2, 2, 5174, 5175, 3, 2, 2, 2, 5175, 477,
	3, 2, 2, 2, 5176, 5174, 3, 2, 2, 2, 5177, 5182, 5, 476, 239, 2, 5178, 5179,
	7, 763, 2, 2, 5179, 5181, 5, 476, 239, 2, 5180, 5178, 3, 2, 2, 2, 5181,
	5184, 3, 2, 2, 2, 5182, 5180, 3, 2, 2, 2, 5182, 5183, 3, 2, 2, 2, 5183,
	479, 3, 2, 2, 2, 5184, 5182, 3, 2, 2, 2, 5185, 5188, 9, 49, 2, 2, 5186,
	5188, 5, 518, 260, 2, 5187, 5185, 3, 2, 2, 2, 5187, 5186, 3, 2, 2, 2, 5188,
	481, 3, 2, 2, 2, 5189, 5190, 5, 518, 260, 2, 5190, 483, 3, 2, 2, 2, 5191,
	5192, 5, 482, 242, 2, 5192, 5193, 7, 769, 2, 2, 5193, 5194, 7, 639, 2,
	2, 5194, 5195, 5, 438, 220, 2, 5195, 5196, 7, 770, 2, 2, 5196, 5228, 3,
	2, 2, 2, 5197, 5198, 5, 482, 242, 2, 5198, 5212, 7, 769, 2, 2, 5199, 5204,
	5, 438, 220, 2, 5200, 5201, 7, 763, 2, 2, 5201, 5203, 5, 438, 220, 2, 5202,
	5200, 3, 2, 2, 2, 5203, 5206, 3, 2, 2, 2, 5204, 5202, 3, 2, 2, 2, 5204,
	5205, 3, 2, 2, 2, 5205, 5210, 3, 2, 2, 2, 5206, 5204, 3, 2, 2, 2, 5207,
	5208, 7, 763, 2, 2, 5208, 5209, 7, 639, 2, 2, 5209, 5211, 5, 438, 220,
	2, 5210, 5207, 3, 2, 2, 2, 5210, 5211, 3, 2, 2, 2, 5211, 5213, 3, 2, 2,
	2, 5212, 5199, 3, 2, 2, 2, 5212, 5213, 3, 2, 2, 2, 5213, 5214, 3, 2, 2,
	2, 5214, 5215, 7, 770, 2, 2, 5215, 5228, 3, 2, 2, 2, 5216, 5217, 5, 482,
	242, 2, 5217, 5218, 7, 769, 2, 2, 5218, 5219, 5, 520, 261, 2, 5219, 5220,
	7, 239, 2, 2, 5220, 5223, 5, 438, 220, 2, 5221, 5222, 7, 230, 2, 2, 5222,
	5224, 5, 438, 220, 2, 5223, 5221, 3, 2, 2, 2, 5223, 5224, 3, 2, 2, 2, 5224,
	5225, 3, 2, 2, 2, 5225, 5226, 7, 770, 2, 2, 5226, 5228, 3, 2, 2, 2, 5227,
	5191, 3, 2, 2, 2, 5227, 5197, 3, 2, 2, 2, 5227, 5216, 3, 2, 2, 2, 5228,
	485, 3, 2, 2, 2, 5229, 5230, 7, 28, 2, 2, 5230, 5239, 7, 771, 2, 2, 5231,
	5236, 5, 438, 220, 2, 5232, 5233, 7, 763, 2, 2, 5233, 5235, 5, 438, 220,
	2, 5234, 5232, 3, 2, 2, 2, 5235, 5238, 3, 2, 2, 2, 5236, 5234, 3, 2, 2,
	2, 5236, 5237, 3, 2, 2, 2, 5237, 5240, 3, 2, 2, 2, 5238, 5236, 3, 2, 2,
	2, 5239, 5231, 3, 2, 2, 2, 5239, 5240, 3, 2, 2, 2, 5240, 5241, 3, 2, 2,
	2, 5241, 5242, 7, 772, 2, 2, 5242, 487, 3, 2, 2, 2, 5243, 5245, 8, 245,
	1, 2, 5244, 5246, 7, 388, 2, 2, 5245, 5244, 3, 2, 2, 2, 5245, 5246, 3,
	2, 2, 2, 5246, 5247, 3, 2, 2, 2, 5247, 5249, 5, 474, 238, 2, 5248, 5250,
	7, 768, 2, 2, 5249, 5248, 3, 2, 2, 2, 5249, 5250, 3, 2, 2, 2, 5250, 5252,
	3, 2, 2, 2, 5251, 5253, 5, 490, 246, 2, 5252, 5251, 3, 2, 2, 2, 5252, 5253,
	3, 2, 2, 2, 5253, 5273, 3, 2, 2, 2, 5254, 5255, 7, 572, 2, 2, 5255, 5256,
	5, 520, 261, 2, 5256, 5257, 7, 769, 2, 2, 5257, 5262, 5, 438, 220, 2, 5258,
	5259, 7, 763, 2, 2, 5259, 5261, 5, 438, 220, 2, 5260, 5258, 3, 2, 2, 2,
	5261, 5264, 3, 2, 2, 2, 5262, 5260, 3, 2, 2, 2, 5262, 5263, 3, 2, 2, 2,
	5263, 5265, 3, 2, 2, 2, 5264, 5262, 3, 2, 2, 2, 5265, 5271, 7, 770, 2,
	2, 5266, 5267, 7, 472, 2, 2, 5267, 5268, 7, 769, 2, 2, 5268, 5269, 5, 520,
	261, 2, 5269, 5270, 7, 770, 2, 2, 5270, 5272, 3, 2, 2, 2, 5271, 5266, 3,
	2, 2, 2, 5271, 5272, 3, 2, 2, 2, 5272, 5274, 3, 2, 2, 2, 5273, 5254, 3,
	2, 2, 2, 5273, 5274, 3, 2, 2, 2, 5274, 5350, 3, 2, 2, 2, 5275, 5277, 7,
	305, 2, 2, 5276, 5275, 3, 2, 2, 2, 5276, 5277, 3, 2, 2, 2, 5277, 5278,
	3, 2, 2, 2, 5278, 5279, 7, 769, 2, 2, 5279, 5280, 5, 4, 3, 2, 5280, 5282,
	7, 770, 2, 2, 5281, 5283, 7, 29, 2, 2, 5282, 5281, 3, 2, 2, 2, 5282, 5283,
	3, 2, 2, 2, 5283, 5284, 3, 2, 2, 2, 5284, 5296, 5, 528, 265, 2, 5285, 5286,
	7, 769, 2, 2, 5286, 5291, 5, 530, 266, 2, 5287, 5288, 7, 763, 2, 2, 5288,
	5290, 5, 530, 266, 2, 5289, 5287, 3, 2, 2, 2, 5290, 5293, 3, 2, 2, 2, 5291,
	5289, 3, 2, 2, 2, 5291, 5292, 3, 2, 2, 2, 5292, 5294, 3, 2, 2, 2, 5293,
	5291, 3, 2, 2, 2, 5294, 5295, 7, 770, 2, 2, 5295, 5297, 3, 2, 2, 2, 5296,
	5285, 3, 2, 2, 2, 5296, 5297, 3, 2, 2, 2, 5297, 5350, 3, 2, 2, 2, 5298,
	5300, 7, 305, 2, 2, 5299, 5298, 3, 2, 2, 2, 5299, 5300, 3, 2, 2, 2, 5300,
	5301, 3, 2, 2, 2, 5301, 5304, 5, 484, 243, 2, 5302, 5303, 7, 649, 2, 2,
	5303, 5305, 7, 397, 2, 2, 5304, 5302, 3, 2, 2, 2, 5304, 5305, 3, 2, 2,
	2, 5305, 5307, 3, 2, 2, 2, 5306, 5308, 5, 490, 246, 2, 5307, 5306, 3, 2,
	2, 2, 5307, 5308, 3, 2, 2, 2, 5308, 5350, 3, 2, 2, 2, 5309, 5311, 7, 305,
	2, 2, 5310, 5309, 3, 2, 2, 2, 5310, 5311, 3, 2, 2, 2, 5311, 5312, 3, 2,
	2, 2, 5312, 5313, 5, 484, 243, 2, 5313, 5314, 7, 29, 2, 2, 5314, 5315,
	7, 769, 2, 2, 5315, 5320, 5, 532, 267, 2, 5316, 5317, 7, 763, 2, 2, 5317,
	5319, 5, 532, 267, 2, 5318, 5316, 3, 2, 2, 2, 5319, 5322, 3, 2, 2, 2, 5320,
	5318, 3, 2, 2, 2, 5320, 5321, 3, 2, 2, 2, 5321, 5323, 3, 2, 2, 2, 5322,
	5320, 3, 2, 2, 2, 5323, 5324, 7, 770, 2, 2, 5324, 5350, 3, 2, 2, 2, 5325,
	5327, 7, 305, 2, 2, 5326, 5325, 3, 2, 2, 2, 5326, 5327, 3, 2, 2, 2, 5327,
	5328, 3, 2, 2, 2, 5328, 5329, 7, 498, 2, 2, 5329, 5330, 7, 239, 2, 2, 5330,
	5331, 7, 769, 2, 2, 5331, 5332, 5, 484, 243, 2, 5332, 5345, 7, 770, 2,
	2, 5333, 5334, 7, 29, 2, 2, 5334, 5335, 7, 769, 2, 2, 5335, 5340, 5, 532,
	267, 2, 5336, 5337, 7, 763, 2, 2, 5337, 5339, 5, 532, 267, 2, 5338, 5336,
	3, 2, 2, 2, 5339, 5342, 3, 2, 2, 2, 5340, 5338, 3, 2, 2, 2, 5340, 5341,
	3, 2, 2, 2, 5341, 5343, 3, 2, 2, 2, 5342, 5340, 3, 2, 2, 2, 5343, 5344,
	7, 770, 2, 2, 5344, 5346, 3, 2, 2, 2, 5345, 5333, 3, 2, 2, 2, 5345, 5346,
	3, 2, 2, 2, 5346, 5347, 3, 2, 2, 2, 5347, 5348, 7, 770, 2, 2, 5348, 5350,
	3, 2, 2, 2, 5349, 5243, 3, 2, 2, 2, 5349, 5276, 3, 2, 2, 2, 5349, 5299,
	3, 2, 2, 2, 5349, 5310, 3, 2, 2, 2, 5349, 5326, 3, 2, 2, 2, 5350, 5368,
	3, 2, 2, 2, 5351, 5353, 12, 3, 2, 2, 5352, 5354, 7, 356, 2, 2, 5353, 5352,
	3, 2, 2, 2, 5353, 5354, 3, 2, 2, 2, 5354, 5355, 3, 2, 2, 2, 5355, 5357,
	5, 492, 247, 2, 5356, 5358, 7, 769, 2, 2, 5357, 5356, 3, 2, 2, 2, 5357,
	5358, 3, 2, 2, 2, 5358, 5359, 3, 2, 2, 2, 5359, 5361, 5, 488, 245, 2, 5360,
	5362, 5, 494, 248, 2, 5361, 5360, 3, 2, 2, 2, 5361, 5362, 3, 2, 2, 2, 5362,
	5364, 3, 2, 2, 2, 5363, 5365, 7, 770, 2, 2, 5364, 5363, 3, 2, 2, 2, 5364,
	5365, 3, 2, 2, 2, 5365, 5367, 3, 2, 2, 2, 5366, 5351, 3, 2, 2, 2, 5367,
	5370, 3, 2, 2, 2, 5368, 5366, 3, 2, 2, 2, 5368, 5369, 3, 2, 2, 2, 5369,
	489, 3, 2, 2, 2, 5370, 5368, 3, 2, 2, 2, 5371, 5373, 7, 29, 2, 2, 5372,
	5371, 3, 2, 2, 2, 5372, 5373, 3, 2, 2, 2, 5373, 5374, 3, 2, 2, 2, 5374,
	5383, 5, 528, 265, 2, 5375, 5380, 5, 530, 266, 2, 5376, 5377, 7, 763, 2,
	2, 5377, 5379, 5, 530, 266, 2, 5378, 5376, 3, 2, 2, 2, 5379, 5382, 3, 2,
	2, 2, 5380, 5378, 3, 2, 2, 2, 5380, 5381, 3, 2, 2, 2, 5381, 5384, 3, 2,
	2, 2, 5382, 5380, 3, 2, 2, 2, 5383, 5375, 3, 2, 2, 2, 5383, 5384, 3, 2,
	2, 2, 5384, 5394, 3, 2, 2, 2, 5385, 5387, 7, 29, 2, 2, 5386, 5385, 3, 2,
	2, 2, 5386, 5387, 3, 2, 2, 2, 5387, 5388, 3, 2, 2, 2, 5388, 5389, 5, 528,
	265, 2, 5389, 5390, 7, 769, 2, 2, 5390, 5391, 5, 466, 234, 2, 5391, 5392,
	7, 770, 2, 2, 5392, 5394, 3, 2, 2, 2, 5393, 5372, 3, 2, 2, 2, 5393, 5386,
	3, 2, 2, 2, 5394, 491, 3, 2, 2, 2, 5395, 5397, 7, 277, 2, 2, 5396, 5395,
	3, 2, 2, 2, 5396, 5397, 3, 2, 2, 2, 5397, 5398, 3, 2, 2, 2, 5398, 5417,
	7, 295, 2, 2, 5399, 5401, 7, 308, 2, 2, 5400, 5402, 7, 400, 2, 2, 5401,
	5400, 3, 2, 2, 2, 5401, 5402, 3, 2, 2, 2, 5402, 5403, 3, 2, 2, 2, 5403,
	5417, 7, 295, 2, 2, 5404, 5406, 7, 487, 2, 2, 5405, 5407, 7, 400, 2, 2,
	5406, 5405, 3, 2, 2, 2, 5406, 5407, 3, 2, 2, 2, 5407, 5408, 3, 2, 2, 2,
	5408, 5417, 7, 295, 2, 2, 5409, 5411, 7, 240, 2, 2, 5410, 5412, 7, 400,
	2, 2, 5411, 5410, 3, 2, 2, 2, 5411, 5412, 3, 2, 2, 2, 5412, 5413, 3, 2,
	2, 2, 5413, 5417, 7, 295, 2, 2, 5414, 5415, 7, 132, 2, 2, 5415, 5417, 7,
	295, 2, 2, 5416, 5396, 3, 2, 2, 2, 5416, 5399, 3, 2, 2, 2, 5416, 5404,
	3, 2, 2, 2, 5416, 5409, 3, 2, 2, 2, 5416, 5414, 3, 2, 2, 2, 5417, 493,
	3, 2, 2, 2, 5418, 5419, 7, 387, 2, 2, 5419, 5433, 5, 496, 249, 2, 5420,
	5421, 7, 628, 2, 2, 5421, 5422, 7, 769, 2, 2, 5422, 5427, 5, 526, 264,
	2, 5423, 5424, 7, 763, 2, 2, 5424, 5426, 5, 526, 264, 2, 5425, 5423, 3,
	2, 2, 2, 5426, 5429, 3, 2, 2, 2, 5427, 5425, 3, 2, 2, 2, 5427, 5428, 3,
	2, 2, 2, 5428, 5430, 3, 2, 2, 2, 5429, 5427, 3, 2, 2, 2, 5430, 5431, 7,
	770, 2, 2, 5431, 5433, 3, 2, 2, 2, 5432, 5418, 3, 2, 2, 2, 5432, 5420,
	3, 2, 2, 2, 5433, 495, 3, 2, 2, 2, 5434, 5435, 8, 249, 1, 2, 5435, 5447,
	5, 438, 220, 2, 5436, 5437, 5, 438, 220, 2, 5437, 5438, 5, 460, 231, 2,
	5438, 5439, 5, 438, 220, 2, 5439, 5447, 3, 2, 2, 2, 5440, 5441, 7, 769,
	2, 2, 5441, 5442, 5, 496, 249, 2, 5442, 5443, 7, 770, 2, 2, 5443, 5447,
	3, 2, 2, 2, 5444, 5445, 7, 368, 2, 2, 5445, 5447, 5, 496, 249, 4, 5446,
	5434, 3, 2, 2, 2, 5446, 5436, 3, 2, 2, 2, 5446, 5440, 3, 2, 2, 2, 5446,
	5444, 3, 2, 2, 2, 5447, 5468, 3, 2, 2, 2, 5448, 5449, 12, 6, 2, 2, 5449,
	5450, 7, 25, 2, 2, 5450, 5467, 5, 496, 249, 7, 5451, 5452, 12, 5, 2, 2,
	5452, 5453, 7, 394, 2, 2, 5453, 5467, 5, 496, 249, 6, 5454, 5456, 12, 3,
	2, 2, 5455, 5457, 7, 368, 2, 2, 5456, 5455, 3, 2, 2, 2, 5456, 5457, 3,
	2, 2, 2, 5457, 5458, 3, 2, 2, 2, 5458, 5459, 7, 268, 2, 2, 5459, 5462,
	7, 769, 2, 2, 5460, 5463, 5, 350, 176, 2, 5461, 5463, 5, 438, 220, 2, 5462,
	5460, 3, 2, 2, 2, 5462, 5461, 3, 2, 2, 2, 5463, 5464, 3, 2, 2, 2, 5464,
	5465, 7, 770, 2, 2, 5465, 5467, 3, 2, 2, 2, 5466, 5448, 3, 2, 2, 2, 5466,
	5451, 3, 2, 2, 2, 5466, 5454, 3, 2, 2, 2, 5467, 5470, 3, 2, 2, 2, 5468,
	5466, 3, 2, 2, 2, 5468, 5469, 3, 2, 2, 2, 5469, 497, 3, 2, 2, 2, 5470,
	5468, 3, 2, 2, 2, 5471, 5498, 7, 768, 2, 2, 5472, 5474, 9, 8, 2, 2, 5473,
	5472, 3, 2, 2, 2, 5473, 5474, 3, 2, 2, 2, 5474, 5476, 3, 2, 2, 2, 5475,
	5477, 5, 518, 260, 2, 5476, 5475, 3, 2, 2, 2, 5476, 5477, 3, 2, 2, 2, 5477,
	5478, 3, 2, 2, 2, 5478, 5498, 5, 478, 240, 2, 5479, 5481, 9, 8, 2, 2, 5480,
	5479, 3, 2, 2, 2, 5480, 5481, 3, 2, 2, 2, 5481, 5483, 3, 2, 2, 2, 5482,
	5484, 5, 518, 260, 2, 5483, 5482, 3, 2, 2, 2, 5483, 5484, 3, 2, 2, 2, 5484,
	5485, 3, 2, 2, 2, 5485, 5486, 5, 478, 240, 2, 5486, 5487, 3, 2, 2, 2, 5487,
	5488, 7, 395, 2, 2, 5488, 5490, 7, 56, 2, 2, 5489, 5491, 9, 8, 2, 2, 5490,
	5489, 3, 2, 2, 2, 5490, 5491, 3, 2, 2, 2, 5491, 5493, 3, 2, 2, 2, 5492,
	5494, 5, 518, 260, 2, 5493, 5492, 3, 2, 2, 2, 5493, 5494, 3, 2, 2, 2, 5494,
	5495, 3, 2, 2, 2, 5495, 5496, 5, 478, 240, 2, 5496, 5498, 3, 2, 2, 2, 5497,
	5471, 3, 2, 2, 2, 5497, 5473, 3, 2, 2, 2, 5497, 5480, 3, 2, 2, 2, 5498,
	499, 3, 2, 2, 2, 5499, 5500, 7, 368, 2, 2, 5500, 5501, 7, 373, 2, 2, 5501,
	501, 3, 2, 2, 2, 5502, 5504, 5, 500, 251, 2, 5503, 5502, 3, 2, 2, 2, 5504,
	5505, 3, 2, 2, 2, 5505, 5503, 3, 2, 2, 2, 5505, 5506, 3, 2, 2, 2, 5506,
	503, 3, 2, 2, 2, 5507, 5508, 7, 649, 2, 2, 5508, 5509, 7, 769, 2, 2, 5509,
	5510, 5, 472, 237, 2, 5510, 5511, 7, 770, 2, 2, 5511, 5513, 3, 2, 2, 2,
	5512, 5507, 3, 2, 2, 2, 5512, 5513, 3, 2, 2, 2, 5513, 5518, 3, 2, 2, 2,
	5514, 5515, 7, 628, 2, 2, 5515, 5516, 7, 271, 2, 2, 5516, 5517, 7, 573,
	2, 2, 5517, 5519, 5, 518, 260, 2, 5518, 5514, 3, 2, 2, 2, 5518, 5519, 3,
	2, 2, 2, 5519, 505, 3, 2, 2, 2, 5520, 5526, 5, 518, 260, 2, 5521, 5522,
	7, 769, 2, 2, 5522, 5523, 5, 438, 220, 2, 5523, 5524, 7, 770, 2, 2, 5524,
	5526, 3, 2, 2, 2, 5525, 5520, 3, 2, 2, 2, 5525, 5521, 3, 2, 2, 2, 5526,
	5528, 3, 2, 2, 2, 5527, 5529, 5, 518, 260, 2, 5528, 5527, 3, 2, 2, 2, 5528,
	5529, 3, 2, 2, 2, 5529, 5531, 3, 2, 2, 2, 5530, 5532, 9, 50, 2, 2, 5531,
	5530, 3, 2, 2, 2, 5531, 5532, 3, 2, 2, 2, 5532, 5535, 3, 2, 2, 2, 5533,
	5534, 7, 376, 2, 2, 5534, 5536, 9, 34, 2, 2, 5535, 5533, 3, 2, 2, 2, 5535,
	5536, 3, 2, 2, 2, 5536, 507, 3, 2, 2, 2, 5537, 5538, 7, 111, 2, 2, 5538,
	5540, 5, 464, 233, 2, 5539, 5537, 3, 2, 2, 2, 5539, 5540, 3, 2, 2, 2, 5540,
	5606, 3, 2, 2, 2, 5541, 5542, 7, 80, 2, 2, 5542, 5543, 7, 769, 2, 2, 5543,
	5544, 5, 438, 220, 2, 5544, 5547, 7, 770, 2, 2, 5545, 5546, 7, 362, 2,
	2, 5546, 5548, 7, 662, 2, 2, 5547, 5545, 3, 2, 2, 2, 5547, 5548, 3, 2,
	2, 2, 5548, 5607, 3, 2, 2, 2, 5549, 5550, 7, 614, 2, 2, 5550, 5551, 7,
	769, 2, 2, 5551, 5552, 5, 468, 235, 2, 5552, 5553, 7, 770, 2, 2, 5553,
	5607, 3, 2, 2, 2, 5554, 5555, 7, 439, 2, 2, 5555, 5556, 7, 297, 2, 2, 5556,
	5557, 7, 769, 2, 2, 5557, 5558, 5, 468, 235, 2, 5558, 5559, 7, 770, 2,
	2, 5559, 5560, 5, 504, 253, 2, 5560, 5607, 3, 2, 2, 2, 5561, 5564, 7, 208,
	2, 2, 5562, 5563, 7, 628, 2, 2, 5563, 5565, 5, 480, 241, 2, 5564, 5562,
	3, 2, 2, 2, 5564, 5565, 3, 2, 2, 2, 5565, 5566, 3, 2, 2, 2, 5566, 5567,
	7, 769, 2, 2, 5567, 5568, 5, 506, 254, 2, 5568, 5569, 7, 649, 2, 2, 5569,
	5570, 5, 468, 235, 2, 5570, 5571, 7, 770, 2, 2, 5571, 5572, 5, 504, 253,
	2, 5572, 5573, 7, 646, 2, 2, 5573, 5574, 7, 769, 2, 2, 5574, 5575, 5, 496,
	249, 2, 5575, 5576, 7, 770, 2, 2, 5576, 5578, 3, 2, 2, 2, 5577, 5561, 3,
	2, 2, 2, 5577, 5578, 3, 2, 2, 2, 5578, 5607, 3, 2, 2, 2, 5579, 5580, 7,
	232, 2, 2, 5580, 5581, 7, 297, 2, 2, 5581, 5582, 7, 769, 2, 2, 5582, 5583,
	5, 468, 235, 2, 5583, 5584, 7, 770, 2, 2, 5584, 5585, 7, 456, 2, 2, 5585,
	5586, 5, 518, 260, 2, 5586, 5587, 7, 769, 2, 2, 5587, 5588, 5, 518, 260,
	2, 5588, 5594, 7, 770, 2, 2, 5589, 5590, 7, 329, 2, 2, 5590, 5595, 7, 240,
	2, 2, 5591, 5592, 7, 329, 2, 2, 5592, 5595, 7, 417, 2, 2, 5593, 5595, 7,
	330, 2, 2, 5594, 5589, 3, 2, 2, 2, 5594, 5591, 3, 2, 2, 2, 5594, 5593,
	3, 2, 2, 2, 5594, 5595, 3, 2, 2, 2, 5595, 5599, 3, 2, 2, 2, 5596, 5597,
	7, 387, 2, 2, 5597, 5598, 7, 166, 2, 2, 5598, 5600, 5, 518, 260, 2, 5599,
	5596, 3, 2, 2, 2, 5599, 5600, 3, 2, 2, 2, 5600, 5604, 3, 2, 2, 2, 5601,
	5602, 7, 387, 2, 2, 5602, 5603, 7, 620, 2, 2, 5603, 5605, 5, 518, 260,
	2, 5604, 5601, 3, 2, 2, 2, 5604, 5605, 3, 2, 2, 2, 5605, 5607, 3, 2, 2,
	2, 5606, 5541, 3, 2, 2, 2, 5606, 5549, 3, 2, 2, 2, 5606, 5554, 3, 2, 2,
	2, 5606, 5577, 3, 2, 2, 2, 5606, 5579, 3, 2, 2, 2, 5607, 5612, 3, 2, 2,
	2, 5608, 5610, 7, 368, 2, 2, 5609, 5608, 3, 2, 2, 2, 5609, 5610, 3, 2,
	2, 2, 5610, 5611, 3, 2, 2, 2, 5611, 5613, 7, 160, 2, 2, 5612, 5609, 3,
	2, 2, 2, 5612, 5613, 3, 2, 2, 2, 5613, 5616, 3, 2, 2, 2, 5614, 5615, 7,
	276, 2, 2, 5615, 5617, 9, 25, 2, 2, 5616, 5614, 3, 2, 2, 2, 5616, 5617,
	3, 2, 2, 2, 5617, 509, 3, 2, 2, 2, 5618, 5623, 5, 464, 233, 2, 5619, 5623,
	7, 144, 2, 2, 5620, 5623, 7, 521, 2, 2, 5621, 5623, 7, 444, 2, 2, 5622,
	5618, 3, 2, 2, 2, 5622, 5619, 3, 2, 2, 2, 5622, 5620, 3, 2, 2, 2, 5622,
	5621, 3, 2, 2, 2, 5623, 511, 3, 2, 2, 2, 5624, 5629, 5, 510, 256, 2, 5625,
	5626, 7, 763, 2, 2, 5626, 5628, 5, 510, 256, 2, 5627, 5625, 3, 2, 2, 2,
	5628, 5631, 3, 2, 2, 2, 5629, 5627, 3, 2, 2, 2, 5629, 5630, 3, 2, 2, 2,
	5630, 513, 3, 2, 2, 2, 5631, 5629, 3, 2, 2, 2, 5632, 5644, 7, 387, 2, 2,
	5633, 5644, 7, 383, 2, 2, 5634, 5644, 7, 604, 2, 2, 5635, 5644, 7, 221,
	2, 2, 5636, 5644, 7, 656, 2, 2, 5637, 5644, 7, 362, 2, 2, 5638, 5644, 7,
	365, 2, 2, 5639, 5644, 7, 779, 2, 2, 5640, 5644, 7, 775, 2, 2, 5641, 5644,
	7, 776, 2, 2, 5642, 5644, 5, 518, 260, 2, 5643, 5632, 3, 2, 2, 2, 5643,
	5633, 3, 2, 2, 2, 5643, 5634, 3, 2, 2, 2, 5643, 5635, 3, 2, 2, 2, 5643,
	5636, 3, 2, 2, 2, 5643, 5637, 3, 2, 2, 2, 5643, 5638, 3, 2, 2, 2, 5643,
	5639, 3, 2, 2, 2, 5643, 5640, 3, 2, 2, 2, 5643, 5641, 3, 2, 2, 2, 5643,
	5642, 3, 2, 2, 2, 5644, 515, 3, 2, 2, 2, 5645, 5646, 9, 51, 2, 2, 5646,
	517, 3, 2, 2, 2, 5647, 5648, 8, 260, 1, 2, 5648, 5654, 5, 516, 259, 2,
	5649, 5654, 7, 780, 2, 2, 5650, 5654, 7, 781, 2, 2, 5651, 5654, 5, 456,
	229, 2, 5652, 5654, 7, 783, 2, 2, 5653, 5647, 3, 2, 2, 2, 5653, 5649, 3,
	2, 2, 2, 5653, 5650, 3, 2, 2, 2, 5653, 5651, 3, 2, 2, 2, 5653, 5652, 3,
	2, 2, 2, 5654, 5660, 3, 2, 2, 2, 5655, 5656, 12, 5, 2, 2, 5656, 5657, 7,
	778, 2, 2, 5657, 5659, 5, 518, 260, 6, 5658, 5655, 3, 2, 2, 2, 5659, 5662,
	3, 2, 2, 2, 5660, 5658, 3, 2, 2, 2, 5660, 5661, 3, 2, 2, 2, 5661, 519,
	3, 2, 2, 2, 5662, 5660, 3, 2, 2, 2, 5663, 5664, 11, 2, 2, 2, 5664, 521,
	3, 2, 2, 2, 5665, 5666, 5, 518, 260, 2, 5666, 523, 3, 2, 2, 2, 5667, 5668,
	5, 518, 260, 2, 5668, 525, 3, 2, 2, 2, 5669, 5670, 5, 518, 260, 2, 5670,
	527, 3, 2, 2, 2, 5671, 5672, 5, 518, 260, 2, 5672, 529, 3, 2, 2, 2, 5673,
	5674, 5, 518, 260, 2, 5674, 531, 3, 2, 2, 2, 5675, 5676, 5, 518, 260, 2,
	5676, 533, 3, 2, 2, 2, 5677, 5678, 5, 518, 260, 2, 5678, 535, 3, 2, 2,
	2, 697, 541, 545, 601, 645, 677, 706, 729, 743, 759, 768, 772, 811, 825,
	836, 846, 854, 863, 869, 875, 878, 882, 886, 890, 894, 899, 905, 909, 918,
	926, 935, 944, 954, 964, 973, 978, 984, 993, 997, 1004, 1011, 1037, 1039,
	1046, 1054, 1057, 1061, 1070, 1073, 1077, 1081, 1092, 1104, 1111, 1136,
	1142, 1153, 1172, 1184, 1200, 1206, 1208, 1212, 1222, 1231, 1233, 1244,
	1271, 1283, 1303, 1307, 1312, 1314, 1322, 1332, 1342, 1368, 1388, 1395,
	1401, 1406, 1419, 1424, 1431, 1437, 1442, 1453, 1458, 1466, 1471, 1475,
	1501, 1503, 1509, 1514, 1518, 1522, 1526, 1530, 1540, 1547, 1563, 1573,
	1589, 1608, 1620, 1654, 1670, 1689, 1707, 1768, 1800, 1824, 1845, 1867,
	1874, 1927, 1943, 1946, 1962, 1968, 1972, 1978, 1984, 1990, 1996, 2002,
	2008, 2014, 2020, 2026, 2030, 2036, 2042, 2048, 2057, 2060, 2063, 2068,
	2071, 2087, 2093, 2097, 2103, 2109, 2113, 2136, 2142, 2146, 2152, 2158,
	2164, 2170, 2176, 2182, 2188, 2194, 2200, 2204, 2210, 2216, 2220, 2236,
	2242, 2248, 2268, 2275, 2283, 2295, 2301, 2305, 2320, 2325, 2330, 2335,
	2340, 2345, 2350, 2355, 2361, 2366, 2370, 2380, 2386, 2394, 2396, 2407,
	2415, 2426, 2440, 2452, 2454, 2461, 2468, 2476, 2487, 2491, 2496, 2505,
	2510, 2519, 2534, 2555, 2557, 2559, 2563, 2567, 2572, 2575, 2581, 2585,
	2589, 2594, 2597, 2604, 2607, 2610, 2618, 2622, 2624, 2632, 2639, 2642,
	2646, 2652, 2655, 2668, 2674, 2680, 2686, 2692, 2698, 2702, 2706, 2719,
	2727, 2731, 2740, 2747, 2756, 2764, 2781, 2785, 2792, 2800, 2806, 2826,
	2847, 2849, 2851, 2858, 2869, 2873, 2877, 2884, 2887, 2894, 2904, 2913,
	2917, 2923, 2928, 2931, 2937, 2943, 2947, 2950, 2954, 2957, 2960, 2969,
	2971, 2984, 2995, 3004, 3031, 3034, 3037, 3045, 3052, 3057, 3061, 3065,
	3072, 3077, 3081, 3084, 3087, 3091, 3098, 3101, 3147, 3154, 3158, 3164,
	3175, 3183, 3189, 3193, 3199, 3203, 3209, 3217, 3221, 3228, 3232, 3238,
	3242, 3250, 3254, 3261, 3265, 3271, 3275, 3281, 3288, 3292, 3296, 3300,
	3305, 3309, 3316, 3320, 3329, 3335, 3342, 3348, 3355, 3361, 3367, 3373,
	3377, 3383, 3391, 3397, 3403, 3407, 3413, 3417, 3423, 3427, 3433, 3441,
	3445, 3451, 3455, 3461, 3471, 3475, 3483, 3487, 3495, 3499, 3507, 3511,
	3517, 3529, 3535, 3541, 3545, 3551, 3560, 3568, 3577, 3581, 3586, 3590,
	3593, 3602, 3607, 3618, 3627, 3634, 3640, 3644, 3647, 3653, 3661, 3666,
	3669, 3678, 3680, 3682, 3685, 3694, 3697, 3701, 3720, 3723, 3726, 3741,
	3745, 3747, 3750, 3752, 3760, 3768, 3776, 3788, 3794, 3798, 3805, 3813,
	3820, 3827, 3833, 3841, 3845, 3856, 3893, 3913, 3919, 3924, 3928, 3932,
	3937, 3943, 3947, 3950, 3953, 3956, 3959, 3962, 3965, 3968, 3971, 3974,
	3977, 3980, 3986, 3989, 3993, 3997, 4001, 4006, 4012, 4016, 4019, 4022,
	4025, 4028, 4031, 4034, 4037, 4040, 4043, 4046, 4050, 4057, 4065, 4074,
	4080, 4086, 4090, 4097, 4099, 4105, 4111, 4116, 4120, 4133, 4140, 4143,
	4150, 4166, 4173, 4177, 4180, 4184, 4188, 4191, 4195, 4198, 4203, 4206,
	4210, 4214, 4217, 4220, 4225, 4232, 4235, 4244, 4252, 4259, 4263, 4266,
	4269, 4272, 4276, 4279, 4282, 4290, 4292, 4294, 4297, 4304, 4310, 4314,
	4317, 4320, 4323, 4326, 4329, 4335, 4337, 4347, 4360, 4371, 4376, 4380,
	4388, 4396, 4407, 4412, 4415, 4418, 4423, 4426, 4429, 4433, 4438, 4442,
	4454, 4468, 4478, 4482, 4493, 4498, 4503, 4508, 4512, 4521, 4526, 4532,
	4542, 4545, 4551, 4556, 4561, 4574, 4582, 4585, 4590, 4592, 4600, 4610,
	4612, 4635, 4643, 4691, 4709, 4714, 4734, 4752, 4757, 4761, 4766, 4773,
	4786, 4794, 4796, 4804, 4812, 4814, 4826, 4830, 4842, 4846, 4850, 4858,
	4864, 4871, 4875, 4878, 4881, 4884, 4891, 4899, 4906, 4917, 4923, 4933,
	4939, 4945, 4956, 4970, 4973, 4988, 5006, 5011, 5017, 5022, 5028, 5034,
	5044, 5050, 5053, 5061, 5066, 5073, 5077, 5086, 5098, 5107, 5110, 5124,
	5126, 5130, 5137, 5145, 5151, 5158, 5165, 5169, 5174, 5182, 5187, 5204,
	5210, 5212, 5223, 5227, 5236, 5239, 5245, 5249, 5252, 5262, 5271, 5273,
	5276, 5282, 5291, 5296, 5299, 5304, 5307, 5310, 5320, 5326, 5340, 5345,
	5349, 5353, 5357, 5361, 5364, 5368, 5372, 5380, 5383, 5386, 5393, 5396,
	5401, 5406, 5411, 5416, 5427, 5432, 5446, 5456, 5462, 5466, 5468, 5473,
	5476, 5480, 5483, 5490, 5493, 5497, 5505, 5512, 5518, 5525, 5528, 5531,
	5535, 5539, 5547, 5564, 5577, 5594, 5599, 5604, 5606, 5609, 5612, 5616,
	5622, 5629, 5643, 5653, 5660,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "','", "':'", "'::'", "'$'", "'$$'", "'*'", "'('",
	"')'", "'['", "']'", "", "", "", "", "", "'.'", "", "", "", "", "", "'&'",
	"'&&'", "'&<'", "'@@'", "'@>'", "'@'", "'!'", "'!!'", "'!='", "'^'", "'='",
	"'=>'", "'>'", "'>='", "'>>'", "'#'", "'#='", "'#>'", "'#>>'", "'##'",
	"'->'", "'->>'", "'-|-'", "'<'", "'<='", "'<@'", "'<^'", "'<>'", "'<->'",
	"'<<'", "'<<='", "'<?>'", "'-'", "'%'", "'|'", "'||'", "'||/'", "'|/'",
	"'+'", "'?'", "'?&'", "'?#'", "'?-'", "'?|'", "'/'", "'~'", "'~='", "'~>=~'",
	"'~>~'", "'~<=~'", "'~<~'", "'~*'", "'~~'", "';'",
}
var symbolicNames = []string{
	"", "WHITESPACE", "BLOCK_COMMENT", "LINE_COMMENT", "A_", "ABORT", "ABS",
	"ABSOLUTE", "ACCESS", "ACTION", "ADA", "ADD", "ADMIN", "AFTER", "AGGREGATE",
	"ALIAS", "ALL", "ALLOCATE", "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE",
	"AND", "ANY", "ARE", "ARRAY", "AS", "ASC", "ASENSITIVE", "ASSERTION", "ASSIGNMENT",
	"ASYMMETRIC", "AT", "ATOMIC", "ATTRIBUTE", "ATTRIBUTES", "AUTHORIZATION",
	"AVG", "BACKWARD", "BEFORE", "BEGIN", "BERNOULLI", "BETWEEN", "BIGINT",
	"BINARY", "BIT", "BIT_LENGTH", "BITVAR", "BLOB", "BOOLEAN", "BOTH", "BREADTH",
	"BUFFERS", "BY", "C_", "CACHE", "CALL", "CALLED", "CARDINALITY", "CASCADE",
	"CASCADED", "CASE", "CAST", "CATALOG", "CATALOG_NAME", "CEIL", "CEILING",
	"CHAIN", "CHAR", "CHAR_LENGTH", "CHARACTER", "CHARACTER_LENGTH", "CHARACTER_SET_CATALOG",
	"CHARACTER_SET_NAME", "CHARACTER_SET_SCHEMA", "CHARACTERISTICS", "CHARACTERS",
	"CHECK", "CHECKED", "CHECKPOINT", "CLASS", "CLASS_ORIGIN", "CLOB", "CLOSE",
	"CLUSTER", "COALESCE", "COBOL", "COLLATE", "COLLATION", "COLLATION_CATALOG",
	"COLLATION_NAME", "COLLATION_SCHEMA", "COLLECT", "COLUMN", "COLUMN_NAME",
	"COMMAND_FUNCTION", "COMMAND_FUNCTION_CODE", "COMMENT", "COMMIT", "COMMITTED",
	"COMPLETION", "CONDITION", "CONDITION_NUMBER", "CONFIGURATION", "CONFLICT",
	"CONNECT", "CONNECTION", "CONNECTION_NAME", "CONSTRAINT", "CONSTRAINT_CATALOG",
	"CONSTRAINT_NAME", "CONSTRAINT_SCHEMA", "CONSTRAINTS", "CONSTRUCTOR", "CONTAINS",
	"CONTINUE", "CONVERSION", "CONVERT", "COPY", "CORR", "CORRESPONDING", "COSTS",
	"COUNT", "COVAR_POP", "COVAR_SAMP", "CREATE", "CREATETABLE", "CREATEDB",
	"CREATEUSER", "CROSS", "CSV", "CUBE", "CUME_DIST", "CURRENT", "CURRENT_DATE",
	"CURRENT_DEFAULT_TRANSFORM_GROUP", "CURRENT_PATH", "CURRENT_ROLE", "CURRENT_TIME",
	"CURRENT_TIMESTAMP", "CURRENT_TRANSFORM_GROUP_FOR_TYPE", "CURRENT_USER",
	"CURSOR", "CURSOR_NAME", "CYCLE", "DATA", "DATABASE", "DATE", "DATETIME_INTERVAL_CODE",
	"DATETIME_INTERVAL_PRECISION", "DAY", "DEALLOCATE", "DEC", "DECIMAL", "DECLARE",
	"DEFAULT", "DEFAULTS", "DEFERABLE", "DEFERRABLE", "DEFERRED", "DEFINED",
	"DEFINER", "DEGREE", "DELETE", "DELIMITER", "DELIMITERS", "DENSE_RANK",
	"DEPENDS", "DEPTH", "DEREF", "DERIVED", "DESC", "DESCRIBE", "DESCRIPTOR",
	"DESTROY", "DESTRUCTOR", "DETERMINISTIC", "DIAGNOSTICS", "DICTIONARY",
	"DISABLE", "DISABLE_PAGE_SKIPPING", "DISCARD", "DISCONNECT", "DISPATCH",
	"DISTINCT", "DO", "DOMAIN", "DOUBLE", "DROP", "DYNAMIC", "DYNAMIC_FUNCTION",
	"DYNAMIC_FUNCTION_CODE", "EACH", "ELEMENT", "ELSE", "ENABLE", "ENCODING",
	"ENCRYPTED", "END", "END_EXEC", "EQUALS", "ESCAPE", "EVERY", "EXCEPT",
	"EXCEPTION", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXEC", "EXECUTE", "EXISTING",
	"EXISTS", "EXP", "EXPLAIN", "EXTENDED", "EXTENSION", "EXTERNAL", "EXTRACT",
	"FALSE", "FETCH", "FIELDS", "FILTER", "FINAL", "FIRST", "FLOAT", "FLOOR",
	"FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORMAT", "FORTRAN", "FORWARD",
	"FOUND", "FREE", "FREEZE", "FROM", "FULL", "FUNCTION", "FUSION", "G_",
	"GENERAL", "GENERATED", "GET", "GLOBAL", "GO", "GOTO", "GRANT", "GRANTED",
	"GREATEST", "GROUP", "GROUPING", "HANDLER", "HAVING", "HIERARCHY", "HOLD",
	"HOST", "HOUR", "IDENTITY", "IGNORE", "ILIKE", "IMMEDIATE", "IMMUTABLE",
	"IMPLEMENTATION", "IMPLICIT", "IN", "INCLUDING", "INCREMENT", "INDEX",
	"INDICATOR", "INFIX", "INHERITS", "INITIALIZE", "INITIALLY", "INNER", "INOUT",
	"INPUT", "INSENSITIVE", "INSERT", "INSTANCE", "INSTANTIABLE", "INSTEAD",
	"INT", "INTEGER", "INTERSECT", "INTERSECTION", "INTERVAL", "INTO", "INVOKER",
	"IS", "ISOLATION", "ITERATE", "JOIN", "K_", "KEY", "KEY_MEMBER", "KEY_TYPE",
	"LABEL", "LANCOMPILER", "LANGUAGE", "LARGE", "LAST", "LATERAL", "LEADING",
	"LEAST", "LEFT", "LENGTH", "LESS", "LEVEL", "LIKE", "LIMIT", "LISTEN",
	"LN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION", "LOCATOR",
	"LOCK", "LOCKED", "LOWER", "M_", "MAIN", "MAP", "MAPPING", "MATCH", "MATCH_SIMPLE",
	"MATCHED", "MAX", "MAXVALUE", "MEMBER", "MERGE", "MESSAGE_LENGTH", "MESSAGE_OCTET_LENGTH",
	"MESSAGE_TEXT", "METHOD", "MIN", "MINUTE", "MINVALUE", "MOD", "MODE", "MODIFIES",
	"MODIFY", "MODULE", "MONTH", "MORE_", "MOVE", "MULTISET", "MUMPS", "NAME",
	"NAMES", "NATIONAL", "NATURAL", "NCHAR", "NCLOB", "NESTING", "NEW", "NEXT",
	"NO", "NOCREATEDB", "NOCREATEUSER", "NONE", "NORMALIZE", "NORMALIZED",
	"NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL", "NULLABLE", "NULLIF",
	"NULLS", "NUMBER", "NUMERIC", "OBJECT", "OCTET_LENGTH", "OCTETS", "OF",
	"OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPEN", "OPERATION", "OPERATOR",
	"OPTION", "OPTIONS", "OR", "ORDER", "ORDERING", "ORDINALITY", "OTHERS",
	"OUT", "OUTER", "OUTPUT", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING",
	"OWNER", "PAD", "PARAMETER", "PARAMETER_MODE", "PARAMETER_NAME", "PARAMETER_ORDINAL_POSITION",
	"PARAMETER_SPECIFIC_CATALOG", "PARAMETER_SPECIFIC_NAME", "PARAMETER_SPECIFIC_SCHEMA",
	"PARAMETERS", "PARSER", "PARTIAL", "PARTITION", "PASCAL", "PASSWORD", "PATH",
	"PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "PLACING", "PLAIN",
	"PLANS", "PLI", "POSITION", "POSTFIX", "POWER", "PRECEDING", "PRECISION",
	"PREFIX", "PREORDER", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR",
	"PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PUBLIC", "PUBLICATION", "QUOTE",
	"RANGE", "RANK", "READ", "READS", "REAL", "REASSIGN", "RECHECK", "RECURSIVE",
	"REF", "REFERENCES", "REFERENCING", "REFRESH", "REGR_AVGX", "REGR_AVGY",
	"REGR_COUNT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", "REGR_SXY",
	"REGR_SYY", "REINDEX", "RELATIVE", "RELEASE", "RENAME", "REPEATABLE", "REPLACE",
	"REPLICA", "RESET", "RESTART", "RESTRICT", "RESULT", "RETURN", "RETURNED_CARDINALITY",
	"RETURNED_LENGTH", "RETURNED_OCTET_LENGTH", "RETURNED_SQLSTATE", "RETURNING",
	"RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROUTINE",
	"ROUTINE_CATALOG", "ROUTINE_NAME", "ROUTINE_SCHEMA", "ROW", "ROW_COUNT",
	"ROW_NUMBER", "ROWS", "RULE", "SAVEPOINT", "SCALE", "SCHEMA", "SCHEMA_NAME",
	"SCOPE", "SCOPE_CATALOG", "SCOPE_NAME", "SCOPE_SCHEMA", "SCROLL", "SEARCH",
	"SECOND", "SECTION", "SECURITY", "SELECT", "SELF", "SENSITIVE", "SEQUENCE",
	"SEQUENCES", "SERIALIZABLE", "SERVER_NAME", "SESSION", "SESSION_USER",
	"SET", "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SIZE", "SKIP_",
	"SMALLINT", "SNAPSHOT", "SOME", "SOURCE", "SPACE", "SPECIFIC", "SPECIFIC_NAME",
	"SPECIFICTYPE", "SQL", "SQLCODE", "SQLERROR", "SQLEXCEPTION", "SQLSTATE",
	"SQLWARNING", "SQRT", "STABLE", "START", "STATE", "STATEMENT", "STATIC",
	"STATISTICS", "STDDEV_POP", "STDDEV_SAMP", "STDIN", "STDOUT", "STORAGE",
	"STRICT", "STRUCTURE", "STYLE", "SUBCLASS_ORIGIN", "SUBLIST", "SUBMULTISET",
	"SUBSCRIPTION", "SUBSTRING", "SUM", "SYMMETRIC", "SYSID", "SYSTEM", "SYSTEM_USER",
	"TABLE", "TABLE_NAME", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE",
	"TEMPORARY", "TERMINATE", "THAN", "THEN", "TIES", "TIME", "TIMESTAMP",
	"TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TIMING", "TO", "TOAST", "TOP_LEVEL_COUNT",
	"TRAILING", "TRANSACTION", "TRANSACTION_ACTIVE", "TRANSACTIONS_COMMITTED",
	"TRANSACTIONS_ROLLED_BACK", "TRANSFORM", "TRANSFORMS", "TRANSLATE", "TRANSLATION",
	"TREAT", "TRIGGER", "TRIGGER_CATALOG", "TRIGGER_NAME", "TRIGGER_SCHEMA",
	"TRIM", "TRUE", "TRUNCATE", "TRUSTED", "TYPE", "UESCAPE", "UNBOUNDED",
	"UNCOMMITTED", "UNDER", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN",
	"UNNAMED", "UNNEST", "UNTIL", "UPDATE", "UPPER", "USAGE", "USER", "USER_DEFINED_TYPE_CATALOG",
	"USER_DEFINED_TYPE_CODE", "USER_DEFINED_TYPE_NAME", "USER_DEFINED_TYPE_SCHEMA",
	"USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE", "VALUES",
	"VAR_POP", "VAR_SAMP", "VARCHAR", "VARIABLE", "VARIADIC", "VARYING", "VERBOSE",
	"VIEW", "VOLATILE", "WHEN", "WHENEVER", "WHERE", "WIDTH_BUCKET", "WINDOW",
	"WITH", "WITHIN", "WITHOUT", "WORK", "WRITE", "YAML", "YEAR", "YES", "ZONE",
	"SUPERUSER", "NOSUPERUSER", "CREATEROLE", "NOCREATEROLE", "INHERIT", "NOINHERIT",
	"LOGIN", "NOLOGIN", "REPLICATION", "NOREPLICATION", "BYPASSRLS", "NOBYPASSRLS",
	"SFUNC", "STYPE", "SSPACE", "FINALFUNC", "FINALFUNC_EXTRA", "COMBINEFUNC",
	"SERIALFUNC", "DESERIALFUNC", "INITCOND", "MSFUNC", "MINVFUNC", "MSTYPE",
	"MSSPACE", "MFINALFUNC", "MFINALFUNC_EXTRA", "MINITCOND", "SORTOP", "PARALLEL",
	"HYPOTHETICAL", "SAFE", "RESTRICTED", "UNSAFE", "BASETYPE", "IF", "LOCALE",
	"LC_COLLATE", "LC_CTYPE", "PROVIDER", "VERSION", "ALLOW_CONNECTIONS", "IS_TEMPLATE",
	"EVENT", "WRAPPER", "SERVER", "BTREE", "HASH_", "GIST", "SPGIST", "GIN",
	"BRIN", "CONCURRENTLY", "INLINE", "MATERIALIZED", "LEFTARG", "RIGHTARG",
	"COMMUTATOR", "NEGATOR", "HASHES", "MERGES", "FAMILY", "POLICY", "OWNED",
	"ABSTIME", "BIGSERIAL", "BIT_VARYING", "BOOL", "BOX", "BYTEA", "CHARACTER_VARYING",
	"CIDR", "CIRCLE", "FLOAT4", "FLOAT8", "INET", "INT2", "INT4", "INT8", "JSON",
	"JSONB", "LINE", "LSEG", "MACADDR", "MACADDR8", "MONEY", "PG_LSN", "POINT",
	"POLYGON", "RELTIME", "SERIAL", "SERIAL2", "SERIAL4", "SERIAL8", "SMALLSERIAL",
	"STSTEM", "TEXT", "TIMESTAMPTZ", "TIMETZ", "TSQUERY", "TSVECTOR", "TXID_SNAPSHOT",
	"UUID", "VARBIT", "XML", "COMMA", "COLON", "COLON_COLON", "DOLLAR", "DOLLAR_DOLLAR",
	"STAR", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", "BIT_STRING",
	"REGEX_STRING", "NUMERIC_LITERAL", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL",
	"DOT", "SINGLEQ_STRING_LITERAL", "DOUBLEQ_STRING_LITERAL", "IDENTIFIER",
	"DOLLAR_DEC", "IDENTIFIER_UNICODE", "AMP", "AMP_AMP", "AMP_LT", "AT_AT",
	"AT_GT", "AT_SIGN", "BANG", "BANG_BANG", "BANG_EQUAL", "CARET", "EQUAL",
	"EQUAL_GT", "GT", "GTE", "GT_GT", "HASH", "HASH_EQ", "HASH_GT", "HASH_GT_GT",
	"HASH_HASH", "HYPHEN_GT", "HYPHEN_GT_GT", "HYPHEN_PIPE_HYPHEN", "LT", "LTE",
	"LT_AT", "LT_CARET", "LT_GT", "LT_HYPHEN_GT", "LT_LT", "LT_LT_EQ", "LT_QMARK_GT",
	"MINUS", "PERCENT", "PIPE", "PIPE_PIPE", "PIPE_PIPE_SLASH", "PIPE_SLASH",
	"PLUS", "QMARK", "QMARK_AMP", "QMARK_HASH", "QMARK_HYPHEN", "QMARK_PIPE",
	"SLASH", "TIL", "TIL_EQ", "TIL_GTE_TIL", "TIL_GT_TIL", "TIL_LTE_TIL", "TIL_LT_TIL",
	"TIL_STAR", "TIL_TIL", "SEMI", "UNLOGGED",
}

var ruleNames = []string{
	"root", "stmt", "abort_stmt", "alter_stmt", "alter_aggregate_stmt", "alter_collation_stmt",
	"alter_conversion_stmt", "alter_database_stmt", "alter_default_privileges_stmt",
	"alter_domain_stmt", "alter_event_trigger_stmt", "alter_extension_stmt",
	"alter_foreign_data_wrapper_stmt", "alter_foreign_table_action", "alter_foreign_table_action_list",
	"alter_foreign_table_stmt", "alter_function_stmt", "alter_group_stmt",
	"alter_index_stmt", "alter_language_stmt", "alter_large_object_stmt", "alter_materialize_view_stmt",
	"alter_operator_stmt", "alter_operator_class_stmt", "alter_operator_family_stmt",
	"alter_policy_stmt", "alter_publication_stmt", "alter_role_options", "alter_role_stmt",
	"alter_rule_stmt", "alter_schema_stmt", "alter_sequence_stmt", "alter_server_options_list",
	"alter_server_stmt", "alter_statistics_stmt", "alter_subscription_stmt",
	"alter_system_stmt", "alter_table_stmt", "alter_tablespace_stmt", "alter_text_search_config_stmt",
	"alter_text_search_dict_stmt", "alter_text_search_parser_stmt", "alter_text_search_template_stmt",
	"alter_trigger_stmt", "alter_type_stmt", "alter_user_stmt", "alter_user_mapping_stmt",
	"alter_view_stmt", "analyze_stmt", "close_stmt", "cluster_stmt", "comment_stmt",
	"commit_stmt", "commit_prepared_stmt", "copy_stmt", "create_stmt", "create_access_method_stmt",
	"create_aggregate_stmt", "create_cast_stmt", "create_collation_opt", "create_collation_opt_list",
	"create_collation_stmt", "create_conversion_stmt", "create_database_stmt",
	"domain_constraint", "create_domain_stmt", "create_event_trigger_cond",
	"create_event_trigger_stmt", "create_foreign_data_options", "create_foreign_data_stmt",
	"create_foreign_table_stmt", "create_function_stmt", "create_group_stmt",
	"create_index_stmt", "create_language_stmt", "create_materialized_view_stmt",
	"create_operator_stmt", "create_operator_class_opt", "create_operator_class_stmt",
	"create_operator_family_stmt", "create_policy_stmt", "create_role_stmt",
	"create_rule_event", "create_rule_stmt", "create_schema_stmt", "create_sequence_stmt",
	"create_server_stmt", "create_statistics_stmt", "create_subscription_stmt",
	"create_table_stmt", "create_definitions", "create_definition", "create_table_as_stmt",
	"create_tablespace_stmt", "create_text_search_config_stmt", "create_text_search_dict_stmt",
	"create_text_search_parser_stmt", "create_text_search_template_stmt", "create_transform_stmt",
	"create_trigger_stmt", "create_type_stmt", "create_user_stmt", "create_user_mapping_stmt",
	"create_view_stmt", "deallocate_stmt", "declare_stmt", "delete_stmt", "discard_stmt",
	"drop_stmt", "drop_access_method_stmt", "drop_aggregate_stmt", "drop_cast_stmt",
	"drop_collation_stmt", "drop_conversion_stmt", "drop_database_stmt", "drop_domain_stmt",
	"drop_event_trigger_stmt", "drop_extension_stmt", "drop_foreign_data_wrapper_stmt",
	"drop_foreign_table_stmt", "drop_function_stmt", "drop_group_stmt", "drop_index_stmt",
	"drop_language_stmt", "drop_materialized_view_stmt", "drop_operator_stmt",
	"drop_operator_class_stmt", "drop_operator_family_stmt", "drop_owned_stmt",
	"drop_policy_stmt", "drop_publication_stmt", "drop_role_stmt", "drop_rule_stmt",
	"drop_schema_stmt", "drop_sequence_stmt", "drop_server_stmt", "drop_statistics_stmt",
	"drop_subscription_stmt", "drop_table_stmt", "drop_tablespace_stmt", "drop_text_search_config_stmt",
	"drop_text_search_dict_stmt", "drop_text_search_parser_stmt", "drop_text_search_template_stmt",
	"drop_transform_stmt", "drop_trigger_stmt", "drop_type_stmt", "drop_user_stmt",
	"drop_user_mapping_stmt", "drop_view_stmt", "execute_stmt", "explain_stmt",
	"fetch_stmt", "grant_stmt", "import_foreign_schema_stmt", "insert_stmt",
	"listen_stmt", "load_stmt", "lock_stmt", "move_stmt", "notify_stmt", "prepare_stmt",
	"prepare_transaction_stmt", "reassign_owned_stmt", "refresh_materialized_view_stmt",
	"reindex_stmt", "release_savepoint_stmt", "reset_stmt", "revoke_stmt",
	"rollback_stmt", "rollback_prepared_stmt", "rollback_to_savepoint_stmt",
	"savepoint_stmt", "security_label_stmt", "select_stmt", "select_into_stmt",
	"with_clause", "with_expr", "set_stmt", "set_constraints_stmt", "set_role_stmt",
	"set_session_authorization_stmt", "transaction_mode", "transaction_mode_list",
	"set_transaction_stmt", "show_stmt", "truncate_stmt", "unlisten_stmt",
	"update_stmt", "vacuum_opt", "vacuum_opt_list", "vacuum_stmt", "values_stmt",
	"selector_clause", "from_clause", "where_clause", "group_by_clause", "grouping_elem",
	"grouping_elem_list", "having_clause", "column_list", "explain_parameter",
	"frame", "frame_start", "frame_end", "frame_clause", "window_definition",
	"window_clause", "combine_clause", "order_by_clause", "order_by_item",
	"limit_clause", "offset_clause", "fetch_clause", "for_clause", "updater_clause",
	"updater_expr", "returning_clause", "expr", "bool_expr", "case_expr", "expr_list",
	"expr_list_list", "func_sig_arg", "func_sig_arg_list", "func_sig", "func_sig_list",
	"type_name", "timezone", "oper", "aggregate", "name_", "name_list", "identifier_list",
	"option_expr", "option_list", "table_name_", "data_type", "data_type_list",
	"index_method", "func_name", "func_call", "array_cons_expr", "from_item",
	"with_column_alias", "join_type", "join_clause", "predicate", "aggregate_signature",
	"column_constraint", "column_constraints", "index_parameters", "exclude_element",
	"table_constraint", "role_name", "role_name_list", "param_value", "non_reserved_keyword",
	"identifier", "todo_fill_in", "todo_implement", "correlation_name", "column_name",
	"alias", "column_alias", "column_definition", "window_name",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type PostgreSQLParser struct {
	*antlr.BaseParser
}

func NewPostgreSQLParser(input antlr.TokenStream) *PostgreSQLParser {
	this := new(PostgreSQLParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "PostgreSQLParser.g4"

	return this
}

// PostgreSQLParser tokens.
const (
	PostgreSQLParserEOF                              = antlr.TokenEOF
	PostgreSQLParserWHITESPACE                       = 1
	PostgreSQLParserBLOCK_COMMENT                    = 2
	PostgreSQLParserLINE_COMMENT                     = 3
	PostgreSQLParserA_                               = 4
	PostgreSQLParserABORT                            = 5
	PostgreSQLParserABS                              = 6
	PostgreSQLParserABSOLUTE                         = 7
	PostgreSQLParserACCESS                           = 8
	PostgreSQLParserACTION                           = 9
	PostgreSQLParserADA                              = 10
	PostgreSQLParserADD                              = 11
	PostgreSQLParserADMIN                            = 12
	PostgreSQLParserAFTER                            = 13
	PostgreSQLParserAGGREGATE                        = 14
	PostgreSQLParserALIAS                            = 15
	PostgreSQLParserALL                              = 16
	PostgreSQLParserALLOCATE                         = 17
	PostgreSQLParserALSO                             = 18
	PostgreSQLParserALTER                            = 19
	PostgreSQLParserALWAYS                           = 20
	PostgreSQLParserANALYSE                          = 21
	PostgreSQLParserANALYZE                          = 22
	PostgreSQLParserAND                              = 23
	PostgreSQLParserANY                              = 24
	PostgreSQLParserARE                              = 25
	PostgreSQLParserARRAY                            = 26
	PostgreSQLParserAS                               = 27
	PostgreSQLParserASC                              = 28
	PostgreSQLParserASENSITIVE                       = 29
	PostgreSQLParserASSERTION                        = 30
	PostgreSQLParserASSIGNMENT                       = 31
	PostgreSQLParserASYMMETRIC                       = 32
	PostgreSQLParserAT                               = 33
	PostgreSQLParserATOMIC                           = 34
	PostgreSQLParserATTRIBUTE                        = 35
	PostgreSQLParserATTRIBUTES                       = 36
	PostgreSQLParserAUTHORIZATION                    = 37
	PostgreSQLParserAVG                              = 38
	PostgreSQLParserBACKWARD                         = 39
	PostgreSQLParserBEFORE                           = 40
	PostgreSQLParserBEGIN                            = 41
	PostgreSQLParserBERNOULLI                        = 42
	PostgreSQLParserBETWEEN                          = 43
	PostgreSQLParserBIGINT                           = 44
	PostgreSQLParserBINARY                           = 45
	PostgreSQLParserBIT                              = 46
	PostgreSQLParserBIT_LENGTH                       = 47
	PostgreSQLParserBITVAR                           = 48
	PostgreSQLParserBLOB                             = 49
	PostgreSQLParserBOOLEAN                          = 50
	PostgreSQLParserBOTH                             = 51
	PostgreSQLParserBREADTH                          = 52
	PostgreSQLParserBUFFERS                          = 53
	PostgreSQLParserBY                               = 54
	PostgreSQLParserC_                               = 55
	PostgreSQLParserCACHE                            = 56
	PostgreSQLParserCALL                             = 57
	PostgreSQLParserCALLED                           = 58
	PostgreSQLParserCARDINALITY                      = 59
	PostgreSQLParserCASCADE                          = 60
	PostgreSQLParserCASCADED                         = 61
	PostgreSQLParserCASE                             = 62
	PostgreSQLParserCAST                             = 63
	PostgreSQLParserCATALOG                          = 64
	PostgreSQLParserCATALOG_NAME                     = 65
	PostgreSQLParserCEIL                             = 66
	PostgreSQLParserCEILING                          = 67
	PostgreSQLParserCHAIN                            = 68
	PostgreSQLParserCHAR                             = 69
	PostgreSQLParserCHAR_LENGTH                      = 70
	PostgreSQLParserCHARACTER                        = 71
	PostgreSQLParserCHARACTER_LENGTH                 = 72
	PostgreSQLParserCHARACTER_SET_CATALOG            = 73
	PostgreSQLParserCHARACTER_SET_NAME               = 74
	PostgreSQLParserCHARACTER_SET_SCHEMA             = 75
	PostgreSQLParserCHARACTERISTICS                  = 76
	PostgreSQLParserCHARACTERS                       = 77
	PostgreSQLParserCHECK                            = 78
	PostgreSQLParserCHECKED                          = 79
	PostgreSQLParserCHECKPOINT                       = 80
	PostgreSQLParserCLASS                            = 81
	PostgreSQLParserCLASS_ORIGIN                     = 82
	PostgreSQLParserCLOB                             = 83
	PostgreSQLParserCLOSE                            = 84
	PostgreSQLParserCLUSTER                          = 85
	PostgreSQLParserCOALESCE                         = 86
	PostgreSQLParserCOBOL                            = 87
	PostgreSQLParserCOLLATE                          = 88
	PostgreSQLParserCOLLATION                        = 89
	PostgreSQLParserCOLLATION_CATALOG                = 90
	PostgreSQLParserCOLLATION_NAME                   = 91
	PostgreSQLParserCOLLATION_SCHEMA                 = 92
	PostgreSQLParserCOLLECT                          = 93
	PostgreSQLParserCOLUMN                           = 94
	PostgreSQLParserCOLUMN_NAME                      = 95
	PostgreSQLParserCOMMAND_FUNCTION                 = 96
	PostgreSQLParserCOMMAND_FUNCTION_CODE            = 97
	PostgreSQLParserCOMMENT                          = 98
	PostgreSQLParserCOMMIT                           = 99
	PostgreSQLParserCOMMITTED                        = 100
	PostgreSQLParserCOMPLETION                       = 101
	PostgreSQLParserCONDITION                        = 102
	PostgreSQLParserCONDITION_NUMBER                 = 103
	PostgreSQLParserCONFIGURATION                    = 104
	PostgreSQLParserCONFLICT                         = 105
	PostgreSQLParserCONNECT                          = 106
	PostgreSQLParserCONNECTION                       = 107
	PostgreSQLParserCONNECTION_NAME                  = 108
	PostgreSQLParserCONSTRAINT                       = 109
	PostgreSQLParserCONSTRAINT_CATALOG               = 110
	PostgreSQLParserCONSTRAINT_NAME                  = 111
	PostgreSQLParserCONSTRAINT_SCHEMA                = 112
	PostgreSQLParserCONSTRAINTS                      = 113
	PostgreSQLParserCONSTRUCTOR                      = 114
	PostgreSQLParserCONTAINS                         = 115
	PostgreSQLParserCONTINUE                         = 116
	PostgreSQLParserCONVERSION                       = 117
	PostgreSQLParserCONVERT                          = 118
	PostgreSQLParserCOPY                             = 119
	PostgreSQLParserCORR                             = 120
	PostgreSQLParserCORRESPONDING                    = 121
	PostgreSQLParserCOSTS                            = 122
	PostgreSQLParserCOUNT                            = 123
	PostgreSQLParserCOVAR_POP                        = 124
	PostgreSQLParserCOVAR_SAMP                       = 125
	PostgreSQLParserCREATE                           = 126
	PostgreSQLParserCREATETABLE                      = 127
	PostgreSQLParserCREATEDB                         = 128
	PostgreSQLParserCREATEUSER                       = 129
	PostgreSQLParserCROSS                            = 130
	PostgreSQLParserCSV                              = 131
	PostgreSQLParserCUBE                             = 132
	PostgreSQLParserCUME_DIST                        = 133
	PostgreSQLParserCURRENT                          = 134
	PostgreSQLParserCURRENT_DATE                     = 135
	PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP  = 136
	PostgreSQLParserCURRENT_PATH                     = 137
	PostgreSQLParserCURRENT_ROLE                     = 138
	PostgreSQLParserCURRENT_TIME                     = 139
	PostgreSQLParserCURRENT_TIMESTAMP                = 140
	PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE = 141
	PostgreSQLParserCURRENT_USER                     = 142
	PostgreSQLParserCURSOR                           = 143
	PostgreSQLParserCURSOR_NAME                      = 144
	PostgreSQLParserCYCLE                            = 145
	PostgreSQLParserDATA                             = 146
	PostgreSQLParserDATABASE                         = 147
	PostgreSQLParserDATE                             = 148
	PostgreSQLParserDATETIME_INTERVAL_CODE           = 149
	PostgreSQLParserDATETIME_INTERVAL_PRECISION      = 150
	PostgreSQLParserDAY                              = 151
	PostgreSQLParserDEALLOCATE                       = 152
	PostgreSQLParserDEC                              = 153
	PostgreSQLParserDECIMAL                          = 154
	PostgreSQLParserDECLARE                          = 155
	PostgreSQLParserDEFAULT                          = 156
	PostgreSQLParserDEFAULTS                         = 157
	PostgreSQLParserDEFERABLE                        = 158
	PostgreSQLParserDEFERRABLE                       = 159
	PostgreSQLParserDEFERRED                         = 160
	PostgreSQLParserDEFINED                          = 161
	PostgreSQLParserDEFINER                          = 162
	PostgreSQLParserDEGREE                           = 163
	PostgreSQLParserDELETE                           = 164
	PostgreSQLParserDELIMITER                        = 165
	PostgreSQLParserDELIMITERS                       = 166
	PostgreSQLParserDENSE_RANK                       = 167
	PostgreSQLParserDEPENDS                          = 168
	PostgreSQLParserDEPTH                            = 169
	PostgreSQLParserDEREF                            = 170
	PostgreSQLParserDERIVED                          = 171
	PostgreSQLParserDESC                             = 172
	PostgreSQLParserDESCRIBE                         = 173
	PostgreSQLParserDESCRIPTOR                       = 174
	PostgreSQLParserDESTROY                          = 175
	PostgreSQLParserDESTRUCTOR                       = 176
	PostgreSQLParserDETERMINISTIC                    = 177
	PostgreSQLParserDIAGNOSTICS                      = 178
	PostgreSQLParserDICTIONARY                       = 179
	PostgreSQLParserDISABLE                          = 180
	PostgreSQLParserDISABLE_PAGE_SKIPPING            = 181
	PostgreSQLParserDISCARD                          = 182
	PostgreSQLParserDISCONNECT                       = 183
	PostgreSQLParserDISPATCH                         = 184
	PostgreSQLParserDISTINCT                         = 185
	PostgreSQLParserDO                               = 186
	PostgreSQLParserDOMAIN                           = 187
	PostgreSQLParserDOUBLE                           = 188
	PostgreSQLParserDROP                             = 189
	PostgreSQLParserDYNAMIC                          = 190
	PostgreSQLParserDYNAMIC_FUNCTION                 = 191
	PostgreSQLParserDYNAMIC_FUNCTION_CODE            = 192
	PostgreSQLParserEACH                             = 193
	PostgreSQLParserELEMENT                          = 194
	PostgreSQLParserELSE                             = 195
	PostgreSQLParserENABLE                           = 196
	PostgreSQLParserENCODING                         = 197
	PostgreSQLParserENCRYPTED                        = 198
	PostgreSQLParserEND                              = 199
	PostgreSQLParserEND_EXEC                         = 200
	PostgreSQLParserEQUALS                           = 201
	PostgreSQLParserESCAPE                           = 202
	PostgreSQLParserEVERY                            = 203
	PostgreSQLParserEXCEPT                           = 204
	PostgreSQLParserEXCEPTION                        = 205
	PostgreSQLParserEXCLUDE                          = 206
	PostgreSQLParserEXCLUDING                        = 207
	PostgreSQLParserEXCLUSIVE                        = 208
	PostgreSQLParserEXEC                             = 209
	PostgreSQLParserEXECUTE                          = 210
	PostgreSQLParserEXISTING                         = 211
	PostgreSQLParserEXISTS                           = 212
	PostgreSQLParserEXP                              = 213
	PostgreSQLParserEXPLAIN                          = 214
	PostgreSQLParserEXTENDED                         = 215
	PostgreSQLParserEXTENSION                        = 216
	PostgreSQLParserEXTERNAL                         = 217
	PostgreSQLParserEXTRACT                          = 218
	PostgreSQLParserFALSE                            = 219
	PostgreSQLParserFETCH                            = 220
	PostgreSQLParserFIELDS                           = 221
	PostgreSQLParserFILTER                           = 222
	PostgreSQLParserFINAL                            = 223
	PostgreSQLParserFIRST                            = 224
	PostgreSQLParserFLOAT                            = 225
	PostgreSQLParserFLOOR                            = 226
	PostgreSQLParserFOLLOWING                        = 227
	PostgreSQLParserFOR                              = 228
	PostgreSQLParserFORCE                            = 229
	PostgreSQLParserFOREIGN                          = 230
	PostgreSQLParserFORMAT                           = 231
	PostgreSQLParserFORTRAN                          = 232
	PostgreSQLParserFORWARD                          = 233
	PostgreSQLParserFOUND                            = 234
	PostgreSQLParserFREE                             = 235
	PostgreSQLParserFREEZE                           = 236
	PostgreSQLParserFROM                             = 237
	PostgreSQLParserFULL                             = 238
	PostgreSQLParserFUNCTION                         = 239
	PostgreSQLParserFUSION                           = 240
	PostgreSQLParserG_                               = 241
	PostgreSQLParserGENERAL                          = 242
	PostgreSQLParserGENERATED                        = 243
	PostgreSQLParserGET                              = 244
	PostgreSQLParserGLOBAL                           = 245
	PostgreSQLParserGO                               = 246
	PostgreSQLParserGOTO                             = 247
	PostgreSQLParserGRANT                            = 248
	PostgreSQLParserGRANTED                          = 249
	PostgreSQLParserGREATEST                         = 250
	PostgreSQLParserGROUP                            = 251
	PostgreSQLParserGROUPING                         = 252
	PostgreSQLParserHANDLER                          = 253
	PostgreSQLParserHAVING                           = 254
	PostgreSQLParserHIERARCHY                        = 255
	PostgreSQLParserHOLD                             = 256
	PostgreSQLParserHOST                             = 257
	PostgreSQLParserHOUR                             = 258
	PostgreSQLParserIDENTITY                         = 259
	PostgreSQLParserIGNORE                           = 260
	PostgreSQLParserILIKE                            = 261
	PostgreSQLParserIMMEDIATE                        = 262
	PostgreSQLParserIMMUTABLE                        = 263
	PostgreSQLParserIMPLEMENTATION                   = 264
	PostgreSQLParserIMPLICIT                         = 265
	PostgreSQLParserIN                               = 266
	PostgreSQLParserINCLUDING                        = 267
	PostgreSQLParserINCREMENT                        = 268
	PostgreSQLParserINDEX                            = 269
	PostgreSQLParserINDICATOR                        = 270
	PostgreSQLParserINFIX                            = 271
	PostgreSQLParserINHERITS                         = 272
	PostgreSQLParserINITIALIZE                       = 273
	PostgreSQLParserINITIALLY                        = 274
	PostgreSQLParserINNER                            = 275
	PostgreSQLParserINOUT                            = 276
	PostgreSQLParserINPUT                            = 277
	PostgreSQLParserINSENSITIVE                      = 278
	PostgreSQLParserINSERT                           = 279
	PostgreSQLParserINSTANCE                         = 280
	PostgreSQLParserINSTANTIABLE                     = 281
	PostgreSQLParserINSTEAD                          = 282
	PostgreSQLParserINT                              = 283
	PostgreSQLParserINTEGER                          = 284
	PostgreSQLParserINTERSECT                        = 285
	PostgreSQLParserINTERSECTION                     = 286
	PostgreSQLParserINTERVAL                         = 287
	PostgreSQLParserINTO                             = 288
	PostgreSQLParserINVOKER                          = 289
	PostgreSQLParserIS                               = 290
	PostgreSQLParserISOLATION                        = 291
	PostgreSQLParserITERATE                          = 292
	PostgreSQLParserJOIN                             = 293
	PostgreSQLParserK_                               = 294
	PostgreSQLParserKEY                              = 295
	PostgreSQLParserKEY_MEMBER                       = 296
	PostgreSQLParserKEY_TYPE                         = 297
	PostgreSQLParserLABEL                            = 298
	PostgreSQLParserLANCOMPILER                      = 299
	PostgreSQLParserLANGUAGE                         = 300
	PostgreSQLParserLARGE                            = 301
	PostgreSQLParserLAST                             = 302
	PostgreSQLParserLATERAL                          = 303
	PostgreSQLParserLEADING                          = 304
	PostgreSQLParserLEAST                            = 305
	PostgreSQLParserLEFT                             = 306
	PostgreSQLParserLENGTH                           = 307
	PostgreSQLParserLESS                             = 308
	PostgreSQLParserLEVEL                            = 309
	PostgreSQLParserLIKE                             = 310
	PostgreSQLParserLIMIT                            = 311
	PostgreSQLParserLISTEN                           = 312
	PostgreSQLParserLN                               = 313
	PostgreSQLParserLOAD                             = 314
	PostgreSQLParserLOCAL                            = 315
	PostgreSQLParserLOCALTIME                        = 316
	PostgreSQLParserLOCALTIMESTAMP                   = 317
	PostgreSQLParserLOCATION                         = 318
	PostgreSQLParserLOCATOR                          = 319
	PostgreSQLParserLOCK                             = 320
	PostgreSQLParserLOCKED                           = 321
	PostgreSQLParserLOWER                            = 322
	PostgreSQLParserM_                               = 323
	PostgreSQLParserMAIN                             = 324
	PostgreSQLParserMAP                              = 325
	PostgreSQLParserMAPPING                          = 326
	PostgreSQLParserMATCH                            = 327
	PostgreSQLParserMATCH_SIMPLE                     = 328
	PostgreSQLParserMATCHED                          = 329
	PostgreSQLParserMAX                              = 330
	PostgreSQLParserMAXVALUE                         = 331
	PostgreSQLParserMEMBER                           = 332
	PostgreSQLParserMERGE                            = 333
	PostgreSQLParserMESSAGE_LENGTH                   = 334
	PostgreSQLParserMESSAGE_OCTET_LENGTH             = 335
	PostgreSQLParserMESSAGE_TEXT                     = 336
	PostgreSQLParserMETHOD                           = 337
	PostgreSQLParserMIN                              = 338
	PostgreSQLParserMINUTE                           = 339
	PostgreSQLParserMINVALUE                         = 340
	PostgreSQLParserMOD                              = 341
	PostgreSQLParserMODE                             = 342
	PostgreSQLParserMODIFIES                         = 343
	PostgreSQLParserMODIFY                           = 344
	PostgreSQLParserMODULE                           = 345
	PostgreSQLParserMONTH                            = 346
	PostgreSQLParserMORE_                            = 347
	PostgreSQLParserMOVE                             = 348
	PostgreSQLParserMULTISET                         = 349
	PostgreSQLParserMUMPS                            = 350
	PostgreSQLParserNAME                             = 351
	PostgreSQLParserNAMES                            = 352
	PostgreSQLParserNATIONAL                         = 353
	PostgreSQLParserNATURAL                          = 354
	PostgreSQLParserNCHAR                            = 355
	PostgreSQLParserNCLOB                            = 356
	PostgreSQLParserNESTING                          = 357
	PostgreSQLParserNEW                              = 358
	PostgreSQLParserNEXT                             = 359
	PostgreSQLParserNO                               = 360
	PostgreSQLParserNOCREATEDB                       = 361
	PostgreSQLParserNOCREATEUSER                     = 362
	PostgreSQLParserNONE                             = 363
	PostgreSQLParserNORMALIZE                        = 364
	PostgreSQLParserNORMALIZED                       = 365
	PostgreSQLParserNOT                              = 366
	PostgreSQLParserNOTHING                          = 367
	PostgreSQLParserNOTIFY                           = 368
	PostgreSQLParserNOTNULL                          = 369
	PostgreSQLParserNOWAIT                           = 370
	PostgreSQLParserNULL                             = 371
	PostgreSQLParserNULLABLE                         = 372
	PostgreSQLParserNULLIF                           = 373
	PostgreSQLParserNULLS                            = 374
	PostgreSQLParserNUMBER                           = 375
	PostgreSQLParserNUMERIC                          = 376
	PostgreSQLParserOBJECT                           = 377
	PostgreSQLParserOCTET_LENGTH                     = 378
	PostgreSQLParserOCTETS                           = 379
	PostgreSQLParserOF                               = 380
	PostgreSQLParserOFF                              = 381
	PostgreSQLParserOFFSET                           = 382
	PostgreSQLParserOIDS                             = 383
	PostgreSQLParserOLD                              = 384
	PostgreSQLParserON                               = 385
	PostgreSQLParserONLY                             = 386
	PostgreSQLParserOPEN                             = 387
	PostgreSQLParserOPERATION                        = 388
	PostgreSQLParserOPERATOR                         = 389
	PostgreSQLParserOPTION                           = 390
	PostgreSQLParserOPTIONS                          = 391
	PostgreSQLParserOR                               = 392
	PostgreSQLParserORDER                            = 393
	PostgreSQLParserORDERING                         = 394
	PostgreSQLParserORDINALITY                       = 395
	PostgreSQLParserOTHERS                           = 396
	PostgreSQLParserOUT                              = 397
	PostgreSQLParserOUTER                            = 398
	PostgreSQLParserOUTPUT                           = 399
	PostgreSQLParserOVER                             = 400
	PostgreSQLParserOVERLAPS                         = 401
	PostgreSQLParserOVERLAY                          = 402
	PostgreSQLParserOVERRIDING                       = 403
	PostgreSQLParserOWNER                            = 404
	PostgreSQLParserPAD                              = 405
	PostgreSQLParserPARAMETER                        = 406
	PostgreSQLParserPARAMETER_MODE                   = 407
	PostgreSQLParserPARAMETER_NAME                   = 408
	PostgreSQLParserPARAMETER_ORDINAL_POSITION       = 409
	PostgreSQLParserPARAMETER_SPECIFIC_CATALOG       = 410
	PostgreSQLParserPARAMETER_SPECIFIC_NAME          = 411
	PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA        = 412
	PostgreSQLParserPARAMETERS                       = 413
	PostgreSQLParserPARSER                           = 414
	PostgreSQLParserPARTIAL                          = 415
	PostgreSQLParserPARTITION                        = 416
	PostgreSQLParserPASCAL                           = 417
	PostgreSQLParserPASSWORD                         = 418
	PostgreSQLParserPATH                             = 419
	PostgreSQLParserPERCENT_RANK                     = 420
	PostgreSQLParserPERCENTILE_CONT                  = 421
	PostgreSQLParserPERCENTILE_DISC                  = 422
	PostgreSQLParserPLACING                          = 423
	PostgreSQLParserPLAIN                            = 424
	PostgreSQLParserPLANS                            = 425
	PostgreSQLParserPLI                              = 426
	PostgreSQLParserPOSITION                         = 427
	PostgreSQLParserPOSTFIX                          = 428
	PostgreSQLParserPOWER                            = 429
	PostgreSQLParserPRECEDING                        = 430
	PostgreSQLParserPRECISION                        = 431
	PostgreSQLParserPREFIX                           = 432
	PostgreSQLParserPREORDER                         = 433
	PostgreSQLParserPREPARE                          = 434
	PostgreSQLParserPREPARED                         = 435
	PostgreSQLParserPRESERVE                         = 436
	PostgreSQLParserPRIMARY                          = 437
	PostgreSQLParserPRIOR                            = 438
	PostgreSQLParserPRIVILEGES                       = 439
	PostgreSQLParserPROCEDURAL                       = 440
	PostgreSQLParserPROCEDURE                        = 441
	PostgreSQLParserPUBLIC                           = 442
	PostgreSQLParserPUBLICATION                      = 443
	PostgreSQLParserQUOTE                            = 444
	PostgreSQLParserRANGE                            = 445
	PostgreSQLParserRANK                             = 446
	PostgreSQLParserREAD                             = 447
	PostgreSQLParserREADS                            = 448
	PostgreSQLParserREAL                             = 449
	PostgreSQLParserREASSIGN                         = 450
	PostgreSQLParserRECHECK                          = 451
	PostgreSQLParserRECURSIVE                        = 452
	PostgreSQLParserREF                              = 453
	PostgreSQLParserREFERENCES                       = 454
	PostgreSQLParserREFERENCING                      = 455
	PostgreSQLParserREFRESH                          = 456
	PostgreSQLParserREGR_AVGX                        = 457
	PostgreSQLParserREGR_AVGY                        = 458
	PostgreSQLParserREGR_COUNT                       = 459
	PostgreSQLParserREGR_INTERCEPT                   = 460
	PostgreSQLParserREGR_R2                          = 461
	PostgreSQLParserREGR_SLOPE                       = 462
	PostgreSQLParserREGR_SXX                         = 463
	PostgreSQLParserREGR_SXY                         = 464
	PostgreSQLParserREGR_SYY                         = 465
	PostgreSQLParserREINDEX                          = 466
	PostgreSQLParserRELATIVE                         = 467
	PostgreSQLParserRELEASE                          = 468
	PostgreSQLParserRENAME                           = 469
	PostgreSQLParserREPEATABLE                       = 470
	PostgreSQLParserREPLACE                          = 471
	PostgreSQLParserREPLICA                          = 472
	PostgreSQLParserRESET                            = 473
	PostgreSQLParserRESTART                          = 474
	PostgreSQLParserRESTRICT                         = 475
	PostgreSQLParserRESULT                           = 476
	PostgreSQLParserRETURN                           = 477
	PostgreSQLParserRETURNED_CARDINALITY             = 478
	PostgreSQLParserRETURNED_LENGTH                  = 479
	PostgreSQLParserRETURNED_OCTET_LENGTH            = 480
	PostgreSQLParserRETURNED_SQLSTATE                = 481
	PostgreSQLParserRETURNING                        = 482
	PostgreSQLParserRETURNS                          = 483
	PostgreSQLParserREVOKE                           = 484
	PostgreSQLParserRIGHT                            = 485
	PostgreSQLParserROLE                             = 486
	PostgreSQLParserROLLBACK                         = 487
	PostgreSQLParserROLLUP                           = 488
	PostgreSQLParserROUTINE                          = 489
	PostgreSQLParserROUTINE_CATALOG                  = 490
	PostgreSQLParserROUTINE_NAME                     = 491
	PostgreSQLParserROUTINE_SCHEMA                   = 492
	PostgreSQLParserROW                              = 493
	PostgreSQLParserROW_COUNT                        = 494
	PostgreSQLParserROW_NUMBER                       = 495
	PostgreSQLParserROWS                             = 496
	PostgreSQLParserRULE                             = 497
	PostgreSQLParserSAVEPOINT                        = 498
	PostgreSQLParserSCALE                            = 499
	PostgreSQLParserSCHEMA                           = 500
	PostgreSQLParserSCHEMA_NAME                      = 501
	PostgreSQLParserSCOPE                            = 502
	PostgreSQLParserSCOPE_CATALOG                    = 503
	PostgreSQLParserSCOPE_NAME                       = 504
	PostgreSQLParserSCOPE_SCHEMA                     = 505
	PostgreSQLParserSCROLL                           = 506
	PostgreSQLParserSEARCH                           = 507
	PostgreSQLParserSECOND                           = 508
	PostgreSQLParserSECTION                          = 509
	PostgreSQLParserSECURITY                         = 510
	PostgreSQLParserSELECT                           = 511
	PostgreSQLParserSELF                             = 512
	PostgreSQLParserSENSITIVE                        = 513
	PostgreSQLParserSEQUENCE                         = 514
	PostgreSQLParserSEQUENCES                        = 515
	PostgreSQLParserSERIALIZABLE                     = 516
	PostgreSQLParserSERVER_NAME                      = 517
	PostgreSQLParserSESSION                          = 518
	PostgreSQLParserSESSION_USER                     = 519
	PostgreSQLParserSET                              = 520
	PostgreSQLParserSETOF                            = 521
	PostgreSQLParserSETS                             = 522
	PostgreSQLParserSHARE                            = 523
	PostgreSQLParserSHOW                             = 524
	PostgreSQLParserSIMILAR                          = 525
	PostgreSQLParserSIMPLE                           = 526
	PostgreSQLParserSIZE                             = 527
	PostgreSQLParserSKIP_                            = 528
	PostgreSQLParserSMALLINT                         = 529
	PostgreSQLParserSNAPSHOT                         = 530
	PostgreSQLParserSOME                             = 531
	PostgreSQLParserSOURCE                           = 532
	PostgreSQLParserSPACE                            = 533
	PostgreSQLParserSPECIFIC                         = 534
	PostgreSQLParserSPECIFIC_NAME                    = 535
	PostgreSQLParserSPECIFICTYPE                     = 536
	PostgreSQLParserSQL                              = 537
	PostgreSQLParserSQLCODE                          = 538
	PostgreSQLParserSQLERROR                         = 539
	PostgreSQLParserSQLEXCEPTION                     = 540
	PostgreSQLParserSQLSTATE                         = 541
	PostgreSQLParserSQLWARNING                       = 542
	PostgreSQLParserSQRT                             = 543
	PostgreSQLParserSTABLE                           = 544
	PostgreSQLParserSTART                            = 545
	PostgreSQLParserSTATE                            = 546
	PostgreSQLParserSTATEMENT                        = 547
	PostgreSQLParserSTATIC                           = 548
	PostgreSQLParserSTATISTICS                       = 549
	PostgreSQLParserSTDDEV_POP                       = 550
	PostgreSQLParserSTDDEV_SAMP                      = 551
	PostgreSQLParserSTDIN                            = 552
	PostgreSQLParserSTDOUT                           = 553
	PostgreSQLParserSTORAGE                          = 554
	PostgreSQLParserSTRICT                           = 555
	PostgreSQLParserSTRUCTURE                        = 556
	PostgreSQLParserSTYLE                            = 557
	PostgreSQLParserSUBCLASS_ORIGIN                  = 558
	PostgreSQLParserSUBLIST                          = 559
	PostgreSQLParserSUBMULTISET                      = 560
	PostgreSQLParserSUBSCRIPTION                     = 561
	PostgreSQLParserSUBSTRING                        = 562
	PostgreSQLParserSUM                              = 563
	PostgreSQLParserSYMMETRIC                        = 564
	PostgreSQLParserSYSID                            = 565
	PostgreSQLParserSYSTEM                           = 566
	PostgreSQLParserSYSTEM_USER                      = 567
	PostgreSQLParserTABLE                            = 568
	PostgreSQLParserTABLE_NAME                       = 569
	PostgreSQLParserTABLESAMPLE                      = 570
	PostgreSQLParserTABLESPACE                       = 571
	PostgreSQLParserTEMP                             = 572
	PostgreSQLParserTEMPLATE                         = 573
	PostgreSQLParserTEMPORARY                        = 574
	PostgreSQLParserTERMINATE                        = 575
	PostgreSQLParserTHAN                             = 576
	PostgreSQLParserTHEN                             = 577
	PostgreSQLParserTIES                             = 578
	PostgreSQLParserTIME                             = 579
	PostgreSQLParserTIMESTAMP                        = 580
	PostgreSQLParserTIMEZONE_HOUR                    = 581
	PostgreSQLParserTIMEZONE_MINUTE                  = 582
	PostgreSQLParserTIMING                           = 583
	PostgreSQLParserTO                               = 584
	PostgreSQLParserTOAST                            = 585
	PostgreSQLParserTOP_LEVEL_COUNT                  = 586
	PostgreSQLParserTRAILING                         = 587
	PostgreSQLParserTRANSACTION                      = 588
	PostgreSQLParserTRANSACTION_ACTIVE               = 589
	PostgreSQLParserTRANSACTIONS_COMMITTED           = 590
	PostgreSQLParserTRANSACTIONS_ROLLED_BACK         = 591
	PostgreSQLParserTRANSFORM                        = 592
	PostgreSQLParserTRANSFORMS                       = 593
	PostgreSQLParserTRANSLATE                        = 594
	PostgreSQLParserTRANSLATION                      = 595
	PostgreSQLParserTREAT                            = 596
	PostgreSQLParserTRIGGER                          = 597
	PostgreSQLParserTRIGGER_CATALOG                  = 598
	PostgreSQLParserTRIGGER_NAME                     = 599
	PostgreSQLParserTRIGGER_SCHEMA                   = 600
	PostgreSQLParserTRIM                             = 601
	PostgreSQLParserTRUE                             = 602
	PostgreSQLParserTRUNCATE                         = 603
	PostgreSQLParserTRUSTED                          = 604
	PostgreSQLParserTYPE                             = 605
	PostgreSQLParserUESCAPE                          = 606
	PostgreSQLParserUNBOUNDED                        = 607
	PostgreSQLParserUNCOMMITTED                      = 608
	PostgreSQLParserUNDER                            = 609
	PostgreSQLParserUNENCRYPTED                      = 610
	PostgreSQLParserUNION                            = 611
	PostgreSQLParserUNIQUE                           = 612
	PostgreSQLParserUNKNOWN                          = 613
	PostgreSQLParserUNLISTEN                         = 614
	PostgreSQLParserUNNAMED                          = 615
	PostgreSQLParserUNNEST                           = 616
	PostgreSQLParserUNTIL                            = 617
	PostgreSQLParserUPDATE                           = 618
	PostgreSQLParserUPPER                            = 619
	PostgreSQLParserUSAGE                            = 620
	PostgreSQLParserUSER                             = 621
	PostgreSQLParserUSER_DEFINED_TYPE_CATALOG        = 622
	PostgreSQLParserUSER_DEFINED_TYPE_CODE           = 623
	PostgreSQLParserUSER_DEFINED_TYPE_NAME           = 624
	PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA         = 625
	PostgreSQLParserUSING                            = 626
	PostgreSQLParserVACUUM                           = 627
	PostgreSQLParserVALID                            = 628
	PostgreSQLParserVALIDATE                         = 629
	PostgreSQLParserVALIDATOR                        = 630
	PostgreSQLParserVALUE                            = 631
	PostgreSQLParserVALUES                           = 632
	PostgreSQLParserVAR_POP                          = 633
	PostgreSQLParserVAR_SAMP                         = 634
	PostgreSQLParserVARCHAR                          = 635
	PostgreSQLParserVARIABLE                         = 636
	PostgreSQLParserVARIADIC                         = 637
	PostgreSQLParserVARYING                          = 638
	PostgreSQLParserVERBOSE                          = 639
	PostgreSQLParserVIEW                             = 640
	PostgreSQLParserVOLATILE                         = 641
	PostgreSQLParserWHEN                             = 642
	PostgreSQLParserWHENEVER                         = 643
	PostgreSQLParserWHERE                            = 644
	PostgreSQLParserWIDTH_BUCKET                     = 645
	PostgreSQLParserWINDOW                           = 646
	PostgreSQLParserWITH                             = 647
	PostgreSQLParserWITHIN                           = 648
	PostgreSQLParserWITHOUT                          = 649
	PostgreSQLParserWORK                             = 650
	PostgreSQLParserWRITE                            = 651
	PostgreSQLParserYAML                             = 652
	PostgreSQLParserYEAR                             = 653
	PostgreSQLParserYES                              = 654
	PostgreSQLParserZONE                             = 655
	PostgreSQLParserSUPERUSER                        = 656
	PostgreSQLParserNOSUPERUSER                      = 657
	PostgreSQLParserCREATEROLE                       = 658
	PostgreSQLParserNOCREATEROLE                     = 659
	PostgreSQLParserINHERIT                          = 660
	PostgreSQLParserNOINHERIT                        = 661
	PostgreSQLParserLOGIN                            = 662
	PostgreSQLParserNOLOGIN                          = 663
	PostgreSQLParserREPLICATION                      = 664
	PostgreSQLParserNOREPLICATION                    = 665
	PostgreSQLParserBYPASSRLS                        = 666
	PostgreSQLParserNOBYPASSRLS                      = 667
	PostgreSQLParserSFUNC                            = 668
	PostgreSQLParserSTYPE                            = 669
	PostgreSQLParserSSPACE                           = 670
	PostgreSQLParserFINALFUNC                        = 671
	PostgreSQLParserFINALFUNC_EXTRA                  = 672
	PostgreSQLParserCOMBINEFUNC                      = 673
	PostgreSQLParserSERIALFUNC                       = 674
	PostgreSQLParserDESERIALFUNC                     = 675
	PostgreSQLParserINITCOND                         = 676
	PostgreSQLParserMSFUNC                           = 677
	PostgreSQLParserMINVFUNC                         = 678
	PostgreSQLParserMSTYPE                           = 679
	PostgreSQLParserMSSPACE                          = 680
	PostgreSQLParserMFINALFUNC                       = 681
	PostgreSQLParserMFINALFUNC_EXTRA                 = 682
	PostgreSQLParserMINITCOND                        = 683
	PostgreSQLParserSORTOP                           = 684
	PostgreSQLParserPARALLEL                         = 685
	PostgreSQLParserHYPOTHETICAL                     = 686
	PostgreSQLParserSAFE                             = 687
	PostgreSQLParserRESTRICTED                       = 688
	PostgreSQLParserUNSAFE                           = 689
	PostgreSQLParserBASETYPE                         = 690
	PostgreSQLParserIF                               = 691
	PostgreSQLParserLOCALE                           = 692
	PostgreSQLParserLC_COLLATE                       = 693
	PostgreSQLParserLC_CTYPE                         = 694
	PostgreSQLParserPROVIDER                         = 695
	PostgreSQLParserVERSION                          = 696
	PostgreSQLParserALLOW_CONNECTIONS                = 697
	PostgreSQLParserIS_TEMPLATE                      = 698
	PostgreSQLParserEVENT                            = 699
	PostgreSQLParserWRAPPER                          = 700
	PostgreSQLParserSERVER                           = 701
	PostgreSQLParserBTREE                            = 702
	PostgreSQLParserHASH_                            = 703
	PostgreSQLParserGIST                             = 704
	PostgreSQLParserSPGIST                           = 705
	PostgreSQLParserGIN                              = 706
	PostgreSQLParserBRIN                             = 707
	PostgreSQLParserCONCURRENTLY                     = 708
	PostgreSQLParserINLINE                           = 709
	PostgreSQLParserMATERIALIZED                     = 710
	PostgreSQLParserLEFTARG                          = 711
	PostgreSQLParserRIGHTARG                         = 712
	PostgreSQLParserCOMMUTATOR                       = 713
	PostgreSQLParserNEGATOR                          = 714
	PostgreSQLParserHASHES                           = 715
	PostgreSQLParserMERGES                           = 716
	PostgreSQLParserFAMILY                           = 717
	PostgreSQLParserPOLICY                           = 718
	PostgreSQLParserOWNED                            = 719
	PostgreSQLParserABSTIME                          = 720
	PostgreSQLParserBIGSERIAL                        = 721
	PostgreSQLParserBIT_VARYING                      = 722
	PostgreSQLParserBOOL                             = 723
	PostgreSQLParserBOX                              = 724
	PostgreSQLParserBYTEA                            = 725
	PostgreSQLParserCHARACTER_VARYING                = 726
	PostgreSQLParserCIDR                             = 727
	PostgreSQLParserCIRCLE                           = 728
	PostgreSQLParserFLOAT4                           = 729
	PostgreSQLParserFLOAT8                           = 730
	PostgreSQLParserINET                             = 731
	PostgreSQLParserINT2                             = 732
	PostgreSQLParserINT4                             = 733
	PostgreSQLParserINT8                             = 734
	PostgreSQLParserJSON                             = 735
	PostgreSQLParserJSONB                            = 736
	PostgreSQLParserLINE                             = 737
	PostgreSQLParserLSEG                             = 738
	PostgreSQLParserMACADDR                          = 739
	PostgreSQLParserMACADDR8                         = 740
	PostgreSQLParserMONEY                            = 741
	PostgreSQLParserPG_LSN                           = 742
	PostgreSQLParserPOINT                            = 743
	PostgreSQLParserPOLYGON                          = 744
	PostgreSQLParserRELTIME                          = 745
	PostgreSQLParserSERIAL                           = 746
	PostgreSQLParserSERIAL2                          = 747
	PostgreSQLParserSERIAL4                          = 748
	PostgreSQLParserSERIAL8                          = 749
	PostgreSQLParserSMALLSERIAL                      = 750
	PostgreSQLParserSTSTEM                           = 751
	PostgreSQLParserTEXT                             = 752
	PostgreSQLParserTIMESTAMPTZ                      = 753
	PostgreSQLParserTIMETZ                           = 754
	PostgreSQLParserTSQUERY                          = 755
	PostgreSQLParserTSVECTOR                         = 756
	PostgreSQLParserTXID_SNAPSHOT                    = 757
	PostgreSQLParserUUID                             = 758
	PostgreSQLParserVARBIT                           = 759
	PostgreSQLParserXML                              = 760
	PostgreSQLParserCOMMA                            = 761
	PostgreSQLParserCOLON                            = 762
	PostgreSQLParserCOLON_COLON                      = 763
	PostgreSQLParserDOLLAR                           = 764
	PostgreSQLParserDOLLAR_DOLLAR                    = 765
	PostgreSQLParserSTAR                             = 766
	PostgreSQLParserOPEN_PAREN                       = 767
	PostgreSQLParserCLOSE_PAREN                      = 768
	PostgreSQLParserOPEN_BRACKET                     = 769
	PostgreSQLParserCLOSE_BRACKET                    = 770
	PostgreSQLParserBIT_STRING                       = 771
	PostgreSQLParserREGEX_STRING                     = 772
	PostgreSQLParserNUMERIC_LITERAL                  = 773
	PostgreSQLParserINTEGER_LITERAL                  = 774
	PostgreSQLParserHEX_INTEGER_LITERAL              = 775
	PostgreSQLParserDOT                              = 776
	PostgreSQLParserSINGLEQ_STRING_LITERAL           = 777
	PostgreSQLParserDOUBLEQ_STRING_LITERAL           = 778
	PostgreSQLParserIDENTIFIER                       = 779
	PostgreSQLParserDOLLAR_DEC                       = 780
	PostgreSQLParserIDENTIFIER_UNICODE               = 781
	PostgreSQLParserAMP                              = 782
	PostgreSQLParserAMP_AMP                          = 783
	PostgreSQLParserAMP_LT                           = 784
	PostgreSQLParserAT_AT                            = 785
	PostgreSQLParserAT_GT                            = 786
	PostgreSQLParserAT_SIGN                          = 787
	PostgreSQLParserBANG                             = 788
	PostgreSQLParserBANG_BANG                        = 789
	PostgreSQLParserBANG_EQUAL                       = 790
	PostgreSQLParserCARET                            = 791
	PostgreSQLParserEQUAL                            = 792
	PostgreSQLParserEQUAL_GT                         = 793
	PostgreSQLParserGT                               = 794
	PostgreSQLParserGTE                              = 795
	PostgreSQLParserGT_GT                            = 796
	PostgreSQLParserHASH                             = 797
	PostgreSQLParserHASH_EQ                          = 798
	PostgreSQLParserHASH_GT                          = 799
	PostgreSQLParserHASH_GT_GT                       = 800
	PostgreSQLParserHASH_HASH                        = 801
	PostgreSQLParserHYPHEN_GT                        = 802
	PostgreSQLParserHYPHEN_GT_GT                     = 803
	PostgreSQLParserHYPHEN_PIPE_HYPHEN               = 804
	PostgreSQLParserLT                               = 805
	PostgreSQLParserLTE                              = 806
	PostgreSQLParserLT_AT                            = 807
	PostgreSQLParserLT_CARET                         = 808
	PostgreSQLParserLT_GT                            = 809
	PostgreSQLParserLT_HYPHEN_GT                     = 810
	PostgreSQLParserLT_LT                            = 811
	PostgreSQLParserLT_LT_EQ                         = 812
	PostgreSQLParserLT_QMARK_GT                      = 813
	PostgreSQLParserMINUS                            = 814
	PostgreSQLParserPERCENT                          = 815
	PostgreSQLParserPIPE                             = 816
	PostgreSQLParserPIPE_PIPE                        = 817
	PostgreSQLParserPIPE_PIPE_SLASH                  = 818
	PostgreSQLParserPIPE_SLASH                       = 819
	PostgreSQLParserPLUS                             = 820
	PostgreSQLParserQMARK                            = 821
	PostgreSQLParserQMARK_AMP                        = 822
	PostgreSQLParserQMARK_HASH                       = 823
	PostgreSQLParserQMARK_HYPHEN                     = 824
	PostgreSQLParserQMARK_PIPE                       = 825
	PostgreSQLParserSLASH                            = 826
	PostgreSQLParserTIL                              = 827
	PostgreSQLParserTIL_EQ                           = 828
	PostgreSQLParserTIL_GTE_TIL                      = 829
	PostgreSQLParserTIL_GT_TIL                       = 830
	PostgreSQLParserTIL_LTE_TIL                      = 831
	PostgreSQLParserTIL_LT_TIL                       = 832
	PostgreSQLParserTIL_STAR                         = 833
	PostgreSQLParserTIL_TIL                          = 834
	PostgreSQLParserSEMI                             = 835
	PostgreSQLParserUNLOGGED                         = 836
)

// PostgreSQLParser rules.
const (
	PostgreSQLParserRULE_root                             = 0
	PostgreSQLParserRULE_stmt                             = 1
	PostgreSQLParserRULE_abort_stmt                       = 2
	PostgreSQLParserRULE_alter_stmt                       = 3
	PostgreSQLParserRULE_alter_aggregate_stmt             = 4
	PostgreSQLParserRULE_alter_collation_stmt             = 5
	PostgreSQLParserRULE_alter_conversion_stmt            = 6
	PostgreSQLParserRULE_alter_database_stmt              = 7
	PostgreSQLParserRULE_alter_default_privileges_stmt    = 8
	PostgreSQLParserRULE_alter_domain_stmt                = 9
	PostgreSQLParserRULE_alter_event_trigger_stmt         = 10
	PostgreSQLParserRULE_alter_extension_stmt             = 11
	PostgreSQLParserRULE_alter_foreign_data_wrapper_stmt  = 12
	PostgreSQLParserRULE_alter_foreign_table_action       = 13
	PostgreSQLParserRULE_alter_foreign_table_action_list  = 14
	PostgreSQLParserRULE_alter_foreign_table_stmt         = 15
	PostgreSQLParserRULE_alter_function_stmt              = 16
	PostgreSQLParserRULE_alter_group_stmt                 = 17
	PostgreSQLParserRULE_alter_index_stmt                 = 18
	PostgreSQLParserRULE_alter_language_stmt              = 19
	PostgreSQLParserRULE_alter_large_object_stmt          = 20
	PostgreSQLParserRULE_alter_materialize_view_stmt      = 21
	PostgreSQLParserRULE_alter_operator_stmt              = 22
	PostgreSQLParserRULE_alter_operator_class_stmt        = 23
	PostgreSQLParserRULE_alter_operator_family_stmt       = 24
	PostgreSQLParserRULE_alter_policy_stmt                = 25
	PostgreSQLParserRULE_alter_publication_stmt           = 26
	PostgreSQLParserRULE_alter_role_options               = 27
	PostgreSQLParserRULE_alter_role_stmt                  = 28
	PostgreSQLParserRULE_alter_rule_stmt                  = 29
	PostgreSQLParserRULE_alter_schema_stmt                = 30
	PostgreSQLParserRULE_alter_sequence_stmt              = 31
	PostgreSQLParserRULE_alter_server_options_list        = 32
	PostgreSQLParserRULE_alter_server_stmt                = 33
	PostgreSQLParserRULE_alter_statistics_stmt            = 34
	PostgreSQLParserRULE_alter_subscription_stmt          = 35
	PostgreSQLParserRULE_alter_system_stmt                = 36
	PostgreSQLParserRULE_alter_table_stmt                 = 37
	PostgreSQLParserRULE_alter_tablespace_stmt            = 38
	PostgreSQLParserRULE_alter_text_search_config_stmt    = 39
	PostgreSQLParserRULE_alter_text_search_dict_stmt      = 40
	PostgreSQLParserRULE_alter_text_search_parser_stmt    = 41
	PostgreSQLParserRULE_alter_text_search_template_stmt  = 42
	PostgreSQLParserRULE_alter_trigger_stmt               = 43
	PostgreSQLParserRULE_alter_type_stmt                  = 44
	PostgreSQLParserRULE_alter_user_stmt                  = 45
	PostgreSQLParserRULE_alter_user_mapping_stmt          = 46
	PostgreSQLParserRULE_alter_view_stmt                  = 47
	PostgreSQLParserRULE_analyze_stmt                     = 48
	PostgreSQLParserRULE_close_stmt                       = 49
	PostgreSQLParserRULE_cluster_stmt                     = 50
	PostgreSQLParserRULE_comment_stmt                     = 51
	PostgreSQLParserRULE_commit_stmt                      = 52
	PostgreSQLParserRULE_commit_prepared_stmt             = 53
	PostgreSQLParserRULE_copy_stmt                        = 54
	PostgreSQLParserRULE_create_stmt                      = 55
	PostgreSQLParserRULE_create_access_method_stmt        = 56
	PostgreSQLParserRULE_create_aggregate_stmt            = 57
	PostgreSQLParserRULE_create_cast_stmt                 = 58
	PostgreSQLParserRULE_create_collation_opt             = 59
	PostgreSQLParserRULE_create_collation_opt_list        = 60
	PostgreSQLParserRULE_create_collation_stmt            = 61
	PostgreSQLParserRULE_create_conversion_stmt           = 62
	PostgreSQLParserRULE_create_database_stmt             = 63
	PostgreSQLParserRULE_domain_constraint                = 64
	PostgreSQLParserRULE_create_domain_stmt               = 65
	PostgreSQLParserRULE_create_event_trigger_cond        = 66
	PostgreSQLParserRULE_create_event_trigger_stmt        = 67
	PostgreSQLParserRULE_create_foreign_data_options      = 68
	PostgreSQLParserRULE_create_foreign_data_stmt         = 69
	PostgreSQLParserRULE_create_foreign_table_stmt        = 70
	PostgreSQLParserRULE_create_function_stmt             = 71
	PostgreSQLParserRULE_create_group_stmt                = 72
	PostgreSQLParserRULE_create_index_stmt                = 73
	PostgreSQLParserRULE_create_language_stmt             = 74
	PostgreSQLParserRULE_create_materialized_view_stmt    = 75
	PostgreSQLParserRULE_create_operator_stmt             = 76
	PostgreSQLParserRULE_create_operator_class_opt        = 77
	PostgreSQLParserRULE_create_operator_class_stmt       = 78
	PostgreSQLParserRULE_create_operator_family_stmt      = 79
	PostgreSQLParserRULE_create_policy_stmt               = 80
	PostgreSQLParserRULE_create_role_stmt                 = 81
	PostgreSQLParserRULE_create_rule_event                = 82
	PostgreSQLParserRULE_create_rule_stmt                 = 83
	PostgreSQLParserRULE_create_schema_stmt               = 84
	PostgreSQLParserRULE_create_sequence_stmt             = 85
	PostgreSQLParserRULE_create_server_stmt               = 86
	PostgreSQLParserRULE_create_statistics_stmt           = 87
	PostgreSQLParserRULE_create_subscription_stmt         = 88
	PostgreSQLParserRULE_create_table_stmt                = 89
	PostgreSQLParserRULE_create_definitions               = 90
	PostgreSQLParserRULE_create_definition                = 91
	PostgreSQLParserRULE_create_table_as_stmt             = 92
	PostgreSQLParserRULE_create_tablespace_stmt           = 93
	PostgreSQLParserRULE_create_text_search_config_stmt   = 94
	PostgreSQLParserRULE_create_text_search_dict_stmt     = 95
	PostgreSQLParserRULE_create_text_search_parser_stmt   = 96
	PostgreSQLParserRULE_create_text_search_template_stmt = 97
	PostgreSQLParserRULE_create_transform_stmt            = 98
	PostgreSQLParserRULE_create_trigger_stmt              = 99
	PostgreSQLParserRULE_create_type_stmt                 = 100
	PostgreSQLParserRULE_create_user_stmt                 = 101
	PostgreSQLParserRULE_create_user_mapping_stmt         = 102
	PostgreSQLParserRULE_create_view_stmt                 = 103
	PostgreSQLParserRULE_deallocate_stmt                  = 104
	PostgreSQLParserRULE_declare_stmt                     = 105
	PostgreSQLParserRULE_delete_stmt                      = 106
	PostgreSQLParserRULE_discard_stmt                     = 107
	PostgreSQLParserRULE_drop_stmt                        = 108
	PostgreSQLParserRULE_drop_access_method_stmt          = 109
	PostgreSQLParserRULE_drop_aggregate_stmt              = 110
	PostgreSQLParserRULE_drop_cast_stmt                   = 111
	PostgreSQLParserRULE_drop_collation_stmt              = 112
	PostgreSQLParserRULE_drop_conversion_stmt             = 113
	PostgreSQLParserRULE_drop_database_stmt               = 114
	PostgreSQLParserRULE_drop_domain_stmt                 = 115
	PostgreSQLParserRULE_drop_event_trigger_stmt          = 116
	PostgreSQLParserRULE_drop_extension_stmt              = 117
	PostgreSQLParserRULE_drop_foreign_data_wrapper_stmt   = 118
	PostgreSQLParserRULE_drop_foreign_table_stmt          = 119
	PostgreSQLParserRULE_drop_function_stmt               = 120
	PostgreSQLParserRULE_drop_group_stmt                  = 121
	PostgreSQLParserRULE_drop_index_stmt                  = 122
	PostgreSQLParserRULE_drop_language_stmt               = 123
	PostgreSQLParserRULE_drop_materialized_view_stmt      = 124
	PostgreSQLParserRULE_drop_operator_stmt               = 125
	PostgreSQLParserRULE_drop_operator_class_stmt         = 126
	PostgreSQLParserRULE_drop_operator_family_stmt        = 127
	PostgreSQLParserRULE_drop_owned_stmt                  = 128
	PostgreSQLParserRULE_drop_policy_stmt                 = 129
	PostgreSQLParserRULE_drop_publication_stmt            = 130
	PostgreSQLParserRULE_drop_role_stmt                   = 131
	PostgreSQLParserRULE_drop_rule_stmt                   = 132
	PostgreSQLParserRULE_drop_schema_stmt                 = 133
	PostgreSQLParserRULE_drop_sequence_stmt               = 134
	PostgreSQLParserRULE_drop_server_stmt                 = 135
	PostgreSQLParserRULE_drop_statistics_stmt             = 136
	PostgreSQLParserRULE_drop_subscription_stmt           = 137
	PostgreSQLParserRULE_drop_table_stmt                  = 138
	PostgreSQLParserRULE_drop_tablespace_stmt             = 139
	PostgreSQLParserRULE_drop_text_search_config_stmt     = 140
	PostgreSQLParserRULE_drop_text_search_dict_stmt       = 141
	PostgreSQLParserRULE_drop_text_search_parser_stmt     = 142
	PostgreSQLParserRULE_drop_text_search_template_stmt   = 143
	PostgreSQLParserRULE_drop_transform_stmt              = 144
	PostgreSQLParserRULE_drop_trigger_stmt                = 145
	PostgreSQLParserRULE_drop_type_stmt                   = 146
	PostgreSQLParserRULE_drop_user_stmt                   = 147
	PostgreSQLParserRULE_drop_user_mapping_stmt           = 148
	PostgreSQLParserRULE_drop_view_stmt                   = 149
	PostgreSQLParserRULE_execute_stmt                     = 150
	PostgreSQLParserRULE_explain_stmt                     = 151
	PostgreSQLParserRULE_fetch_stmt                       = 152
	PostgreSQLParserRULE_grant_stmt                       = 153
	PostgreSQLParserRULE_import_foreign_schema_stmt       = 154
	PostgreSQLParserRULE_insert_stmt                      = 155
	PostgreSQLParserRULE_listen_stmt                      = 156
	PostgreSQLParserRULE_load_stmt                        = 157
	PostgreSQLParserRULE_lock_stmt                        = 158
	PostgreSQLParserRULE_move_stmt                        = 159
	PostgreSQLParserRULE_notify_stmt                      = 160
	PostgreSQLParserRULE_prepare_stmt                     = 161
	PostgreSQLParserRULE_prepare_transaction_stmt         = 162
	PostgreSQLParserRULE_reassign_owned_stmt              = 163
	PostgreSQLParserRULE_refresh_materialized_view_stmt   = 164
	PostgreSQLParserRULE_reindex_stmt                     = 165
	PostgreSQLParserRULE_release_savepoint_stmt           = 166
	PostgreSQLParserRULE_reset_stmt                       = 167
	PostgreSQLParserRULE_revoke_stmt                      = 168
	PostgreSQLParserRULE_rollback_stmt                    = 169
	PostgreSQLParserRULE_rollback_prepared_stmt           = 170
	PostgreSQLParserRULE_rollback_to_savepoint_stmt       = 171
	PostgreSQLParserRULE_savepoint_stmt                   = 172
	PostgreSQLParserRULE_security_label_stmt              = 173
	PostgreSQLParserRULE_select_stmt                      = 174
	PostgreSQLParserRULE_select_into_stmt                 = 175
	PostgreSQLParserRULE_with_clause                      = 176
	PostgreSQLParserRULE_with_expr                        = 177
	PostgreSQLParserRULE_set_stmt                         = 178
	PostgreSQLParserRULE_set_constraints_stmt             = 179
	PostgreSQLParserRULE_set_role_stmt                    = 180
	PostgreSQLParserRULE_set_session_authorization_stmt   = 181
	PostgreSQLParserRULE_transaction_mode                 = 182
	PostgreSQLParserRULE_transaction_mode_list            = 183
	PostgreSQLParserRULE_set_transaction_stmt             = 184
	PostgreSQLParserRULE_show_stmt                        = 185
	PostgreSQLParserRULE_truncate_stmt                    = 186
	PostgreSQLParserRULE_unlisten_stmt                    = 187
	PostgreSQLParserRULE_update_stmt                      = 188
	PostgreSQLParserRULE_vacuum_opt                       = 189
	PostgreSQLParserRULE_vacuum_opt_list                  = 190
	PostgreSQLParserRULE_vacuum_stmt                      = 191
	PostgreSQLParserRULE_values_stmt                      = 192
	PostgreSQLParserRULE_selector_clause                  = 193
	PostgreSQLParserRULE_from_clause                      = 194
	PostgreSQLParserRULE_where_clause                     = 195
	PostgreSQLParserRULE_group_by_clause                  = 196
	PostgreSQLParserRULE_grouping_elem                    = 197
	PostgreSQLParserRULE_grouping_elem_list               = 198
	PostgreSQLParserRULE_having_clause                    = 199
	PostgreSQLParserRULE_column_list                      = 200
	PostgreSQLParserRULE_explain_parameter                = 201
	PostgreSQLParserRULE_frame                            = 202
	PostgreSQLParserRULE_frame_start                      = 203
	PostgreSQLParserRULE_frame_end                        = 204
	PostgreSQLParserRULE_frame_clause                     = 205
	PostgreSQLParserRULE_window_definition                = 206
	PostgreSQLParserRULE_window_clause                    = 207
	PostgreSQLParserRULE_combine_clause                   = 208
	PostgreSQLParserRULE_order_by_clause                  = 209
	PostgreSQLParserRULE_order_by_item                    = 210
	PostgreSQLParserRULE_limit_clause                     = 211
	PostgreSQLParserRULE_offset_clause                    = 212
	PostgreSQLParserRULE_fetch_clause                     = 213
	PostgreSQLParserRULE_for_clause                       = 214
	PostgreSQLParserRULE_updater_clause                   = 215
	PostgreSQLParserRULE_updater_expr                     = 216
	PostgreSQLParserRULE_returning_clause                 = 217
	PostgreSQLParserRULE_expr                             = 218
	PostgreSQLParserRULE_bool_expr                        = 219
	PostgreSQLParserRULE_case_expr                        = 220
	PostgreSQLParserRULE_expr_list                        = 221
	PostgreSQLParserRULE_expr_list_list                   = 222
	PostgreSQLParserRULE_func_sig_arg                     = 223
	PostgreSQLParserRULE_func_sig_arg_list                = 224
	PostgreSQLParserRULE_func_sig                         = 225
	PostgreSQLParserRULE_func_sig_list                    = 226
	PostgreSQLParserRULE_type_name                        = 227
	PostgreSQLParserRULE_timezone                         = 228
	PostgreSQLParserRULE_oper                             = 229
	PostgreSQLParserRULE_aggregate                        = 230
	PostgreSQLParserRULE_name_                            = 231
	PostgreSQLParserRULE_name_list                        = 232
	PostgreSQLParserRULE_identifier_list                  = 233
	PostgreSQLParserRULE_option_expr                      = 234
	PostgreSQLParserRULE_option_list                      = 235
	PostgreSQLParserRULE_table_name_                      = 236
	PostgreSQLParserRULE_data_type                        = 237
	PostgreSQLParserRULE_data_type_list                   = 238
	PostgreSQLParserRULE_index_method                     = 239
	PostgreSQLParserRULE_func_name                        = 240
	PostgreSQLParserRULE_func_call                        = 241
	PostgreSQLParserRULE_array_cons_expr                  = 242
	PostgreSQLParserRULE_from_item                        = 243
	PostgreSQLParserRULE_with_column_alias                = 244
	PostgreSQLParserRULE_join_type                        = 245
	PostgreSQLParserRULE_join_clause                      = 246
	PostgreSQLParserRULE_predicate                        = 247
	PostgreSQLParserRULE_aggregate_signature              = 248
	PostgreSQLParserRULE_column_constraint                = 249
	PostgreSQLParserRULE_column_constraints               = 250
	PostgreSQLParserRULE_index_parameters                 = 251
	PostgreSQLParserRULE_exclude_element                  = 252
	PostgreSQLParserRULE_table_constraint                 = 253
	PostgreSQLParserRULE_role_name                        = 254
	PostgreSQLParserRULE_role_name_list                   = 255
	PostgreSQLParserRULE_param_value                      = 256
	PostgreSQLParserRULE_non_reserved_keyword             = 257
	PostgreSQLParserRULE_identifier                       = 258
	PostgreSQLParserRULE_todo_fill_in                     = 259
	PostgreSQLParserRULE_todo_implement                   = 260
	PostgreSQLParserRULE_correlation_name                 = 261
	PostgreSQLParserRULE_column_name                      = 262
	PostgreSQLParserRULE_alias                            = 263
	PostgreSQLParserRULE_column_alias                     = 264
	PostgreSQLParserRULE_column_definition                = 265
	PostgreSQLParserRULE_window_name                      = 266
)

// IRootContext is an interface to support dynamic dispatch.
type IRootContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRootContext differentiates from other interfaces.
	IsRootContext()
}

type RootContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRootContext() *RootContext {
	var p = new(RootContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_root
	return p
}

func (*RootContext) IsRootContext() {}

func NewRootContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RootContext {
	var p = new(RootContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_root

	return p
}

func (s *RootContext) GetParser() antlr.Parser { return s.parser }

func (s *RootContext) AllStmt() []IStmtContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStmtContext)(nil)).Elem())
	var tst = make([]IStmtContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStmtContext)
		}
	}

	return tst
}

func (s *RootContext) Stmt(i int) IStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStmtContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStmtContext)
}

func (s *RootContext) EOF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEOF, 0)
}

func (s *RootContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserSEMI)
}

func (s *RootContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSEMI, i)
}

func (s *RootContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RootContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RootContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterRoot(s)
	}
}

func (s *RootContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitRoot(s)
	}
}

func (p *PostgreSQLParser) Root() (localctx IRootContext) {
	localctx = NewRootContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, PostgreSQLParserRULE_root)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(534)
		p.Stmt()
	}
	p.SetState(543)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserSEMI {
		p.SetState(537)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(535)
					p.Match(PostgreSQLParserSEMI)
				}
				{
					p.SetState(536)
					p.Stmt()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(539)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext())
		}
		{
			p.SetState(541)
			p.Match(PostgreSQLParserSEMI)
		}

	}
	{
		p.SetState(545)
		p.Match(PostgreSQLParserEOF)
	}

	return localctx
}

// IStmtContext is an interface to support dynamic dispatch.
type IStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStmtContext differentiates from other interfaces.
	IsStmtContext()
}

type StmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStmtContext() *StmtContext {
	var p = new(StmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_stmt
	return p
}

func (*StmtContext) IsStmtContext() {}

func NewStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StmtContext {
	var p = new(StmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_stmt

	return p
}

func (s *StmtContext) GetParser() antlr.Parser { return s.parser }

func (s *StmtContext) Abort_stmt() IAbort_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbort_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbort_stmtContext)
}

func (s *StmtContext) Alter_stmt() IAlter_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_stmtContext)
}

func (s *StmtContext) Analyze_stmt() IAnalyze_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnalyze_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnalyze_stmtContext)
}

func (s *StmtContext) Create_stmt() ICreate_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_stmtContext)
}

func (s *StmtContext) Close_stmt() IClose_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClose_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClose_stmtContext)
}

func (s *StmtContext) Cluster_stmt() ICluster_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICluster_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICluster_stmtContext)
}

func (s *StmtContext) Comment_stmt() IComment_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComment_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComment_stmtContext)
}

func (s *StmtContext) Commit_stmt() ICommit_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommit_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICommit_stmtContext)
}

func (s *StmtContext) Commit_prepared_stmt() ICommit_prepared_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommit_prepared_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICommit_prepared_stmtContext)
}

func (s *StmtContext) Copy_stmt() ICopy_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICopy_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICopy_stmtContext)
}

func (s *StmtContext) Deallocate_stmt() IDeallocate_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeallocate_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeallocate_stmtContext)
}

func (s *StmtContext) Declare_stmt() IDeclare_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_stmtContext)
}

func (s *StmtContext) Delete_stmt() IDelete_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelete_stmtContext)
}

func (s *StmtContext) Discard_stmt() IDiscard_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDiscard_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDiscard_stmtContext)
}

func (s *StmtContext) Drop_stmt() IDrop_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_stmtContext)
}

func (s *StmtContext) Execute_stmt() IExecute_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_stmtContext)
}

func (s *StmtContext) Explain_stmt() IExplain_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplain_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExplain_stmtContext)
}

func (s *StmtContext) Fetch_stmt() IFetch_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFetch_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFetch_stmtContext)
}

func (s *StmtContext) Grant_stmt() IGrant_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrant_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrant_stmtContext)
}

func (s *StmtContext) Import_foreign_schema_stmt() IImport_foreign_schema_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImport_foreign_schema_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImport_foreign_schema_stmtContext)
}

func (s *StmtContext) Insert_stmt() IInsert_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_stmtContext)
}

func (s *StmtContext) Listen_stmt() IListen_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListen_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListen_stmtContext)
}

func (s *StmtContext) Load_stmt() ILoad_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoad_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoad_stmtContext)
}

func (s *StmtContext) Lock_stmt() ILock_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILock_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILock_stmtContext)
}

func (s *StmtContext) Move_stmt() IMove_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMove_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMove_stmtContext)
}

func (s *StmtContext) Notify_stmt() INotify_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotify_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotify_stmtContext)
}

func (s *StmtContext) Prepare_stmt() IPrepare_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrepare_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrepare_stmtContext)
}

func (s *StmtContext) Prepare_transaction_stmt() IPrepare_transaction_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrepare_transaction_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrepare_transaction_stmtContext)
}

func (s *StmtContext) Reassign_owned_stmt() IReassign_owned_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReassign_owned_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReassign_owned_stmtContext)
}

func (s *StmtContext) Refresh_materialized_view_stmt() IRefresh_materialized_view_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRefresh_materialized_view_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRefresh_materialized_view_stmtContext)
}

func (s *StmtContext) Reindex_stmt() IReindex_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReindex_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReindex_stmtContext)
}

func (s *StmtContext) Release_savepoint_stmt() IRelease_savepoint_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelease_savepoint_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelease_savepoint_stmtContext)
}

func (s *StmtContext) Reset_stmt() IReset_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReset_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReset_stmtContext)
}

func (s *StmtContext) Revoke_stmt() IRevoke_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRevoke_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRevoke_stmtContext)
}

func (s *StmtContext) Rollback_stmt() IRollback_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRollback_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRollback_stmtContext)
}

func (s *StmtContext) Rollback_prepared_stmt() IRollback_prepared_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRollback_prepared_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRollback_prepared_stmtContext)
}

func (s *StmtContext) Rollback_to_savepoint_stmt() IRollback_to_savepoint_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRollback_to_savepoint_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRollback_to_savepoint_stmtContext)
}

func (s *StmtContext) Savepoint_stmt() ISavepoint_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISavepoint_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISavepoint_stmtContext)
}

func (s *StmtContext) Security_label_stmt() ISecurity_label_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISecurity_label_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISecurity_label_stmtContext)
}

func (s *StmtContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *StmtContext) Select_into_stmt() ISelect_into_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_into_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_into_stmtContext)
}

func (s *StmtContext) Set_stmt() ISet_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_stmtContext)
}

func (s *StmtContext) Set_constraints_stmt() ISet_constraints_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_constraints_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_constraints_stmtContext)
}

func (s *StmtContext) Set_role_stmt() ISet_role_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_role_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_role_stmtContext)
}

func (s *StmtContext) Set_session_authorization_stmt() ISet_session_authorization_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_session_authorization_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_session_authorization_stmtContext)
}

func (s *StmtContext) Set_transaction_stmt() ISet_transaction_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_transaction_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_transaction_stmtContext)
}

func (s *StmtContext) Show_stmt() IShow_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShow_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShow_stmtContext)
}

func (s *StmtContext) Truncate_stmt() ITruncate_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITruncate_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITruncate_stmtContext)
}

func (s *StmtContext) Unlisten_stmt() IUnlisten_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnlisten_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnlisten_stmtContext)
}

func (s *StmtContext) Update_stmt() IUpdate_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmtContext)
}

func (s *StmtContext) Vacuum_stmt() IVacuum_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVacuum_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVacuum_stmtContext)
}

func (s *StmtContext) Values_stmt() IValues_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValues_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValues_stmtContext)
}

func (s *StmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterStmt(s)
	}
}

func (s *StmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitStmt(s)
	}
}

func (p *PostgreSQLParser) Stmt() (localctx IStmtContext) {
	localctx = NewStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, PostgreSQLParserRULE_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(599)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(547)
			p.Abort_stmt()
		}

	case 2:
		{
			p.SetState(548)
			p.Alter_stmt()
		}

	case 3:
		{
			p.SetState(549)
			p.Analyze_stmt()
		}

	case 4:
		{
			p.SetState(550)
			p.Create_stmt()
		}

	case 5:
		{
			p.SetState(551)
			p.Close_stmt()
		}

	case 6:
		{
			p.SetState(552)
			p.Cluster_stmt()
		}

	case 7:
		{
			p.SetState(553)
			p.Comment_stmt()
		}

	case 8:
		{
			p.SetState(554)
			p.Commit_stmt()
		}

	case 9:
		{
			p.SetState(555)
			p.Commit_prepared_stmt()
		}

	case 10:
		{
			p.SetState(556)
			p.Copy_stmt()
		}

	case 11:
		{
			p.SetState(557)
			p.Deallocate_stmt()
		}

	case 12:
		{
			p.SetState(558)
			p.Declare_stmt()
		}

	case 13:
		{
			p.SetState(559)
			p.Delete_stmt()
		}

	case 14:
		{
			p.SetState(560)
			p.Discard_stmt()
		}

	case 15:
		{
			p.SetState(561)
			p.Drop_stmt()
		}

	case 16:
		{
			p.SetState(562)
			p.Execute_stmt()
		}

	case 17:
		{
			p.SetState(563)
			p.Explain_stmt()
		}

	case 18:
		{
			p.SetState(564)
			p.Fetch_stmt()
		}

	case 19:
		{
			p.SetState(565)
			p.Grant_stmt()
		}

	case 20:
		{
			p.SetState(566)
			p.Import_foreign_schema_stmt()
		}

	case 21:
		{
			p.SetState(567)
			p.Insert_stmt()
		}

	case 22:
		{
			p.SetState(568)
			p.Listen_stmt()
		}

	case 23:
		{
			p.SetState(569)
			p.Load_stmt()
		}

	case 24:
		{
			p.SetState(570)
			p.Lock_stmt()
		}

	case 25:
		{
			p.SetState(571)
			p.Move_stmt()
		}

	case 26:
		{
			p.SetState(572)
			p.Notify_stmt()
		}

	case 27:
		{
			p.SetState(573)
			p.Prepare_stmt()
		}

	case 28:
		{
			p.SetState(574)
			p.Prepare_transaction_stmt()
		}

	case 29:
		{
			p.SetState(575)
			p.Reassign_owned_stmt()
		}

	case 30:
		{
			p.SetState(576)
			p.Refresh_materialized_view_stmt()
		}

	case 31:
		{
			p.SetState(577)
			p.Reindex_stmt()
		}

	case 32:
		{
			p.SetState(578)
			p.Release_savepoint_stmt()
		}

	case 33:
		{
			p.SetState(579)
			p.Reset_stmt()
		}

	case 34:
		{
			p.SetState(580)
			p.Revoke_stmt()
		}

	case 35:
		{
			p.SetState(581)
			p.Rollback_stmt()
		}

	case 36:
		{
			p.SetState(582)
			p.Rollback_prepared_stmt()
		}

	case 37:
		{
			p.SetState(583)
			p.Rollback_to_savepoint_stmt()
		}

	case 38:
		{
			p.SetState(584)
			p.Savepoint_stmt()
		}

	case 39:
		{
			p.SetState(585)
			p.Security_label_stmt()
		}

	case 40:
		{
			p.SetState(586)
			p.Select_stmt()
		}

	case 41:
		{
			p.SetState(587)
			p.Select_into_stmt()
		}

	case 42:
		{
			p.SetState(588)
			p.Set_stmt()
		}

	case 43:
		{
			p.SetState(589)
			p.Set_constraints_stmt()
		}

	case 44:
		{
			p.SetState(590)
			p.Set_role_stmt()
		}

	case 45:
		{
			p.SetState(591)
			p.Set_session_authorization_stmt()
		}

	case 46:
		{
			p.SetState(592)
			p.Set_transaction_stmt()
		}

	case 47:
		{
			p.SetState(593)
			p.Show_stmt()
		}

	case 48:
		{
			p.SetState(594)
			p.Truncate_stmt()
		}

	case 49:
		{
			p.SetState(595)
			p.Unlisten_stmt()
		}

	case 50:
		{
			p.SetState(596)
			p.Update_stmt()
		}

	case 51:
		{
			p.SetState(597)
			p.Vacuum_stmt()
		}

	case 52:
		{
			p.SetState(598)
			p.Values_stmt()
		}

	}

	return localctx
}

// IAbort_stmtContext is an interface to support dynamic dispatch.
type IAbort_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAbort_stmtContext differentiates from other interfaces.
	IsAbort_stmtContext()
}

type Abort_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAbort_stmtContext() *Abort_stmtContext {
	var p = new(Abort_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_abort_stmt
	return p
}

func (*Abort_stmtContext) IsAbort_stmtContext() {}

func NewAbort_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Abort_stmtContext {
	var p = new(Abort_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_abort_stmt

	return p
}

func (s *Abort_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Abort_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Abort_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Abort_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Abort_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAbort_stmt(s)
	}
}

func (s *Abort_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAbort_stmt(s)
	}
}

func (p *PostgreSQLParser) Abort_stmt() (localctx IAbort_stmtContext) {
	localctx = NewAbort_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, PostgreSQLParserRULE_abort_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(601)
		p.identifier(0)
	}

	return localctx
}

// IAlter_stmtContext is an interface to support dynamic dispatch.
type IAlter_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_stmtContext differentiates from other interfaces.
	IsAlter_stmtContext()
}

type Alter_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_stmtContext() *Alter_stmtContext {
	var p = new(Alter_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_stmt
	return p
}

func (*Alter_stmtContext) IsAlter_stmtContext() {}

func NewAlter_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_stmtContext {
	var p = new(Alter_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_stmt

	return p
}

func (s *Alter_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_stmtContext) Alter_aggregate_stmt() IAlter_aggregate_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_aggregate_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_aggregate_stmtContext)
}

func (s *Alter_stmtContext) Alter_collation_stmt() IAlter_collation_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_collation_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_collation_stmtContext)
}

func (s *Alter_stmtContext) Alter_conversion_stmt() IAlter_conversion_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_conversion_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_conversion_stmtContext)
}

func (s *Alter_stmtContext) Alter_database_stmt() IAlter_database_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_database_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_database_stmtContext)
}

func (s *Alter_stmtContext) Alter_default_privileges_stmt() IAlter_default_privileges_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_default_privileges_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_default_privileges_stmtContext)
}

func (s *Alter_stmtContext) Alter_domain_stmt() IAlter_domain_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_domain_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_domain_stmtContext)
}

func (s *Alter_stmtContext) Alter_event_trigger_stmt() IAlter_event_trigger_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_event_trigger_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_event_trigger_stmtContext)
}

func (s *Alter_stmtContext) Alter_extension_stmt() IAlter_extension_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_extension_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_extension_stmtContext)
}

func (s *Alter_stmtContext) Alter_foreign_data_wrapper_stmt() IAlter_foreign_data_wrapper_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_foreign_data_wrapper_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_foreign_data_wrapper_stmtContext)
}

func (s *Alter_stmtContext) Alter_foreign_table_stmt() IAlter_foreign_table_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_foreign_table_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_foreign_table_stmtContext)
}

func (s *Alter_stmtContext) Alter_function_stmt() IAlter_function_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_function_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_function_stmtContext)
}

func (s *Alter_stmtContext) Alter_group_stmt() IAlter_group_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_group_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_group_stmtContext)
}

func (s *Alter_stmtContext) Alter_index_stmt() IAlter_index_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_index_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_index_stmtContext)
}

func (s *Alter_stmtContext) Alter_language_stmt() IAlter_language_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_language_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_language_stmtContext)
}

func (s *Alter_stmtContext) Alter_large_object_stmt() IAlter_large_object_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_large_object_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_large_object_stmtContext)
}

func (s *Alter_stmtContext) Alter_materialize_view_stmt() IAlter_materialize_view_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_materialize_view_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_materialize_view_stmtContext)
}

func (s *Alter_stmtContext) Alter_operator_stmt() IAlter_operator_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_operator_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_operator_stmtContext)
}

func (s *Alter_stmtContext) Alter_operator_class_stmt() IAlter_operator_class_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_operator_class_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_operator_class_stmtContext)
}

func (s *Alter_stmtContext) Alter_operator_family_stmt() IAlter_operator_family_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_operator_family_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_operator_family_stmtContext)
}

func (s *Alter_stmtContext) Alter_policy_stmt() IAlter_policy_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_policy_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_policy_stmtContext)
}

func (s *Alter_stmtContext) Alter_publication_stmt() IAlter_publication_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_publication_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_publication_stmtContext)
}

func (s *Alter_stmtContext) Alter_role_stmt() IAlter_role_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_role_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_role_stmtContext)
}

func (s *Alter_stmtContext) Alter_rule_stmt() IAlter_rule_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_rule_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_rule_stmtContext)
}

func (s *Alter_stmtContext) Alter_schema_stmt() IAlter_schema_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_schema_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_schema_stmtContext)
}

func (s *Alter_stmtContext) Alter_sequence_stmt() IAlter_sequence_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_sequence_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_sequence_stmtContext)
}

func (s *Alter_stmtContext) Alter_server_stmt() IAlter_server_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_server_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_server_stmtContext)
}

func (s *Alter_stmtContext) Alter_statistics_stmt() IAlter_statistics_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_statistics_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_statistics_stmtContext)
}

func (s *Alter_stmtContext) Alter_subscription_stmt() IAlter_subscription_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_subscription_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_subscription_stmtContext)
}

func (s *Alter_stmtContext) Alter_system_stmt() IAlter_system_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_system_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_system_stmtContext)
}

func (s *Alter_stmtContext) Alter_table_stmt() IAlter_table_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_table_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_table_stmtContext)
}

func (s *Alter_stmtContext) Alter_tablespace_stmt() IAlter_tablespace_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_tablespace_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_tablespace_stmtContext)
}

func (s *Alter_stmtContext) Alter_text_search_config_stmt() IAlter_text_search_config_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_text_search_config_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_text_search_config_stmtContext)
}

func (s *Alter_stmtContext) Alter_text_search_dict_stmt() IAlter_text_search_dict_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_text_search_dict_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_text_search_dict_stmtContext)
}

func (s *Alter_stmtContext) Alter_text_search_parser_stmt() IAlter_text_search_parser_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_text_search_parser_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_text_search_parser_stmtContext)
}

func (s *Alter_stmtContext) Alter_text_search_template_stmt() IAlter_text_search_template_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_text_search_template_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_text_search_template_stmtContext)
}

func (s *Alter_stmtContext) Alter_trigger_stmt() IAlter_trigger_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_trigger_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_trigger_stmtContext)
}

func (s *Alter_stmtContext) Alter_type_stmt() IAlter_type_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_type_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_type_stmtContext)
}

func (s *Alter_stmtContext) Alter_user_stmt() IAlter_user_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_user_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_user_stmtContext)
}

func (s *Alter_stmtContext) Alter_user_mapping_stmt() IAlter_user_mapping_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_user_mapping_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_user_mapping_stmtContext)
}

func (s *Alter_stmtContext) Alter_view_stmt() IAlter_view_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_view_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_view_stmtContext)
}

func (s *Alter_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_stmt(s)
	}
}

func (s *Alter_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_stmt() (localctx IAlter_stmtContext) {
	localctx = NewAlter_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, PostgreSQLParserRULE_alter_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(643)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(603)
			p.Alter_aggregate_stmt()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(604)
			p.Alter_collation_stmt()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(605)
			p.Alter_conversion_stmt()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(606)
			p.Alter_database_stmt()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(607)
			p.Alter_default_privileges_stmt()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(608)
			p.Alter_domain_stmt()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(609)
			p.Alter_event_trigger_stmt()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(610)
			p.Alter_extension_stmt()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(611)
			p.Alter_foreign_data_wrapper_stmt()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(612)
			p.Alter_foreign_table_stmt()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(613)
			p.Alter_function_stmt()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(614)
			p.Alter_group_stmt()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(615)
			p.Alter_index_stmt()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(616)
			p.Alter_language_stmt()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(617)
			p.Alter_large_object_stmt()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(618)
			p.Alter_materialize_view_stmt()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(619)
			p.Alter_operator_stmt()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(620)
			p.Alter_operator_class_stmt()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(621)
			p.Alter_operator_family_stmt()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(622)
			p.Alter_policy_stmt()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(623)
			p.Alter_publication_stmt()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(624)
			p.Alter_role_stmt()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(625)
			p.Alter_rule_stmt()
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(626)
			p.Alter_schema_stmt()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(627)
			p.Alter_sequence_stmt()
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(628)
			p.Alter_server_stmt()
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(629)
			p.Alter_statistics_stmt()
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(630)
			p.Alter_subscription_stmt()
		}

	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(631)
			p.Alter_system_stmt()
		}

	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(632)
			p.Alter_table_stmt()
		}

	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(633)
			p.Alter_tablespace_stmt()
		}

	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(634)
			p.Alter_text_search_config_stmt()
		}

	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(635)
			p.Alter_text_search_dict_stmt()
		}

	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(636)
			p.Alter_text_search_parser_stmt()
		}

	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(637)
			p.Alter_text_search_template_stmt()
		}

	case 36:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(638)
			p.Alter_trigger_stmt()
		}

	case 37:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(639)
			p.Alter_type_stmt()
		}

	case 38:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(640)
			p.Alter_user_stmt()
		}

	case 39:
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(641)
			p.Alter_user_mapping_stmt()
		}

	case 40:
		p.EnterOuterAlt(localctx, 40)
		{
			p.SetState(642)
			p.Alter_view_stmt()
		}

	}

	return localctx
}

// IAlter_aggregate_stmtContext is an interface to support dynamic dispatch.
type IAlter_aggregate_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdentifierContext

	// GetNew_owner returns the new_owner rule contexts.
	GetNew_owner() IRole_nameContext

	// GetNew_schema returns the new_schema rule contexts.
	GetNew_schema() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdentifierContext)

	// SetNew_owner sets the new_owner rule contexts.
	SetNew_owner(IRole_nameContext)

	// SetNew_schema sets the new_schema rule contexts.
	SetNew_schema(IIdentifierContext)

	// IsAlter_aggregate_stmtContext differentiates from other interfaces.
	IsAlter_aggregate_stmtContext()
}

type Alter_aggregate_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	name       IIdentifierContext
	new_name   IIdentifierContext
	new_owner  IRole_nameContext
	new_schema IIdentifierContext
}

func NewEmptyAlter_aggregate_stmtContext() *Alter_aggregate_stmtContext {
	var p = new(Alter_aggregate_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_aggregate_stmt
	return p
}

func (*Alter_aggregate_stmtContext) IsAlter_aggregate_stmtContext() {}

func NewAlter_aggregate_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_aggregate_stmtContext {
	var p = new(Alter_aggregate_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_aggregate_stmt

	return p
}

func (s *Alter_aggregate_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_aggregate_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_aggregate_stmtContext) GetNew_name() IIdentifierContext { return s.new_name }

func (s *Alter_aggregate_stmtContext) GetNew_owner() IRole_nameContext { return s.new_owner }

func (s *Alter_aggregate_stmtContext) GetNew_schema() IIdentifierContext { return s.new_schema }

func (s *Alter_aggregate_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_aggregate_stmtContext) SetNew_name(v IIdentifierContext) { s.new_name = v }

func (s *Alter_aggregate_stmtContext) SetNew_owner(v IRole_nameContext) { s.new_owner = v }

func (s *Alter_aggregate_stmtContext) SetNew_schema(v IIdentifierContext) { s.new_schema = v }

func (s *Alter_aggregate_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_aggregate_stmtContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAGGREGATE, 0)
}

func (s *Alter_aggregate_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Alter_aggregate_stmtContext) Aggregate_signature() IAggregate_signatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAggregate_signatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAggregate_signatureContext)
}

func (s *Alter_aggregate_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Alter_aggregate_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_aggregate_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_aggregate_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_aggregate_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_aggregate_stmtContext) OWNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNER, 0)
}

func (s *Alter_aggregate_stmtContext) Role_name() IRole_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRole_nameContext)
}

func (s *Alter_aggregate_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Alter_aggregate_stmtContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCHEMA, 0)
}

func (s *Alter_aggregate_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_aggregate_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_aggregate_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_aggregate_stmt(s)
	}
}

func (s *Alter_aggregate_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_aggregate_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_aggregate_stmt() (localctx IAlter_aggregate_stmtContext) {
	localctx = NewAlter_aggregate_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, PostgreSQLParserRULE_alter_aggregate_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(675)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(645)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(646)
			p.Match(PostgreSQLParserAGGREGATE)
		}
		{
			p.SetState(647)

			var _x = p.identifier(0)

			localctx.(*Alter_aggregate_stmtContext).name = _x
		}
		{
			p.SetState(648)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(649)
			p.Aggregate_signature()
		}
		{
			p.SetState(650)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}
		{
			p.SetState(651)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(652)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(653)

			var _x = p.identifier(0)

			localctx.(*Alter_aggregate_stmtContext).new_name = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(655)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(656)
			p.Match(PostgreSQLParserAGGREGATE)
		}
		{
			p.SetState(657)

			var _x = p.identifier(0)

			localctx.(*Alter_aggregate_stmtContext).name = _x
		}
		{
			p.SetState(658)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(659)
			p.Aggregate_signature()
		}
		{
			p.SetState(660)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}
		{
			p.SetState(661)
			p.Match(PostgreSQLParserOWNER)
		}
		{
			p.SetState(662)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(663)

			var _x = p.Role_name()

			localctx.(*Alter_aggregate_stmtContext).new_owner = _x
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(665)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(666)
			p.Match(PostgreSQLParserAGGREGATE)
		}
		{
			p.SetState(667)

			var _x = p.identifier(0)

			localctx.(*Alter_aggregate_stmtContext).name = _x
		}
		{
			p.SetState(668)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(669)
			p.Aggregate_signature()
		}
		{
			p.SetState(670)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}
		{
			p.SetState(671)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(672)
			p.Match(PostgreSQLParserSCHEMA)
		}
		{
			p.SetState(673)

			var _x = p.identifier(0)

			localctx.(*Alter_aggregate_stmtContext).new_schema = _x
		}

	}

	return localctx
}

// IAlter_collation_stmtContext is an interface to support dynamic dispatch.
type IAlter_collation_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IName_Context

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdentifierContext

	// GetNew_owner returns the new_owner rule contexts.
	GetNew_owner() IRole_nameContext

	// GetNew_schema returns the new_schema rule contexts.
	GetNew_schema() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IName_Context)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdentifierContext)

	// SetNew_owner sets the new_owner rule contexts.
	SetNew_owner(IRole_nameContext)

	// SetNew_schema sets the new_schema rule contexts.
	SetNew_schema(IIdentifierContext)

	// IsAlter_collation_stmtContext differentiates from other interfaces.
	IsAlter_collation_stmtContext()
}

type Alter_collation_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	name       IName_Context
	new_name   IIdentifierContext
	new_owner  IRole_nameContext
	new_schema IIdentifierContext
}

func NewEmptyAlter_collation_stmtContext() *Alter_collation_stmtContext {
	var p = new(Alter_collation_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_collation_stmt
	return p
}

func (*Alter_collation_stmtContext) IsAlter_collation_stmtContext() {}

func NewAlter_collation_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_collation_stmtContext {
	var p = new(Alter_collation_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_collation_stmt

	return p
}

func (s *Alter_collation_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_collation_stmtContext) GetName() IName_Context { return s.name }

func (s *Alter_collation_stmtContext) GetNew_name() IIdentifierContext { return s.new_name }

func (s *Alter_collation_stmtContext) GetNew_owner() IRole_nameContext { return s.new_owner }

func (s *Alter_collation_stmtContext) GetNew_schema() IIdentifierContext { return s.new_schema }

func (s *Alter_collation_stmtContext) SetName(v IName_Context) { s.name = v }

func (s *Alter_collation_stmtContext) SetNew_name(v IIdentifierContext) { s.new_name = v }

func (s *Alter_collation_stmtContext) SetNew_owner(v IRole_nameContext) { s.new_owner = v }

func (s *Alter_collation_stmtContext) SetNew_schema(v IIdentifierContext) { s.new_schema = v }

func (s *Alter_collation_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_collation_stmtContext) COLLATION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOLLATION, 0)
}

func (s *Alter_collation_stmtContext) REFRESH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREFRESH, 0)
}

func (s *Alter_collation_stmtContext) VERSION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVERSION, 0)
}

func (s *Alter_collation_stmtContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Alter_collation_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_collation_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_collation_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_collation_stmtContext) OWNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNER, 0)
}

func (s *Alter_collation_stmtContext) Role_name() IRole_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRole_nameContext)
}

func (s *Alter_collation_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Alter_collation_stmtContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCHEMA, 0)
}

func (s *Alter_collation_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_collation_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_collation_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_collation_stmt(s)
	}
}

func (s *Alter_collation_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_collation_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_collation_stmt() (localctx IAlter_collation_stmtContext) {
	localctx = NewAlter_collation_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, PostgreSQLParserRULE_alter_collation_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(704)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(677)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(678)
			p.Match(PostgreSQLParserCOLLATION)
		}
		{
			p.SetState(679)

			var _x = p.Name_()

			localctx.(*Alter_collation_stmtContext).name = _x
		}
		{
			p.SetState(680)
			p.Match(PostgreSQLParserREFRESH)
		}
		{
			p.SetState(681)
			p.Match(PostgreSQLParserVERSION)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(683)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(684)
			p.Match(PostgreSQLParserCOLLATION)
		}
		{
			p.SetState(685)

			var _x = p.Name_()

			localctx.(*Alter_collation_stmtContext).name = _x
		}
		{
			p.SetState(686)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(687)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(688)

			var _x = p.identifier(0)

			localctx.(*Alter_collation_stmtContext).new_name = _x
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(690)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(691)
			p.Match(PostgreSQLParserCOLLATION)
		}
		{
			p.SetState(692)

			var _x = p.Name_()

			localctx.(*Alter_collation_stmtContext).name = _x
		}
		{
			p.SetState(693)
			p.Match(PostgreSQLParserOWNER)
		}
		{
			p.SetState(694)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(695)

			var _x = p.Role_name()

			localctx.(*Alter_collation_stmtContext).new_owner = _x
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(697)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(698)
			p.Match(PostgreSQLParserCOLLATION)
		}
		{
			p.SetState(699)

			var _x = p.Name_()

			localctx.(*Alter_collation_stmtContext).name = _x
		}
		{
			p.SetState(700)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(701)
			p.Match(PostgreSQLParserSCHEMA)
		}
		{
			p.SetState(702)

			var _x = p.identifier(0)

			localctx.(*Alter_collation_stmtContext).new_schema = _x
		}

	}

	return localctx
}

// IAlter_conversion_stmtContext is an interface to support dynamic dispatch.
type IAlter_conversion_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdentifierContext

	// GetNew_owner returns the new_owner rule contexts.
	GetNew_owner() IRole_nameContext

	// GetNew_schema returns the new_schema rule contexts.
	GetNew_schema() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdentifierContext)

	// SetNew_owner sets the new_owner rule contexts.
	SetNew_owner(IRole_nameContext)

	// SetNew_schema sets the new_schema rule contexts.
	SetNew_schema(IIdentifierContext)

	// IsAlter_conversion_stmtContext differentiates from other interfaces.
	IsAlter_conversion_stmtContext()
}

type Alter_conversion_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	name       IIdentifierContext
	new_name   IIdentifierContext
	new_owner  IRole_nameContext
	new_schema IIdentifierContext
}

func NewEmptyAlter_conversion_stmtContext() *Alter_conversion_stmtContext {
	var p = new(Alter_conversion_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_conversion_stmt
	return p
}

func (*Alter_conversion_stmtContext) IsAlter_conversion_stmtContext() {}

func NewAlter_conversion_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_conversion_stmtContext {
	var p = new(Alter_conversion_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_conversion_stmt

	return p
}

func (s *Alter_conversion_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_conversion_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_conversion_stmtContext) GetNew_name() IIdentifierContext { return s.new_name }

func (s *Alter_conversion_stmtContext) GetNew_owner() IRole_nameContext { return s.new_owner }

func (s *Alter_conversion_stmtContext) GetNew_schema() IIdentifierContext { return s.new_schema }

func (s *Alter_conversion_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_conversion_stmtContext) SetNew_name(v IIdentifierContext) { s.new_name = v }

func (s *Alter_conversion_stmtContext) SetNew_owner(v IRole_nameContext) { s.new_owner = v }

func (s *Alter_conversion_stmtContext) SetNew_schema(v IIdentifierContext) { s.new_schema = v }

func (s *Alter_conversion_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_conversion_stmtContext) CONVERSION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONVERSION, 0)
}

func (s *Alter_conversion_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_conversion_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_conversion_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_conversion_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_conversion_stmtContext) OWNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNER, 0)
}

func (s *Alter_conversion_stmtContext) Role_name() IRole_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRole_nameContext)
}

func (s *Alter_conversion_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Alter_conversion_stmtContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCHEMA, 0)
}

func (s *Alter_conversion_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_conversion_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_conversion_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_conversion_stmt(s)
	}
}

func (s *Alter_conversion_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_conversion_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_conversion_stmt() (localctx IAlter_conversion_stmtContext) {
	localctx = NewAlter_conversion_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, PostgreSQLParserRULE_alter_conversion_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(727)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(706)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(707)
			p.Match(PostgreSQLParserCONVERSION)
		}
		{
			p.SetState(708)

			var _x = p.identifier(0)

			localctx.(*Alter_conversion_stmtContext).name = _x
		}
		{
			p.SetState(709)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(710)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(711)

			var _x = p.identifier(0)

			localctx.(*Alter_conversion_stmtContext).new_name = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(713)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(714)
			p.Match(PostgreSQLParserCONVERSION)
		}
		{
			p.SetState(715)

			var _x = p.identifier(0)

			localctx.(*Alter_conversion_stmtContext).name = _x
		}
		{
			p.SetState(716)
			p.Match(PostgreSQLParserOWNER)
		}
		{
			p.SetState(717)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(718)

			var _x = p.Role_name()

			localctx.(*Alter_conversion_stmtContext).new_owner = _x
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(720)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(721)
			p.Match(PostgreSQLParserCONVERSION)
		}
		{
			p.SetState(722)

			var _x = p.identifier(0)

			localctx.(*Alter_conversion_stmtContext).name = _x
		}
		{
			p.SetState(723)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(724)
			p.Match(PostgreSQLParserSCHEMA)
		}
		{
			p.SetState(725)

			var _x = p.identifier(0)

			localctx.(*Alter_conversion_stmtContext).new_schema = _x
		}

	}

	return localctx
}

// IAlter_database_stmtContext is an interface to support dynamic dispatch.
type IAlter_database_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_database_stmtContext differentiates from other interfaces.
	IsAlter_database_stmtContext()
}

type Alter_database_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_database_stmtContext() *Alter_database_stmtContext {
	var p = new(Alter_database_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_database_stmt
	return p
}

func (*Alter_database_stmtContext) IsAlter_database_stmtContext() {}

func NewAlter_database_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_database_stmtContext {
	var p = new(Alter_database_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_database_stmt

	return p
}

func (s *Alter_database_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_database_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Alter_database_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_database_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_database_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_database_stmt(s)
	}
}

func (s *Alter_database_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_database_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_database_stmt() (localctx IAlter_database_stmtContext) {
	localctx = NewAlter_database_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, PostgreSQLParserRULE_alter_database_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(729)
		p.Todo_implement()
	}

	return localctx
}

// IAlter_default_privileges_stmtContext is an interface to support dynamic dispatch.
type IAlter_default_privileges_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_default_privileges_stmtContext differentiates from other interfaces.
	IsAlter_default_privileges_stmtContext()
}

type Alter_default_privileges_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_default_privileges_stmtContext() *Alter_default_privileges_stmtContext {
	var p = new(Alter_default_privileges_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_default_privileges_stmt
	return p
}

func (*Alter_default_privileges_stmtContext) IsAlter_default_privileges_stmtContext() {}

func NewAlter_default_privileges_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_default_privileges_stmtContext {
	var p = new(Alter_default_privileges_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_default_privileges_stmt

	return p
}

func (s *Alter_default_privileges_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_default_privileges_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Alter_default_privileges_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_default_privileges_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_default_privileges_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_default_privileges_stmt(s)
	}
}

func (s *Alter_default_privileges_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_default_privileges_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_default_privileges_stmt() (localctx IAlter_default_privileges_stmtContext) {
	localctx = NewAlter_default_privileges_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, PostgreSQLParserRULE_alter_default_privileges_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(731)
		p.Todo_implement()
	}

	return localctx
}

// IAlter_domain_stmtContext is an interface to support dynamic dispatch.
type IAlter_domain_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetConstraint_name returns the constraint_name rule contexts.
	GetConstraint_name() IIdentifierContext

	// GetNew_constraint_name returns the new_constraint_name rule contexts.
	GetNew_constraint_name() IIdentifierContext

	// GetNew_owner returns the new_owner rule contexts.
	GetNew_owner() IRole_nameContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdentifierContext

	// GetNew_schema returns the new_schema rule contexts.
	GetNew_schema() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetConstraint_name sets the constraint_name rule contexts.
	SetConstraint_name(IIdentifierContext)

	// SetNew_constraint_name sets the new_constraint_name rule contexts.
	SetNew_constraint_name(IIdentifierContext)

	// SetNew_owner sets the new_owner rule contexts.
	SetNew_owner(IRole_nameContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdentifierContext)

	// SetNew_schema sets the new_schema rule contexts.
	SetNew_schema(IIdentifierContext)

	// IsAlter_domain_stmtContext differentiates from other interfaces.
	IsAlter_domain_stmtContext()
}

type Alter_domain_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	name                IIdentifierContext
	constraint_name     IIdentifierContext
	new_constraint_name IIdentifierContext
	new_owner           IRole_nameContext
	new_name            IIdentifierContext
	new_schema          IIdentifierContext
}

func NewEmptyAlter_domain_stmtContext() *Alter_domain_stmtContext {
	var p = new(Alter_domain_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_domain_stmt
	return p
}

func (*Alter_domain_stmtContext) IsAlter_domain_stmtContext() {}

func NewAlter_domain_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_domain_stmtContext {
	var p = new(Alter_domain_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_domain_stmt

	return p
}

func (s *Alter_domain_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_domain_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_domain_stmtContext) GetConstraint_name() IIdentifierContext { return s.constraint_name }

func (s *Alter_domain_stmtContext) GetNew_constraint_name() IIdentifierContext {
	return s.new_constraint_name
}

func (s *Alter_domain_stmtContext) GetNew_owner() IRole_nameContext { return s.new_owner }

func (s *Alter_domain_stmtContext) GetNew_name() IIdentifierContext { return s.new_name }

func (s *Alter_domain_stmtContext) GetNew_schema() IIdentifierContext { return s.new_schema }

func (s *Alter_domain_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_domain_stmtContext) SetConstraint_name(v IIdentifierContext) { s.constraint_name = v }

func (s *Alter_domain_stmtContext) SetNew_constraint_name(v IIdentifierContext) {
	s.new_constraint_name = v
}

func (s *Alter_domain_stmtContext) SetNew_owner(v IRole_nameContext) { s.new_owner = v }

func (s *Alter_domain_stmtContext) SetNew_name(v IIdentifierContext) { s.new_name = v }

func (s *Alter_domain_stmtContext) SetNew_schema(v IIdentifierContext) { s.new_schema = v }

func (s *Alter_domain_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_domain_stmtContext) DOMAIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDOMAIN, 0)
}

func (s *Alter_domain_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_domain_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_domain_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Alter_domain_stmtContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEFAULT, 0)
}

func (s *Alter_domain_stmtContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Alter_domain_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Alter_domain_stmtContext) NOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOT, 0)
}

func (s *Alter_domain_stmtContext) NULL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNULL, 0)
}

func (s *Alter_domain_stmtContext) ADD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserADD, 0)
}

func (s *Alter_domain_stmtContext) Domain_constraint() IDomain_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDomain_constraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDomain_constraintContext)
}

func (s *Alter_domain_stmtContext) VALID() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVALID, 0)
}

func (s *Alter_domain_stmtContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONSTRAINT, 0)
}

func (s *Alter_domain_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Alter_domain_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Alter_domain_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Alter_domain_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Alter_domain_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_domain_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_domain_stmtContext) VALIDATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVALIDATE, 0)
}

func (s *Alter_domain_stmtContext) OWNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNER, 0)
}

func (s *Alter_domain_stmtContext) Role_name() IRole_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRole_nameContext)
}

func (s *Alter_domain_stmtContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCHEMA, 0)
}

func (s *Alter_domain_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_domain_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_domain_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_domain_stmt(s)
	}
}

func (s *Alter_domain_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_domain_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_domain_stmt() (localctx IAlter_domain_stmtContext) {
	localctx = NewAlter_domain_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, PostgreSQLParserRULE_alter_domain_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(809)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(733)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(734)
			p.Match(PostgreSQLParserDOMAIN)
		}
		{
			p.SetState(735)

			var _x = p.identifier(0)

			localctx.(*Alter_domain_stmtContext).name = _x
		}
		p.SetState(741)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PostgreSQLParserSET:
			{
				p.SetState(736)
				p.Match(PostgreSQLParserSET)
			}
			{
				p.SetState(737)
				p.Match(PostgreSQLParserDEFAULT)
			}
			{
				p.SetState(738)
				p.expr(0)
			}

		case PostgreSQLParserDROP:
			{
				p.SetState(739)
				p.Match(PostgreSQLParserDROP)
			}
			{
				p.SetState(740)
				p.Match(PostgreSQLParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(743)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(744)
			p.Match(PostgreSQLParserDOMAIN)
		}
		{
			p.SetState(745)

			var _x = p.identifier(0)

			localctx.(*Alter_domain_stmtContext).name = _x
		}
		{
			p.SetState(746)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserDROP || _la == PostgreSQLParserSET) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(747)
			p.Match(PostgreSQLParserNOT)
		}
		{
			p.SetState(748)
			p.Match(PostgreSQLParserNULL)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(750)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(751)
			p.Match(PostgreSQLParserDOMAIN)
		}
		{
			p.SetState(752)

			var _x = p.identifier(0)

			localctx.(*Alter_domain_stmtContext).name = _x
		}
		{
			p.SetState(753)
			p.Match(PostgreSQLParserADD)
		}
		{
			p.SetState(754)
			p.Domain_constraint()
		}
		p.SetState(757)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserNOT {
			{
				p.SetState(755)
				p.Match(PostgreSQLParserNOT)
			}
			{
				p.SetState(756)
				p.Match(PostgreSQLParserVALID)
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(759)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(760)
			p.Match(PostgreSQLParserDOMAIN)
		}
		{
			p.SetState(761)

			var _x = p.identifier(0)

			localctx.(*Alter_domain_stmtContext).name = _x
		}
		{
			p.SetState(762)
			p.Match(PostgreSQLParserDROP)
		}
		{
			p.SetState(763)
			p.Match(PostgreSQLParserCONSTRAINT)
		}
		p.SetState(766)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIF {
			{
				p.SetState(764)
				p.Match(PostgreSQLParserIF)
			}
			{
				p.SetState(765)
				p.Match(PostgreSQLParserEXISTS)
			}

		}
		{
			p.SetState(768)

			var _x = p.identifier(0)

			localctx.(*Alter_domain_stmtContext).constraint_name = _x
		}
		p.SetState(770)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
			{
				p.SetState(769)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(772)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(773)
			p.Match(PostgreSQLParserDOMAIN)
		}
		{
			p.SetState(774)

			var _x = p.identifier(0)

			localctx.(*Alter_domain_stmtContext).name = _x
		}
		{
			p.SetState(775)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(776)
			p.Match(PostgreSQLParserCONSTRAINT)
		}
		{
			p.SetState(777)

			var _x = p.identifier(0)

			localctx.(*Alter_domain_stmtContext).constraint_name = _x
		}
		{
			p.SetState(778)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(779)

			var _x = p.identifier(0)

			localctx.(*Alter_domain_stmtContext).new_constraint_name = _x
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(781)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(782)
			p.Match(PostgreSQLParserDOMAIN)
		}
		{
			p.SetState(783)

			var _x = p.identifier(0)

			localctx.(*Alter_domain_stmtContext).name = _x
		}
		{
			p.SetState(784)
			p.Match(PostgreSQLParserVALIDATE)
		}
		{
			p.SetState(785)
			p.Match(PostgreSQLParserCONSTRAINT)
		}
		{
			p.SetState(786)

			var _x = p.identifier(0)

			localctx.(*Alter_domain_stmtContext).constraint_name = _x
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(788)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(789)
			p.Match(PostgreSQLParserDOMAIN)
		}
		{
			p.SetState(790)

			var _x = p.identifier(0)

			localctx.(*Alter_domain_stmtContext).name = _x
		}
		{
			p.SetState(791)
			p.Match(PostgreSQLParserOWNER)
		}
		{
			p.SetState(792)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(793)

			var _x = p.Role_name()

			localctx.(*Alter_domain_stmtContext).new_owner = _x
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(795)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(796)
			p.Match(PostgreSQLParserDOMAIN)
		}
		{
			p.SetState(797)

			var _x = p.identifier(0)

			localctx.(*Alter_domain_stmtContext).name = _x
		}
		{
			p.SetState(798)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(799)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(800)

			var _x = p.identifier(0)

			localctx.(*Alter_domain_stmtContext).new_name = _x
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(802)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(803)
			p.Match(PostgreSQLParserDOMAIN)
		}
		{
			p.SetState(804)

			var _x = p.identifier(0)

			localctx.(*Alter_domain_stmtContext).name = _x
		}
		{
			p.SetState(805)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(806)
			p.Match(PostgreSQLParserSCHEMA)
		}
		{
			p.SetState(807)

			var _x = p.identifier(0)

			localctx.(*Alter_domain_stmtContext).new_schema = _x
		}

	}

	return localctx
}

// IAlter_event_trigger_stmtContext is an interface to support dynamic dispatch.
type IAlter_event_trigger_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetNew_owner returns the new_owner rule contexts.
	GetNew_owner() IIdentifierContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetNew_owner sets the new_owner rule contexts.
	SetNew_owner(IIdentifierContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdentifierContext)

	// IsAlter_event_trigger_stmtContext differentiates from other interfaces.
	IsAlter_event_trigger_stmtContext()
}

type Alter_event_trigger_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	name      IIdentifierContext
	new_owner IIdentifierContext
	new_name  IIdentifierContext
}

func NewEmptyAlter_event_trigger_stmtContext() *Alter_event_trigger_stmtContext {
	var p = new(Alter_event_trigger_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_event_trigger_stmt
	return p
}

func (*Alter_event_trigger_stmtContext) IsAlter_event_trigger_stmtContext() {}

func NewAlter_event_trigger_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_event_trigger_stmtContext {
	var p = new(Alter_event_trigger_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_event_trigger_stmt

	return p
}

func (s *Alter_event_trigger_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_event_trigger_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_event_trigger_stmtContext) GetNew_owner() IIdentifierContext { return s.new_owner }

func (s *Alter_event_trigger_stmtContext) GetNew_name() IIdentifierContext { return s.new_name }

func (s *Alter_event_trigger_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_event_trigger_stmtContext) SetNew_owner(v IIdentifierContext) { s.new_owner = v }

func (s *Alter_event_trigger_stmtContext) SetNew_name(v IIdentifierContext) { s.new_name = v }

func (s *Alter_event_trigger_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_event_trigger_stmtContext) EVENT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEVENT, 0)
}

func (s *Alter_event_trigger_stmtContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRIGGER, 0)
}

func (s *Alter_event_trigger_stmtContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDISABLE, 0)
}

func (s *Alter_event_trigger_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_event_trigger_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_event_trigger_stmtContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserENABLE, 0)
}

func (s *Alter_event_trigger_stmtContext) REPLICA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREPLICA, 0)
}

func (s *Alter_event_trigger_stmtContext) ALWAYS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALWAYS, 0)
}

func (s *Alter_event_trigger_stmtContext) OWNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNER, 0)
}

func (s *Alter_event_trigger_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_event_trigger_stmtContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT_USER, 0)
}

func (s *Alter_event_trigger_stmtContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSESSION_USER, 0)
}

func (s *Alter_event_trigger_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_event_trigger_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_event_trigger_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_event_trigger_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_event_trigger_stmt(s)
	}
}

func (s *Alter_event_trigger_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_event_trigger_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_event_trigger_stmt() (localctx IAlter_event_trigger_stmtContext) {
	localctx = NewAlter_event_trigger_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, PostgreSQLParserRULE_alter_event_trigger_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(844)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(811)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(812)
			p.Match(PostgreSQLParserEVENT)
		}
		{
			p.SetState(813)
			p.Match(PostgreSQLParserTRIGGER)
		}
		{
			p.SetState(814)

			var _x = p.identifier(0)

			localctx.(*Alter_event_trigger_stmtContext).name = _x
		}
		{
			p.SetState(815)
			p.Match(PostgreSQLParserDISABLE)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(817)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(818)
			p.Match(PostgreSQLParserEVENT)
		}
		{
			p.SetState(819)
			p.Match(PostgreSQLParserTRIGGER)
		}
		{
			p.SetState(820)

			var _x = p.identifier(0)

			localctx.(*Alter_event_trigger_stmtContext).name = _x
		}
		{
			p.SetState(821)
			p.Match(PostgreSQLParserENABLE)
		}
		p.SetState(823)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserALWAYS || _la == PostgreSQLParserREPLICA {
			{
				p.SetState(822)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserALWAYS || _la == PostgreSQLParserREPLICA) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(825)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(826)
			p.Match(PostgreSQLParserEVENT)
		}
		{
			p.SetState(827)
			p.Match(PostgreSQLParserTRIGGER)
		}
		{
			p.SetState(828)

			var _x = p.identifier(0)

			localctx.(*Alter_event_trigger_stmtContext).name = _x
		}
		{
			p.SetState(829)
			p.Match(PostgreSQLParserOWNER)
		}
		{
			p.SetState(830)
			p.Match(PostgreSQLParserTO)
		}
		p.SetState(834)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
			{
				p.SetState(831)

				var _x = p.identifier(0)

				localctx.(*Alter_event_trigger_stmtContext).new_owner = _x
			}

		case PostgreSQLParserCURRENT_USER:
			{
				p.SetState(832)
				p.Match(PostgreSQLParserCURRENT_USER)
			}

		case PostgreSQLParserSESSION_USER:
			{
				p.SetState(833)
				p.Match(PostgreSQLParserSESSION_USER)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(836)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(837)
			p.Match(PostgreSQLParserEVENT)
		}
		{
			p.SetState(838)
			p.Match(PostgreSQLParserTRIGGER)
		}
		{
			p.SetState(839)

			var _x = p.identifier(0)

			localctx.(*Alter_event_trigger_stmtContext).name = _x
		}
		{
			p.SetState(840)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(841)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(842)

			var _x = p.identifier(0)

			localctx.(*Alter_event_trigger_stmtContext).new_name = _x
		}

	}

	return localctx
}

// IAlter_extension_stmtContext is an interface to support dynamic dispatch.
type IAlter_extension_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetNew_version returns the new_version rule contexts.
	GetNew_version() IIdentifierContext

	// GetNew_schema returns the new_schema rule contexts.
	GetNew_schema() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetNew_version sets the new_version rule contexts.
	SetNew_version(IIdentifierContext)

	// SetNew_schema sets the new_schema rule contexts.
	SetNew_schema(IIdentifierContext)

	// IsAlter_extension_stmtContext differentiates from other interfaces.
	IsAlter_extension_stmtContext()
}

type Alter_extension_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	name        IIdentifierContext
	new_version IIdentifierContext
	new_schema  IIdentifierContext
}

func NewEmptyAlter_extension_stmtContext() *Alter_extension_stmtContext {
	var p = new(Alter_extension_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_extension_stmt
	return p
}

func (*Alter_extension_stmtContext) IsAlter_extension_stmtContext() {}

func NewAlter_extension_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_extension_stmtContext {
	var p = new(Alter_extension_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_extension_stmt

	return p
}

func (s *Alter_extension_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_extension_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_extension_stmtContext) GetNew_version() IIdentifierContext { return s.new_version }

func (s *Alter_extension_stmtContext) GetNew_schema() IIdentifierContext { return s.new_schema }

func (s *Alter_extension_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_extension_stmtContext) SetNew_version(v IIdentifierContext) { s.new_version = v }

func (s *Alter_extension_stmtContext) SetNew_schema(v IIdentifierContext) { s.new_schema = v }

func (s *Alter_extension_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_extension_stmtContext) EXTENSION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXTENSION, 0)
}

func (s *Alter_extension_stmtContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUPDATE, 0)
}

func (s *Alter_extension_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_extension_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_extension_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_extension_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Alter_extension_stmtContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCHEMA, 0)
}

func (s *Alter_extension_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_extension_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_extension_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_extension_stmt(s)
	}
}

func (s *Alter_extension_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_extension_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_extension_stmt() (localctx IAlter_extension_stmtContext) {
	localctx = NewAlter_extension_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, PostgreSQLParserRULE_alter_extension_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(861)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(846)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(847)
			p.Match(PostgreSQLParserEXTENSION)
		}
		{
			p.SetState(848)

			var _x = p.identifier(0)

			localctx.(*Alter_extension_stmtContext).name = _x
		}
		{
			p.SetState(849)
			p.Match(PostgreSQLParserUPDATE)
		}
		p.SetState(852)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserTO {
			{
				p.SetState(850)
				p.Match(PostgreSQLParserTO)
			}
			{
				p.SetState(851)

				var _x = p.identifier(0)

				localctx.(*Alter_extension_stmtContext).new_version = _x
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(854)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(855)
			p.Match(PostgreSQLParserEXTENSION)
		}
		{
			p.SetState(856)

			var _x = p.identifier(0)

			localctx.(*Alter_extension_stmtContext).name = _x
		}
		{
			p.SetState(857)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(858)
			p.Match(PostgreSQLParserSCHEMA)
		}
		{
			p.SetState(859)

			var _x = p.identifier(0)

			localctx.(*Alter_extension_stmtContext).new_schema = _x
		}

	}

	return localctx
}

// IAlter_foreign_data_wrapper_stmtContext is an interface to support dynamic dispatch.
type IAlter_foreign_data_wrapper_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_foreign_data_wrapper_stmtContext differentiates from other interfaces.
	IsAlter_foreign_data_wrapper_stmtContext()
}

type Alter_foreign_data_wrapper_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_foreign_data_wrapper_stmtContext() *Alter_foreign_data_wrapper_stmtContext {
	var p = new(Alter_foreign_data_wrapper_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_foreign_data_wrapper_stmt
	return p
}

func (*Alter_foreign_data_wrapper_stmtContext) IsAlter_foreign_data_wrapper_stmtContext() {}

func NewAlter_foreign_data_wrapper_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_foreign_data_wrapper_stmtContext {
	var p = new(Alter_foreign_data_wrapper_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_foreign_data_wrapper_stmt

	return p
}

func (s *Alter_foreign_data_wrapper_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_foreign_data_wrapper_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Alter_foreign_data_wrapper_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_foreign_data_wrapper_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_foreign_data_wrapper_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_foreign_data_wrapper_stmt(s)
	}
}

func (s *Alter_foreign_data_wrapper_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_foreign_data_wrapper_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_foreign_data_wrapper_stmt() (localctx IAlter_foreign_data_wrapper_stmtContext) {
	localctx = NewAlter_foreign_data_wrapper_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, PostgreSQLParserRULE_alter_foreign_data_wrapper_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(863)
		p.Todo_implement()
	}

	return localctx
}

// IAlter_foreign_table_actionContext is an interface to support dynamic dispatch.
type IAlter_foreign_table_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetColumn_name_ returns the column_name_ rule contexts.
	GetColumn_name_() IColumn_nameContext

	// GetData_type_ returns the data_type_ rule contexts.
	GetData_type_() IData_typeContext

	// GetCollation returns the collation rule contexts.
	GetCollation() IIdentifierContext

	// GetColumn_constraints_ returns the column_constraints_ rule contexts.
	GetColumn_constraints_() IColumn_constraintsContext

	// GetAttribute_values returns the attribute_values rule contexts.
	GetAttribute_values() IOption_listContext

	// GetAttributes returns the attributes rule contexts.
	GetAttributes() IIdentifier_listContext

	// GetConstraint_name returns the constraint_name rule contexts.
	GetConstraint_name() ITodo_fill_inContext

	// GetTrigger_name returns the trigger_name rule contexts.
	GetTrigger_name() ITodo_fill_inContext

	// GetParent_table returns the parent_table rule contexts.
	GetParent_table() IIdentifierContext

	// GetNew_owner returns the new_owner rule contexts.
	GetNew_owner() IRole_nameContext

	// SetColumn_name_ sets the column_name_ rule contexts.
	SetColumn_name_(IColumn_nameContext)

	// SetData_type_ sets the data_type_ rule contexts.
	SetData_type_(IData_typeContext)

	// SetCollation sets the collation rule contexts.
	SetCollation(IIdentifierContext)

	// SetColumn_constraints_ sets the column_constraints_ rule contexts.
	SetColumn_constraints_(IColumn_constraintsContext)

	// SetAttribute_values sets the attribute_values rule contexts.
	SetAttribute_values(IOption_listContext)

	// SetAttributes sets the attributes rule contexts.
	SetAttributes(IIdentifier_listContext)

	// SetConstraint_name sets the constraint_name rule contexts.
	SetConstraint_name(ITodo_fill_inContext)

	// SetTrigger_name sets the trigger_name rule contexts.
	SetTrigger_name(ITodo_fill_inContext)

	// SetParent_table sets the parent_table rule contexts.
	SetParent_table(IIdentifierContext)

	// SetNew_owner sets the new_owner rule contexts.
	SetNew_owner(IRole_nameContext)

	// IsAlter_foreign_table_actionContext differentiates from other interfaces.
	IsAlter_foreign_table_actionContext()
}

type Alter_foreign_table_actionContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	column_name_        IColumn_nameContext
	data_type_          IData_typeContext
	collation           IIdentifierContext
	column_constraints_ IColumn_constraintsContext
	attribute_values    IOption_listContext
	attributes          IIdentifier_listContext
	constraint_name     ITodo_fill_inContext
	trigger_name        ITodo_fill_inContext
	parent_table        IIdentifierContext
	new_owner           IRole_nameContext
}

func NewEmptyAlter_foreign_table_actionContext() *Alter_foreign_table_actionContext {
	var p = new(Alter_foreign_table_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_foreign_table_action
	return p
}

func (*Alter_foreign_table_actionContext) IsAlter_foreign_table_actionContext() {}

func NewAlter_foreign_table_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_foreign_table_actionContext {
	var p = new(Alter_foreign_table_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_foreign_table_action

	return p
}

func (s *Alter_foreign_table_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_foreign_table_actionContext) GetColumn_name_() IColumn_nameContext {
	return s.column_name_
}

func (s *Alter_foreign_table_actionContext) GetData_type_() IData_typeContext { return s.data_type_ }

func (s *Alter_foreign_table_actionContext) GetCollation() IIdentifierContext { return s.collation }

func (s *Alter_foreign_table_actionContext) GetColumn_constraints_() IColumn_constraintsContext {
	return s.column_constraints_
}

func (s *Alter_foreign_table_actionContext) GetAttribute_values() IOption_listContext {
	return s.attribute_values
}

func (s *Alter_foreign_table_actionContext) GetAttributes() IIdentifier_listContext {
	return s.attributes
}

func (s *Alter_foreign_table_actionContext) GetConstraint_name() ITodo_fill_inContext {
	return s.constraint_name
}

func (s *Alter_foreign_table_actionContext) GetTrigger_name() ITodo_fill_inContext {
	return s.trigger_name
}

func (s *Alter_foreign_table_actionContext) GetParent_table() IIdentifierContext {
	return s.parent_table
}

func (s *Alter_foreign_table_actionContext) GetNew_owner() IRole_nameContext { return s.new_owner }

func (s *Alter_foreign_table_actionContext) SetColumn_name_(v IColumn_nameContext) {
	s.column_name_ = v
}

func (s *Alter_foreign_table_actionContext) SetData_type_(v IData_typeContext) { s.data_type_ = v }

func (s *Alter_foreign_table_actionContext) SetCollation(v IIdentifierContext) { s.collation = v }

func (s *Alter_foreign_table_actionContext) SetColumn_constraints_(v IColumn_constraintsContext) {
	s.column_constraints_ = v
}

func (s *Alter_foreign_table_actionContext) SetAttribute_values(v IOption_listContext) {
	s.attribute_values = v
}

func (s *Alter_foreign_table_actionContext) SetAttributes(v IIdentifier_listContext) {
	s.attributes = v
}

func (s *Alter_foreign_table_actionContext) SetConstraint_name(v ITodo_fill_inContext) {
	s.constraint_name = v
}

func (s *Alter_foreign_table_actionContext) SetTrigger_name(v ITodo_fill_inContext) {
	s.trigger_name = v
}

func (s *Alter_foreign_table_actionContext) SetParent_table(v IIdentifierContext) { s.parent_table = v }

func (s *Alter_foreign_table_actionContext) SetNew_owner(v IRole_nameContext) { s.new_owner = v }

func (s *Alter_foreign_table_actionContext) ADD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserADD, 0)
}

func (s *Alter_foreign_table_actionContext) Column_name() IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Alter_foreign_table_actionContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Alter_foreign_table_actionContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOLUMN, 0)
}

func (s *Alter_foreign_table_actionContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOLLATE, 0)
}

func (s *Alter_foreign_table_actionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_foreign_table_actionContext) Column_constraints() IColumn_constraintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_constraintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_constraintsContext)
}

func (s *Alter_foreign_table_actionContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Alter_foreign_table_actionContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Alter_foreign_table_actionContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Alter_foreign_table_actionContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Alter_foreign_table_actionContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Alter_foreign_table_actionContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_foreign_table_actionContext) TYPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTYPE, 0)
}

func (s *Alter_foreign_table_actionContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Alter_foreign_table_actionContext) DATA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDATA, 0)
}

func (s *Alter_foreign_table_actionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEFAULT, 0)
}

func (s *Alter_foreign_table_actionContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Alter_foreign_table_actionContext) NOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOT, 0)
}

func (s *Alter_foreign_table_actionContext) NULL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNULL, 0)
}

func (s *Alter_foreign_table_actionContext) STATISTICS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTATISTICS, 0)
}

func (s *Alter_foreign_table_actionContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER, 0)
}

func (s *Alter_foreign_table_actionContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Alter_foreign_table_actionContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Alter_foreign_table_actionContext) Option_list() IOption_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_listContext)
}

func (s *Alter_foreign_table_actionContext) RESET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESET, 0)
}

func (s *Alter_foreign_table_actionContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Alter_foreign_table_actionContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTORAGE, 0)
}

func (s *Alter_foreign_table_actionContext) PLAIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPLAIN, 0)
}

func (s *Alter_foreign_table_actionContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXTERNAL, 0)
}

func (s *Alter_foreign_table_actionContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXTENDED, 0)
}

func (s *Alter_foreign_table_actionContext) MAIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMAIN, 0)
}

func (s *Alter_foreign_table_actionContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPTIONS, 0)
}

func (s *Alter_foreign_table_actionContext) Table_constraint() ITable_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_constraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_constraintContext)
}

func (s *Alter_foreign_table_actionContext) VALID() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVALID, 0)
}

func (s *Alter_foreign_table_actionContext) VALIDATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVALIDATE, 0)
}

func (s *Alter_foreign_table_actionContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONSTRAINT, 0)
}

func (s *Alter_foreign_table_actionContext) Todo_fill_in() ITodo_fill_inContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_fill_inContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_fill_inContext)
}

func (s *Alter_foreign_table_actionContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDISABLE, 0)
}

func (s *Alter_foreign_table_actionContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRIGGER, 0)
}

func (s *Alter_foreign_table_actionContext) ALL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALL, 0)
}

func (s *Alter_foreign_table_actionContext) USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSER, 0)
}

func (s *Alter_foreign_table_actionContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserENABLE, 0)
}

func (s *Alter_foreign_table_actionContext) REPLICA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREPLICA, 0)
}

func (s *Alter_foreign_table_actionContext) ALWAYS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALWAYS, 0)
}

func (s *Alter_foreign_table_actionContext) WITH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITH, 0)
}

func (s *Alter_foreign_table_actionContext) OIDS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOIDS, 0)
}

func (s *Alter_foreign_table_actionContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITHOUT, 0)
}

func (s *Alter_foreign_table_actionContext) INHERIT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINHERIT, 0)
}

func (s *Alter_foreign_table_actionContext) NO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNO, 0)
}

func (s *Alter_foreign_table_actionContext) OWNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNER, 0)
}

func (s *Alter_foreign_table_actionContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_foreign_table_actionContext) Role_name() IRole_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRole_nameContext)
}

func (s *Alter_foreign_table_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_foreign_table_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_foreign_table_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_foreign_table_action(s)
	}
}

func (s *Alter_foreign_table_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_foreign_table_action(s)
	}
}

func (p *PostgreSQLParser) Alter_foreign_table_action() (localctx IAlter_foreign_table_actionContext) {
	localctx = NewAlter_foreign_table_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, PostgreSQLParserRULE_alter_foreign_table_action)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1037)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 41, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(865)
			p.Match(PostgreSQLParserADD)
		}
		p.SetState(867)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCOLUMN {
			{
				p.SetState(866)
				p.Match(PostgreSQLParserCOLUMN)
			}

		}
		{
			p.SetState(869)

			var _x = p.Column_name()

			localctx.(*Alter_foreign_table_actionContext).column_name_ = _x
		}
		{
			p.SetState(870)

			var _x = p.Data_type()

			localctx.(*Alter_foreign_table_actionContext).data_type_ = _x
		}
		p.SetState(873)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCOLLATE {
			{
				p.SetState(871)
				p.Match(PostgreSQLParserCOLLATE)
			}
			{
				p.SetState(872)

				var _x = p.identifier(0)

				localctx.(*Alter_foreign_table_actionContext).collation = _x
			}

		}
		p.SetState(876)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserNOT {
			{
				p.SetState(875)

				var _x = p.Column_constraints()

				localctx.(*Alter_foreign_table_actionContext).column_constraints_ = _x
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(878)
			p.Match(PostgreSQLParserDROP)
		}
		p.SetState(880)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCOLUMN {
			{
				p.SetState(879)
				p.Match(PostgreSQLParserCOLUMN)
			}

		}
		p.SetState(884)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIF {
			{
				p.SetState(882)
				p.Match(PostgreSQLParserIF)
			}
			{
				p.SetState(883)
				p.Match(PostgreSQLParserEXISTS)
			}

		}
		{
			p.SetState(886)

			var _x = p.Column_name()

			localctx.(*Alter_foreign_table_actionContext).column_name_ = _x
		}
		p.SetState(888)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
			{
				p.SetState(887)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(890)
			p.Match(PostgreSQLParserALTER)
		}
		p.SetState(892)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCOLUMN {
			{
				p.SetState(891)
				p.Match(PostgreSQLParserCOLUMN)
			}

		}
		{
			p.SetState(894)

			var _x = p.Column_name()

			localctx.(*Alter_foreign_table_actionContext).column_name_ = _x
		}
		p.SetState(897)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserSET {
			{
				p.SetState(895)
				p.Match(PostgreSQLParserSET)
			}
			{
				p.SetState(896)
				p.Match(PostgreSQLParserDATA)
			}

		}
		{
			p.SetState(899)
			p.Match(PostgreSQLParserTYPE)
		}
		{
			p.SetState(900)

			var _x = p.Data_type()

			localctx.(*Alter_foreign_table_actionContext).data_type_ = _x
		}
		p.SetState(903)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCOLLATE {
			{
				p.SetState(901)
				p.Match(PostgreSQLParserCOLLATE)
			}
			{
				p.SetState(902)

				var _x = p.identifier(0)

				localctx.(*Alter_foreign_table_actionContext).collation = _x
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(905)
			p.Match(PostgreSQLParserALTER)
		}
		p.SetState(907)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCOLUMN {
			{
				p.SetState(906)
				p.Match(PostgreSQLParserCOLUMN)
			}

		}
		{
			p.SetState(909)

			var _x = p.Column_name()

			localctx.(*Alter_foreign_table_actionContext).column_name_ = _x
		}
		{
			p.SetState(910)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(911)
			p.Match(PostgreSQLParserDEFAULT)
		}
		{
			p.SetState(912)
			p.expr(0)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(914)
			p.Match(PostgreSQLParserALTER)
		}
		p.SetState(916)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCOLUMN {
			{
				p.SetState(915)
				p.Match(PostgreSQLParserCOLUMN)
			}

		}
		{
			p.SetState(918)

			var _x = p.Column_name()

			localctx.(*Alter_foreign_table_actionContext).column_name_ = _x
		}
		{
			p.SetState(919)
			p.Match(PostgreSQLParserDROP)
		}
		{
			p.SetState(920)
			p.Match(PostgreSQLParserDEFAULT)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(922)
			p.Match(PostgreSQLParserALTER)
		}
		p.SetState(924)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCOLUMN {
			{
				p.SetState(923)
				p.Match(PostgreSQLParserCOLUMN)
			}

		}
		{
			p.SetState(926)

			var _x = p.Column_name()

			localctx.(*Alter_foreign_table_actionContext).column_name_ = _x
		}
		{
			p.SetState(927)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserDROP || _la == PostgreSQLParserSET) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(928)
			p.Match(PostgreSQLParserNOT)
		}
		{
			p.SetState(929)
			p.Match(PostgreSQLParserNULL)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(931)
			p.Match(PostgreSQLParserALTER)
		}
		p.SetState(933)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCOLUMN {
			{
				p.SetState(932)
				p.Match(PostgreSQLParserCOLUMN)
			}

		}
		{
			p.SetState(935)

			var _x = p.Column_name()

			localctx.(*Alter_foreign_table_actionContext).column_name_ = _x
		}
		{
			p.SetState(936)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(937)
			p.Match(PostgreSQLParserSTATISTICS)
		}
		{
			p.SetState(938)
			p.Match(PostgreSQLParserINTEGER)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(940)
			p.Match(PostgreSQLParserALTER)
		}
		p.SetState(942)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCOLUMN {
			{
				p.SetState(941)
				p.Match(PostgreSQLParserCOLUMN)
			}

		}
		{
			p.SetState(944)

			var _x = p.Column_name()

			localctx.(*Alter_foreign_table_actionContext).column_name_ = _x
		}
		{
			p.SetState(945)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(946)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(947)

			var _x = p.Option_list()

			localctx.(*Alter_foreign_table_actionContext).attribute_values = _x
		}
		{
			p.SetState(948)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(950)
			p.Match(PostgreSQLParserALTER)
		}
		p.SetState(952)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCOLUMN {
			{
				p.SetState(951)
				p.Match(PostgreSQLParserCOLUMN)
			}

		}
		{
			p.SetState(954)

			var _x = p.Column_name()

			localctx.(*Alter_foreign_table_actionContext).column_name_ = _x
		}
		{
			p.SetState(955)
			p.Match(PostgreSQLParserRESET)
		}
		{
			p.SetState(956)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(957)

			var _x = p.Identifier_list()

			localctx.(*Alter_foreign_table_actionContext).attributes = _x
		}
		{
			p.SetState(958)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(960)
			p.Match(PostgreSQLParserALTER)
		}
		p.SetState(962)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCOLUMN {
			{
				p.SetState(961)
				p.Match(PostgreSQLParserCOLUMN)
			}

		}
		{
			p.SetState(964)

			var _x = p.Column_name()

			localctx.(*Alter_foreign_table_actionContext).column_name_ = _x
		}
		{
			p.SetState(965)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(966)
			p.Match(PostgreSQLParserSTORAGE)
		}
		{
			p.SetState(967)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserEXTENDED || _la == PostgreSQLParserEXTERNAL || _la == PostgreSQLParserMAIN || _la == PostgreSQLParserPLAIN) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(969)
			p.Match(PostgreSQLParserALTER)
		}
		p.SetState(971)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCOLUMN {
			{
				p.SetState(970)
				p.Match(PostgreSQLParserCOLUMN)
			}

		}
		{
			p.SetState(973)

			var _x = p.Column_name()

			localctx.(*Alter_foreign_table_actionContext).column_name_ = _x
		}
		{
			p.SetState(974)
			p.Match(PostgreSQLParserOPTIONS)
		}

		p.SetState(976)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserADD || _la == PostgreSQLParserDROP || _la == PostgreSQLParserSET {
			{
				p.SetState(975)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserADD || _la == PostgreSQLParserDROP || _la == PostgreSQLParserSET) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(978)
			p.Match(PostgreSQLParserADD)
		}
		{
			p.SetState(979)
			p.Table_constraint()
		}
		p.SetState(982)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserNOT {
			{
				p.SetState(980)
				p.Match(PostgreSQLParserNOT)
			}
			{
				p.SetState(981)
				p.Match(PostgreSQLParserVALID)
			}

		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(984)
			p.Match(PostgreSQLParserVALIDATE)
		}
		{
			p.SetState(985)
			p.Match(PostgreSQLParserCONSTRAINT)
		}
		{
			p.SetState(986)

			var _x = p.Todo_fill_in()

			localctx.(*Alter_foreign_table_actionContext).constraint_name = _x
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(987)
			p.Match(PostgreSQLParserDROP)
		}
		{
			p.SetState(988)
			p.Match(PostgreSQLParserCONSTRAINT)
		}
		p.SetState(991)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(989)
				p.Match(PostgreSQLParserIF)
			}
			{
				p.SetState(990)
				p.Match(PostgreSQLParserEXISTS)
			}

		}
		{
			p.SetState(993)

			var _x = p.Todo_fill_in()

			localctx.(*Alter_foreign_table_actionContext).constraint_name = _x
		}
		p.SetState(995)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
			{
				p.SetState(994)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(997)
			p.Match(PostgreSQLParserDISABLE)
		}
		{
			p.SetState(998)
			p.Match(PostgreSQLParserTRIGGER)
		}
		p.SetState(1002)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(999)

				var _x = p.Todo_fill_in()

				localctx.(*Alter_foreign_table_actionContext).trigger_name = _x
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1000)
				p.Match(PostgreSQLParserALL)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) == 3 {
			{
				p.SetState(1001)
				p.Match(PostgreSQLParserUSER)
			}

		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1004)
			p.Match(PostgreSQLParserENABLE)
		}
		{
			p.SetState(1005)
			p.Match(PostgreSQLParserTRIGGER)
		}
		p.SetState(1009)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1006)

				var _x = p.Todo_fill_in()

				localctx.(*Alter_foreign_table_actionContext).trigger_name = _x
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1007)
				p.Match(PostgreSQLParserALL)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext()) == 3 {
			{
				p.SetState(1008)
				p.Match(PostgreSQLParserUSER)
			}

		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1011)
			p.Match(PostgreSQLParserENABLE)
		}
		{
			p.SetState(1012)
			p.Match(PostgreSQLParserREPLICA)
		}
		{
			p.SetState(1013)
			p.Match(PostgreSQLParserTRIGGER)
		}
		{
			p.SetState(1014)

			var _x = p.Todo_fill_in()

			localctx.(*Alter_foreign_table_actionContext).trigger_name = _x
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(1015)
			p.Match(PostgreSQLParserENABLE)
		}
		{
			p.SetState(1016)
			p.Match(PostgreSQLParserALWAYS)
		}
		{
			p.SetState(1017)
			p.Match(PostgreSQLParserTRIGGER)
		}
		{
			p.SetState(1018)

			var _x = p.Todo_fill_in()

			localctx.(*Alter_foreign_table_actionContext).trigger_name = _x
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(1019)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(1020)
			p.Match(PostgreSQLParserWITH)
		}
		{
			p.SetState(1021)
			p.Match(PostgreSQLParserOIDS)
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1022)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(1023)
			p.Match(PostgreSQLParserWITHOUT)
		}
		{
			p.SetState(1024)
			p.Match(PostgreSQLParserOIDS)
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1025)
			p.Match(PostgreSQLParserINHERIT)
		}
		{
			p.SetState(1026)

			var _x = p.identifier(0)

			localctx.(*Alter_foreign_table_actionContext).parent_table = _x
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(1027)
			p.Match(PostgreSQLParserNO)
		}
		{
			p.SetState(1028)
			p.Match(PostgreSQLParserINHERIT)
		}
		{
			p.SetState(1029)

			var _x = p.identifier(0)

			localctx.(*Alter_foreign_table_actionContext).parent_table = _x
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(1030)
			p.Match(PostgreSQLParserOWNER)
		}
		{
			p.SetState(1031)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1032)

			var _x = p.Role_name()

			localctx.(*Alter_foreign_table_actionContext).new_owner = _x
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(1033)
			p.Match(PostgreSQLParserOPTIONS)
		}

		p.SetState(1035)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserADD || _la == PostgreSQLParserDROP || _la == PostgreSQLParserSET {
			{
				p.SetState(1034)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserADD || _la == PostgreSQLParserDROP || _la == PostgreSQLParserSET) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	}

	return localctx
}

// IAlter_foreign_table_action_listContext is an interface to support dynamic dispatch.
type IAlter_foreign_table_action_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_foreign_table_action_listContext differentiates from other interfaces.
	IsAlter_foreign_table_action_listContext()
}

type Alter_foreign_table_action_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_foreign_table_action_listContext() *Alter_foreign_table_action_listContext {
	var p = new(Alter_foreign_table_action_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_foreign_table_action_list
	return p
}

func (*Alter_foreign_table_action_listContext) IsAlter_foreign_table_action_listContext() {}

func NewAlter_foreign_table_action_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_foreign_table_action_listContext {
	var p = new(Alter_foreign_table_action_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_foreign_table_action_list

	return p
}

func (s *Alter_foreign_table_action_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_foreign_table_action_listContext) AllAlter_foreign_table_action() []IAlter_foreign_table_actionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlter_foreign_table_actionContext)(nil)).Elem())
	var tst = make([]IAlter_foreign_table_actionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlter_foreign_table_actionContext)
		}
	}

	return tst
}

func (s *Alter_foreign_table_action_listContext) Alter_foreign_table_action(i int) IAlter_foreign_table_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_foreign_table_actionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlter_foreign_table_actionContext)
}

func (s *Alter_foreign_table_action_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Alter_foreign_table_action_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Alter_foreign_table_action_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_foreign_table_action_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_foreign_table_action_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_foreign_table_action_list(s)
	}
}

func (s *Alter_foreign_table_action_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_foreign_table_action_list(s)
	}
}

func (p *PostgreSQLParser) Alter_foreign_table_action_list() (localctx IAlter_foreign_table_action_listContext) {
	localctx = NewAlter_foreign_table_action_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, PostgreSQLParserRULE_alter_foreign_table_action_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1039)
		p.Alter_foreign_table_action()
	}
	p.SetState(1044)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(1040)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(1041)
			p.Alter_foreign_table_action()
		}

		p.SetState(1046)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAlter_foreign_table_stmtContext is an interface to support dynamic dispatch.
type IAlter_foreign_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetActions returns the actions rule contexts.
	GetActions() IAlter_foreign_table_action_listContext

	// GetColumn_name_ returns the column_name_ rule contexts.
	GetColumn_name_() IColumn_nameContext

	// GetNew_column_name returns the new_column_name rule contexts.
	GetNew_column_name() IIdentifierContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdentifierContext

	// GetNew_schama returns the new_schama rule contexts.
	GetNew_schama() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetActions sets the actions rule contexts.
	SetActions(IAlter_foreign_table_action_listContext)

	// SetColumn_name_ sets the column_name_ rule contexts.
	SetColumn_name_(IColumn_nameContext)

	// SetNew_column_name sets the new_column_name rule contexts.
	SetNew_column_name(IIdentifierContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdentifierContext)

	// SetNew_schama sets the new_schama rule contexts.
	SetNew_schama(IIdentifierContext)

	// IsAlter_foreign_table_stmtContext differentiates from other interfaces.
	IsAlter_foreign_table_stmtContext()
}

type Alter_foreign_table_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	name            IIdentifierContext
	actions         IAlter_foreign_table_action_listContext
	column_name_    IColumn_nameContext
	new_column_name IIdentifierContext
	new_name        IIdentifierContext
	new_schama      IIdentifierContext
}

func NewEmptyAlter_foreign_table_stmtContext() *Alter_foreign_table_stmtContext {
	var p = new(Alter_foreign_table_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_foreign_table_stmt
	return p
}

func (*Alter_foreign_table_stmtContext) IsAlter_foreign_table_stmtContext() {}

func NewAlter_foreign_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_foreign_table_stmtContext {
	var p = new(Alter_foreign_table_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_foreign_table_stmt

	return p
}

func (s *Alter_foreign_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_foreign_table_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_foreign_table_stmtContext) GetActions() IAlter_foreign_table_action_listContext {
	return s.actions
}

func (s *Alter_foreign_table_stmtContext) GetColumn_name_() IColumn_nameContext {
	return s.column_name_
}

func (s *Alter_foreign_table_stmtContext) GetNew_column_name() IIdentifierContext {
	return s.new_column_name
}

func (s *Alter_foreign_table_stmtContext) GetNew_name() IIdentifierContext { return s.new_name }

func (s *Alter_foreign_table_stmtContext) GetNew_schama() IIdentifierContext { return s.new_schama }

func (s *Alter_foreign_table_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_foreign_table_stmtContext) SetActions(v IAlter_foreign_table_action_listContext) {
	s.actions = v
}

func (s *Alter_foreign_table_stmtContext) SetColumn_name_(v IColumn_nameContext) { s.column_name_ = v }

func (s *Alter_foreign_table_stmtContext) SetNew_column_name(v IIdentifierContext) {
	s.new_column_name = v
}

func (s *Alter_foreign_table_stmtContext) SetNew_name(v IIdentifierContext) { s.new_name = v }

func (s *Alter_foreign_table_stmtContext) SetNew_schama(v IIdentifierContext) { s.new_schama = v }

func (s *Alter_foreign_table_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_foreign_table_stmtContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOREIGN, 0)
}

func (s *Alter_foreign_table_stmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLE, 0)
}

func (s *Alter_foreign_table_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_foreign_table_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_foreign_table_stmtContext) Alter_foreign_table_action_list() IAlter_foreign_table_action_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_foreign_table_action_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_foreign_table_action_listContext)
}

func (s *Alter_foreign_table_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Alter_foreign_table_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Alter_foreign_table_stmtContext) ONLY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserONLY, 0)
}

func (s *Alter_foreign_table_stmtContext) STAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTAR, 0)
}

func (s *Alter_foreign_table_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_foreign_table_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_foreign_table_stmtContext) Column_name() IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Alter_foreign_table_stmtContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOLUMN, 0)
}

func (s *Alter_foreign_table_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Alter_foreign_table_stmtContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCHEMA, 0)
}

func (s *Alter_foreign_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_foreign_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_foreign_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_foreign_table_stmt(s)
	}
}

func (s *Alter_foreign_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_foreign_table_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_foreign_table_stmt() (localctx IAlter_foreign_table_stmtContext) {
	localctx = NewAlter_foreign_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, PostgreSQLParserRULE_alter_foreign_table_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1109)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1047)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1048)
			p.Match(PostgreSQLParserFOREIGN)
		}
		{
			p.SetState(1049)
			p.Match(PostgreSQLParserTABLE)
		}
		p.SetState(1052)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIF {
			{
				p.SetState(1050)
				p.Match(PostgreSQLParserIF)
			}
			{
				p.SetState(1051)
				p.Match(PostgreSQLParserEXISTS)
			}

		}
		p.SetState(1055)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserONLY {
			{
				p.SetState(1054)
				p.Match(PostgreSQLParserONLY)
			}

		}
		{
			p.SetState(1057)

			var _x = p.identifier(0)

			localctx.(*Alter_foreign_table_stmtContext).name = _x
		}
		p.SetState(1059)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserSTAR {
			{
				p.SetState(1058)
				p.Match(PostgreSQLParserSTAR)
			}

		}
		{
			p.SetState(1061)

			var _x = p.Alter_foreign_table_action_list()

			localctx.(*Alter_foreign_table_stmtContext).actions = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1063)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1064)
			p.Match(PostgreSQLParserFOREIGN)
		}
		{
			p.SetState(1065)
			p.Match(PostgreSQLParserTABLE)
		}
		p.SetState(1068)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIF {
			{
				p.SetState(1066)
				p.Match(PostgreSQLParserIF)
			}
			{
				p.SetState(1067)
				p.Match(PostgreSQLParserEXISTS)
			}

		}
		p.SetState(1071)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserONLY {
			{
				p.SetState(1070)
				p.Match(PostgreSQLParserONLY)
			}

		}
		{
			p.SetState(1073)

			var _x = p.identifier(0)

			localctx.(*Alter_foreign_table_stmtContext).name = _x
		}
		p.SetState(1075)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserSTAR {
			{
				p.SetState(1074)
				p.Match(PostgreSQLParserSTAR)
			}

		}
		{
			p.SetState(1077)
			p.Match(PostgreSQLParserRENAME)
		}
		p.SetState(1079)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCOLUMN {
			{
				p.SetState(1078)
				p.Match(PostgreSQLParserCOLUMN)
			}

		}
		{
			p.SetState(1081)

			var _x = p.Column_name()

			localctx.(*Alter_foreign_table_stmtContext).column_name_ = _x
		}
		{
			p.SetState(1082)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1083)

			var _x = p.identifier(0)

			localctx.(*Alter_foreign_table_stmtContext).new_column_name = _x
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1085)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1086)
			p.Match(PostgreSQLParserFOREIGN)
		}
		{
			p.SetState(1087)
			p.Match(PostgreSQLParserTABLE)
		}
		p.SetState(1090)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIF {
			{
				p.SetState(1088)
				p.Match(PostgreSQLParserIF)
			}
			{
				p.SetState(1089)
				p.Match(PostgreSQLParserEXISTS)
			}

		}
		{
			p.SetState(1092)

			var _x = p.identifier(0)

			localctx.(*Alter_foreign_table_stmtContext).name = _x
		}
		{
			p.SetState(1093)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(1094)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1095)

			var _x = p.identifier(0)

			localctx.(*Alter_foreign_table_stmtContext).new_name = _x
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1097)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1098)
			p.Match(PostgreSQLParserFOREIGN)
		}
		{
			p.SetState(1099)
			p.Match(PostgreSQLParserTABLE)
		}
		p.SetState(1102)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIF {
			{
				p.SetState(1100)
				p.Match(PostgreSQLParserIF)
			}
			{
				p.SetState(1101)
				p.Match(PostgreSQLParserEXISTS)
			}

		}
		{
			p.SetState(1104)

			var _x = p.identifier(0)

			localctx.(*Alter_foreign_table_stmtContext).name = _x
		}
		{
			p.SetState(1105)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(1106)
			p.Match(PostgreSQLParserSCHEMA)
		}
		{
			p.SetState(1107)

			var _x = p.identifier(0)

			localctx.(*Alter_foreign_table_stmtContext).new_schama = _x
		}

	}

	return localctx
}

// IAlter_function_stmtContext is an interface to support dynamic dispatch.
type IAlter_function_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_function_stmtContext differentiates from other interfaces.
	IsAlter_function_stmtContext()
}

type Alter_function_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_function_stmtContext() *Alter_function_stmtContext {
	var p = new(Alter_function_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_function_stmt
	return p
}

func (*Alter_function_stmtContext) IsAlter_function_stmtContext() {}

func NewAlter_function_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_function_stmtContext {
	var p = new(Alter_function_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_function_stmt

	return p
}

func (s *Alter_function_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_function_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Alter_function_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_function_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_function_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_function_stmt(s)
	}
}

func (s *Alter_function_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_function_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_function_stmt() (localctx IAlter_function_stmtContext) {
	localctx = NewAlter_function_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, PostgreSQLParserRULE_alter_function_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1111)
		p.Todo_implement()
	}

	return localctx
}

// IAlter_group_stmtContext is an interface to support dynamic dispatch.
type IAlter_group_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRole returns the role rule contexts.
	GetRole() IRole_nameContext

	// GetUsers returns the users rule contexts.
	GetUsers() IIdentifier_listContext

	// GetGroup_name returns the group_name rule contexts.
	GetGroup_name() IIdentifierContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdentifierContext

	// SetRole sets the role rule contexts.
	SetRole(IRole_nameContext)

	// SetUsers sets the users rule contexts.
	SetUsers(IIdentifier_listContext)

	// SetGroup_name sets the group_name rule contexts.
	SetGroup_name(IIdentifierContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdentifierContext)

	// IsAlter_group_stmtContext differentiates from other interfaces.
	IsAlter_group_stmtContext()
}

type Alter_group_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	role       IRole_nameContext
	users      IIdentifier_listContext
	group_name IIdentifierContext
	new_name   IIdentifierContext
}

func NewEmptyAlter_group_stmtContext() *Alter_group_stmtContext {
	var p = new(Alter_group_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_group_stmt
	return p
}

func (*Alter_group_stmtContext) IsAlter_group_stmtContext() {}

func NewAlter_group_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_group_stmtContext {
	var p = new(Alter_group_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_group_stmt

	return p
}

func (s *Alter_group_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_group_stmtContext) GetRole() IRole_nameContext { return s.role }

func (s *Alter_group_stmtContext) GetUsers() IIdentifier_listContext { return s.users }

func (s *Alter_group_stmtContext) GetGroup_name() IIdentifierContext { return s.group_name }

func (s *Alter_group_stmtContext) GetNew_name() IIdentifierContext { return s.new_name }

func (s *Alter_group_stmtContext) SetRole(v IRole_nameContext) { s.role = v }

func (s *Alter_group_stmtContext) SetUsers(v IIdentifier_listContext) { s.users = v }

func (s *Alter_group_stmtContext) SetGroup_name(v IIdentifierContext) { s.group_name = v }

func (s *Alter_group_stmtContext) SetNew_name(v IIdentifierContext) { s.new_name = v }

func (s *Alter_group_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_group_stmtContext) GROUP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGROUP, 0)
}

func (s *Alter_group_stmtContext) ADD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserADD, 0)
}

func (s *Alter_group_stmtContext) USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSER, 0)
}

func (s *Alter_group_stmtContext) Role_name() IRole_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRole_nameContext)
}

func (s *Alter_group_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Alter_group_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Alter_group_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_group_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_group_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_group_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_group_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_group_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_group_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_group_stmt(s)
	}
}

func (s *Alter_group_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_group_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_group_stmt() (localctx IAlter_group_stmtContext) {
	localctx = NewAlter_group_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, PostgreSQLParserRULE_alter_group_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1134)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1113)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1114)
			p.Match(PostgreSQLParserGROUP)
		}
		{
			p.SetState(1115)

			var _x = p.Role_name()

			localctx.(*Alter_group_stmtContext).role = _x
		}
		{
			p.SetState(1116)
			p.Match(PostgreSQLParserADD)
		}
		{
			p.SetState(1117)
			p.Match(PostgreSQLParserUSER)
		}
		{
			p.SetState(1118)

			var _x = p.Identifier_list()

			localctx.(*Alter_group_stmtContext).users = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1120)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1121)
			p.Match(PostgreSQLParserGROUP)
		}
		{
			p.SetState(1122)

			var _x = p.Role_name()

			localctx.(*Alter_group_stmtContext).role = _x
		}
		{
			p.SetState(1123)
			p.Match(PostgreSQLParserDROP)
		}
		{
			p.SetState(1124)
			p.Match(PostgreSQLParserUSER)
		}
		{
			p.SetState(1125)

			var _x = p.Identifier_list()

			localctx.(*Alter_group_stmtContext).users = _x
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1127)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1128)
			p.Match(PostgreSQLParserGROUP)
		}
		{
			p.SetState(1129)

			var _x = p.identifier(0)

			localctx.(*Alter_group_stmtContext).group_name = _x
		}
		{
			p.SetState(1130)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(1131)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1132)

			var _x = p.identifier(0)

			localctx.(*Alter_group_stmtContext).new_name = _x
		}

	}

	return localctx
}

// IAlter_index_stmtContext is an interface to support dynamic dispatch.
type IAlter_index_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdentifierContext

	// GetTablespace_name returns the tablespace_name rule contexts.
	GetTablespace_name() IIdentifierContext

	// GetExtension_name returns the extension_name rule contexts.
	GetExtension_name() IIdentifierContext

	// GetRoles returns the roles rule contexts.
	GetRoles() IIdentifier_listContext

	// GetNew_tablespace returns the new_tablespace rule contexts.
	GetNew_tablespace() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdentifierContext)

	// SetTablespace_name sets the tablespace_name rule contexts.
	SetTablespace_name(IIdentifierContext)

	// SetExtension_name sets the extension_name rule contexts.
	SetExtension_name(IIdentifierContext)

	// SetRoles sets the roles rule contexts.
	SetRoles(IIdentifier_listContext)

	// SetNew_tablespace sets the new_tablespace rule contexts.
	SetNew_tablespace(IIdentifierContext)

	// IsAlter_index_stmtContext differentiates from other interfaces.
	IsAlter_index_stmtContext()
}

type Alter_index_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	name            IIdentifierContext
	new_name        IIdentifierContext
	tablespace_name IIdentifierContext
	extension_name  IIdentifierContext
	roles           IIdentifier_listContext
	new_tablespace  IIdentifierContext
}

func NewEmptyAlter_index_stmtContext() *Alter_index_stmtContext {
	var p = new(Alter_index_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_index_stmt
	return p
}

func (*Alter_index_stmtContext) IsAlter_index_stmtContext() {}

func NewAlter_index_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_index_stmtContext {
	var p = new(Alter_index_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_index_stmt

	return p
}

func (s *Alter_index_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_index_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_index_stmtContext) GetNew_name() IIdentifierContext { return s.new_name }

func (s *Alter_index_stmtContext) GetTablespace_name() IIdentifierContext { return s.tablespace_name }

func (s *Alter_index_stmtContext) GetExtension_name() IIdentifierContext { return s.extension_name }

func (s *Alter_index_stmtContext) GetRoles() IIdentifier_listContext { return s.roles }

func (s *Alter_index_stmtContext) GetNew_tablespace() IIdentifierContext { return s.new_tablespace }

func (s *Alter_index_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_index_stmtContext) SetNew_name(v IIdentifierContext) { s.new_name = v }

func (s *Alter_index_stmtContext) SetTablespace_name(v IIdentifierContext) { s.tablespace_name = v }

func (s *Alter_index_stmtContext) SetExtension_name(v IIdentifierContext) { s.extension_name = v }

func (s *Alter_index_stmtContext) SetRoles(v IIdentifier_listContext) { s.roles = v }

func (s *Alter_index_stmtContext) SetNew_tablespace(v IIdentifierContext) { s.new_tablespace = v }

func (s *Alter_index_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_index_stmtContext) INDEX() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINDEX, 0)
}

func (s *Alter_index_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_index_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_index_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_index_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_index_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Alter_index_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Alter_index_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Alter_index_stmtContext) AllTABLESPACE() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserTABLESPACE)
}

func (s *Alter_index_stmtContext) TABLESPACE(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLESPACE, i)
}

func (s *Alter_index_stmtContext) DEPENDS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEPENDS, 0)
}

func (s *Alter_index_stmtContext) ON() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserON, 0)
}

func (s *Alter_index_stmtContext) EXTENSION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXTENSION, 0)
}

func (s *Alter_index_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Alter_index_stmtContext) Option_list() IOption_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_listContext)
}

func (s *Alter_index_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Alter_index_stmtContext) RESET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESET, 0)
}

func (s *Alter_index_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Alter_index_stmtContext) ALL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALL, 0)
}

func (s *Alter_index_stmtContext) IN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIN, 0)
}

func (s *Alter_index_stmtContext) OWNED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNED, 0)
}

func (s *Alter_index_stmtContext) BY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBY, 0)
}

func (s *Alter_index_stmtContext) NOWAIT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOWAIT, 0)
}

func (s *Alter_index_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_index_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_index_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_index_stmt(s)
	}
}

func (s *Alter_index_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_index_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_index_stmt() (localctx IAlter_index_stmtContext) {
	localctx = NewAlter_index_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, PostgreSQLParserRULE_alter_index_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1206)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1136)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1137)
			p.Match(PostgreSQLParserINDEX)
		}
		p.SetState(1140)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIF {
			{
				p.SetState(1138)
				p.Match(PostgreSQLParserIF)
			}
			{
				p.SetState(1139)
				p.Match(PostgreSQLParserEXISTS)
			}

		}
		{
			p.SetState(1142)

			var _x = p.identifier(0)

			localctx.(*Alter_index_stmtContext).name = _x
		}
		{
			p.SetState(1143)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(1144)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1145)

			var _x = p.identifier(0)

			localctx.(*Alter_index_stmtContext).new_name = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1147)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1148)
			p.Match(PostgreSQLParserINDEX)
		}
		p.SetState(1151)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIF {
			{
				p.SetState(1149)
				p.Match(PostgreSQLParserIF)
			}
			{
				p.SetState(1150)
				p.Match(PostgreSQLParserEXISTS)
			}

		}
		{
			p.SetState(1153)

			var _x = p.identifier(0)

			localctx.(*Alter_index_stmtContext).name = _x
		}
		{
			p.SetState(1154)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(1155)
			p.Match(PostgreSQLParserTABLESPACE)
		}
		{
			p.SetState(1156)

			var _x = p.identifier(0)

			localctx.(*Alter_index_stmtContext).tablespace_name = _x
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1158)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1159)
			p.Match(PostgreSQLParserINDEX)
		}
		{
			p.SetState(1160)

			var _x = p.identifier(0)

			localctx.(*Alter_index_stmtContext).name = _x
		}
		{
			p.SetState(1161)
			p.Match(PostgreSQLParserDEPENDS)
		}
		{
			p.SetState(1162)
			p.Match(PostgreSQLParserON)
		}
		{
			p.SetState(1163)
			p.Match(PostgreSQLParserEXTENSION)
		}
		{
			p.SetState(1164)

			var _x = p.identifier(0)

			localctx.(*Alter_index_stmtContext).extension_name = _x
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1166)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1167)
			p.Match(PostgreSQLParserINDEX)
		}
		p.SetState(1170)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIF {
			{
				p.SetState(1168)
				p.Match(PostgreSQLParserIF)
			}
			{
				p.SetState(1169)
				p.Match(PostgreSQLParserEXISTS)
			}

		}
		{
			p.SetState(1172)

			var _x = p.identifier(0)

			localctx.(*Alter_index_stmtContext).name = _x
		}
		{
			p.SetState(1173)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(1174)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(1175)
			p.Option_list()
		}
		{
			p.SetState(1176)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1178)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1179)
			p.Match(PostgreSQLParserINDEX)
		}
		p.SetState(1182)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIF {
			{
				p.SetState(1180)
				p.Match(PostgreSQLParserIF)
			}
			{
				p.SetState(1181)
				p.Match(PostgreSQLParserEXISTS)
			}

		}
		{
			p.SetState(1184)
			p.Match(PostgreSQLParserRESET)
		}
		{
			p.SetState(1185)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(1186)
			p.Identifier_list()
		}
		{
			p.SetState(1187)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1189)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1190)
			p.Match(PostgreSQLParserINDEX)
		}
		{
			p.SetState(1191)
			p.Match(PostgreSQLParserALL)
		}
		{
			p.SetState(1192)
			p.Match(PostgreSQLParserIN)
		}
		{
			p.SetState(1193)
			p.Match(PostgreSQLParserTABLESPACE)
		}
		{
			p.SetState(1194)

			var _x = p.identifier(0)

			localctx.(*Alter_index_stmtContext).name = _x
		}
		p.SetState(1198)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserOWNED {
			{
				p.SetState(1195)
				p.Match(PostgreSQLParserOWNED)
			}
			{
				p.SetState(1196)
				p.Match(PostgreSQLParserBY)
			}
			{
				p.SetState(1197)

				var _x = p.Identifier_list()

				localctx.(*Alter_index_stmtContext).roles = _x
			}

		}
		{
			p.SetState(1200)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(1201)
			p.Match(PostgreSQLParserTABLESPACE)
		}
		{
			p.SetState(1202)

			var _x = p.identifier(0)

			localctx.(*Alter_index_stmtContext).new_tablespace = _x
		}
		p.SetState(1204)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserNOWAIT {
			{
				p.SetState(1203)
				p.Match(PostgreSQLParserNOWAIT)
			}

		}

	}

	return localctx
}

// IAlter_language_stmtContext is an interface to support dynamic dispatch.
type IAlter_language_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdentifierContext

	// GetNew_owner returns the new_owner rule contexts.
	GetNew_owner() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdentifierContext)

	// SetNew_owner sets the new_owner rule contexts.
	SetNew_owner(IIdentifierContext)

	// IsAlter_language_stmtContext differentiates from other interfaces.
	IsAlter_language_stmtContext()
}

type Alter_language_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	name      IIdentifierContext
	new_name  IIdentifierContext
	new_owner IIdentifierContext
}

func NewEmptyAlter_language_stmtContext() *Alter_language_stmtContext {
	var p = new(Alter_language_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_language_stmt
	return p
}

func (*Alter_language_stmtContext) IsAlter_language_stmtContext() {}

func NewAlter_language_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_language_stmtContext {
	var p = new(Alter_language_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_language_stmt

	return p
}

func (s *Alter_language_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_language_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_language_stmtContext) GetNew_name() IIdentifierContext { return s.new_name }

func (s *Alter_language_stmtContext) GetNew_owner() IIdentifierContext { return s.new_owner }

func (s *Alter_language_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_language_stmtContext) SetNew_name(v IIdentifierContext) { s.new_name = v }

func (s *Alter_language_stmtContext) SetNew_owner(v IIdentifierContext) { s.new_owner = v }

func (s *Alter_language_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_language_stmtContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLANGUAGE, 0)
}

func (s *Alter_language_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_language_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_language_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_language_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_language_stmtContext) PROCEDURAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPROCEDURAL, 0)
}

func (s *Alter_language_stmtContext) OWNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNER, 0)
}

func (s *Alter_language_stmtContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT_USER, 0)
}

func (s *Alter_language_stmtContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSESSION_USER, 0)
}

func (s *Alter_language_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_language_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_language_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_language_stmt(s)
	}
}

func (s *Alter_language_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_language_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_language_stmt() (localctx IAlter_language_stmtContext) {
	localctx = NewAlter_language_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, PostgreSQLParserRULE_alter_language_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1231)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1208)
			p.Match(PostgreSQLParserALTER)
		}
		p.SetState(1210)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserPROCEDURAL {
			{
				p.SetState(1209)
				p.Match(PostgreSQLParserPROCEDURAL)
			}

		}
		{
			p.SetState(1212)
			p.Match(PostgreSQLParserLANGUAGE)
		}
		{
			p.SetState(1213)

			var _x = p.identifier(0)

			localctx.(*Alter_language_stmtContext).name = _x
		}
		{
			p.SetState(1214)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(1215)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1216)

			var _x = p.identifier(0)

			localctx.(*Alter_language_stmtContext).new_name = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1218)
			p.Match(PostgreSQLParserALTER)
		}
		p.SetState(1220)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserPROCEDURAL {
			{
				p.SetState(1219)
				p.Match(PostgreSQLParserPROCEDURAL)
			}

		}
		{
			p.SetState(1222)
			p.Match(PostgreSQLParserLANGUAGE)
		}
		{
			p.SetState(1223)

			var _x = p.identifier(0)

			localctx.(*Alter_language_stmtContext).name = _x
		}
		{
			p.SetState(1224)
			p.Match(PostgreSQLParserOWNER)
		}
		{
			p.SetState(1225)
			p.Match(PostgreSQLParserTO)
		}
		p.SetState(1229)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
			{
				p.SetState(1226)

				var _x = p.identifier(0)

				localctx.(*Alter_language_stmtContext).new_owner = _x
			}

		case PostgreSQLParserCURRENT_USER:
			{
				p.SetState(1227)
				p.Match(PostgreSQLParserCURRENT_USER)
			}

		case PostgreSQLParserSESSION_USER:
			{
				p.SetState(1228)
				p.Match(PostgreSQLParserSESSION_USER)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// IAlter_large_object_stmtContext is an interface to support dynamic dispatch.
type IAlter_large_object_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLarge_object_oid returns the large_object_oid token.
	GetLarge_object_oid() antlr.Token

	// SetLarge_object_oid sets the large_object_oid token.
	SetLarge_object_oid(antlr.Token)

	// GetNew_owner returns the new_owner rule contexts.
	GetNew_owner() IIdentifierContext

	// SetNew_owner sets the new_owner rule contexts.
	SetNew_owner(IIdentifierContext)

	// IsAlter_large_object_stmtContext differentiates from other interfaces.
	IsAlter_large_object_stmtContext()
}

type Alter_large_object_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	large_object_oid antlr.Token
	new_owner        IIdentifierContext
}

func NewEmptyAlter_large_object_stmtContext() *Alter_large_object_stmtContext {
	var p = new(Alter_large_object_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_large_object_stmt
	return p
}

func (*Alter_large_object_stmtContext) IsAlter_large_object_stmtContext() {}

func NewAlter_large_object_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_large_object_stmtContext {
	var p = new(Alter_large_object_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_large_object_stmt

	return p
}

func (s *Alter_large_object_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_large_object_stmtContext) GetLarge_object_oid() antlr.Token { return s.large_object_oid }

func (s *Alter_large_object_stmtContext) SetLarge_object_oid(v antlr.Token) { s.large_object_oid = v }

func (s *Alter_large_object_stmtContext) GetNew_owner() IIdentifierContext { return s.new_owner }

func (s *Alter_large_object_stmtContext) SetNew_owner(v IIdentifierContext) { s.new_owner = v }

func (s *Alter_large_object_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_large_object_stmtContext) LARGE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLARGE, 0)
}

func (s *Alter_large_object_stmtContext) OBJECT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOBJECT, 0)
}

func (s *Alter_large_object_stmtContext) OWNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNER, 0)
}

func (s *Alter_large_object_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_large_object_stmtContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, 0)
}

func (s *Alter_large_object_stmtContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT_USER, 0)
}

func (s *Alter_large_object_stmtContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSESSION_USER, 0)
}

func (s *Alter_large_object_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_large_object_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_large_object_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_large_object_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_large_object_stmt(s)
	}
}

func (s *Alter_large_object_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_large_object_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_large_object_stmt() (localctx IAlter_large_object_stmtContext) {
	localctx = NewAlter_large_object_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, PostgreSQLParserRULE_alter_large_object_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1233)
		p.Match(PostgreSQLParserALTER)
	}
	{
		p.SetState(1234)
		p.Match(PostgreSQLParserLARGE)
	}
	{
		p.SetState(1235)
		p.Match(PostgreSQLParserOBJECT)
	}
	{
		p.SetState(1236)

		var _m = p.Match(PostgreSQLParserINTEGER_LITERAL)

		localctx.(*Alter_large_object_stmtContext).large_object_oid = _m
	}
	{
		p.SetState(1237)
		p.Match(PostgreSQLParserOWNER)
	}
	{
		p.SetState(1238)
		p.Match(PostgreSQLParserTO)
	}
	p.SetState(1242)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
		{
			p.SetState(1239)

			var _x = p.identifier(0)

			localctx.(*Alter_large_object_stmtContext).new_owner = _x
		}

	case PostgreSQLParserCURRENT_USER:
		{
			p.SetState(1240)
			p.Match(PostgreSQLParserCURRENT_USER)
		}

	case PostgreSQLParserSESSION_USER:
		{
			p.SetState(1241)
			p.Match(PostgreSQLParserSESSION_USER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlter_materialize_view_stmtContext is an interface to support dynamic dispatch.
type IAlter_materialize_view_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_materialize_view_stmtContext differentiates from other interfaces.
	IsAlter_materialize_view_stmtContext()
}

type Alter_materialize_view_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_materialize_view_stmtContext() *Alter_materialize_view_stmtContext {
	var p = new(Alter_materialize_view_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_materialize_view_stmt
	return p
}

func (*Alter_materialize_view_stmtContext) IsAlter_materialize_view_stmtContext() {}

func NewAlter_materialize_view_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_materialize_view_stmtContext {
	var p = new(Alter_materialize_view_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_materialize_view_stmt

	return p
}

func (s *Alter_materialize_view_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_materialize_view_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Alter_materialize_view_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_materialize_view_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_materialize_view_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_materialize_view_stmt(s)
	}
}

func (s *Alter_materialize_view_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_materialize_view_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_materialize_view_stmt() (localctx IAlter_materialize_view_stmtContext) {
	localctx = NewAlter_materialize_view_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, PostgreSQLParserRULE_alter_materialize_view_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1244)
		p.Todo_implement()
	}

	return localctx
}

// IAlter_operator_stmtContext is an interface to support dynamic dispatch.
type IAlter_operator_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_operator_stmtContext differentiates from other interfaces.
	IsAlter_operator_stmtContext()
}

type Alter_operator_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_operator_stmtContext() *Alter_operator_stmtContext {
	var p = new(Alter_operator_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_operator_stmt
	return p
}

func (*Alter_operator_stmtContext) IsAlter_operator_stmtContext() {}

func NewAlter_operator_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_operator_stmtContext {
	var p = new(Alter_operator_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_operator_stmt

	return p
}

func (s *Alter_operator_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_operator_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Alter_operator_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_operator_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_operator_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_operator_stmt(s)
	}
}

func (s *Alter_operator_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_operator_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_operator_stmt() (localctx IAlter_operator_stmtContext) {
	localctx = NewAlter_operator_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, PostgreSQLParserRULE_alter_operator_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1246)
		p.Todo_implement()
	}

	return localctx
}

// IAlter_operator_class_stmtContext is an interface to support dynamic dispatch.
type IAlter_operator_class_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdentifierContext

	// GetNew_owner returns the new_owner rule contexts.
	GetNew_owner() IIdentifierContext

	// GetNew_schema returns the new_schema rule contexts.
	GetNew_schema() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdentifierContext)

	// SetNew_owner sets the new_owner rule contexts.
	SetNew_owner(IIdentifierContext)

	// SetNew_schema sets the new_schema rule contexts.
	SetNew_schema(IIdentifierContext)

	// IsAlter_operator_class_stmtContext differentiates from other interfaces.
	IsAlter_operator_class_stmtContext()
}

type Alter_operator_class_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	name       IIdentifierContext
	new_name   IIdentifierContext
	new_owner  IIdentifierContext
	new_schema IIdentifierContext
}

func NewEmptyAlter_operator_class_stmtContext() *Alter_operator_class_stmtContext {
	var p = new(Alter_operator_class_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_operator_class_stmt
	return p
}

func (*Alter_operator_class_stmtContext) IsAlter_operator_class_stmtContext() {}

func NewAlter_operator_class_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_operator_class_stmtContext {
	var p = new(Alter_operator_class_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_operator_class_stmt

	return p
}

func (s *Alter_operator_class_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_operator_class_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_operator_class_stmtContext) GetNew_name() IIdentifierContext { return s.new_name }

func (s *Alter_operator_class_stmtContext) GetNew_owner() IIdentifierContext { return s.new_owner }

func (s *Alter_operator_class_stmtContext) GetNew_schema() IIdentifierContext { return s.new_schema }

func (s *Alter_operator_class_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_operator_class_stmtContext) SetNew_name(v IIdentifierContext) { s.new_name = v }

func (s *Alter_operator_class_stmtContext) SetNew_owner(v IIdentifierContext) { s.new_owner = v }

func (s *Alter_operator_class_stmtContext) SetNew_schema(v IIdentifierContext) { s.new_schema = v }

func (s *Alter_operator_class_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_operator_class_stmtContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPERATOR, 0)
}

func (s *Alter_operator_class_stmtContext) CLASS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLASS, 0)
}

func (s *Alter_operator_class_stmtContext) USING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSING, 0)
}

func (s *Alter_operator_class_stmtContext) Index_method() IIndex_methodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_methodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_methodContext)
}

func (s *Alter_operator_class_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_operator_class_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_operator_class_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_operator_class_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_operator_class_stmtContext) OWNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNER, 0)
}

func (s *Alter_operator_class_stmtContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT_USER, 0)
}

func (s *Alter_operator_class_stmtContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSESSION_USER, 0)
}

func (s *Alter_operator_class_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Alter_operator_class_stmtContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCHEMA, 0)
}

func (s *Alter_operator_class_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_operator_class_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_operator_class_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_operator_class_stmt(s)
	}
}

func (s *Alter_operator_class_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_operator_class_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_operator_class_stmt() (localctx IAlter_operator_class_stmtContext) {
	localctx = NewAlter_operator_class_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, PostgreSQLParserRULE_alter_operator_class_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1281)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1248)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1249)
			p.Match(PostgreSQLParserOPERATOR)
		}
		{
			p.SetState(1250)
			p.Match(PostgreSQLParserCLASS)
		}
		{
			p.SetState(1251)

			var _x = p.identifier(0)

			localctx.(*Alter_operator_class_stmtContext).name = _x
		}
		{
			p.SetState(1252)
			p.Match(PostgreSQLParserUSING)
		}
		{
			p.SetState(1253)
			p.Index_method()
		}
		{
			p.SetState(1254)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(1255)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1256)

			var _x = p.identifier(0)

			localctx.(*Alter_operator_class_stmtContext).new_name = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1258)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1259)
			p.Match(PostgreSQLParserOPERATOR)
		}
		{
			p.SetState(1260)
			p.Match(PostgreSQLParserCLASS)
		}
		{
			p.SetState(1261)

			var _x = p.identifier(0)

			localctx.(*Alter_operator_class_stmtContext).name = _x
		}
		{
			p.SetState(1262)
			p.Match(PostgreSQLParserUSING)
		}
		{
			p.SetState(1263)
			p.Index_method()
		}
		{
			p.SetState(1264)
			p.Match(PostgreSQLParserOWNER)
		}
		{
			p.SetState(1265)
			p.Match(PostgreSQLParserTO)
		}
		p.SetState(1269)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
			{
				p.SetState(1266)

				var _x = p.identifier(0)

				localctx.(*Alter_operator_class_stmtContext).new_owner = _x
			}

		case PostgreSQLParserCURRENT_USER:
			{
				p.SetState(1267)
				p.Match(PostgreSQLParserCURRENT_USER)
			}

		case PostgreSQLParserSESSION_USER:
			{
				p.SetState(1268)
				p.Match(PostgreSQLParserSESSION_USER)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1271)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1272)
			p.Match(PostgreSQLParserOPERATOR)
		}
		{
			p.SetState(1273)
			p.Match(PostgreSQLParserCLASS)
		}
		{
			p.SetState(1274)

			var _x = p.identifier(0)

			localctx.(*Alter_operator_class_stmtContext).name = _x
		}
		{
			p.SetState(1275)
			p.Match(PostgreSQLParserUSING)
		}
		{
			p.SetState(1276)
			p.Index_method()
		}
		{
			p.SetState(1277)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(1278)
			p.Match(PostgreSQLParserSCHEMA)
		}
		{
			p.SetState(1279)

			var _x = p.identifier(0)

			localctx.(*Alter_operator_class_stmtContext).new_schema = _x
		}

	}

	return localctx
}

// IAlter_operator_family_stmtContext is an interface to support dynamic dispatch.
type IAlter_operator_family_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_operator_family_stmtContext differentiates from other interfaces.
	IsAlter_operator_family_stmtContext()
}

type Alter_operator_family_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_operator_family_stmtContext() *Alter_operator_family_stmtContext {
	var p = new(Alter_operator_family_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_operator_family_stmt
	return p
}

func (*Alter_operator_family_stmtContext) IsAlter_operator_family_stmtContext() {}

func NewAlter_operator_family_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_operator_family_stmtContext {
	var p = new(Alter_operator_family_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_operator_family_stmt

	return p
}

func (s *Alter_operator_family_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_operator_family_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Alter_operator_family_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_operator_family_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_operator_family_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_operator_family_stmt(s)
	}
}

func (s *Alter_operator_family_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_operator_family_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_operator_family_stmt() (localctx IAlter_operator_family_stmtContext) {
	localctx = NewAlter_operator_family_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, PostgreSQLParserRULE_alter_operator_family_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1283)
		p.Todo_implement()
	}

	return localctx
}

// IAlter_policy_stmtContext is an interface to support dynamic dispatch.
type IAlter_policy_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() IIdentifierContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdentifierContext

	// GetRoles returns the roles rule contexts.
	GetRoles() IRole_name_listContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(IIdentifierContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdentifierContext)

	// SetRoles sets the roles rule contexts.
	SetRoles(IRole_name_listContext)

	// IsAlter_policy_stmtContext differentiates from other interfaces.
	IsAlter_policy_stmtContext()
}

type Alter_policy_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	name       IIdentifierContext
	table_name IIdentifierContext
	new_name   IIdentifierContext
	roles      IRole_name_listContext
}

func NewEmptyAlter_policy_stmtContext() *Alter_policy_stmtContext {
	var p = new(Alter_policy_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_policy_stmt
	return p
}

func (*Alter_policy_stmtContext) IsAlter_policy_stmtContext() {}

func NewAlter_policy_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_policy_stmtContext {
	var p = new(Alter_policy_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_policy_stmt

	return p
}

func (s *Alter_policy_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_policy_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_policy_stmtContext) GetTable_name() IIdentifierContext { return s.table_name }

func (s *Alter_policy_stmtContext) GetNew_name() IIdentifierContext { return s.new_name }

func (s *Alter_policy_stmtContext) GetRoles() IRole_name_listContext { return s.roles }

func (s *Alter_policy_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_policy_stmtContext) SetTable_name(v IIdentifierContext) { s.table_name = v }

func (s *Alter_policy_stmtContext) SetNew_name(v IIdentifierContext) { s.new_name = v }

func (s *Alter_policy_stmtContext) SetRoles(v IRole_name_listContext) { s.roles = v }

func (s *Alter_policy_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_policy_stmtContext) POLICY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPOLICY, 0)
}

func (s *Alter_policy_stmtContext) ON() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserON, 0)
}

func (s *Alter_policy_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_policy_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_policy_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_policy_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_policy_stmtContext) USING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSING, 0)
}

func (s *Alter_policy_stmtContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *Alter_policy_stmtContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *Alter_policy_stmtContext) WITH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITH, 0)
}

func (s *Alter_policy_stmtContext) CHECK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHECK, 0)
}

func (s *Alter_policy_stmtContext) Role_name_list() IRole_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRole_name_listContext)
}

func (s *Alter_policy_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_policy_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_policy_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_policy_stmt(s)
	}
}

func (s *Alter_policy_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_policy_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_policy_stmt() (localctx IAlter_policy_stmtContext) {
	localctx = NewAlter_policy_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, PostgreSQLParserRULE_alter_policy_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1312)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1285)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1286)
			p.Match(PostgreSQLParserPOLICY)
		}
		{
			p.SetState(1287)

			var _x = p.identifier(0)

			localctx.(*Alter_policy_stmtContext).name = _x
		}
		{
			p.SetState(1288)
			p.Match(PostgreSQLParserON)
		}
		{
			p.SetState(1289)

			var _x = p.identifier(0)

			localctx.(*Alter_policy_stmtContext).table_name = _x
		}
		{
			p.SetState(1290)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(1291)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1292)

			var _x = p.identifier(0)

			localctx.(*Alter_policy_stmtContext).new_name = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1294)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1295)
			p.Match(PostgreSQLParserPOLICY)
		}
		{
			p.SetState(1296)

			var _x = p.identifier(0)

			localctx.(*Alter_policy_stmtContext).name = _x
		}
		{
			p.SetState(1297)
			p.Match(PostgreSQLParserON)
		}
		{
			p.SetState(1298)

			var _x = p.identifier(0)

			localctx.(*Alter_policy_stmtContext).table_name = _x
		}
		p.SetState(1301)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserTO {
			{
				p.SetState(1299)
				p.Match(PostgreSQLParserTO)
			}
			{
				p.SetState(1300)

				var _x = p.Role_name_list()

				localctx.(*Alter_policy_stmtContext).roles = _x
			}

		}
		p.SetState(1305)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserUSING {
			{
				p.SetState(1303)
				p.Match(PostgreSQLParserUSING)
			}
			{
				p.SetState(1304)
				p.predicate(0)
			}

		}
		p.SetState(1310)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserWITH {
			{
				p.SetState(1307)
				p.Match(PostgreSQLParserWITH)
			}
			{
				p.SetState(1308)
				p.Match(PostgreSQLParserCHECK)
			}
			{
				p.SetState(1309)
				p.predicate(0)
			}

		}

	}

	return localctx
}

// IAlter_publication_stmtContext is an interface to support dynamic dispatch.
type IAlter_publication_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetTable_names returns the table_names rule contexts.
	GetTable_names() IIdentifier_listContext

	// GetNew_owner returns the new_owner rule contexts.
	GetNew_owner() IRole_nameContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IName_Context

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetTable_names sets the table_names rule contexts.
	SetTable_names(IIdentifier_listContext)

	// SetNew_owner sets the new_owner rule contexts.
	SetNew_owner(IRole_nameContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IName_Context)

	// IsAlter_publication_stmtContext differentiates from other interfaces.
	IsAlter_publication_stmtContext()
}

type Alter_publication_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	name        IIdentifierContext
	table_names IIdentifier_listContext
	new_owner   IRole_nameContext
	new_name    IName_Context
}

func NewEmptyAlter_publication_stmtContext() *Alter_publication_stmtContext {
	var p = new(Alter_publication_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_publication_stmt
	return p
}

func (*Alter_publication_stmtContext) IsAlter_publication_stmtContext() {}

func NewAlter_publication_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_publication_stmtContext {
	var p = new(Alter_publication_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_publication_stmt

	return p
}

func (s *Alter_publication_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_publication_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_publication_stmtContext) GetTable_names() IIdentifier_listContext {
	return s.table_names
}

func (s *Alter_publication_stmtContext) GetNew_owner() IRole_nameContext { return s.new_owner }

func (s *Alter_publication_stmtContext) GetNew_name() IName_Context { return s.new_name }

func (s *Alter_publication_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_publication_stmtContext) SetTable_names(v IIdentifier_listContext) { s.table_names = v }

func (s *Alter_publication_stmtContext) SetNew_owner(v IRole_nameContext) { s.new_owner = v }

func (s *Alter_publication_stmtContext) SetNew_name(v IName_Context) { s.new_name = v }

func (s *Alter_publication_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_publication_stmtContext) PUBLICATION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPUBLICATION, 0)
}

func (s *Alter_publication_stmtContext) ADD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserADD, 0)
}

func (s *Alter_publication_stmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLE, 0)
}

func (s *Alter_publication_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_publication_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Alter_publication_stmtContext) ONLY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserONLY, 0)
}

func (s *Alter_publication_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Alter_publication_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Alter_publication_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Alter_publication_stmtContext) Option_list() IOption_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_listContext)
}

func (s *Alter_publication_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Alter_publication_stmtContext) OWNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNER, 0)
}

func (s *Alter_publication_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_publication_stmtContext) Role_name() IRole_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRole_nameContext)
}

func (s *Alter_publication_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_publication_stmtContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Alter_publication_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_publication_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_publication_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_publication_stmt(s)
	}
}

func (s *Alter_publication_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_publication_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_publication_stmt() (localctx IAlter_publication_stmtContext) {
	localctx = NewAlter_publication_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, PostgreSQLParserRULE_alter_publication_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1366)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1314)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1315)
			p.Match(PostgreSQLParserPUBLICATION)
		}
		{
			p.SetState(1316)

			var _x = p.identifier(0)

			localctx.(*Alter_publication_stmtContext).name = _x
		}
		{
			p.SetState(1317)
			p.Match(PostgreSQLParserADD)
		}
		{
			p.SetState(1318)
			p.Match(PostgreSQLParserTABLE)
		}
		p.SetState(1320)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserONLY {
			{
				p.SetState(1319)
				p.Match(PostgreSQLParserONLY)
			}

		}
		{
			p.SetState(1322)

			var _x = p.Identifier_list()

			localctx.(*Alter_publication_stmtContext).table_names = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1324)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1325)
			p.Match(PostgreSQLParserPUBLICATION)
		}
		{
			p.SetState(1326)

			var _x = p.identifier(0)

			localctx.(*Alter_publication_stmtContext).name = _x
		}
		{
			p.SetState(1327)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(1328)
			p.Match(PostgreSQLParserTABLE)
		}
		p.SetState(1330)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserONLY {
			{
				p.SetState(1329)
				p.Match(PostgreSQLParserONLY)
			}

		}
		{
			p.SetState(1332)

			var _x = p.Identifier_list()

			localctx.(*Alter_publication_stmtContext).table_names = _x
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1334)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1335)
			p.Match(PostgreSQLParserPUBLICATION)
		}
		{
			p.SetState(1336)

			var _x = p.identifier(0)

			localctx.(*Alter_publication_stmtContext).name = _x
		}
		{
			p.SetState(1337)
			p.Match(PostgreSQLParserDROP)
		}
		{
			p.SetState(1338)
			p.Match(PostgreSQLParserTABLE)
		}
		p.SetState(1340)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserONLY {
			{
				p.SetState(1339)
				p.Match(PostgreSQLParserONLY)
			}

		}
		{
			p.SetState(1342)

			var _x = p.Identifier_list()

			localctx.(*Alter_publication_stmtContext).table_names = _x
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1344)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1345)
			p.Match(PostgreSQLParserPUBLICATION)
		}
		{
			p.SetState(1346)

			var _x = p.identifier(0)

			localctx.(*Alter_publication_stmtContext).name = _x
		}
		{
			p.SetState(1347)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(1348)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(1349)
			p.Option_list()
		}
		{
			p.SetState(1350)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1352)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1353)
			p.Match(PostgreSQLParserPUBLICATION)
		}
		{
			p.SetState(1354)

			var _x = p.identifier(0)

			localctx.(*Alter_publication_stmtContext).name = _x
		}
		{
			p.SetState(1355)
			p.Match(PostgreSQLParserOWNER)
		}
		{
			p.SetState(1356)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1357)

			var _x = p.Role_name()

			localctx.(*Alter_publication_stmtContext).new_owner = _x
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1359)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1360)
			p.Match(PostgreSQLParserPUBLICATION)
		}
		{
			p.SetState(1361)

			var _x = p.identifier(0)

			localctx.(*Alter_publication_stmtContext).name = _x
		}
		{
			p.SetState(1362)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(1363)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1364)

			var _x = p.Name_()

			localctx.(*Alter_publication_stmtContext).new_name = _x
		}

	}

	return localctx
}

// IAlter_role_optionsContext is an interface to support dynamic dispatch.
type IAlter_role_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConnlimit returns the connlimit token.
	GetConnlimit() antlr.Token

	// SetConnlimit sets the connlimit token.
	SetConnlimit(antlr.Token)

	// IsAlter_role_optionsContext differentiates from other interfaces.
	IsAlter_role_optionsContext()
}

type Alter_role_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	connlimit antlr.Token
}

func NewEmptyAlter_role_optionsContext() *Alter_role_optionsContext {
	var p = new(Alter_role_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_role_options
	return p
}

func (*Alter_role_optionsContext) IsAlter_role_optionsContext() {}

func NewAlter_role_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_role_optionsContext {
	var p = new(Alter_role_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_role_options

	return p
}

func (s *Alter_role_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_role_optionsContext) GetConnlimit() antlr.Token { return s.connlimit }

func (s *Alter_role_optionsContext) SetConnlimit(v antlr.Token) { s.connlimit = v }

func (s *Alter_role_optionsContext) SUPERUSER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSUPERUSER, 0)
}

func (s *Alter_role_optionsContext) NOSUPERUSER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOSUPERUSER, 0)
}

func (s *Alter_role_optionsContext) CREATEDB() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATEDB, 0)
}

func (s *Alter_role_optionsContext) NOCREATEDB() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOCREATEDB, 0)
}

func (s *Alter_role_optionsContext) CREATEROLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATEROLE, 0)
}

func (s *Alter_role_optionsContext) NOCREATEROLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOCREATEROLE, 0)
}

func (s *Alter_role_optionsContext) INHERIT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINHERIT, 0)
}

func (s *Alter_role_optionsContext) NOINHERIT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOINHERIT, 0)
}

func (s *Alter_role_optionsContext) LOGIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLOGIN, 0)
}

func (s *Alter_role_optionsContext) NOLOGIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOLOGIN, 0)
}

func (s *Alter_role_optionsContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREPLICATION, 0)
}

func (s *Alter_role_optionsContext) NOREPLICATION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOREPLICATION, 0)
}

func (s *Alter_role_optionsContext) BYPASSRLS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBYPASSRLS, 0)
}

func (s *Alter_role_optionsContext) NOBYPASSRLS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOBYPASSRLS, 0)
}

func (s *Alter_role_optionsContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONNECTION, 0)
}

func (s *Alter_role_optionsContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLIMIT, 0)
}

func (s *Alter_role_optionsContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER, 0)
}

func (s *Alter_role_optionsContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPASSWORD, 0)
}

func (s *Alter_role_optionsContext) SINGLEQ_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSINGLEQ_STRING_LITERAL, 0)
}

func (s *Alter_role_optionsContext) ENCRYPTED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserENCRYPTED, 0)
}

func (s *Alter_role_optionsContext) VALID() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVALID, 0)
}

func (s *Alter_role_optionsContext) UNTIL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNTIL, 0)
}

func (s *Alter_role_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_role_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_role_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_role_options(s)
	}
}

func (s *Alter_role_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_role_options(s)
	}
}

func (p *PostgreSQLParser) Alter_role_options() (localctx IAlter_role_optionsContext) {
	localctx = NewAlter_role_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, PostgreSQLParserRULE_alter_role_options)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1393)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserSUPERUSER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1368)
			p.Match(PostgreSQLParserSUPERUSER)
		}

	case PostgreSQLParserNOSUPERUSER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1369)
			p.Match(PostgreSQLParserNOSUPERUSER)
		}

	case PostgreSQLParserCREATEDB:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1370)
			p.Match(PostgreSQLParserCREATEDB)
		}

	case PostgreSQLParserNOCREATEDB:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1371)
			p.Match(PostgreSQLParserNOCREATEDB)
		}

	case PostgreSQLParserCREATEROLE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1372)
			p.Match(PostgreSQLParserCREATEROLE)
		}

	case PostgreSQLParserNOCREATEROLE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1373)
			p.Match(PostgreSQLParserNOCREATEROLE)
		}

	case PostgreSQLParserINHERIT:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1374)
			p.Match(PostgreSQLParserINHERIT)
		}

	case PostgreSQLParserNOINHERIT:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1375)
			p.Match(PostgreSQLParserNOINHERIT)
		}

	case PostgreSQLParserLOGIN:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1376)
			p.Match(PostgreSQLParserLOGIN)
		}

	case PostgreSQLParserNOLOGIN:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1377)
			p.Match(PostgreSQLParserNOLOGIN)
		}

	case PostgreSQLParserREPLICATION:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1378)
			p.Match(PostgreSQLParserREPLICATION)
		}

	case PostgreSQLParserNOREPLICATION:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1379)
			p.Match(PostgreSQLParserNOREPLICATION)
		}

	case PostgreSQLParserBYPASSRLS:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1380)
			p.Match(PostgreSQLParserBYPASSRLS)
		}

	case PostgreSQLParserNOBYPASSRLS:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1381)
			p.Match(PostgreSQLParserNOBYPASSRLS)
		}

	case PostgreSQLParserCONNECTION:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1382)
			p.Match(PostgreSQLParserCONNECTION)
		}
		{
			p.SetState(1383)
			p.Match(PostgreSQLParserLIMIT)
		}
		{
			p.SetState(1384)

			var _m = p.Match(PostgreSQLParserINTEGER)

			localctx.(*Alter_role_optionsContext).connlimit = _m
		}

	case PostgreSQLParserENCRYPTED, PostgreSQLParserPASSWORD:
		p.EnterOuterAlt(localctx, 16)
		p.SetState(1386)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserENCRYPTED {
			{
				p.SetState(1385)
				p.Match(PostgreSQLParserENCRYPTED)
			}

		}
		{
			p.SetState(1388)
			p.Match(PostgreSQLParserPASSWORD)
		}
		{
			p.SetState(1389)
			p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)
		}

	case PostgreSQLParserVALID:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1390)
			p.Match(PostgreSQLParserVALID)
		}
		{
			p.SetState(1391)
			p.Match(PostgreSQLParserUNTIL)
		}
		{
			p.SetState(1392)
			p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlter_role_stmtContext is an interface to support dynamic dispatch.
type IAlter_role_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRole returns the role rule contexts.
	GetRole() IRole_nameContext

	// GetOptions returns the options rule contexts.
	GetOptions() IAlter_role_optionsContext

	// GetName returns the name rule contexts.
	GetName() IName_Context

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IName_Context

	// GetDatabase_name returns the database_name rule contexts.
	GetDatabase_name() IName_Context

	// GetConfiguration_parameter returns the configuration_parameter rule contexts.
	GetConfiguration_parameter() IIdentifierContext

	// GetValue returns the value rule contexts.
	GetValue() IParam_valueContext

	// SetRole sets the role rule contexts.
	SetRole(IRole_nameContext)

	// SetOptions sets the options rule contexts.
	SetOptions(IAlter_role_optionsContext)

	// SetName sets the name rule contexts.
	SetName(IName_Context)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IName_Context)

	// SetDatabase_name sets the database_name rule contexts.
	SetDatabase_name(IName_Context)

	// SetConfiguration_parameter sets the configuration_parameter rule contexts.
	SetConfiguration_parameter(IIdentifierContext)

	// SetValue sets the value rule contexts.
	SetValue(IParam_valueContext)

	// IsAlter_role_stmtContext differentiates from other interfaces.
	IsAlter_role_stmtContext()
}

type Alter_role_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	role                    IRole_nameContext
	options                 IAlter_role_optionsContext
	name                    IName_Context
	new_name                IName_Context
	database_name           IName_Context
	configuration_parameter IIdentifierContext
	value                   IParam_valueContext
}

func NewEmptyAlter_role_stmtContext() *Alter_role_stmtContext {
	var p = new(Alter_role_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_role_stmt
	return p
}

func (*Alter_role_stmtContext) IsAlter_role_stmtContext() {}

func NewAlter_role_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_role_stmtContext {
	var p = new(Alter_role_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_role_stmt

	return p
}

func (s *Alter_role_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_role_stmtContext) GetRole() IRole_nameContext { return s.role }

func (s *Alter_role_stmtContext) GetOptions() IAlter_role_optionsContext { return s.options }

func (s *Alter_role_stmtContext) GetName() IName_Context { return s.name }

func (s *Alter_role_stmtContext) GetNew_name() IName_Context { return s.new_name }

func (s *Alter_role_stmtContext) GetDatabase_name() IName_Context { return s.database_name }

func (s *Alter_role_stmtContext) GetConfiguration_parameter() IIdentifierContext {
	return s.configuration_parameter
}

func (s *Alter_role_stmtContext) GetValue() IParam_valueContext { return s.value }

func (s *Alter_role_stmtContext) SetRole(v IRole_nameContext) { s.role = v }

func (s *Alter_role_stmtContext) SetOptions(v IAlter_role_optionsContext) { s.options = v }

func (s *Alter_role_stmtContext) SetName(v IName_Context) { s.name = v }

func (s *Alter_role_stmtContext) SetNew_name(v IName_Context) { s.new_name = v }

func (s *Alter_role_stmtContext) SetDatabase_name(v IName_Context) { s.database_name = v }

func (s *Alter_role_stmtContext) SetConfiguration_parameter(v IIdentifierContext) {
	s.configuration_parameter = v
}

func (s *Alter_role_stmtContext) SetValue(v IParam_valueContext) { s.value = v }

func (s *Alter_role_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_role_stmtContext) ROLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROLE, 0)
}

func (s *Alter_role_stmtContext) Role_name() IRole_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRole_nameContext)
}

func (s *Alter_role_stmtContext) WITH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITH, 0)
}

func (s *Alter_role_stmtContext) AllAlter_role_options() []IAlter_role_optionsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlter_role_optionsContext)(nil)).Elem())
	var tst = make([]IAlter_role_optionsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlter_role_optionsContext)
		}
	}

	return tst
}

func (s *Alter_role_stmtContext) Alter_role_options(i int) IAlter_role_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_role_optionsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlter_role_optionsContext)
}

func (s *Alter_role_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_role_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_role_stmtContext) AllName_() []IName_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IName_Context)(nil)).Elem())
	var tst = make([]IName_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IName_Context)
		}
	}

	return tst
}

func (s *Alter_role_stmtContext) Name_(i int) IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Alter_role_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Alter_role_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_role_stmtContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEQUAL, 0)
}

func (s *Alter_role_stmtContext) AllALL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserALL)
}

func (s *Alter_role_stmtContext) ALL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALL, i)
}

func (s *Alter_role_stmtContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEFAULT, 0)
}

func (s *Alter_role_stmtContext) IN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIN, 0)
}

func (s *Alter_role_stmtContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDATABASE, 0)
}

func (s *Alter_role_stmtContext) Param_value() IParam_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParam_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParam_valueContext)
}

func (s *Alter_role_stmtContext) FROM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFROM, 0)
}

func (s *Alter_role_stmtContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT, 0)
}

func (s *Alter_role_stmtContext) RESET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESET, 0)
}

func (s *Alter_role_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_role_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_role_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_role_stmt(s)
	}
}

func (s *Alter_role_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_role_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_role_stmt() (localctx IAlter_role_stmtContext) {
	localctx = NewAlter_role_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, PostgreSQLParserRULE_alter_role_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1473)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1395)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1396)
			p.Match(PostgreSQLParserROLE)
		}
		{
			p.SetState(1397)

			var _x = p.Role_name()

			localctx.(*Alter_role_stmtContext).role = _x
		}
		p.SetState(1399)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserWITH {
			{
				p.SetState(1398)
				p.Match(PostgreSQLParserWITH)
			}

		}
		p.SetState(1402)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == PostgreSQLParserCONNECTION || _la == PostgreSQLParserCREATEDB || _la == PostgreSQLParserENCRYPTED || _la == PostgreSQLParserNOCREATEDB || _la == PostgreSQLParserPASSWORD || (((_la-628)&-(0x1f+1)) == 0 && ((1<<uint((_la-628)))&((1<<(PostgreSQLParserVALID-628))|(1<<(PostgreSQLParserSUPERUSER-628))|(1<<(PostgreSQLParserNOSUPERUSER-628))|(1<<(PostgreSQLParserCREATEROLE-628))|(1<<(PostgreSQLParserNOCREATEROLE-628)))) != 0) || (((_la-660)&-(0x1f+1)) == 0 && ((1<<uint((_la-660)))&((1<<(PostgreSQLParserINHERIT-660))|(1<<(PostgreSQLParserNOINHERIT-660))|(1<<(PostgreSQLParserLOGIN-660))|(1<<(PostgreSQLParserNOLOGIN-660))|(1<<(PostgreSQLParserREPLICATION-660))|(1<<(PostgreSQLParserNOREPLICATION-660))|(1<<(PostgreSQLParserBYPASSRLS-660))|(1<<(PostgreSQLParserNOBYPASSRLS-660)))) != 0) {
			{
				p.SetState(1401)

				var _x = p.Alter_role_options()

				localctx.(*Alter_role_stmtContext).options = _x
			}

			p.SetState(1404)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1406)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1407)
			p.Match(PostgreSQLParserROLE)
		}
		{
			p.SetState(1408)

			var _x = p.Name_()

			localctx.(*Alter_role_stmtContext).name = _x
		}
		{
			p.SetState(1409)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(1410)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1411)

			var _x = p.Name_()

			localctx.(*Alter_role_stmtContext).new_name = _x
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1413)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1414)
			p.Match(PostgreSQLParserROLE)
		}
		p.SetState(1417)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURRENT_USER, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSESSION_USER, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserSINGLEQ_STRING_LITERAL, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
			{
				p.SetState(1415)

				var _x = p.Role_name()

				localctx.(*Alter_role_stmtContext).role = _x
			}

		case PostgreSQLParserALL:
			{
				p.SetState(1416)
				p.Match(PostgreSQLParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1422)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIN {
			{
				p.SetState(1419)
				p.Match(PostgreSQLParserIN)
			}
			{
				p.SetState(1420)
				p.Match(PostgreSQLParserDATABASE)
			}
			{
				p.SetState(1421)

				var _x = p.Name_()

				localctx.(*Alter_role_stmtContext).database_name = _x
			}

		}
		{
			p.SetState(1424)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(1425)

			var _x = p.identifier(0)

			localctx.(*Alter_role_stmtContext).configuration_parameter = _x
		}
		{
			p.SetState(1426)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserTO || _la == PostgreSQLParserEQUAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1429)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFALSE, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserON, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserYES, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserNUMERIC_LITERAL, PostgreSQLParserINTEGER_LITERAL, PostgreSQLParserSINGLEQ_STRING_LITERAL, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
			{
				p.SetState(1427)

				var _x = p.Param_value()

				localctx.(*Alter_role_stmtContext).value = _x
			}

		case PostgreSQLParserDEFAULT:
			{
				p.SetState(1428)
				p.Match(PostgreSQLParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1431)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1432)
			p.Match(PostgreSQLParserROLE)
		}
		p.SetState(1435)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURRENT_USER, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSESSION_USER, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserSINGLEQ_STRING_LITERAL, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
			{
				p.SetState(1433)

				var _x = p.Role_name()

				localctx.(*Alter_role_stmtContext).role = _x
			}

		case PostgreSQLParserALL:
			{
				p.SetState(1434)
				p.Match(PostgreSQLParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1440)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIN {
			{
				p.SetState(1437)
				p.Match(PostgreSQLParserIN)
			}
			{
				p.SetState(1438)
				p.Match(PostgreSQLParserDATABASE)
			}
			{
				p.SetState(1439)

				var _x = p.Name_()

				localctx.(*Alter_role_stmtContext).database_name = _x
			}

		}
		{
			p.SetState(1442)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(1443)

			var _x = p.identifier(0)

			localctx.(*Alter_role_stmtContext).configuration_parameter = _x
		}
		{
			p.SetState(1444)
			p.Match(PostgreSQLParserFROM)
		}
		{
			p.SetState(1445)
			p.Match(PostgreSQLParserCURRENT)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1447)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1448)
			p.Match(PostgreSQLParserROLE)
		}
		p.SetState(1451)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURRENT_USER, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSESSION_USER, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserSINGLEQ_STRING_LITERAL, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
			{
				p.SetState(1449)

				var _x = p.Role_name()

				localctx.(*Alter_role_stmtContext).role = _x
			}

		case PostgreSQLParserALL:
			{
				p.SetState(1450)
				p.Match(PostgreSQLParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1456)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIN {
			{
				p.SetState(1453)
				p.Match(PostgreSQLParserIN)
			}
			{
				p.SetState(1454)
				p.Match(PostgreSQLParserDATABASE)
			}
			{
				p.SetState(1455)

				var _x = p.Name_()

				localctx.(*Alter_role_stmtContext).database_name = _x
			}

		}
		{
			p.SetState(1458)
			p.Match(PostgreSQLParserRESET)
		}
		{
			p.SetState(1459)

			var _x = p.identifier(0)

			localctx.(*Alter_role_stmtContext).configuration_parameter = _x
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1460)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1461)
			p.Match(PostgreSQLParserROLE)
		}
		p.SetState(1464)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURRENT_USER, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSESSION_USER, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserSINGLEQ_STRING_LITERAL, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
			{
				p.SetState(1462)

				var _x = p.Role_name()

				localctx.(*Alter_role_stmtContext).role = _x
			}

		case PostgreSQLParserALL:
			{
				p.SetState(1463)
				p.Match(PostgreSQLParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1469)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIN {
			{
				p.SetState(1466)
				p.Match(PostgreSQLParserIN)
			}
			{
				p.SetState(1467)
				p.Match(PostgreSQLParserDATABASE)
			}
			{
				p.SetState(1468)

				var _x = p.Name_()

				localctx.(*Alter_role_stmtContext).database_name = _x
			}

		}
		{
			p.SetState(1471)
			p.Match(PostgreSQLParserRESET)
		}
		{
			p.SetState(1472)
			p.Match(PostgreSQLParserALL)
		}

	}

	return localctx
}

// IAlter_rule_stmtContext is an interface to support dynamic dispatch.
type IAlter_rule_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IName_Context

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() IIdentifierContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IName_Context

	// SetName sets the name rule contexts.
	SetName(IName_Context)

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(IIdentifierContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IName_Context)

	// IsAlter_rule_stmtContext differentiates from other interfaces.
	IsAlter_rule_stmtContext()
}

type Alter_rule_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	name       IName_Context
	table_name IIdentifierContext
	new_name   IName_Context
}

func NewEmptyAlter_rule_stmtContext() *Alter_rule_stmtContext {
	var p = new(Alter_rule_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_rule_stmt
	return p
}

func (*Alter_rule_stmtContext) IsAlter_rule_stmtContext() {}

func NewAlter_rule_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_rule_stmtContext {
	var p = new(Alter_rule_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_rule_stmt

	return p
}

func (s *Alter_rule_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_rule_stmtContext) GetName() IName_Context { return s.name }

func (s *Alter_rule_stmtContext) GetTable_name() IIdentifierContext { return s.table_name }

func (s *Alter_rule_stmtContext) GetNew_name() IName_Context { return s.new_name }

func (s *Alter_rule_stmtContext) SetName(v IName_Context) { s.name = v }

func (s *Alter_rule_stmtContext) SetTable_name(v IIdentifierContext) { s.table_name = v }

func (s *Alter_rule_stmtContext) SetNew_name(v IName_Context) { s.new_name = v }

func (s *Alter_rule_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_rule_stmtContext) RULE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRULE, 0)
}

func (s *Alter_rule_stmtContext) ON() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserON, 0)
}

func (s *Alter_rule_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_rule_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_rule_stmtContext) AllName_() []IName_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IName_Context)(nil)).Elem())
	var tst = make([]IName_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IName_Context)
		}
	}

	return tst
}

func (s *Alter_rule_stmtContext) Name_(i int) IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Alter_rule_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_rule_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_rule_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_rule_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_rule_stmt(s)
	}
}

func (s *Alter_rule_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_rule_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_rule_stmt() (localctx IAlter_rule_stmtContext) {
	localctx = NewAlter_rule_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, PostgreSQLParserRULE_alter_rule_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1475)
		p.Match(PostgreSQLParserALTER)
	}
	{
		p.SetState(1476)
		p.Match(PostgreSQLParserRULE)
	}
	{
		p.SetState(1477)

		var _x = p.Name_()

		localctx.(*Alter_rule_stmtContext).name = _x
	}
	{
		p.SetState(1478)
		p.Match(PostgreSQLParserON)
	}
	{
		p.SetState(1479)

		var _x = p.identifier(0)

		localctx.(*Alter_rule_stmtContext).table_name = _x
	}
	{
		p.SetState(1480)
		p.Match(PostgreSQLParserRENAME)
	}
	{
		p.SetState(1481)
		p.Match(PostgreSQLParserTO)
	}
	{
		p.SetState(1482)

		var _x = p.Name_()

		localctx.(*Alter_rule_stmtContext).new_name = _x
	}

	return localctx
}

// IAlter_schema_stmtContext is an interface to support dynamic dispatch.
type IAlter_schema_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdentifierContext

	// GetNew_owner returns the new_owner rule contexts.
	GetNew_owner() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdentifierContext)

	// SetNew_owner sets the new_owner rule contexts.
	SetNew_owner(IIdentifierContext)

	// IsAlter_schema_stmtContext differentiates from other interfaces.
	IsAlter_schema_stmtContext()
}

type Alter_schema_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	name      IIdentifierContext
	new_name  IIdentifierContext
	new_owner IIdentifierContext
}

func NewEmptyAlter_schema_stmtContext() *Alter_schema_stmtContext {
	var p = new(Alter_schema_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_schema_stmt
	return p
}

func (*Alter_schema_stmtContext) IsAlter_schema_stmtContext() {}

func NewAlter_schema_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_schema_stmtContext {
	var p = new(Alter_schema_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_schema_stmt

	return p
}

func (s *Alter_schema_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_schema_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_schema_stmtContext) GetNew_name() IIdentifierContext { return s.new_name }

func (s *Alter_schema_stmtContext) GetNew_owner() IIdentifierContext { return s.new_owner }

func (s *Alter_schema_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_schema_stmtContext) SetNew_name(v IIdentifierContext) { s.new_name = v }

func (s *Alter_schema_stmtContext) SetNew_owner(v IIdentifierContext) { s.new_owner = v }

func (s *Alter_schema_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_schema_stmtContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCHEMA, 0)
}

func (s *Alter_schema_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_schema_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_schema_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_schema_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_schema_stmtContext) OWNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNER, 0)
}

func (s *Alter_schema_stmtContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT_USER, 0)
}

func (s *Alter_schema_stmtContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSESSION_USER, 0)
}

func (s *Alter_schema_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_schema_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_schema_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_schema_stmt(s)
	}
}

func (s *Alter_schema_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_schema_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_schema_stmt() (localctx IAlter_schema_stmtContext) {
	localctx = NewAlter_schema_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, PostgreSQLParserRULE_alter_schema_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1501)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 91, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1484)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1485)
			p.Match(PostgreSQLParserSCHEMA)
		}
		{
			p.SetState(1486)

			var _x = p.identifier(0)

			localctx.(*Alter_schema_stmtContext).name = _x
		}
		{
			p.SetState(1487)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(1488)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1489)

			var _x = p.identifier(0)

			localctx.(*Alter_schema_stmtContext).new_name = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1491)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1492)
			p.Match(PostgreSQLParserSCHEMA)
		}
		{
			p.SetState(1493)

			var _x = p.identifier(0)

			localctx.(*Alter_schema_stmtContext).name = _x
		}
		{
			p.SetState(1494)
			p.Match(PostgreSQLParserOWNER)
		}
		{
			p.SetState(1495)
			p.Match(PostgreSQLParserTO)
		}
		p.SetState(1499)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
			{
				p.SetState(1496)

				var _x = p.identifier(0)

				localctx.(*Alter_schema_stmtContext).new_owner = _x
			}

		case PostgreSQLParserCURRENT_USER:
			{
				p.SetState(1497)
				p.Match(PostgreSQLParserCURRENT_USER)
			}

		case PostgreSQLParserSESSION_USER:
			{
				p.SetState(1498)
				p.Match(PostgreSQLParserSESSION_USER)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// IAlter_sequence_stmtContext is an interface to support dynamic dispatch.
type IAlter_sequence_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IName_Context

	// SetName sets the name rule contexts.
	SetName(IName_Context)

	// IsAlter_sequence_stmtContext differentiates from other interfaces.
	IsAlter_sequence_stmtContext()
}

type Alter_sequence_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IName_Context
}

func NewEmptyAlter_sequence_stmtContext() *Alter_sequence_stmtContext {
	var p = new(Alter_sequence_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_sequence_stmt
	return p
}

func (*Alter_sequence_stmtContext) IsAlter_sequence_stmtContext() {}

func NewAlter_sequence_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_sequence_stmtContext {
	var p = new(Alter_sequence_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_sequence_stmt

	return p
}

func (s *Alter_sequence_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_sequence_stmtContext) GetName() IName_Context { return s.name }

func (s *Alter_sequence_stmtContext) SetName(v IName_Context) { s.name = v }

func (s *Alter_sequence_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_sequence_stmtContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSEQUENCE, 0)
}

func (s *Alter_sequence_stmtContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Alter_sequence_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Alter_sequence_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Alter_sequence_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_sequence_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_sequence_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_sequence_stmt(s)
	}
}

func (s *Alter_sequence_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_sequence_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_sequence_stmt() (localctx IAlter_sequence_stmtContext) {
	localctx = NewAlter_sequence_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, PostgreSQLParserRULE_alter_sequence_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1503)
		p.Match(PostgreSQLParserALTER)
	}
	{
		p.SetState(1504)
		p.Match(PostgreSQLParserSEQUENCE)
	}
	p.SetState(1507)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(1505)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(1506)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(1509)

		var _x = p.Name_()

		localctx.(*Alter_sequence_stmtContext).name = _x
	}

	return localctx
}

// IAlter_server_options_listContext is an interface to support dynamic dispatch.
type IAlter_server_options_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOption returns the option rule contexts.
	GetOption() IIdentifierContext

	// GetValue returns the value rule contexts.
	GetValue() IParam_valueContext

	// SetOption sets the option rule contexts.
	SetOption(IIdentifierContext)

	// SetValue sets the value rule contexts.
	SetValue(IParam_valueContext)

	// IsAlter_server_options_listContext differentiates from other interfaces.
	IsAlter_server_options_listContext()
}

type Alter_server_options_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	option IIdentifierContext
	value  IParam_valueContext
}

func NewEmptyAlter_server_options_listContext() *Alter_server_options_listContext {
	var p = new(Alter_server_options_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_server_options_list
	return p
}

func (*Alter_server_options_listContext) IsAlter_server_options_listContext() {}

func NewAlter_server_options_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_server_options_listContext {
	var p = new(Alter_server_options_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_server_options_list

	return p
}

func (s *Alter_server_options_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_server_options_listContext) GetOption() IIdentifierContext { return s.option }

func (s *Alter_server_options_listContext) GetValue() IParam_valueContext { return s.value }

func (s *Alter_server_options_listContext) SetOption(v IIdentifierContext) { s.option = v }

func (s *Alter_server_options_listContext) SetValue(v IParam_valueContext) { s.value = v }

func (s *Alter_server_options_listContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_server_options_listContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_server_options_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Alter_server_options_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Alter_server_options_listContext) AllADD() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserADD)
}

func (s *Alter_server_options_listContext) ADD(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserADD, i)
}

func (s *Alter_server_options_listContext) AllSET() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserSET)
}

func (s *Alter_server_options_listContext) SET(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, i)
}

func (s *Alter_server_options_listContext) AllDROP() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserDROP)
}

func (s *Alter_server_options_listContext) DROP(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, i)
}

func (s *Alter_server_options_listContext) AllParam_value() []IParam_valueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParam_valueContext)(nil)).Elem())
	var tst = make([]IParam_valueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParam_valueContext)
		}
	}

	return tst
}

func (s *Alter_server_options_listContext) Param_value(i int) IParam_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParam_valueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParam_valueContext)
}

func (s *Alter_server_options_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_server_options_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_server_options_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_server_options_list(s)
	}
}

func (s *Alter_server_options_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_server_options_list(s)
	}
}

func (p *PostgreSQLParser) Alter_server_options_list() (localctx IAlter_server_options_listContext) {
	localctx = NewAlter_server_options_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, PostgreSQLParserRULE_alter_server_options_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1512)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1511)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserADD || _la == PostgreSQLParserDROP || _la == PostgreSQLParserSET) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(1514)

		var _x = p.identifier(0)

		localctx.(*Alter_server_options_listContext).option = _x
	}
	p.SetState(1516)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PostgreSQLParserWHITESPACE)|(1<<PostgreSQLParserA_)|(1<<PostgreSQLParserABORT)|(1<<PostgreSQLParserABS)|(1<<PostgreSQLParserABSOLUTE)|(1<<PostgreSQLParserACCESS)|(1<<PostgreSQLParserACTION)|(1<<PostgreSQLParserADA)|(1<<PostgreSQLParserADD)|(1<<PostgreSQLParserADMIN)|(1<<PostgreSQLParserAFTER)|(1<<PostgreSQLParserAGGREGATE)|(1<<PostgreSQLParserALLOCATE)|(1<<PostgreSQLParserALSO)|(1<<PostgreSQLParserALTER)|(1<<PostgreSQLParserALWAYS)|(1<<PostgreSQLParserANY)|(1<<PostgreSQLParserARE)|(1<<PostgreSQLParserASENSITIVE)|(1<<PostgreSQLParserASSERTION)|(1<<PostgreSQLParserASSIGNMENT))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(PostgreSQLParserAT-33))|(1<<(PostgreSQLParserATOMIC-33))|(1<<(PostgreSQLParserATTRIBUTE-33))|(1<<(PostgreSQLParserATTRIBUTES-33))|(1<<(PostgreSQLParserAVG-33))|(1<<(PostgreSQLParserBACKWARD-33))|(1<<(PostgreSQLParserBEFORE-33))|(1<<(PostgreSQLParserBEGIN-33))|(1<<(PostgreSQLParserBERNOULLI-33))|(1<<(PostgreSQLParserBETWEEN-33))|(1<<(PostgreSQLParserBIGINT-33))|(1<<(PostgreSQLParserBIT-33))|(1<<(PostgreSQLParserBIT_LENGTH-33))|(1<<(PostgreSQLParserBLOB-33))|(1<<(PostgreSQLParserBOOLEAN-33))|(1<<(PostgreSQLParserBREADTH-33))|(1<<(PostgreSQLParserBY-33))|(1<<(PostgreSQLParserC_-33))|(1<<(PostgreSQLParserCACHE-33))|(1<<(PostgreSQLParserCALL-33))|(1<<(PostgreSQLParserCALLED-33))|(1<<(PostgreSQLParserCARDINALITY-33))|(1<<(PostgreSQLParserCASCADE-33))|(1<<(PostgreSQLParserCASCADED-33))|(1<<(PostgreSQLParserCATALOG-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PostgreSQLParserCATALOG_NAME-65))|(1<<(PostgreSQLParserCEIL-65))|(1<<(PostgreSQLParserCEILING-65))|(1<<(PostgreSQLParserCHAIN-65))|(1<<(PostgreSQLParserCHAR-65))|(1<<(PostgreSQLParserCHAR_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER-65))|(1<<(PostgreSQLParserCHARACTER_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER_SET_CATALOG-65))|(1<<(PostgreSQLParserCHARACTER_SET_NAME-65))|(1<<(PostgreSQLParserCHARACTER_SET_SCHEMA-65))|(1<<(PostgreSQLParserCHARACTERISTICS-65))|(1<<(PostgreSQLParserCHARACTERS-65))|(1<<(PostgreSQLParserCHECKPOINT-65))|(1<<(PostgreSQLParserCLASS-65))|(1<<(PostgreSQLParserCLASS_ORIGIN-65))|(1<<(PostgreSQLParserCLOB-65))|(1<<(PostgreSQLParserCLOSE-65))|(1<<(PostgreSQLParserCLUSTER-65))|(1<<(PostgreSQLParserCOALESCE-65))|(1<<(PostgreSQLParserCOBOL-65))|(1<<(PostgreSQLParserCOLLATION_CATALOG-65))|(1<<(PostgreSQLParserCOLLATION_NAME-65))|(1<<(PostgreSQLParserCOLLATION_SCHEMA-65))|(1<<(PostgreSQLParserCOLLECT-65))|(1<<(PostgreSQLParserCOLUMN_NAME-65))|(1<<(PostgreSQLParserCOMMAND_FUNCTION-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(PostgreSQLParserCOMMAND_FUNCTION_CODE-97))|(1<<(PostgreSQLParserCOMMENT-97))|(1<<(PostgreSQLParserCOMMIT-97))|(1<<(PostgreSQLParserCOMMITTED-97))|(1<<(PostgreSQLParserCONDITION-97))|(1<<(PostgreSQLParserCONDITION_NUMBER-97))|(1<<(PostgreSQLParserCONNECT-97))|(1<<(PostgreSQLParserCONNECTION-97))|(1<<(PostgreSQLParserCONNECTION_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_CATALOG-97))|(1<<(PostgreSQLParserCONSTRAINT_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_SCHEMA-97))|(1<<(PostgreSQLParserCONSTRAINTS-97))|(1<<(PostgreSQLParserCONSTRUCTOR-97))|(1<<(PostgreSQLParserCONTAINS-97))|(1<<(PostgreSQLParserCONTINUE-97))|(1<<(PostgreSQLParserCONVERSION-97))|(1<<(PostgreSQLParserCONVERT-97))|(1<<(PostgreSQLParserCOPY-97))|(1<<(PostgreSQLParserCORR-97))|(1<<(PostgreSQLParserCORRESPONDING-97))|(1<<(PostgreSQLParserCOUNT-97))|(1<<(PostgreSQLParserCOVAR_POP-97))|(1<<(PostgreSQLParserCOVAR_SAMP-97)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(PostgreSQLParserCSV-131))|(1<<(PostgreSQLParserCUBE-131))|(1<<(PostgreSQLParserCUME_DIST-131))|(1<<(PostgreSQLParserCURRENT-131))|(1<<(PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP-131))|(1<<(PostgreSQLParserCURRENT_PATH-131))|(1<<(PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE-131))|(1<<(PostgreSQLParserCURSOR-131))|(1<<(PostgreSQLParserCURSOR_NAME-131))|(1<<(PostgreSQLParserCYCLE-131))|(1<<(PostgreSQLParserDATA-131))|(1<<(PostgreSQLParserDATABASE-131))|(1<<(PostgreSQLParserDATE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_CODE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_PRECISION-131))|(1<<(PostgreSQLParserDAY-131))|(1<<(PostgreSQLParserDEALLOCATE-131))|(1<<(PostgreSQLParserDEC-131))|(1<<(PostgreSQLParserDECIMAL-131))|(1<<(PostgreSQLParserDECLARE-131))|(1<<(PostgreSQLParserDEFAULTS-131))|(1<<(PostgreSQLParserDEFERRED-131))|(1<<(PostgreSQLParserDEFINED-131))|(1<<(PostgreSQLParserDEFINER-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(PostgreSQLParserDEGREE-163))|(1<<(PostgreSQLParserDELETE-163))|(1<<(PostgreSQLParserDELIMITER-163))|(1<<(PostgreSQLParserDELIMITERS-163))|(1<<(PostgreSQLParserDENSE_RANK-163))|(1<<(PostgreSQLParserDEPTH-163))|(1<<(PostgreSQLParserDEREF-163))|(1<<(PostgreSQLParserDERIVED-163))|(1<<(PostgreSQLParserDESCRIBE-163))|(1<<(PostgreSQLParserDESCRIPTOR-163))|(1<<(PostgreSQLParserDETERMINISTIC-163))|(1<<(PostgreSQLParserDIAGNOSTICS-163))|(1<<(PostgreSQLParserDICTIONARY-163))|(1<<(PostgreSQLParserDISCONNECT-163))|(1<<(PostgreSQLParserDISPATCH-163))|(1<<(PostgreSQLParserDOMAIN-163))|(1<<(PostgreSQLParserDOUBLE-163))|(1<<(PostgreSQLParserDYNAMIC-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION_CODE-163))|(1<<(PostgreSQLParserEACH-163))|(1<<(PostgreSQLParserELEMENT-163)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(PostgreSQLParserENCODING-197))|(1<<(PostgreSQLParserENCRYPTED-197))|(1<<(PostgreSQLParserEND-197))|(1<<(PostgreSQLParserEQUALS-197))|(1<<(PostgreSQLParserESCAPE-197))|(1<<(PostgreSQLParserEVERY-197))|(1<<(PostgreSQLParserEXCEPTION-197))|(1<<(PostgreSQLParserEXCLUDE-197))|(1<<(PostgreSQLParserEXCLUDING-197))|(1<<(PostgreSQLParserEXCLUSIVE-197))|(1<<(PostgreSQLParserEXEC-197))|(1<<(PostgreSQLParserEXECUTE-197))|(1<<(PostgreSQLParserEXISTS-197))|(1<<(PostgreSQLParserEXP-197))|(1<<(PostgreSQLParserEXPLAIN-197))|(1<<(PostgreSQLParserEXTENSION-197))|(1<<(PostgreSQLParserEXTERNAL-197))|(1<<(PostgreSQLParserEXTRACT-197))|(1<<(PostgreSQLParserFALSE-197))|(1<<(PostgreSQLParserFILTER-197))|(1<<(PostgreSQLParserFINAL-197))|(1<<(PostgreSQLParserFIRST-197))|(1<<(PostgreSQLParserFLOAT-197))|(1<<(PostgreSQLParserFLOOR-197))|(1<<(PostgreSQLParserFOLLOWING-197)))) != 0) || (((_la-229)&-(0x1f+1)) == 0 && ((1<<uint((_la-229)))&((1<<(PostgreSQLParserFORCE-229))|(1<<(PostgreSQLParserFORMAT-229))|(1<<(PostgreSQLParserFORTRAN-229))|(1<<(PostgreSQLParserFORWARD-229))|(1<<(PostgreSQLParserFOUND-229))|(1<<(PostgreSQLParserFREE-229))|(1<<(PostgreSQLParserFUNCTION-229))|(1<<(PostgreSQLParserFUSION-229))|(1<<(PostgreSQLParserG_-229))|(1<<(PostgreSQLParserGENERAL-229))|(1<<(PostgreSQLParserGENERATED-229))|(1<<(PostgreSQLParserGET-229))|(1<<(PostgreSQLParserGLOBAL-229))|(1<<(PostgreSQLParserGO-229))|(1<<(PostgreSQLParserGOTO-229))|(1<<(PostgreSQLParserGRANTED-229))|(1<<(PostgreSQLParserGREATEST-229))|(1<<(PostgreSQLParserGROUPING-229))|(1<<(PostgreSQLParserHANDLER-229))|(1<<(PostgreSQLParserHIERARCHY-229))|(1<<(PostgreSQLParserHOLD-229))|(1<<(PostgreSQLParserHOST-229))|(1<<(PostgreSQLParserHOUR-229))|(1<<(PostgreSQLParserIDENTITY-229))|(1<<(PostgreSQLParserIGNORE-229)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(PostgreSQLParserIMMEDIATE-262))|(1<<(PostgreSQLParserIMMUTABLE-262))|(1<<(PostgreSQLParserIMPLEMENTATION-262))|(1<<(PostgreSQLParserIMPLICIT-262))|(1<<(PostgreSQLParserINCLUDING-262))|(1<<(PostgreSQLParserINCREMENT-262))|(1<<(PostgreSQLParserINDEX-262))|(1<<(PostgreSQLParserINDICATOR-262))|(1<<(PostgreSQLParserINHERITS-262))|(1<<(PostgreSQLParserINOUT-262))|(1<<(PostgreSQLParserINPUT-262))|(1<<(PostgreSQLParserINSENSITIVE-262))|(1<<(PostgreSQLParserINSERT-262))|(1<<(PostgreSQLParserINSTANCE-262))|(1<<(PostgreSQLParserINSTANTIABLE-262))|(1<<(PostgreSQLParserINSTEAD-262))|(1<<(PostgreSQLParserINT-262))|(1<<(PostgreSQLParserINTEGER-262))|(1<<(PostgreSQLParserINTERSECTION-262))|(1<<(PostgreSQLParserINTERVAL-262))|(1<<(PostgreSQLParserINVOKER-262))|(1<<(PostgreSQLParserISOLATION-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(PostgreSQLParserK_-294))|(1<<(PostgreSQLParserKEY-294))|(1<<(PostgreSQLParserKEY_MEMBER-294))|(1<<(PostgreSQLParserKEY_TYPE-294))|(1<<(PostgreSQLParserLANGUAGE-294))|(1<<(PostgreSQLParserLARGE-294))|(1<<(PostgreSQLParserLAST-294))|(1<<(PostgreSQLParserLEAST-294))|(1<<(PostgreSQLParserLEFT-294))|(1<<(PostgreSQLParserLENGTH-294))|(1<<(PostgreSQLParserLEVEL-294))|(1<<(PostgreSQLParserLISTEN-294))|(1<<(PostgreSQLParserLN-294))|(1<<(PostgreSQLParserLOAD-294))|(1<<(PostgreSQLParserLOCAL-294))|(1<<(PostgreSQLParserLOCATION-294))|(1<<(PostgreSQLParserLOCATOR-294))|(1<<(PostgreSQLParserLOCK-294))|(1<<(PostgreSQLParserLOCKED-294))|(1<<(PostgreSQLParserLOWER-294))|(1<<(PostgreSQLParserM_-294))|(1<<(PostgreSQLParserMAP-294)))) != 0) || (((_la-327)&-(0x1f+1)) == 0 && ((1<<uint((_la-327)))&((1<<(PostgreSQLParserMATCH-327))|(1<<(PostgreSQLParserMATCHED-327))|(1<<(PostgreSQLParserMAX-327))|(1<<(PostgreSQLParserMAXVALUE-327))|(1<<(PostgreSQLParserMEMBER-327))|(1<<(PostgreSQLParserMERGE-327))|(1<<(PostgreSQLParserMESSAGE_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_OCTET_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_TEXT-327))|(1<<(PostgreSQLParserMETHOD-327))|(1<<(PostgreSQLParserMIN-327))|(1<<(PostgreSQLParserMINUTE-327))|(1<<(PostgreSQLParserMINVALUE-327))|(1<<(PostgreSQLParserMOD-327))|(1<<(PostgreSQLParserMODE-327))|(1<<(PostgreSQLParserMODIFIES-327))|(1<<(PostgreSQLParserMODULE-327))|(1<<(PostgreSQLParserMONTH-327))|(1<<(PostgreSQLParserMORE_-327))|(1<<(PostgreSQLParserMOVE-327))|(1<<(PostgreSQLParserMULTISET-327))|(1<<(PostgreSQLParserMUMPS-327))|(1<<(PostgreSQLParserNAME-327))|(1<<(PostgreSQLParserNAMES-327))|(1<<(PostgreSQLParserNATIONAL-327))|(1<<(PostgreSQLParserNCHAR-327))|(1<<(PostgreSQLParserNCLOB-327))|(1<<(PostgreSQLParserNESTING-327))|(1<<(PostgreSQLParserNEW-327)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(PostgreSQLParserNEXT-359))|(1<<(PostgreSQLParserNO-359))|(1<<(PostgreSQLParserNONE-359))|(1<<(PostgreSQLParserNORMALIZE-359))|(1<<(PostgreSQLParserNORMALIZED-359))|(1<<(PostgreSQLParserNOTHING-359))|(1<<(PostgreSQLParserNOTIFY-359))|(1<<(PostgreSQLParserNOWAIT-359))|(1<<(PostgreSQLParserNULLABLE-359))|(1<<(PostgreSQLParserNULLIF-359))|(1<<(PostgreSQLParserNULLS-359))|(1<<(PostgreSQLParserNUMBER-359))|(1<<(PostgreSQLParserNUMERIC-359))|(1<<(PostgreSQLParserOBJECT-359))|(1<<(PostgreSQLParserOCTET_LENGTH-359))|(1<<(PostgreSQLParserOCTETS-359))|(1<<(PostgreSQLParserOF-359))|(1<<(PostgreSQLParserOFF-359))|(1<<(PostgreSQLParserOIDS-359))|(1<<(PostgreSQLParserOLD-359))|(1<<(PostgreSQLParserON-359))|(1<<(PostgreSQLParserOPEN-359))|(1<<(PostgreSQLParserOPERATOR-359))|(1<<(PostgreSQLParserOPTION-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(PostgreSQLParserOPTIONS-391))|(1<<(PostgreSQLParserORDERING-391))|(1<<(PostgreSQLParserORDINALITY-391))|(1<<(PostgreSQLParserOTHERS-391))|(1<<(PostgreSQLParserOUT-391))|(1<<(PostgreSQLParserOUTPUT-391))|(1<<(PostgreSQLParserOVER-391))|(1<<(PostgreSQLParserOVERLAY-391))|(1<<(PostgreSQLParserOVERRIDING-391))|(1<<(PostgreSQLParserOWNER-391))|(1<<(PostgreSQLParserPAD-391))|(1<<(PostgreSQLParserPARAMETER-391))|(1<<(PostgreSQLParserPARAMETER_MODE-391))|(1<<(PostgreSQLParserPARAMETER_NAME-391))|(1<<(PostgreSQLParserPARAMETER_ORDINAL_POSITION-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_CATALOG-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_NAME-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA-391))|(1<<(PostgreSQLParserPARTIAL-391))|(1<<(PostgreSQLParserPARTITION-391))|(1<<(PostgreSQLParserPASCAL-391))|(1<<(PostgreSQLParserPASSWORD-391))|(1<<(PostgreSQLParserPATH-391))|(1<<(PostgreSQLParserPERCENT_RANK-391))|(1<<(PostgreSQLParserPERCENTILE_CONT-391))|(1<<(PostgreSQLParserPERCENTILE_DISC-391)))) != 0) || (((_la-424)&-(0x1f+1)) == 0 && ((1<<uint((_la-424)))&((1<<(PostgreSQLParserPLAIN-424))|(1<<(PostgreSQLParserPLI-424))|(1<<(PostgreSQLParserPOSITION-424))|(1<<(PostgreSQLParserPOWER-424))|(1<<(PostgreSQLParserPRECEDING-424))|(1<<(PostgreSQLParserPRECISION-424))|(1<<(PostgreSQLParserPREPARE-424))|(1<<(PostgreSQLParserPRESERVE-424))|(1<<(PostgreSQLParserPRIOR-424))|(1<<(PostgreSQLParserPRIVILEGES-424))|(1<<(PostgreSQLParserPROCEDURAL-424))|(1<<(PostgreSQLParserPROCEDURE-424))|(1<<(PostgreSQLParserPUBLIC-424))|(1<<(PostgreSQLParserQUOTE-424))|(1<<(PostgreSQLParserRANGE-424))|(1<<(PostgreSQLParserRANK-424))|(1<<(PostgreSQLParserREAD-424))|(1<<(PostgreSQLParserREADS-424))|(1<<(PostgreSQLParserREAL-424))|(1<<(PostgreSQLParserRECHECK-424))|(1<<(PostgreSQLParserRECURSIVE-424))|(1<<(PostgreSQLParserREF-424))|(1<<(PostgreSQLParserREFERENCING-424)))) != 0) || (((_la-456)&-(0x1f+1)) == 0 && ((1<<uint((_la-456)))&((1<<(PostgreSQLParserREFRESH-456))|(1<<(PostgreSQLParserREGR_AVGX-456))|(1<<(PostgreSQLParserREGR_AVGY-456))|(1<<(PostgreSQLParserREGR_COUNT-456))|(1<<(PostgreSQLParserREGR_INTERCEPT-456))|(1<<(PostgreSQLParserREGR_SLOPE-456))|(1<<(PostgreSQLParserREGR_SXX-456))|(1<<(PostgreSQLParserREGR_SXY-456))|(1<<(PostgreSQLParserREGR_SYY-456))|(1<<(PostgreSQLParserREINDEX-456))|(1<<(PostgreSQLParserRELATIVE-456))|(1<<(PostgreSQLParserRELEASE-456))|(1<<(PostgreSQLParserRENAME-456))|(1<<(PostgreSQLParserREPEATABLE-456))|(1<<(PostgreSQLParserREPLACE-456))|(1<<(PostgreSQLParserRESET-456))|(1<<(PostgreSQLParserRESTART-456))|(1<<(PostgreSQLParserRESTRICT-456))|(1<<(PostgreSQLParserRESULT-456))|(1<<(PostgreSQLParserRETURN-456))|(1<<(PostgreSQLParserRETURNED_CARDINALITY-456))|(1<<(PostgreSQLParserRETURNED_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_OCTET_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_SQLSTATE-456))|(1<<(PostgreSQLParserRETURNS-456))|(1<<(PostgreSQLParserREVOKE-456))|(1<<(PostgreSQLParserRIGHT-456))|(1<<(PostgreSQLParserROLE-456))|(1<<(PostgreSQLParserROLLBACK-456)))) != 0) || (((_la-488)&-(0x1f+1)) == 0 && ((1<<uint((_la-488)))&((1<<(PostgreSQLParserROLLUP-488))|(1<<(PostgreSQLParserROUTINE-488))|(1<<(PostgreSQLParserROUTINE_CATALOG-488))|(1<<(PostgreSQLParserROUTINE_NAME-488))|(1<<(PostgreSQLParserROUTINE_SCHEMA-488))|(1<<(PostgreSQLParserROW-488))|(1<<(PostgreSQLParserROW_COUNT-488))|(1<<(PostgreSQLParserROW_NUMBER-488))|(1<<(PostgreSQLParserROWS-488))|(1<<(PostgreSQLParserRULE-488))|(1<<(PostgreSQLParserSAVEPOINT-488))|(1<<(PostgreSQLParserSCALE-488))|(1<<(PostgreSQLParserSCHEMA-488))|(1<<(PostgreSQLParserSCHEMA_NAME-488))|(1<<(PostgreSQLParserSCOPE-488))|(1<<(PostgreSQLParserSCOPE_CATALOG-488))|(1<<(PostgreSQLParserSCOPE_NAME-488))|(1<<(PostgreSQLParserSCOPE_SCHEMA-488))|(1<<(PostgreSQLParserSCROLL-488))|(1<<(PostgreSQLParserSEARCH-488))|(1<<(PostgreSQLParserSECOND-488))|(1<<(PostgreSQLParserSECTION-488))|(1<<(PostgreSQLParserSECURITY-488))|(1<<(PostgreSQLParserSELF-488))|(1<<(PostgreSQLParserSENSITIVE-488))|(1<<(PostgreSQLParserSEQUENCE-488))|(1<<(PostgreSQLParserSEQUENCES-488))|(1<<(PostgreSQLParserSERIALIZABLE-488))|(1<<(PostgreSQLParserSERVER_NAME-488))|(1<<(PostgreSQLParserSESSION-488)))) != 0) || (((_la-520)&-(0x1f+1)) == 0 && ((1<<uint((_la-520)))&((1<<(PostgreSQLParserSET-520))|(1<<(PostgreSQLParserSETOF-520))|(1<<(PostgreSQLParserSETS-520))|(1<<(PostgreSQLParserSHARE-520))|(1<<(PostgreSQLParserSHOW-520))|(1<<(PostgreSQLParserSIMPLE-520))|(1<<(PostgreSQLParserSIZE-520))|(1<<(PostgreSQLParserSMALLINT-520))|(1<<(PostgreSQLParserSOME-520))|(1<<(PostgreSQLParserSOURCE-520))|(1<<(PostgreSQLParserSPACE-520))|(1<<(PostgreSQLParserSPECIFIC-520))|(1<<(PostgreSQLParserSPECIFIC_NAME-520))|(1<<(PostgreSQLParserSPECIFICTYPE-520))|(1<<(PostgreSQLParserSQL-520))|(1<<(PostgreSQLParserSQLCODE-520))|(1<<(PostgreSQLParserSQLERROR-520))|(1<<(PostgreSQLParserSQLEXCEPTION-520))|(1<<(PostgreSQLParserSQLSTATE-520))|(1<<(PostgreSQLParserSQLWARNING-520))|(1<<(PostgreSQLParserSQRT-520))|(1<<(PostgreSQLParserSTABLE-520))|(1<<(PostgreSQLParserSTART-520))|(1<<(PostgreSQLParserSTATE-520))|(1<<(PostgreSQLParserSTATEMENT-520))|(1<<(PostgreSQLParserSTATIC-520))|(1<<(PostgreSQLParserSTATISTICS-520))|(1<<(PostgreSQLParserSTDDEV_POP-520))|(1<<(PostgreSQLParserSTDDEV_SAMP-520)))) != 0) || (((_la-552)&-(0x1f+1)) == 0 && ((1<<uint((_la-552)))&((1<<(PostgreSQLParserSTDIN-552))|(1<<(PostgreSQLParserSTDOUT-552))|(1<<(PostgreSQLParserSTORAGE-552))|(1<<(PostgreSQLParserSTRICT-552))|(1<<(PostgreSQLParserSTRUCTURE-552))|(1<<(PostgreSQLParserSTYLE-552))|(1<<(PostgreSQLParserSUBCLASS_ORIGIN-552))|(1<<(PostgreSQLParserSUBMULTISET-552))|(1<<(PostgreSQLParserSUBSTRING-552))|(1<<(PostgreSQLParserSUM-552))|(1<<(PostgreSQLParserSYSID-552))|(1<<(PostgreSQLParserSYSTEM-552))|(1<<(PostgreSQLParserSYSTEM_USER-552))|(1<<(PostgreSQLParserTABLE_NAME-552))|(1<<(PostgreSQLParserTABLESPACE-552))|(1<<(PostgreSQLParserTEMP-552))|(1<<(PostgreSQLParserTEMPLATE-552))|(1<<(PostgreSQLParserTEMPORARY-552))|(1<<(PostgreSQLParserTIES-552))|(1<<(PostgreSQLParserTIME-552))|(1<<(PostgreSQLParserTIMESTAMP-552))|(1<<(PostgreSQLParserTIMEZONE_HOUR-552))|(1<<(PostgreSQLParserTIMEZONE_MINUTE-552)))) != 0) || (((_la-586)&-(0x1f+1)) == 0 && ((1<<uint((_la-586)))&((1<<(PostgreSQLParserTOP_LEVEL_COUNT-586))|(1<<(PostgreSQLParserTRANSACTION-586))|(1<<(PostgreSQLParserTRANSACTION_ACTIVE-586))|(1<<(PostgreSQLParserTRANSACTIONS_COMMITTED-586))|(1<<(PostgreSQLParserTRANSACTIONS_ROLLED_BACK-586))|(1<<(PostgreSQLParserTRANSFORM-586))|(1<<(PostgreSQLParserTRANSFORMS-586))|(1<<(PostgreSQLParserTRANSLATE-586))|(1<<(PostgreSQLParserTRANSLATION-586))|(1<<(PostgreSQLParserTREAT-586))|(1<<(PostgreSQLParserTRIGGER-586))|(1<<(PostgreSQLParserTRIGGER_CATALOG-586))|(1<<(PostgreSQLParserTRIGGER_NAME-586))|(1<<(PostgreSQLParserTRIGGER_SCHEMA-586))|(1<<(PostgreSQLParserTRIM-586))|(1<<(PostgreSQLParserTRUE-586))|(1<<(PostgreSQLParserTRUNCATE-586))|(1<<(PostgreSQLParserTRUSTED-586))|(1<<(PostgreSQLParserTYPE-586))|(1<<(PostgreSQLParserUESCAPE-586))|(1<<(PostgreSQLParserUNBOUNDED-586))|(1<<(PostgreSQLParserUNCOMMITTED-586))|(1<<(PostgreSQLParserUNDER-586))|(1<<(PostgreSQLParserUNENCRYPTED-586))|(1<<(PostgreSQLParserUNKNOWN-586))|(1<<(PostgreSQLParserUNLISTEN-586))|(1<<(PostgreSQLParserUNNAMED-586))|(1<<(PostgreSQLParserUNNEST-586))|(1<<(PostgreSQLParserUNTIL-586)))) != 0) || (((_la-618)&-(0x1f+1)) == 0 && ((1<<uint((_la-618)))&((1<<(PostgreSQLParserUPDATE-618))|(1<<(PostgreSQLParserUPPER-618))|(1<<(PostgreSQLParserUSAGE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CATALOG-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CODE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_NAME-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA-618))|(1<<(PostgreSQLParserVACUUM-618))|(1<<(PostgreSQLParserVALID-618))|(1<<(PostgreSQLParserVALIDATOR-618))|(1<<(PostgreSQLParserVALUE-618))|(1<<(PostgreSQLParserVALUES-618))|(1<<(PostgreSQLParserVAR_POP-618))|(1<<(PostgreSQLParserVAR_SAMP-618))|(1<<(PostgreSQLParserVARCHAR-618))|(1<<(PostgreSQLParserVARYING-618))|(1<<(PostgreSQLParserVIEW-618))|(1<<(PostgreSQLParserVOLATILE-618))|(1<<(PostgreSQLParserWHENEVER-618))|(1<<(PostgreSQLParserWIDTH_BUCKET-618))|(1<<(PostgreSQLParserWITHIN-618))|(1<<(PostgreSQLParserWITHOUT-618)))) != 0) || (((_la-650)&-(0x1f+1)) == 0 && ((1<<uint((_la-650)))&((1<<(PostgreSQLParserWORK-650))|(1<<(PostgreSQLParserWRITE-650))|(1<<(PostgreSQLParserYEAR-650))|(1<<(PostgreSQLParserYES-650))|(1<<(PostgreSQLParserZONE-650)))) != 0) || (((_la-720)&-(0x1f+1)) == 0 && ((1<<uint((_la-720)))&((1<<(PostgreSQLParserABSTIME-720))|(1<<(PostgreSQLParserBIGSERIAL-720))|(1<<(PostgreSQLParserBIT_VARYING-720))|(1<<(PostgreSQLParserBOOL-720))|(1<<(PostgreSQLParserBOX-720))|(1<<(PostgreSQLParserBYTEA-720))|(1<<(PostgreSQLParserCHARACTER_VARYING-720))|(1<<(PostgreSQLParserCIDR-720))|(1<<(PostgreSQLParserCIRCLE-720))|(1<<(PostgreSQLParserFLOAT4-720))|(1<<(PostgreSQLParserFLOAT8-720))|(1<<(PostgreSQLParserINET-720))|(1<<(PostgreSQLParserINT2-720))|(1<<(PostgreSQLParserINT4-720))|(1<<(PostgreSQLParserINT8-720))|(1<<(PostgreSQLParserJSON-720))|(1<<(PostgreSQLParserJSONB-720))|(1<<(PostgreSQLParserLINE-720))|(1<<(PostgreSQLParserLSEG-720))|(1<<(PostgreSQLParserMACADDR-720))|(1<<(PostgreSQLParserMACADDR8-720))|(1<<(PostgreSQLParserMONEY-720))|(1<<(PostgreSQLParserPG_LSN-720))|(1<<(PostgreSQLParserPOINT-720))|(1<<(PostgreSQLParserPOLYGON-720))|(1<<(PostgreSQLParserRELTIME-720))|(1<<(PostgreSQLParserSERIAL-720))|(1<<(PostgreSQLParserSERIAL2-720))|(1<<(PostgreSQLParserSERIAL4-720))|(1<<(PostgreSQLParserSERIAL8-720))|(1<<(PostgreSQLParserSMALLSERIAL-720)))) != 0) || (((_la-752)&-(0x1f+1)) == 0 && ((1<<uint((_la-752)))&((1<<(PostgreSQLParserTEXT-752))|(1<<(PostgreSQLParserTIMESTAMPTZ-752))|(1<<(PostgreSQLParserTIMETZ-752))|(1<<(PostgreSQLParserTSQUERY-752))|(1<<(PostgreSQLParserTSVECTOR-752))|(1<<(PostgreSQLParserTXID_SNAPSHOT-752))|(1<<(PostgreSQLParserUUID-752))|(1<<(PostgreSQLParserVARBIT-752))|(1<<(PostgreSQLParserXML-752))|(1<<(PostgreSQLParserNUMERIC_LITERAL-752))|(1<<(PostgreSQLParserINTEGER_LITERAL-752))|(1<<(PostgreSQLParserSINGLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserDOUBLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserIDENTIFIER-752))|(1<<(PostgreSQLParserIDENTIFIER_UNICODE-752)))) != 0) {
		{
			p.SetState(1515)

			var _x = p.Param_value()

			localctx.(*Alter_server_options_listContext).value = _x
		}

	}

	p.SetState(1528)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(1518)
			p.Match(PostgreSQLParserCOMMA)
		}
		p.SetState(1520)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1519)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserADD || _la == PostgreSQLParserDROP || _la == PostgreSQLParserSET) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(1522)

			var _x = p.identifier(0)

			localctx.(*Alter_server_options_listContext).option = _x
		}
		p.SetState(1524)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PostgreSQLParserWHITESPACE)|(1<<PostgreSQLParserA_)|(1<<PostgreSQLParserABORT)|(1<<PostgreSQLParserABS)|(1<<PostgreSQLParserABSOLUTE)|(1<<PostgreSQLParserACCESS)|(1<<PostgreSQLParserACTION)|(1<<PostgreSQLParserADA)|(1<<PostgreSQLParserADD)|(1<<PostgreSQLParserADMIN)|(1<<PostgreSQLParserAFTER)|(1<<PostgreSQLParserAGGREGATE)|(1<<PostgreSQLParserALLOCATE)|(1<<PostgreSQLParserALSO)|(1<<PostgreSQLParserALTER)|(1<<PostgreSQLParserALWAYS)|(1<<PostgreSQLParserANY)|(1<<PostgreSQLParserARE)|(1<<PostgreSQLParserASENSITIVE)|(1<<PostgreSQLParserASSERTION)|(1<<PostgreSQLParserASSIGNMENT))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(PostgreSQLParserAT-33))|(1<<(PostgreSQLParserATOMIC-33))|(1<<(PostgreSQLParserATTRIBUTE-33))|(1<<(PostgreSQLParserATTRIBUTES-33))|(1<<(PostgreSQLParserAVG-33))|(1<<(PostgreSQLParserBACKWARD-33))|(1<<(PostgreSQLParserBEFORE-33))|(1<<(PostgreSQLParserBEGIN-33))|(1<<(PostgreSQLParserBERNOULLI-33))|(1<<(PostgreSQLParserBETWEEN-33))|(1<<(PostgreSQLParserBIGINT-33))|(1<<(PostgreSQLParserBIT-33))|(1<<(PostgreSQLParserBIT_LENGTH-33))|(1<<(PostgreSQLParserBLOB-33))|(1<<(PostgreSQLParserBOOLEAN-33))|(1<<(PostgreSQLParserBREADTH-33))|(1<<(PostgreSQLParserBY-33))|(1<<(PostgreSQLParserC_-33))|(1<<(PostgreSQLParserCACHE-33))|(1<<(PostgreSQLParserCALL-33))|(1<<(PostgreSQLParserCALLED-33))|(1<<(PostgreSQLParserCARDINALITY-33))|(1<<(PostgreSQLParserCASCADE-33))|(1<<(PostgreSQLParserCASCADED-33))|(1<<(PostgreSQLParserCATALOG-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PostgreSQLParserCATALOG_NAME-65))|(1<<(PostgreSQLParserCEIL-65))|(1<<(PostgreSQLParserCEILING-65))|(1<<(PostgreSQLParserCHAIN-65))|(1<<(PostgreSQLParserCHAR-65))|(1<<(PostgreSQLParserCHAR_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER-65))|(1<<(PostgreSQLParserCHARACTER_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER_SET_CATALOG-65))|(1<<(PostgreSQLParserCHARACTER_SET_NAME-65))|(1<<(PostgreSQLParserCHARACTER_SET_SCHEMA-65))|(1<<(PostgreSQLParserCHARACTERISTICS-65))|(1<<(PostgreSQLParserCHARACTERS-65))|(1<<(PostgreSQLParserCHECKPOINT-65))|(1<<(PostgreSQLParserCLASS-65))|(1<<(PostgreSQLParserCLASS_ORIGIN-65))|(1<<(PostgreSQLParserCLOB-65))|(1<<(PostgreSQLParserCLOSE-65))|(1<<(PostgreSQLParserCLUSTER-65))|(1<<(PostgreSQLParserCOALESCE-65))|(1<<(PostgreSQLParserCOBOL-65))|(1<<(PostgreSQLParserCOLLATION_CATALOG-65))|(1<<(PostgreSQLParserCOLLATION_NAME-65))|(1<<(PostgreSQLParserCOLLATION_SCHEMA-65))|(1<<(PostgreSQLParserCOLLECT-65))|(1<<(PostgreSQLParserCOLUMN_NAME-65))|(1<<(PostgreSQLParserCOMMAND_FUNCTION-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(PostgreSQLParserCOMMAND_FUNCTION_CODE-97))|(1<<(PostgreSQLParserCOMMENT-97))|(1<<(PostgreSQLParserCOMMIT-97))|(1<<(PostgreSQLParserCOMMITTED-97))|(1<<(PostgreSQLParserCONDITION-97))|(1<<(PostgreSQLParserCONDITION_NUMBER-97))|(1<<(PostgreSQLParserCONNECT-97))|(1<<(PostgreSQLParserCONNECTION-97))|(1<<(PostgreSQLParserCONNECTION_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_CATALOG-97))|(1<<(PostgreSQLParserCONSTRAINT_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_SCHEMA-97))|(1<<(PostgreSQLParserCONSTRAINTS-97))|(1<<(PostgreSQLParserCONSTRUCTOR-97))|(1<<(PostgreSQLParserCONTAINS-97))|(1<<(PostgreSQLParserCONTINUE-97))|(1<<(PostgreSQLParserCONVERSION-97))|(1<<(PostgreSQLParserCONVERT-97))|(1<<(PostgreSQLParserCOPY-97))|(1<<(PostgreSQLParserCORR-97))|(1<<(PostgreSQLParserCORRESPONDING-97))|(1<<(PostgreSQLParserCOUNT-97))|(1<<(PostgreSQLParserCOVAR_POP-97))|(1<<(PostgreSQLParserCOVAR_SAMP-97)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(PostgreSQLParserCSV-131))|(1<<(PostgreSQLParserCUBE-131))|(1<<(PostgreSQLParserCUME_DIST-131))|(1<<(PostgreSQLParserCURRENT-131))|(1<<(PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP-131))|(1<<(PostgreSQLParserCURRENT_PATH-131))|(1<<(PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE-131))|(1<<(PostgreSQLParserCURSOR-131))|(1<<(PostgreSQLParserCURSOR_NAME-131))|(1<<(PostgreSQLParserCYCLE-131))|(1<<(PostgreSQLParserDATA-131))|(1<<(PostgreSQLParserDATABASE-131))|(1<<(PostgreSQLParserDATE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_CODE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_PRECISION-131))|(1<<(PostgreSQLParserDAY-131))|(1<<(PostgreSQLParserDEALLOCATE-131))|(1<<(PostgreSQLParserDEC-131))|(1<<(PostgreSQLParserDECIMAL-131))|(1<<(PostgreSQLParserDECLARE-131))|(1<<(PostgreSQLParserDEFAULTS-131))|(1<<(PostgreSQLParserDEFERRED-131))|(1<<(PostgreSQLParserDEFINED-131))|(1<<(PostgreSQLParserDEFINER-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(PostgreSQLParserDEGREE-163))|(1<<(PostgreSQLParserDELETE-163))|(1<<(PostgreSQLParserDELIMITER-163))|(1<<(PostgreSQLParserDELIMITERS-163))|(1<<(PostgreSQLParserDENSE_RANK-163))|(1<<(PostgreSQLParserDEPTH-163))|(1<<(PostgreSQLParserDEREF-163))|(1<<(PostgreSQLParserDERIVED-163))|(1<<(PostgreSQLParserDESCRIBE-163))|(1<<(PostgreSQLParserDESCRIPTOR-163))|(1<<(PostgreSQLParserDETERMINISTIC-163))|(1<<(PostgreSQLParserDIAGNOSTICS-163))|(1<<(PostgreSQLParserDICTIONARY-163))|(1<<(PostgreSQLParserDISCONNECT-163))|(1<<(PostgreSQLParserDISPATCH-163))|(1<<(PostgreSQLParserDOMAIN-163))|(1<<(PostgreSQLParserDOUBLE-163))|(1<<(PostgreSQLParserDYNAMIC-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION_CODE-163))|(1<<(PostgreSQLParserEACH-163))|(1<<(PostgreSQLParserELEMENT-163)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(PostgreSQLParserENCODING-197))|(1<<(PostgreSQLParserENCRYPTED-197))|(1<<(PostgreSQLParserEND-197))|(1<<(PostgreSQLParserEQUALS-197))|(1<<(PostgreSQLParserESCAPE-197))|(1<<(PostgreSQLParserEVERY-197))|(1<<(PostgreSQLParserEXCEPTION-197))|(1<<(PostgreSQLParserEXCLUDE-197))|(1<<(PostgreSQLParserEXCLUDING-197))|(1<<(PostgreSQLParserEXCLUSIVE-197))|(1<<(PostgreSQLParserEXEC-197))|(1<<(PostgreSQLParserEXECUTE-197))|(1<<(PostgreSQLParserEXISTS-197))|(1<<(PostgreSQLParserEXP-197))|(1<<(PostgreSQLParserEXPLAIN-197))|(1<<(PostgreSQLParserEXTENSION-197))|(1<<(PostgreSQLParserEXTERNAL-197))|(1<<(PostgreSQLParserEXTRACT-197))|(1<<(PostgreSQLParserFALSE-197))|(1<<(PostgreSQLParserFILTER-197))|(1<<(PostgreSQLParserFINAL-197))|(1<<(PostgreSQLParserFIRST-197))|(1<<(PostgreSQLParserFLOAT-197))|(1<<(PostgreSQLParserFLOOR-197))|(1<<(PostgreSQLParserFOLLOWING-197)))) != 0) || (((_la-229)&-(0x1f+1)) == 0 && ((1<<uint((_la-229)))&((1<<(PostgreSQLParserFORCE-229))|(1<<(PostgreSQLParserFORMAT-229))|(1<<(PostgreSQLParserFORTRAN-229))|(1<<(PostgreSQLParserFORWARD-229))|(1<<(PostgreSQLParserFOUND-229))|(1<<(PostgreSQLParserFREE-229))|(1<<(PostgreSQLParserFUNCTION-229))|(1<<(PostgreSQLParserFUSION-229))|(1<<(PostgreSQLParserG_-229))|(1<<(PostgreSQLParserGENERAL-229))|(1<<(PostgreSQLParserGENERATED-229))|(1<<(PostgreSQLParserGET-229))|(1<<(PostgreSQLParserGLOBAL-229))|(1<<(PostgreSQLParserGO-229))|(1<<(PostgreSQLParserGOTO-229))|(1<<(PostgreSQLParserGRANTED-229))|(1<<(PostgreSQLParserGREATEST-229))|(1<<(PostgreSQLParserGROUPING-229))|(1<<(PostgreSQLParserHANDLER-229))|(1<<(PostgreSQLParserHIERARCHY-229))|(1<<(PostgreSQLParserHOLD-229))|(1<<(PostgreSQLParserHOST-229))|(1<<(PostgreSQLParserHOUR-229))|(1<<(PostgreSQLParserIDENTITY-229))|(1<<(PostgreSQLParserIGNORE-229)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(PostgreSQLParserIMMEDIATE-262))|(1<<(PostgreSQLParserIMMUTABLE-262))|(1<<(PostgreSQLParserIMPLEMENTATION-262))|(1<<(PostgreSQLParserIMPLICIT-262))|(1<<(PostgreSQLParserINCLUDING-262))|(1<<(PostgreSQLParserINCREMENT-262))|(1<<(PostgreSQLParserINDEX-262))|(1<<(PostgreSQLParserINDICATOR-262))|(1<<(PostgreSQLParserINHERITS-262))|(1<<(PostgreSQLParserINOUT-262))|(1<<(PostgreSQLParserINPUT-262))|(1<<(PostgreSQLParserINSENSITIVE-262))|(1<<(PostgreSQLParserINSERT-262))|(1<<(PostgreSQLParserINSTANCE-262))|(1<<(PostgreSQLParserINSTANTIABLE-262))|(1<<(PostgreSQLParserINSTEAD-262))|(1<<(PostgreSQLParserINT-262))|(1<<(PostgreSQLParserINTEGER-262))|(1<<(PostgreSQLParserINTERSECTION-262))|(1<<(PostgreSQLParserINTERVAL-262))|(1<<(PostgreSQLParserINVOKER-262))|(1<<(PostgreSQLParserISOLATION-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(PostgreSQLParserK_-294))|(1<<(PostgreSQLParserKEY-294))|(1<<(PostgreSQLParserKEY_MEMBER-294))|(1<<(PostgreSQLParserKEY_TYPE-294))|(1<<(PostgreSQLParserLANGUAGE-294))|(1<<(PostgreSQLParserLARGE-294))|(1<<(PostgreSQLParserLAST-294))|(1<<(PostgreSQLParserLEAST-294))|(1<<(PostgreSQLParserLEFT-294))|(1<<(PostgreSQLParserLENGTH-294))|(1<<(PostgreSQLParserLEVEL-294))|(1<<(PostgreSQLParserLISTEN-294))|(1<<(PostgreSQLParserLN-294))|(1<<(PostgreSQLParserLOAD-294))|(1<<(PostgreSQLParserLOCAL-294))|(1<<(PostgreSQLParserLOCATION-294))|(1<<(PostgreSQLParserLOCATOR-294))|(1<<(PostgreSQLParserLOCK-294))|(1<<(PostgreSQLParserLOCKED-294))|(1<<(PostgreSQLParserLOWER-294))|(1<<(PostgreSQLParserM_-294))|(1<<(PostgreSQLParserMAP-294)))) != 0) || (((_la-327)&-(0x1f+1)) == 0 && ((1<<uint((_la-327)))&((1<<(PostgreSQLParserMATCH-327))|(1<<(PostgreSQLParserMATCHED-327))|(1<<(PostgreSQLParserMAX-327))|(1<<(PostgreSQLParserMAXVALUE-327))|(1<<(PostgreSQLParserMEMBER-327))|(1<<(PostgreSQLParserMERGE-327))|(1<<(PostgreSQLParserMESSAGE_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_OCTET_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_TEXT-327))|(1<<(PostgreSQLParserMETHOD-327))|(1<<(PostgreSQLParserMIN-327))|(1<<(PostgreSQLParserMINUTE-327))|(1<<(PostgreSQLParserMINVALUE-327))|(1<<(PostgreSQLParserMOD-327))|(1<<(PostgreSQLParserMODE-327))|(1<<(PostgreSQLParserMODIFIES-327))|(1<<(PostgreSQLParserMODULE-327))|(1<<(PostgreSQLParserMONTH-327))|(1<<(PostgreSQLParserMORE_-327))|(1<<(PostgreSQLParserMOVE-327))|(1<<(PostgreSQLParserMULTISET-327))|(1<<(PostgreSQLParserMUMPS-327))|(1<<(PostgreSQLParserNAME-327))|(1<<(PostgreSQLParserNAMES-327))|(1<<(PostgreSQLParserNATIONAL-327))|(1<<(PostgreSQLParserNCHAR-327))|(1<<(PostgreSQLParserNCLOB-327))|(1<<(PostgreSQLParserNESTING-327))|(1<<(PostgreSQLParserNEW-327)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(PostgreSQLParserNEXT-359))|(1<<(PostgreSQLParserNO-359))|(1<<(PostgreSQLParserNONE-359))|(1<<(PostgreSQLParserNORMALIZE-359))|(1<<(PostgreSQLParserNORMALIZED-359))|(1<<(PostgreSQLParserNOTHING-359))|(1<<(PostgreSQLParserNOTIFY-359))|(1<<(PostgreSQLParserNOWAIT-359))|(1<<(PostgreSQLParserNULLABLE-359))|(1<<(PostgreSQLParserNULLIF-359))|(1<<(PostgreSQLParserNULLS-359))|(1<<(PostgreSQLParserNUMBER-359))|(1<<(PostgreSQLParserNUMERIC-359))|(1<<(PostgreSQLParserOBJECT-359))|(1<<(PostgreSQLParserOCTET_LENGTH-359))|(1<<(PostgreSQLParserOCTETS-359))|(1<<(PostgreSQLParserOF-359))|(1<<(PostgreSQLParserOFF-359))|(1<<(PostgreSQLParserOIDS-359))|(1<<(PostgreSQLParserOLD-359))|(1<<(PostgreSQLParserON-359))|(1<<(PostgreSQLParserOPEN-359))|(1<<(PostgreSQLParserOPERATOR-359))|(1<<(PostgreSQLParserOPTION-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(PostgreSQLParserOPTIONS-391))|(1<<(PostgreSQLParserORDERING-391))|(1<<(PostgreSQLParserORDINALITY-391))|(1<<(PostgreSQLParserOTHERS-391))|(1<<(PostgreSQLParserOUT-391))|(1<<(PostgreSQLParserOUTPUT-391))|(1<<(PostgreSQLParserOVER-391))|(1<<(PostgreSQLParserOVERLAY-391))|(1<<(PostgreSQLParserOVERRIDING-391))|(1<<(PostgreSQLParserOWNER-391))|(1<<(PostgreSQLParserPAD-391))|(1<<(PostgreSQLParserPARAMETER-391))|(1<<(PostgreSQLParserPARAMETER_MODE-391))|(1<<(PostgreSQLParserPARAMETER_NAME-391))|(1<<(PostgreSQLParserPARAMETER_ORDINAL_POSITION-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_CATALOG-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_NAME-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA-391))|(1<<(PostgreSQLParserPARTIAL-391))|(1<<(PostgreSQLParserPARTITION-391))|(1<<(PostgreSQLParserPASCAL-391))|(1<<(PostgreSQLParserPASSWORD-391))|(1<<(PostgreSQLParserPATH-391))|(1<<(PostgreSQLParserPERCENT_RANK-391))|(1<<(PostgreSQLParserPERCENTILE_CONT-391))|(1<<(PostgreSQLParserPERCENTILE_DISC-391)))) != 0) || (((_la-424)&-(0x1f+1)) == 0 && ((1<<uint((_la-424)))&((1<<(PostgreSQLParserPLAIN-424))|(1<<(PostgreSQLParserPLI-424))|(1<<(PostgreSQLParserPOSITION-424))|(1<<(PostgreSQLParserPOWER-424))|(1<<(PostgreSQLParserPRECEDING-424))|(1<<(PostgreSQLParserPRECISION-424))|(1<<(PostgreSQLParserPREPARE-424))|(1<<(PostgreSQLParserPRESERVE-424))|(1<<(PostgreSQLParserPRIOR-424))|(1<<(PostgreSQLParserPRIVILEGES-424))|(1<<(PostgreSQLParserPROCEDURAL-424))|(1<<(PostgreSQLParserPROCEDURE-424))|(1<<(PostgreSQLParserPUBLIC-424))|(1<<(PostgreSQLParserQUOTE-424))|(1<<(PostgreSQLParserRANGE-424))|(1<<(PostgreSQLParserRANK-424))|(1<<(PostgreSQLParserREAD-424))|(1<<(PostgreSQLParserREADS-424))|(1<<(PostgreSQLParserREAL-424))|(1<<(PostgreSQLParserRECHECK-424))|(1<<(PostgreSQLParserRECURSIVE-424))|(1<<(PostgreSQLParserREF-424))|(1<<(PostgreSQLParserREFERENCING-424)))) != 0) || (((_la-456)&-(0x1f+1)) == 0 && ((1<<uint((_la-456)))&((1<<(PostgreSQLParserREFRESH-456))|(1<<(PostgreSQLParserREGR_AVGX-456))|(1<<(PostgreSQLParserREGR_AVGY-456))|(1<<(PostgreSQLParserREGR_COUNT-456))|(1<<(PostgreSQLParserREGR_INTERCEPT-456))|(1<<(PostgreSQLParserREGR_SLOPE-456))|(1<<(PostgreSQLParserREGR_SXX-456))|(1<<(PostgreSQLParserREGR_SXY-456))|(1<<(PostgreSQLParserREGR_SYY-456))|(1<<(PostgreSQLParserREINDEX-456))|(1<<(PostgreSQLParserRELATIVE-456))|(1<<(PostgreSQLParserRELEASE-456))|(1<<(PostgreSQLParserRENAME-456))|(1<<(PostgreSQLParserREPEATABLE-456))|(1<<(PostgreSQLParserREPLACE-456))|(1<<(PostgreSQLParserRESET-456))|(1<<(PostgreSQLParserRESTART-456))|(1<<(PostgreSQLParserRESTRICT-456))|(1<<(PostgreSQLParserRESULT-456))|(1<<(PostgreSQLParserRETURN-456))|(1<<(PostgreSQLParserRETURNED_CARDINALITY-456))|(1<<(PostgreSQLParserRETURNED_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_OCTET_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_SQLSTATE-456))|(1<<(PostgreSQLParserRETURNS-456))|(1<<(PostgreSQLParserREVOKE-456))|(1<<(PostgreSQLParserRIGHT-456))|(1<<(PostgreSQLParserROLE-456))|(1<<(PostgreSQLParserROLLBACK-456)))) != 0) || (((_la-488)&-(0x1f+1)) == 0 && ((1<<uint((_la-488)))&((1<<(PostgreSQLParserROLLUP-488))|(1<<(PostgreSQLParserROUTINE-488))|(1<<(PostgreSQLParserROUTINE_CATALOG-488))|(1<<(PostgreSQLParserROUTINE_NAME-488))|(1<<(PostgreSQLParserROUTINE_SCHEMA-488))|(1<<(PostgreSQLParserROW-488))|(1<<(PostgreSQLParserROW_COUNT-488))|(1<<(PostgreSQLParserROW_NUMBER-488))|(1<<(PostgreSQLParserROWS-488))|(1<<(PostgreSQLParserRULE-488))|(1<<(PostgreSQLParserSAVEPOINT-488))|(1<<(PostgreSQLParserSCALE-488))|(1<<(PostgreSQLParserSCHEMA-488))|(1<<(PostgreSQLParserSCHEMA_NAME-488))|(1<<(PostgreSQLParserSCOPE-488))|(1<<(PostgreSQLParserSCOPE_CATALOG-488))|(1<<(PostgreSQLParserSCOPE_NAME-488))|(1<<(PostgreSQLParserSCOPE_SCHEMA-488))|(1<<(PostgreSQLParserSCROLL-488))|(1<<(PostgreSQLParserSEARCH-488))|(1<<(PostgreSQLParserSECOND-488))|(1<<(PostgreSQLParserSECTION-488))|(1<<(PostgreSQLParserSECURITY-488))|(1<<(PostgreSQLParserSELF-488))|(1<<(PostgreSQLParserSENSITIVE-488))|(1<<(PostgreSQLParserSEQUENCE-488))|(1<<(PostgreSQLParserSEQUENCES-488))|(1<<(PostgreSQLParserSERIALIZABLE-488))|(1<<(PostgreSQLParserSERVER_NAME-488))|(1<<(PostgreSQLParserSESSION-488)))) != 0) || (((_la-520)&-(0x1f+1)) == 0 && ((1<<uint((_la-520)))&((1<<(PostgreSQLParserSET-520))|(1<<(PostgreSQLParserSETOF-520))|(1<<(PostgreSQLParserSETS-520))|(1<<(PostgreSQLParserSHARE-520))|(1<<(PostgreSQLParserSHOW-520))|(1<<(PostgreSQLParserSIMPLE-520))|(1<<(PostgreSQLParserSIZE-520))|(1<<(PostgreSQLParserSMALLINT-520))|(1<<(PostgreSQLParserSOME-520))|(1<<(PostgreSQLParserSOURCE-520))|(1<<(PostgreSQLParserSPACE-520))|(1<<(PostgreSQLParserSPECIFIC-520))|(1<<(PostgreSQLParserSPECIFIC_NAME-520))|(1<<(PostgreSQLParserSPECIFICTYPE-520))|(1<<(PostgreSQLParserSQL-520))|(1<<(PostgreSQLParserSQLCODE-520))|(1<<(PostgreSQLParserSQLERROR-520))|(1<<(PostgreSQLParserSQLEXCEPTION-520))|(1<<(PostgreSQLParserSQLSTATE-520))|(1<<(PostgreSQLParserSQLWARNING-520))|(1<<(PostgreSQLParserSQRT-520))|(1<<(PostgreSQLParserSTABLE-520))|(1<<(PostgreSQLParserSTART-520))|(1<<(PostgreSQLParserSTATE-520))|(1<<(PostgreSQLParserSTATEMENT-520))|(1<<(PostgreSQLParserSTATIC-520))|(1<<(PostgreSQLParserSTATISTICS-520))|(1<<(PostgreSQLParserSTDDEV_POP-520))|(1<<(PostgreSQLParserSTDDEV_SAMP-520)))) != 0) || (((_la-552)&-(0x1f+1)) == 0 && ((1<<uint((_la-552)))&((1<<(PostgreSQLParserSTDIN-552))|(1<<(PostgreSQLParserSTDOUT-552))|(1<<(PostgreSQLParserSTORAGE-552))|(1<<(PostgreSQLParserSTRICT-552))|(1<<(PostgreSQLParserSTRUCTURE-552))|(1<<(PostgreSQLParserSTYLE-552))|(1<<(PostgreSQLParserSUBCLASS_ORIGIN-552))|(1<<(PostgreSQLParserSUBMULTISET-552))|(1<<(PostgreSQLParserSUBSTRING-552))|(1<<(PostgreSQLParserSUM-552))|(1<<(PostgreSQLParserSYSID-552))|(1<<(PostgreSQLParserSYSTEM-552))|(1<<(PostgreSQLParserSYSTEM_USER-552))|(1<<(PostgreSQLParserTABLE_NAME-552))|(1<<(PostgreSQLParserTABLESPACE-552))|(1<<(PostgreSQLParserTEMP-552))|(1<<(PostgreSQLParserTEMPLATE-552))|(1<<(PostgreSQLParserTEMPORARY-552))|(1<<(PostgreSQLParserTIES-552))|(1<<(PostgreSQLParserTIME-552))|(1<<(PostgreSQLParserTIMESTAMP-552))|(1<<(PostgreSQLParserTIMEZONE_HOUR-552))|(1<<(PostgreSQLParserTIMEZONE_MINUTE-552)))) != 0) || (((_la-586)&-(0x1f+1)) == 0 && ((1<<uint((_la-586)))&((1<<(PostgreSQLParserTOP_LEVEL_COUNT-586))|(1<<(PostgreSQLParserTRANSACTION-586))|(1<<(PostgreSQLParserTRANSACTION_ACTIVE-586))|(1<<(PostgreSQLParserTRANSACTIONS_COMMITTED-586))|(1<<(PostgreSQLParserTRANSACTIONS_ROLLED_BACK-586))|(1<<(PostgreSQLParserTRANSFORM-586))|(1<<(PostgreSQLParserTRANSFORMS-586))|(1<<(PostgreSQLParserTRANSLATE-586))|(1<<(PostgreSQLParserTRANSLATION-586))|(1<<(PostgreSQLParserTREAT-586))|(1<<(PostgreSQLParserTRIGGER-586))|(1<<(PostgreSQLParserTRIGGER_CATALOG-586))|(1<<(PostgreSQLParserTRIGGER_NAME-586))|(1<<(PostgreSQLParserTRIGGER_SCHEMA-586))|(1<<(PostgreSQLParserTRIM-586))|(1<<(PostgreSQLParserTRUE-586))|(1<<(PostgreSQLParserTRUNCATE-586))|(1<<(PostgreSQLParserTRUSTED-586))|(1<<(PostgreSQLParserTYPE-586))|(1<<(PostgreSQLParserUESCAPE-586))|(1<<(PostgreSQLParserUNBOUNDED-586))|(1<<(PostgreSQLParserUNCOMMITTED-586))|(1<<(PostgreSQLParserUNDER-586))|(1<<(PostgreSQLParserUNENCRYPTED-586))|(1<<(PostgreSQLParserUNKNOWN-586))|(1<<(PostgreSQLParserUNLISTEN-586))|(1<<(PostgreSQLParserUNNAMED-586))|(1<<(PostgreSQLParserUNNEST-586))|(1<<(PostgreSQLParserUNTIL-586)))) != 0) || (((_la-618)&-(0x1f+1)) == 0 && ((1<<uint((_la-618)))&((1<<(PostgreSQLParserUPDATE-618))|(1<<(PostgreSQLParserUPPER-618))|(1<<(PostgreSQLParserUSAGE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CATALOG-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CODE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_NAME-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA-618))|(1<<(PostgreSQLParserVACUUM-618))|(1<<(PostgreSQLParserVALID-618))|(1<<(PostgreSQLParserVALIDATOR-618))|(1<<(PostgreSQLParserVALUE-618))|(1<<(PostgreSQLParserVALUES-618))|(1<<(PostgreSQLParserVAR_POP-618))|(1<<(PostgreSQLParserVAR_SAMP-618))|(1<<(PostgreSQLParserVARCHAR-618))|(1<<(PostgreSQLParserVARYING-618))|(1<<(PostgreSQLParserVIEW-618))|(1<<(PostgreSQLParserVOLATILE-618))|(1<<(PostgreSQLParserWHENEVER-618))|(1<<(PostgreSQLParserWIDTH_BUCKET-618))|(1<<(PostgreSQLParserWITHIN-618))|(1<<(PostgreSQLParserWITHOUT-618)))) != 0) || (((_la-650)&-(0x1f+1)) == 0 && ((1<<uint((_la-650)))&((1<<(PostgreSQLParserWORK-650))|(1<<(PostgreSQLParserWRITE-650))|(1<<(PostgreSQLParserYEAR-650))|(1<<(PostgreSQLParserYES-650))|(1<<(PostgreSQLParserZONE-650)))) != 0) || (((_la-720)&-(0x1f+1)) == 0 && ((1<<uint((_la-720)))&((1<<(PostgreSQLParserABSTIME-720))|(1<<(PostgreSQLParserBIGSERIAL-720))|(1<<(PostgreSQLParserBIT_VARYING-720))|(1<<(PostgreSQLParserBOOL-720))|(1<<(PostgreSQLParserBOX-720))|(1<<(PostgreSQLParserBYTEA-720))|(1<<(PostgreSQLParserCHARACTER_VARYING-720))|(1<<(PostgreSQLParserCIDR-720))|(1<<(PostgreSQLParserCIRCLE-720))|(1<<(PostgreSQLParserFLOAT4-720))|(1<<(PostgreSQLParserFLOAT8-720))|(1<<(PostgreSQLParserINET-720))|(1<<(PostgreSQLParserINT2-720))|(1<<(PostgreSQLParserINT4-720))|(1<<(PostgreSQLParserINT8-720))|(1<<(PostgreSQLParserJSON-720))|(1<<(PostgreSQLParserJSONB-720))|(1<<(PostgreSQLParserLINE-720))|(1<<(PostgreSQLParserLSEG-720))|(1<<(PostgreSQLParserMACADDR-720))|(1<<(PostgreSQLParserMACADDR8-720))|(1<<(PostgreSQLParserMONEY-720))|(1<<(PostgreSQLParserPG_LSN-720))|(1<<(PostgreSQLParserPOINT-720))|(1<<(PostgreSQLParserPOLYGON-720))|(1<<(PostgreSQLParserRELTIME-720))|(1<<(PostgreSQLParserSERIAL-720))|(1<<(PostgreSQLParserSERIAL2-720))|(1<<(PostgreSQLParserSERIAL4-720))|(1<<(PostgreSQLParserSERIAL8-720))|(1<<(PostgreSQLParserSMALLSERIAL-720)))) != 0) || (((_la-752)&-(0x1f+1)) == 0 && ((1<<uint((_la-752)))&((1<<(PostgreSQLParserTEXT-752))|(1<<(PostgreSQLParserTIMESTAMPTZ-752))|(1<<(PostgreSQLParserTIMETZ-752))|(1<<(PostgreSQLParserTSQUERY-752))|(1<<(PostgreSQLParserTSVECTOR-752))|(1<<(PostgreSQLParserTXID_SNAPSHOT-752))|(1<<(PostgreSQLParserUUID-752))|(1<<(PostgreSQLParserVARBIT-752))|(1<<(PostgreSQLParserXML-752))|(1<<(PostgreSQLParserNUMERIC_LITERAL-752))|(1<<(PostgreSQLParserINTEGER_LITERAL-752))|(1<<(PostgreSQLParserSINGLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserDOUBLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserIDENTIFIER-752))|(1<<(PostgreSQLParserIDENTIFIER_UNICODE-752)))) != 0) {
			{
				p.SetState(1523)

				var _x = p.Param_value()

				localctx.(*Alter_server_options_listContext).value = _x
			}

		}

		p.SetState(1530)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAlter_server_stmtContext is an interface to support dynamic dispatch.
type IAlter_server_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetNew_owner returns the new_owner rule contexts.
	GetNew_owner() IRole_nameContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IName_Context

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetNew_owner sets the new_owner rule contexts.
	SetNew_owner(IRole_nameContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IName_Context)

	// IsAlter_server_stmtContext differentiates from other interfaces.
	IsAlter_server_stmtContext()
}

type Alter_server_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	name      IIdentifierContext
	new_owner IRole_nameContext
	new_name  IName_Context
}

func NewEmptyAlter_server_stmtContext() *Alter_server_stmtContext {
	var p = new(Alter_server_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_server_stmt
	return p
}

func (*Alter_server_stmtContext) IsAlter_server_stmtContext() {}

func NewAlter_server_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_server_stmtContext {
	var p = new(Alter_server_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_server_stmt

	return p
}

func (s *Alter_server_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_server_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_server_stmtContext) GetNew_owner() IRole_nameContext { return s.new_owner }

func (s *Alter_server_stmtContext) GetNew_name() IName_Context { return s.new_name }

func (s *Alter_server_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_server_stmtContext) SetNew_owner(v IRole_nameContext) { s.new_owner = v }

func (s *Alter_server_stmtContext) SetNew_name(v IName_Context) { s.new_name = v }

func (s *Alter_server_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_server_stmtContext) SERVER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSERVER, 0)
}

func (s *Alter_server_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_server_stmtContext) VERSION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVERSION, 0)
}

func (s *Alter_server_stmtContext) SINGLEQ_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSINGLEQ_STRING_LITERAL, 0)
}

func (s *Alter_server_stmtContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPTIONS, 0)
}

func (s *Alter_server_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Alter_server_stmtContext) Alter_server_options_list() IAlter_server_options_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_server_options_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_server_options_listContext)
}

func (s *Alter_server_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Alter_server_stmtContext) OWNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNER, 0)
}

func (s *Alter_server_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_server_stmtContext) Role_name() IRole_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRole_nameContext)
}

func (s *Alter_server_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_server_stmtContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Alter_server_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_server_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_server_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_server_stmt(s)
	}
}

func (s *Alter_server_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_server_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_server_stmt() (localctx IAlter_server_stmtContext) {
	localctx = NewAlter_server_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, PostgreSQLParserRULE_alter_server_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1561)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1531)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1532)
			p.Match(PostgreSQLParserSERVER)
		}
		{
			p.SetState(1533)

			var _x = p.identifier(0)

			localctx.(*Alter_server_stmtContext).name = _x
		}
		p.SetState(1545)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1534)
				p.Match(PostgreSQLParserVERSION)
			}
			{
				p.SetState(1535)
				p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)
			}

		case 2:
			p.SetState(1538)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PostgreSQLParserVERSION {
				{
					p.SetState(1536)
					p.Match(PostgreSQLParserVERSION)
				}
				{
					p.SetState(1537)
					p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)
				}

			}

			{
				p.SetState(1540)
				p.Match(PostgreSQLParserOPTIONS)
			}
			{
				p.SetState(1541)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(1542)
				p.Alter_server_options_list()
			}
			{
				p.SetState(1543)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1547)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1548)
			p.Match(PostgreSQLParserSERVER)
		}
		{
			p.SetState(1549)

			var _x = p.identifier(0)

			localctx.(*Alter_server_stmtContext).name = _x
		}
		{
			p.SetState(1550)
			p.Match(PostgreSQLParserOWNER)
		}
		{
			p.SetState(1551)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1552)

			var _x = p.Role_name()

			localctx.(*Alter_server_stmtContext).new_owner = _x
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1554)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1555)
			p.Match(PostgreSQLParserSERVER)
		}
		{
			p.SetState(1556)

			var _x = p.identifier(0)

			localctx.(*Alter_server_stmtContext).name = _x
		}
		{
			p.SetState(1557)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(1558)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1559)

			var _x = p.Name_()

			localctx.(*Alter_server_stmtContext).new_name = _x
		}

	}

	return localctx
}

// IAlter_statistics_stmtContext is an interface to support dynamic dispatch.
type IAlter_statistics_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetNew_owner returns the new_owner rule contexts.
	GetNew_owner() IIdentifierContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdentifierContext

	// GetNew_schema returns the new_schema rule contexts.
	GetNew_schema() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetNew_owner sets the new_owner rule contexts.
	SetNew_owner(IIdentifierContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdentifierContext)

	// SetNew_schema sets the new_schema rule contexts.
	SetNew_schema(IIdentifierContext)

	// IsAlter_statistics_stmtContext differentiates from other interfaces.
	IsAlter_statistics_stmtContext()
}

type Alter_statistics_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	name       IIdentifierContext
	new_owner  IIdentifierContext
	new_name   IIdentifierContext
	new_schema IIdentifierContext
}

func NewEmptyAlter_statistics_stmtContext() *Alter_statistics_stmtContext {
	var p = new(Alter_statistics_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_statistics_stmt
	return p
}

func (*Alter_statistics_stmtContext) IsAlter_statistics_stmtContext() {}

func NewAlter_statistics_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_statistics_stmtContext {
	var p = new(Alter_statistics_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_statistics_stmt

	return p
}

func (s *Alter_statistics_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_statistics_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_statistics_stmtContext) GetNew_owner() IIdentifierContext { return s.new_owner }

func (s *Alter_statistics_stmtContext) GetNew_name() IIdentifierContext { return s.new_name }

func (s *Alter_statistics_stmtContext) GetNew_schema() IIdentifierContext { return s.new_schema }

func (s *Alter_statistics_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_statistics_stmtContext) SetNew_owner(v IIdentifierContext) { s.new_owner = v }

func (s *Alter_statistics_stmtContext) SetNew_name(v IIdentifierContext) { s.new_name = v }

func (s *Alter_statistics_stmtContext) SetNew_schema(v IIdentifierContext) { s.new_schema = v }

func (s *Alter_statistics_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_statistics_stmtContext) STATISTICS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTATISTICS, 0)
}

func (s *Alter_statistics_stmtContext) OWNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNER, 0)
}

func (s *Alter_statistics_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_statistics_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_statistics_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_statistics_stmtContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT_USER, 0)
}

func (s *Alter_statistics_stmtContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSESSION_USER, 0)
}

func (s *Alter_statistics_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_statistics_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Alter_statistics_stmtContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCHEMA, 0)
}

func (s *Alter_statistics_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_statistics_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_statistics_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_statistics_stmt(s)
	}
}

func (s *Alter_statistics_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_statistics_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_statistics_stmt() (localctx IAlter_statistics_stmtContext) {
	localctx = NewAlter_statistics_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, PostgreSQLParserRULE_alter_statistics_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1587)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1563)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1564)
			p.Match(PostgreSQLParserSTATISTICS)
		}
		{
			p.SetState(1565)

			var _x = p.identifier(0)

			localctx.(*Alter_statistics_stmtContext).name = _x
		}
		{
			p.SetState(1566)
			p.Match(PostgreSQLParserOWNER)
		}
		{
			p.SetState(1567)
			p.Match(PostgreSQLParserTO)
		}
		p.SetState(1571)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
			{
				p.SetState(1568)

				var _x = p.identifier(0)

				localctx.(*Alter_statistics_stmtContext).new_owner = _x
			}

		case PostgreSQLParserCURRENT_USER:
			{
				p.SetState(1569)
				p.Match(PostgreSQLParserCURRENT_USER)
			}

		case PostgreSQLParserSESSION_USER:
			{
				p.SetState(1570)
				p.Match(PostgreSQLParserSESSION_USER)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1573)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1574)
			p.Match(PostgreSQLParserSTATISTICS)
		}
		{
			p.SetState(1575)

			var _x = p.identifier(0)

			localctx.(*Alter_statistics_stmtContext).name = _x
		}
		{
			p.SetState(1576)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(1577)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1578)

			var _x = p.identifier(0)

			localctx.(*Alter_statistics_stmtContext).new_name = _x
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1580)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1581)
			p.Match(PostgreSQLParserSTATISTICS)
		}
		{
			p.SetState(1582)

			var _x = p.identifier(0)

			localctx.(*Alter_statistics_stmtContext).name = _x
		}
		{
			p.SetState(1583)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(1584)
			p.Match(PostgreSQLParserSCHEMA)
		}
		{
			p.SetState(1585)

			var _x = p.identifier(0)

			localctx.(*Alter_statistics_stmtContext).new_schema = _x
		}

	}

	return localctx
}

// IAlter_subscription_stmtContext is an interface to support dynamic dispatch.
type IAlter_subscription_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetConninfo returns the conninfo rule contexts.
	GetConninfo() IParam_valueContext

	// GetPublication_name returns the publication_name rule contexts.
	GetPublication_name() IName_listContext

	// GetNew_owner returns the new_owner rule contexts.
	GetNew_owner() IRole_nameContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetConninfo sets the conninfo rule contexts.
	SetConninfo(IParam_valueContext)

	// SetPublication_name sets the publication_name rule contexts.
	SetPublication_name(IName_listContext)

	// SetNew_owner sets the new_owner rule contexts.
	SetNew_owner(IRole_nameContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdentifierContext)

	// IsAlter_subscription_stmtContext differentiates from other interfaces.
	IsAlter_subscription_stmtContext()
}

type Alter_subscription_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	name             IIdentifierContext
	conninfo         IParam_valueContext
	publication_name IName_listContext
	new_owner        IRole_nameContext
	new_name         IIdentifierContext
}

func NewEmptyAlter_subscription_stmtContext() *Alter_subscription_stmtContext {
	var p = new(Alter_subscription_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_subscription_stmt
	return p
}

func (*Alter_subscription_stmtContext) IsAlter_subscription_stmtContext() {}

func NewAlter_subscription_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_subscription_stmtContext {
	var p = new(Alter_subscription_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_subscription_stmt

	return p
}

func (s *Alter_subscription_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_subscription_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_subscription_stmtContext) GetConninfo() IParam_valueContext { return s.conninfo }

func (s *Alter_subscription_stmtContext) GetPublication_name() IName_listContext {
	return s.publication_name
}

func (s *Alter_subscription_stmtContext) GetNew_owner() IRole_nameContext { return s.new_owner }

func (s *Alter_subscription_stmtContext) GetNew_name() IIdentifierContext { return s.new_name }

func (s *Alter_subscription_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_subscription_stmtContext) SetConninfo(v IParam_valueContext) { s.conninfo = v }

func (s *Alter_subscription_stmtContext) SetPublication_name(v IName_listContext) {
	s.publication_name = v
}

func (s *Alter_subscription_stmtContext) SetNew_owner(v IRole_nameContext) { s.new_owner = v }

func (s *Alter_subscription_stmtContext) SetNew_name(v IIdentifierContext) { s.new_name = v }

func (s *Alter_subscription_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_subscription_stmtContext) SUBSCRIPTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSUBSCRIPTION, 0)
}

func (s *Alter_subscription_stmtContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONNECTION, 0)
}

func (s *Alter_subscription_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_subscription_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_subscription_stmtContext) Param_value() IParam_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParam_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParam_valueContext)
}

func (s *Alter_subscription_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Alter_subscription_stmtContext) PUBLICATION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPUBLICATION, 0)
}

func (s *Alter_subscription_stmtContext) Name_list() IName_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_listContext)
}

func (s *Alter_subscription_stmtContext) WITH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITH, 0)
}

func (s *Alter_subscription_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Alter_subscription_stmtContext) Option_list() IOption_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_listContext)
}

func (s *Alter_subscription_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Alter_subscription_stmtContext) REFRESH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREFRESH, 0)
}

func (s *Alter_subscription_stmtContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserENABLE, 0)
}

func (s *Alter_subscription_stmtContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDISABLE, 0)
}

func (s *Alter_subscription_stmtContext) OWNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNER, 0)
}

func (s *Alter_subscription_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_subscription_stmtContext) Role_name() IRole_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRole_nameContext)
}

func (s *Alter_subscription_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_subscription_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_subscription_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_subscription_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_subscription_stmt(s)
	}
}

func (s *Alter_subscription_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_subscription_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_subscription_stmt() (localctx IAlter_subscription_stmtContext) {
	localctx = NewAlter_subscription_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, PostgreSQLParserRULE_alter_subscription_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1652)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 105, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1589)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1590)
			p.Match(PostgreSQLParserSUBSCRIPTION)
		}
		{
			p.SetState(1591)

			var _x = p.identifier(0)

			localctx.(*Alter_subscription_stmtContext).name = _x
		}
		{
			p.SetState(1592)
			p.Match(PostgreSQLParserCONNECTION)
		}
		{
			p.SetState(1593)

			var _x = p.Param_value()

			localctx.(*Alter_subscription_stmtContext).conninfo = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1595)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1596)
			p.Match(PostgreSQLParserSUBSCRIPTION)
		}
		{
			p.SetState(1597)

			var _x = p.identifier(0)

			localctx.(*Alter_subscription_stmtContext).name = _x
		}
		{
			p.SetState(1598)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(1599)
			p.Match(PostgreSQLParserPUBLICATION)
		}
		{
			p.SetState(1600)

			var _x = p.Name_list()

			localctx.(*Alter_subscription_stmtContext).publication_name = _x
		}
		p.SetState(1606)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserWITH {
			{
				p.SetState(1601)
				p.Match(PostgreSQLParserWITH)
			}
			{
				p.SetState(1602)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(1603)
				p.Option_list()
			}
			{
				p.SetState(1604)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1608)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1609)
			p.Match(PostgreSQLParserSUBSCRIPTION)
		}
		{
			p.SetState(1610)

			var _x = p.identifier(0)

			localctx.(*Alter_subscription_stmtContext).name = _x
		}
		{
			p.SetState(1611)
			p.Match(PostgreSQLParserREFRESH)
		}
		{
			p.SetState(1612)
			p.Match(PostgreSQLParserPUBLICATION)
		}
		p.SetState(1618)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserWITH {
			{
				p.SetState(1613)
				p.Match(PostgreSQLParserWITH)
			}
			{
				p.SetState(1614)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(1615)
				p.Option_list()
			}
			{
				p.SetState(1616)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1620)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1621)
			p.Match(PostgreSQLParserSUBSCRIPTION)
		}
		{
			p.SetState(1622)

			var _x = p.identifier(0)

			localctx.(*Alter_subscription_stmtContext).name = _x
		}
		{
			p.SetState(1623)
			p.Match(PostgreSQLParserENABLE)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1625)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1626)
			p.Match(PostgreSQLParserSUBSCRIPTION)
		}
		{
			p.SetState(1627)

			var _x = p.identifier(0)

			localctx.(*Alter_subscription_stmtContext).name = _x
		}
		{
			p.SetState(1628)
			p.Match(PostgreSQLParserDISABLE)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1630)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1631)
			p.Match(PostgreSQLParserSUBSCRIPTION)
		}
		{
			p.SetState(1632)

			var _x = p.identifier(0)

			localctx.(*Alter_subscription_stmtContext).name = _x
		}
		{
			p.SetState(1633)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(1634)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(1635)
			p.Option_list()
		}
		{
			p.SetState(1636)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1638)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1639)
			p.Match(PostgreSQLParserSUBSCRIPTION)
		}
		{
			p.SetState(1640)

			var _x = p.identifier(0)

			localctx.(*Alter_subscription_stmtContext).name = _x
		}
		{
			p.SetState(1641)
			p.Match(PostgreSQLParserOWNER)
		}
		{
			p.SetState(1642)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1643)

			var _x = p.Role_name()

			localctx.(*Alter_subscription_stmtContext).new_owner = _x
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1645)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1646)
			p.Match(PostgreSQLParserSUBSCRIPTION)
		}
		{
			p.SetState(1647)

			var _x = p.identifier(0)

			localctx.(*Alter_subscription_stmtContext).name = _x
		}
		{
			p.SetState(1648)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(1649)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1650)

			var _x = p.identifier(0)

			localctx.(*Alter_subscription_stmtContext).new_name = _x
		}

	}

	return localctx
}

// IAlter_system_stmtContext is an interface to support dynamic dispatch.
type IAlter_system_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetParam returns the param token.
	GetParam() antlr.Token

	// SetParam sets the param token.
	SetParam(antlr.Token)

	// GetValue returns the value rule contexts.
	GetValue() IParam_valueContext

	// SetValue sets the value rule contexts.
	SetValue(IParam_valueContext)

	// IsAlter_system_stmtContext differentiates from other interfaces.
	IsAlter_system_stmtContext()
}

type Alter_system_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	param  antlr.Token
	value  IParam_valueContext
}

func NewEmptyAlter_system_stmtContext() *Alter_system_stmtContext {
	var p = new(Alter_system_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_system_stmt
	return p
}

func (*Alter_system_stmtContext) IsAlter_system_stmtContext() {}

func NewAlter_system_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_system_stmtContext {
	var p = new(Alter_system_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_system_stmt

	return p
}

func (s *Alter_system_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_system_stmtContext) GetParam() antlr.Token { return s.param }

func (s *Alter_system_stmtContext) SetParam(v antlr.Token) { s.param = v }

func (s *Alter_system_stmtContext) GetValue() IParam_valueContext { return s.value }

func (s *Alter_system_stmtContext) SetValue(v IParam_valueContext) { s.value = v }

func (s *Alter_system_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_system_stmtContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSYSTEM, 0)
}

func (s *Alter_system_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Alter_system_stmtContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIDENTIFIER, 0)
}

func (s *Alter_system_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_system_stmtContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEQUAL, 0)
}

func (s *Alter_system_stmtContext) Param_value() IParam_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParam_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParam_valueContext)
}

func (s *Alter_system_stmtContext) RESET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESET, 0)
}

func (s *Alter_system_stmtContext) ALL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALL, 0)
}

func (s *Alter_system_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_system_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_system_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_system_stmt(s)
	}
}

func (s *Alter_system_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_system_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_system_stmt() (localctx IAlter_system_stmtContext) {
	localctx = NewAlter_system_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, PostgreSQLParserRULE_alter_system_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1668)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1654)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1655)
			p.Match(PostgreSQLParserSYSTEM)
		}
		{
			p.SetState(1656)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(1657)

			var _m = p.Match(PostgreSQLParserIDENTIFIER)

			localctx.(*Alter_system_stmtContext).param = _m
		}
		{
			p.SetState(1658)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserTO || _la == PostgreSQLParserEQUAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1659)

			var _x = p.Param_value()

			localctx.(*Alter_system_stmtContext).value = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1660)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1661)
			p.Match(PostgreSQLParserSYSTEM)
		}
		{
			p.SetState(1662)
			p.Match(PostgreSQLParserRESET)
		}
		{
			p.SetState(1663)

			var _m = p.Match(PostgreSQLParserIDENTIFIER)

			localctx.(*Alter_system_stmtContext).param = _m
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1664)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1665)
			p.Match(PostgreSQLParserSYSTEM)
		}
		{
			p.SetState(1666)
			p.Match(PostgreSQLParserRESET)
		}
		{
			p.SetState(1667)
			p.Match(PostgreSQLParserALL)
		}

	}

	return localctx
}

// IAlter_table_stmtContext is an interface to support dynamic dispatch.
type IAlter_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_table_stmtContext differentiates from other interfaces.
	IsAlter_table_stmtContext()
}

type Alter_table_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_table_stmtContext() *Alter_table_stmtContext {
	var p = new(Alter_table_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_table_stmt
	return p
}

func (*Alter_table_stmtContext) IsAlter_table_stmtContext() {}

func NewAlter_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_table_stmtContext {
	var p = new(Alter_table_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_table_stmt

	return p
}

func (s *Alter_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_table_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Alter_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_table_stmt(s)
	}
}

func (s *Alter_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_table_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_table_stmt() (localctx IAlter_table_stmtContext) {
	localctx = NewAlter_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, PostgreSQLParserRULE_alter_table_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1670)
		p.Todo_implement()
	}

	return localctx
}

// IAlter_tablespace_stmtContext is an interface to support dynamic dispatch.
type IAlter_tablespace_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdentifierContext

	// GetNew_owner returns the new_owner rule contexts.
	GetNew_owner() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdentifierContext)

	// SetNew_owner sets the new_owner rule contexts.
	SetNew_owner(IIdentifierContext)

	// IsAlter_tablespace_stmtContext differentiates from other interfaces.
	IsAlter_tablespace_stmtContext()
}

type Alter_tablespace_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	name      IIdentifierContext
	new_name  IIdentifierContext
	new_owner IIdentifierContext
}

func NewEmptyAlter_tablespace_stmtContext() *Alter_tablespace_stmtContext {
	var p = new(Alter_tablespace_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_tablespace_stmt
	return p
}

func (*Alter_tablespace_stmtContext) IsAlter_tablespace_stmtContext() {}

func NewAlter_tablespace_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_tablespace_stmtContext {
	var p = new(Alter_tablespace_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_tablespace_stmt

	return p
}

func (s *Alter_tablespace_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_tablespace_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_tablespace_stmtContext) GetNew_name() IIdentifierContext { return s.new_name }

func (s *Alter_tablespace_stmtContext) GetNew_owner() IIdentifierContext { return s.new_owner }

func (s *Alter_tablespace_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_tablespace_stmtContext) SetNew_name(v IIdentifierContext) { s.new_name = v }

func (s *Alter_tablespace_stmtContext) SetNew_owner(v IIdentifierContext) { s.new_owner = v }

func (s *Alter_tablespace_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_tablespace_stmtContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLESPACE, 0)
}

func (s *Alter_tablespace_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_tablespace_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_tablespace_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_tablespace_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_tablespace_stmtContext) OWNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNER, 0)
}

func (s *Alter_tablespace_stmtContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT_USER, 0)
}

func (s *Alter_tablespace_stmtContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSESSION_USER, 0)
}

func (s *Alter_tablespace_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Alter_tablespace_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Alter_tablespace_stmtContext) Option_list() IOption_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_listContext)
}

func (s *Alter_tablespace_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Alter_tablespace_stmtContext) RESET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESET, 0)
}

func (s *Alter_tablespace_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Alter_tablespace_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_tablespace_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_tablespace_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_tablespace_stmt(s)
	}
}

func (s *Alter_tablespace_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_tablespace_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_tablespace_stmt() (localctx IAlter_tablespace_stmtContext) {
	localctx = NewAlter_tablespace_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, PostgreSQLParserRULE_alter_tablespace_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1705)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 108, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1672)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1673)
			p.Match(PostgreSQLParserTABLESPACE)
		}
		{
			p.SetState(1674)

			var _x = p.identifier(0)

			localctx.(*Alter_tablespace_stmtContext).name = _x
		}
		{
			p.SetState(1675)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(1676)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1677)

			var _x = p.identifier(0)

			localctx.(*Alter_tablespace_stmtContext).new_name = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1679)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1680)
			p.Match(PostgreSQLParserTABLESPACE)
		}
		{
			p.SetState(1681)

			var _x = p.identifier(0)

			localctx.(*Alter_tablespace_stmtContext).name = _x
		}
		{
			p.SetState(1682)
			p.Match(PostgreSQLParserOWNER)
		}
		{
			p.SetState(1683)
			p.Match(PostgreSQLParserTO)
		}
		p.SetState(1687)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
			{
				p.SetState(1684)

				var _x = p.identifier(0)

				localctx.(*Alter_tablespace_stmtContext).new_owner = _x
			}

		case PostgreSQLParserCURRENT_USER:
			{
				p.SetState(1685)
				p.Match(PostgreSQLParserCURRENT_USER)
			}

		case PostgreSQLParserSESSION_USER:
			{
				p.SetState(1686)
				p.Match(PostgreSQLParserSESSION_USER)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1689)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1690)
			p.Match(PostgreSQLParserTABLESPACE)
		}
		{
			p.SetState(1691)

			var _x = p.identifier(0)

			localctx.(*Alter_tablespace_stmtContext).name = _x
		}
		{
			p.SetState(1692)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(1693)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(1694)
			p.Option_list()
		}
		{
			p.SetState(1695)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1697)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1698)
			p.Match(PostgreSQLParserTABLESPACE)
		}
		{
			p.SetState(1699)

			var _x = p.identifier(0)

			localctx.(*Alter_tablespace_stmtContext).name = _x
		}
		{
			p.SetState(1700)
			p.Match(PostgreSQLParserRESET)
		}
		{
			p.SetState(1701)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(1702)
			p.Identifier_list()
		}
		{
			p.SetState(1703)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}

	return localctx
}

// IAlter_text_search_config_stmtContext is an interface to support dynamic dispatch.
type IAlter_text_search_config_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetToken_types returns the token_types rule contexts.
	GetToken_types() IIdentifier_listContext

	// GetDictionary_names returns the dictionary_names rule contexts.
	GetDictionary_names() IIdentifier_listContext

	// GetOld_dictionary returns the old_dictionary rule contexts.
	GetOld_dictionary() IIdentifierContext

	// GetNew_dictionary returns the new_dictionary rule contexts.
	GetNew_dictionary() IIdentifierContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdentifierContext

	// GetNew_owner returns the new_owner rule contexts.
	GetNew_owner() IRole_nameContext

	// GetNew_schema returns the new_schema rule contexts.
	GetNew_schema() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetToken_types sets the token_types rule contexts.
	SetToken_types(IIdentifier_listContext)

	// SetDictionary_names sets the dictionary_names rule contexts.
	SetDictionary_names(IIdentifier_listContext)

	// SetOld_dictionary sets the old_dictionary rule contexts.
	SetOld_dictionary(IIdentifierContext)

	// SetNew_dictionary sets the new_dictionary rule contexts.
	SetNew_dictionary(IIdentifierContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdentifierContext)

	// SetNew_owner sets the new_owner rule contexts.
	SetNew_owner(IRole_nameContext)

	// SetNew_schema sets the new_schema rule contexts.
	SetNew_schema(IIdentifierContext)

	// IsAlter_text_search_config_stmtContext differentiates from other interfaces.
	IsAlter_text_search_config_stmtContext()
}

type Alter_text_search_config_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	name             IIdentifierContext
	token_types      IIdentifier_listContext
	dictionary_names IIdentifier_listContext
	old_dictionary   IIdentifierContext
	new_dictionary   IIdentifierContext
	new_name         IIdentifierContext
	new_owner        IRole_nameContext
	new_schema       IIdentifierContext
}

func NewEmptyAlter_text_search_config_stmtContext() *Alter_text_search_config_stmtContext {
	var p = new(Alter_text_search_config_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_text_search_config_stmt
	return p
}

func (*Alter_text_search_config_stmtContext) IsAlter_text_search_config_stmtContext() {}

func NewAlter_text_search_config_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_text_search_config_stmtContext {
	var p = new(Alter_text_search_config_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_text_search_config_stmt

	return p
}

func (s *Alter_text_search_config_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_text_search_config_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_text_search_config_stmtContext) GetToken_types() IIdentifier_listContext {
	return s.token_types
}

func (s *Alter_text_search_config_stmtContext) GetDictionary_names() IIdentifier_listContext {
	return s.dictionary_names
}

func (s *Alter_text_search_config_stmtContext) GetOld_dictionary() IIdentifierContext {
	return s.old_dictionary
}

func (s *Alter_text_search_config_stmtContext) GetNew_dictionary() IIdentifierContext {
	return s.new_dictionary
}

func (s *Alter_text_search_config_stmtContext) GetNew_name() IIdentifierContext { return s.new_name }

func (s *Alter_text_search_config_stmtContext) GetNew_owner() IRole_nameContext { return s.new_owner }

func (s *Alter_text_search_config_stmtContext) GetNew_schema() IIdentifierContext {
	return s.new_schema
}

func (s *Alter_text_search_config_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_text_search_config_stmtContext) SetToken_types(v IIdentifier_listContext) {
	s.token_types = v
}

func (s *Alter_text_search_config_stmtContext) SetDictionary_names(v IIdentifier_listContext) {
	s.dictionary_names = v
}

func (s *Alter_text_search_config_stmtContext) SetOld_dictionary(v IIdentifierContext) {
	s.old_dictionary = v
}

func (s *Alter_text_search_config_stmtContext) SetNew_dictionary(v IIdentifierContext) {
	s.new_dictionary = v
}

func (s *Alter_text_search_config_stmtContext) SetNew_name(v IIdentifierContext) { s.new_name = v }

func (s *Alter_text_search_config_stmtContext) SetNew_owner(v IRole_nameContext) { s.new_owner = v }

func (s *Alter_text_search_config_stmtContext) SetNew_schema(v IIdentifierContext) { s.new_schema = v }

func (s *Alter_text_search_config_stmtContext) AllALTER() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserALTER)
}

func (s *Alter_text_search_config_stmtContext) ALTER(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, i)
}

func (s *Alter_text_search_config_stmtContext) TEXT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEXT, 0)
}

func (s *Alter_text_search_config_stmtContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSEARCH, 0)
}

func (s *Alter_text_search_config_stmtContext) CONFIGURATION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONFIGURATION, 0)
}

func (s *Alter_text_search_config_stmtContext) ADD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserADD, 0)
}

func (s *Alter_text_search_config_stmtContext) MAPPING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMAPPING, 0)
}

func (s *Alter_text_search_config_stmtContext) FOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOR, 0)
}

func (s *Alter_text_search_config_stmtContext) WITH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITH, 0)
}

func (s *Alter_text_search_config_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_text_search_config_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_text_search_config_stmtContext) AllIdentifier_list() []IIdentifier_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem())
	var tst = make([]IIdentifier_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_listContext)
		}
	}

	return tst
}

func (s *Alter_text_search_config_stmtContext) Identifier_list(i int) IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Alter_text_search_config_stmtContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREPLACE, 0)
}

func (s *Alter_text_search_config_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Alter_text_search_config_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Alter_text_search_config_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Alter_text_search_config_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_text_search_config_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_text_search_config_stmtContext) OWNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNER, 0)
}

func (s *Alter_text_search_config_stmtContext) Role_name() IRole_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRole_nameContext)
}

func (s *Alter_text_search_config_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Alter_text_search_config_stmtContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCHEMA, 0)
}

func (s *Alter_text_search_config_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_text_search_config_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_text_search_config_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_text_search_config_stmt(s)
	}
}

func (s *Alter_text_search_config_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_text_search_config_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_text_search_config_stmt() (localctx IAlter_text_search_config_stmtContext) {
	localctx = NewAlter_text_search_config_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, PostgreSQLParserRULE_alter_text_search_config_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1798)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 110, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1707)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1708)
			p.Match(PostgreSQLParserTEXT)
		}
		{
			p.SetState(1709)
			p.Match(PostgreSQLParserSEARCH)
		}
		{
			p.SetState(1710)
			p.Match(PostgreSQLParserCONFIGURATION)
		}
		{
			p.SetState(1711)

			var _x = p.identifier(0)

			localctx.(*Alter_text_search_config_stmtContext).name = _x
		}
		{
			p.SetState(1712)
			p.Match(PostgreSQLParserADD)
		}
		{
			p.SetState(1713)
			p.Match(PostgreSQLParserMAPPING)
		}
		{
			p.SetState(1714)
			p.Match(PostgreSQLParserFOR)
		}
		{
			p.SetState(1715)

			var _x = p.Identifier_list()

			localctx.(*Alter_text_search_config_stmtContext).token_types = _x
		}
		{
			p.SetState(1716)
			p.Match(PostgreSQLParserWITH)
		}
		{
			p.SetState(1717)

			var _x = p.Identifier_list()

			localctx.(*Alter_text_search_config_stmtContext).dictionary_names = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1719)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1720)
			p.Match(PostgreSQLParserTEXT)
		}
		{
			p.SetState(1721)
			p.Match(PostgreSQLParserSEARCH)
		}
		{
			p.SetState(1722)
			p.Match(PostgreSQLParserCONFIGURATION)
		}
		{
			p.SetState(1723)

			var _x = p.identifier(0)

			localctx.(*Alter_text_search_config_stmtContext).name = _x
		}
		{
			p.SetState(1724)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1725)
			p.Match(PostgreSQLParserMAPPING)
		}
		{
			p.SetState(1726)
			p.Match(PostgreSQLParserFOR)
		}
		{
			p.SetState(1727)

			var _x = p.Identifier_list()

			localctx.(*Alter_text_search_config_stmtContext).token_types = _x
		}
		{
			p.SetState(1728)
			p.Match(PostgreSQLParserWITH)
		}
		{
			p.SetState(1729)

			var _x = p.Identifier_list()

			localctx.(*Alter_text_search_config_stmtContext).dictionary_names = _x
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1731)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1732)
			p.Match(PostgreSQLParserTEXT)
		}
		{
			p.SetState(1733)
			p.Match(PostgreSQLParserSEARCH)
		}
		{
			p.SetState(1734)
			p.Match(PostgreSQLParserCONFIGURATION)
		}
		{
			p.SetState(1735)

			var _x = p.identifier(0)

			localctx.(*Alter_text_search_config_stmtContext).name = _x
		}
		{
			p.SetState(1736)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1737)
			p.Match(PostgreSQLParserMAPPING)
		}
		{
			p.SetState(1738)
			p.Match(PostgreSQLParserREPLACE)
		}
		{
			p.SetState(1739)

			var _x = p.identifier(0)

			localctx.(*Alter_text_search_config_stmtContext).old_dictionary = _x
		}
		{
			p.SetState(1740)
			p.Match(PostgreSQLParserWITH)
		}
		{
			p.SetState(1741)

			var _x = p.identifier(0)

			localctx.(*Alter_text_search_config_stmtContext).new_dictionary = _x
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1743)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1744)
			p.Match(PostgreSQLParserTEXT)
		}
		{
			p.SetState(1745)
			p.Match(PostgreSQLParserSEARCH)
		}
		{
			p.SetState(1746)
			p.Match(PostgreSQLParserCONFIGURATION)
		}
		{
			p.SetState(1747)

			var _x = p.identifier(0)

			localctx.(*Alter_text_search_config_stmtContext).name = _x
		}
		{
			p.SetState(1748)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1749)
			p.Match(PostgreSQLParserMAPPING)
		}
		{
			p.SetState(1750)
			p.Match(PostgreSQLParserFOR)
		}
		{
			p.SetState(1751)

			var _x = p.Identifier_list()

			localctx.(*Alter_text_search_config_stmtContext).token_types = _x
		}
		{
			p.SetState(1752)
			p.Match(PostgreSQLParserREPLACE)
		}
		{
			p.SetState(1753)

			var _x = p.identifier(0)

			localctx.(*Alter_text_search_config_stmtContext).old_dictionary = _x
		}
		{
			p.SetState(1754)
			p.Match(PostgreSQLParserWITH)
		}
		{
			p.SetState(1755)

			var _x = p.identifier(0)

			localctx.(*Alter_text_search_config_stmtContext).new_dictionary = _x
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1757)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1758)
			p.Match(PostgreSQLParserTEXT)
		}
		{
			p.SetState(1759)
			p.Match(PostgreSQLParserSEARCH)
		}
		{
			p.SetState(1760)
			p.Match(PostgreSQLParserCONFIGURATION)
		}
		{
			p.SetState(1761)

			var _x = p.identifier(0)

			localctx.(*Alter_text_search_config_stmtContext).name = _x
		}
		{
			p.SetState(1762)
			p.Match(PostgreSQLParserDROP)
		}
		{
			p.SetState(1763)
			p.Match(PostgreSQLParserMAPPING)
		}
		p.SetState(1766)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIF {
			{
				p.SetState(1764)
				p.Match(PostgreSQLParserIF)
			}
			{
				p.SetState(1765)
				p.Match(PostgreSQLParserEXISTS)
			}

		}
		{
			p.SetState(1768)
			p.Match(PostgreSQLParserFOR)
		}
		{
			p.SetState(1769)

			var _x = p.Identifier_list()

			localctx.(*Alter_text_search_config_stmtContext).token_types = _x
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1771)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1772)
			p.Match(PostgreSQLParserTEXT)
		}
		{
			p.SetState(1773)
			p.Match(PostgreSQLParserSEARCH)
		}
		{
			p.SetState(1774)
			p.Match(PostgreSQLParserCONFIGURATION)
		}
		{
			p.SetState(1775)

			var _x = p.identifier(0)

			localctx.(*Alter_text_search_config_stmtContext).name = _x
		}
		{
			p.SetState(1776)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(1777)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1778)

			var _x = p.identifier(0)

			localctx.(*Alter_text_search_config_stmtContext).new_name = _x
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1780)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1781)
			p.Match(PostgreSQLParserTEXT)
		}
		{
			p.SetState(1782)
			p.Match(PostgreSQLParserSEARCH)
		}
		{
			p.SetState(1783)
			p.Match(PostgreSQLParserCONFIGURATION)
		}
		{
			p.SetState(1784)

			var _x = p.identifier(0)

			localctx.(*Alter_text_search_config_stmtContext).name = _x
		}
		{
			p.SetState(1785)
			p.Match(PostgreSQLParserOWNER)
		}
		{
			p.SetState(1786)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1787)

			var _x = p.Role_name()

			localctx.(*Alter_text_search_config_stmtContext).new_owner = _x
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1789)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1790)
			p.Match(PostgreSQLParserTEXT)
		}
		{
			p.SetState(1791)
			p.Match(PostgreSQLParserSEARCH)
		}
		{
			p.SetState(1792)
			p.Match(PostgreSQLParserCONFIGURATION)
		}
		{
			p.SetState(1793)

			var _x = p.identifier(0)

			localctx.(*Alter_text_search_config_stmtContext).name = _x
		}
		{
			p.SetState(1794)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(1795)
			p.Match(PostgreSQLParserSCHEMA)
		}
		{
			p.SetState(1796)

			var _x = p.identifier(0)

			localctx.(*Alter_text_search_config_stmtContext).new_schema = _x
		}

	}

	return localctx
}

// IAlter_text_search_dict_stmtContext is an interface to support dynamic dispatch.
type IAlter_text_search_dict_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_text_search_dict_stmtContext differentiates from other interfaces.
	IsAlter_text_search_dict_stmtContext()
}

type Alter_text_search_dict_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_text_search_dict_stmtContext() *Alter_text_search_dict_stmtContext {
	var p = new(Alter_text_search_dict_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_text_search_dict_stmt
	return p
}

func (*Alter_text_search_dict_stmtContext) IsAlter_text_search_dict_stmtContext() {}

func NewAlter_text_search_dict_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_text_search_dict_stmtContext {
	var p = new(Alter_text_search_dict_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_text_search_dict_stmt

	return p
}

func (s *Alter_text_search_dict_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_text_search_dict_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Alter_text_search_dict_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_text_search_dict_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_text_search_dict_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_text_search_dict_stmt(s)
	}
}

func (s *Alter_text_search_dict_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_text_search_dict_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_text_search_dict_stmt() (localctx IAlter_text_search_dict_stmtContext) {
	localctx = NewAlter_text_search_dict_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, PostgreSQLParserRULE_alter_text_search_dict_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1800)
		p.Todo_implement()
	}

	return localctx
}

// IAlter_text_search_parser_stmtContext is an interface to support dynamic dispatch.
type IAlter_text_search_parser_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_text_search_parser_stmtContext differentiates from other interfaces.
	IsAlter_text_search_parser_stmtContext()
}

type Alter_text_search_parser_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_text_search_parser_stmtContext() *Alter_text_search_parser_stmtContext {
	var p = new(Alter_text_search_parser_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_text_search_parser_stmt
	return p
}

func (*Alter_text_search_parser_stmtContext) IsAlter_text_search_parser_stmtContext() {}

func NewAlter_text_search_parser_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_text_search_parser_stmtContext {
	var p = new(Alter_text_search_parser_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_text_search_parser_stmt

	return p
}

func (s *Alter_text_search_parser_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_text_search_parser_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Alter_text_search_parser_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_text_search_parser_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_text_search_parser_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_text_search_parser_stmt(s)
	}
}

func (s *Alter_text_search_parser_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_text_search_parser_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_text_search_parser_stmt() (localctx IAlter_text_search_parser_stmtContext) {
	localctx = NewAlter_text_search_parser_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, PostgreSQLParserRULE_alter_text_search_parser_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1802)
		p.Todo_implement()
	}

	return localctx
}

// IAlter_text_search_template_stmtContext is an interface to support dynamic dispatch.
type IAlter_text_search_template_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdentifierContext

	// GetNew_schema returns the new_schema rule contexts.
	GetNew_schema() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdentifierContext)

	// SetNew_schema sets the new_schema rule contexts.
	SetNew_schema(IIdentifierContext)

	// IsAlter_text_search_template_stmtContext differentiates from other interfaces.
	IsAlter_text_search_template_stmtContext()
}

type Alter_text_search_template_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	name       IIdentifierContext
	new_name   IIdentifierContext
	new_schema IIdentifierContext
}

func NewEmptyAlter_text_search_template_stmtContext() *Alter_text_search_template_stmtContext {
	var p = new(Alter_text_search_template_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_text_search_template_stmt
	return p
}

func (*Alter_text_search_template_stmtContext) IsAlter_text_search_template_stmtContext() {}

func NewAlter_text_search_template_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_text_search_template_stmtContext {
	var p = new(Alter_text_search_template_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_text_search_template_stmt

	return p
}

func (s *Alter_text_search_template_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_text_search_template_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_text_search_template_stmtContext) GetNew_name() IIdentifierContext { return s.new_name }

func (s *Alter_text_search_template_stmtContext) GetNew_schema() IIdentifierContext {
	return s.new_schema
}

func (s *Alter_text_search_template_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_text_search_template_stmtContext) SetNew_name(v IIdentifierContext) { s.new_name = v }

func (s *Alter_text_search_template_stmtContext) SetNew_schema(v IIdentifierContext) {
	s.new_schema = v
}

func (s *Alter_text_search_template_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_text_search_template_stmtContext) TEXT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEXT, 0)
}

func (s *Alter_text_search_template_stmtContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSEARCH, 0)
}

func (s *Alter_text_search_template_stmtContext) TEMPLATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEMPLATE, 0)
}

func (s *Alter_text_search_template_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_text_search_template_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_text_search_template_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_text_search_template_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_text_search_template_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Alter_text_search_template_stmtContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCHEMA, 0)
}

func (s *Alter_text_search_template_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_text_search_template_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_text_search_template_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_text_search_template_stmt(s)
	}
}

func (s *Alter_text_search_template_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_text_search_template_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_text_search_template_stmt() (localctx IAlter_text_search_template_stmtContext) {
	localctx = NewAlter_text_search_template_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, PostgreSQLParserRULE_alter_text_search_template_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1822)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 111, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1804)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1805)
			p.Match(PostgreSQLParserTEXT)
		}
		{
			p.SetState(1806)
			p.Match(PostgreSQLParserSEARCH)
		}
		{
			p.SetState(1807)
			p.Match(PostgreSQLParserTEMPLATE)
		}
		{
			p.SetState(1808)

			var _x = p.identifier(0)

			localctx.(*Alter_text_search_template_stmtContext).name = _x
		}
		{
			p.SetState(1809)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(1810)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1811)

			var _x = p.identifier(0)

			localctx.(*Alter_text_search_template_stmtContext).new_name = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1813)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1814)
			p.Match(PostgreSQLParserTEXT)
		}
		{
			p.SetState(1815)
			p.Match(PostgreSQLParserSEARCH)
		}
		{
			p.SetState(1816)
			p.Match(PostgreSQLParserTEMPLATE)
		}
		{
			p.SetState(1817)

			var _x = p.identifier(0)

			localctx.(*Alter_text_search_template_stmtContext).name = _x
		}
		{
			p.SetState(1818)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(1819)
			p.Match(PostgreSQLParserSCHEMA)
		}
		{
			p.SetState(1820)

			var _x = p.identifier(0)

			localctx.(*Alter_text_search_template_stmtContext).new_schema = _x
		}

	}

	return localctx
}

// IAlter_trigger_stmtContext is an interface to support dynamic dispatch.
type IAlter_trigger_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() IIdentifierContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdentifierContext

	// GetExtension_name returns the extension_name rule contexts.
	GetExtension_name() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(IIdentifierContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdentifierContext)

	// SetExtension_name sets the extension_name rule contexts.
	SetExtension_name(IIdentifierContext)

	// IsAlter_trigger_stmtContext differentiates from other interfaces.
	IsAlter_trigger_stmtContext()
}

type Alter_trigger_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	name           IIdentifierContext
	table_name     IIdentifierContext
	new_name       IIdentifierContext
	extension_name IIdentifierContext
}

func NewEmptyAlter_trigger_stmtContext() *Alter_trigger_stmtContext {
	var p = new(Alter_trigger_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_trigger_stmt
	return p
}

func (*Alter_trigger_stmtContext) IsAlter_trigger_stmtContext() {}

func NewAlter_trigger_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_trigger_stmtContext {
	var p = new(Alter_trigger_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_trigger_stmt

	return p
}

func (s *Alter_trigger_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_trigger_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Alter_trigger_stmtContext) GetTable_name() IIdentifierContext { return s.table_name }

func (s *Alter_trigger_stmtContext) GetNew_name() IIdentifierContext { return s.new_name }

func (s *Alter_trigger_stmtContext) GetExtension_name() IIdentifierContext { return s.extension_name }

func (s *Alter_trigger_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Alter_trigger_stmtContext) SetTable_name(v IIdentifierContext) { s.table_name = v }

func (s *Alter_trigger_stmtContext) SetNew_name(v IIdentifierContext) { s.new_name = v }

func (s *Alter_trigger_stmtContext) SetExtension_name(v IIdentifierContext) { s.extension_name = v }

func (s *Alter_trigger_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_trigger_stmtContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRIGGER, 0)
}

func (s *Alter_trigger_stmtContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserON)
}

func (s *Alter_trigger_stmtContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserON, i)
}

func (s *Alter_trigger_stmtContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Alter_trigger_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Alter_trigger_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_trigger_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_trigger_stmtContext) DEPENDS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEPENDS, 0)
}

func (s *Alter_trigger_stmtContext) EXTENSION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXTENSION, 0)
}

func (s *Alter_trigger_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_trigger_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_trigger_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_trigger_stmt(s)
	}
}

func (s *Alter_trigger_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_trigger_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_trigger_stmt() (localctx IAlter_trigger_stmtContext) {
	localctx = NewAlter_trigger_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, PostgreSQLParserRULE_alter_trigger_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1843)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1824)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1825)
			p.Match(PostgreSQLParserTRIGGER)
		}
		{
			p.SetState(1826)

			var _x = p.identifier(0)

			localctx.(*Alter_trigger_stmtContext).name = _x
		}
		{
			p.SetState(1827)
			p.Match(PostgreSQLParserON)
		}
		{
			p.SetState(1828)

			var _x = p.identifier(0)

			localctx.(*Alter_trigger_stmtContext).table_name = _x
		}
		{
			p.SetState(1829)
			p.Match(PostgreSQLParserRENAME)
		}
		{
			p.SetState(1830)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(1831)

			var _x = p.identifier(0)

			localctx.(*Alter_trigger_stmtContext).new_name = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1833)
			p.Match(PostgreSQLParserALTER)
		}
		{
			p.SetState(1834)
			p.Match(PostgreSQLParserTRIGGER)
		}
		{
			p.SetState(1835)

			var _x = p.identifier(0)

			localctx.(*Alter_trigger_stmtContext).name = _x
		}
		{
			p.SetState(1836)
			p.Match(PostgreSQLParserON)
		}
		{
			p.SetState(1837)

			var _x = p.identifier(0)

			localctx.(*Alter_trigger_stmtContext).table_name = _x
		}
		{
			p.SetState(1838)
			p.Match(PostgreSQLParserDEPENDS)
		}
		{
			p.SetState(1839)
			p.Match(PostgreSQLParserON)
		}
		{
			p.SetState(1840)
			p.Match(PostgreSQLParserEXTENSION)
		}
		{
			p.SetState(1841)

			var _x = p.identifier(0)

			localctx.(*Alter_trigger_stmtContext).extension_name = _x
		}

	}

	return localctx
}

// IAlter_type_stmtContext is an interface to support dynamic dispatch.
type IAlter_type_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_type_stmtContext differentiates from other interfaces.
	IsAlter_type_stmtContext()
}

type Alter_type_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_type_stmtContext() *Alter_type_stmtContext {
	var p = new(Alter_type_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_type_stmt
	return p
}

func (*Alter_type_stmtContext) IsAlter_type_stmtContext() {}

func NewAlter_type_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_type_stmtContext {
	var p = new(Alter_type_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_type_stmt

	return p
}

func (s *Alter_type_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_type_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Alter_type_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_type_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_type_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_type_stmt(s)
	}
}

func (s *Alter_type_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_type_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_type_stmt() (localctx IAlter_type_stmtContext) {
	localctx = NewAlter_type_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, PostgreSQLParserRULE_alter_type_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1845)
		p.Todo_implement()
	}

	return localctx
}

// IAlter_user_stmtContext is an interface to support dynamic dispatch.
type IAlter_user_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_user_stmtContext differentiates from other interfaces.
	IsAlter_user_stmtContext()
}

type Alter_user_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_user_stmtContext() *Alter_user_stmtContext {
	var p = new(Alter_user_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_user_stmt
	return p
}

func (*Alter_user_stmtContext) IsAlter_user_stmtContext() {}

func NewAlter_user_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_user_stmtContext {
	var p = new(Alter_user_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_user_stmt

	return p
}

func (s *Alter_user_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_user_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Alter_user_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_user_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_user_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_user_stmt(s)
	}
}

func (s *Alter_user_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_user_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_user_stmt() (localctx IAlter_user_stmtContext) {
	localctx = NewAlter_user_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, PostgreSQLParserRULE_alter_user_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1847)
		p.Todo_implement()
	}

	return localctx
}

// IAlter_user_mapping_stmtContext is an interface to support dynamic dispatch.
type IAlter_user_mapping_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUser returns the user rule contexts.
	GetUser() IRole_nameContext

	// GetServer_name returns the server_name rule contexts.
	GetServer_name() IIdentifierContext

	// SetUser sets the user rule contexts.
	SetUser(IRole_nameContext)

	// SetServer_name sets the server_name rule contexts.
	SetServer_name(IIdentifierContext)

	// IsAlter_user_mapping_stmtContext differentiates from other interfaces.
	IsAlter_user_mapping_stmtContext()
}

type Alter_user_mapping_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	user        IRole_nameContext
	server_name IIdentifierContext
}

func NewEmptyAlter_user_mapping_stmtContext() *Alter_user_mapping_stmtContext {
	var p = new(Alter_user_mapping_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_user_mapping_stmt
	return p
}

func (*Alter_user_mapping_stmtContext) IsAlter_user_mapping_stmtContext() {}

func NewAlter_user_mapping_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_user_mapping_stmtContext {
	var p = new(Alter_user_mapping_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_user_mapping_stmt

	return p
}

func (s *Alter_user_mapping_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_user_mapping_stmtContext) GetUser() IRole_nameContext { return s.user }

func (s *Alter_user_mapping_stmtContext) GetServer_name() IIdentifierContext { return s.server_name }

func (s *Alter_user_mapping_stmtContext) SetUser(v IRole_nameContext) { s.user = v }

func (s *Alter_user_mapping_stmtContext) SetServer_name(v IIdentifierContext) { s.server_name = v }

func (s *Alter_user_mapping_stmtContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Alter_user_mapping_stmtContext) USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSER, 0)
}

func (s *Alter_user_mapping_stmtContext) MAPPING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMAPPING, 0)
}

func (s *Alter_user_mapping_stmtContext) FOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOR, 0)
}

func (s *Alter_user_mapping_stmtContext) SERVER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSERVER, 0)
}

func (s *Alter_user_mapping_stmtContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPTIONS, 0)
}

func (s *Alter_user_mapping_stmtContext) Role_name() IRole_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRole_nameContext)
}

func (s *Alter_user_mapping_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_user_mapping_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Alter_user_mapping_stmtContext) Alter_server_options_list() IAlter_server_options_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_server_options_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_server_options_listContext)
}

func (s *Alter_user_mapping_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Alter_user_mapping_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_user_mapping_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_user_mapping_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_user_mapping_stmt(s)
	}
}

func (s *Alter_user_mapping_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_user_mapping_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_user_mapping_stmt() (localctx IAlter_user_mapping_stmtContext) {
	localctx = NewAlter_user_mapping_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, PostgreSQLParserRULE_alter_user_mapping_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1849)
		p.Match(PostgreSQLParserALTER)
	}
	{
		p.SetState(1850)
		p.Match(PostgreSQLParserUSER)
	}
	{
		p.SetState(1851)
		p.Match(PostgreSQLParserMAPPING)
	}
	{
		p.SetState(1852)
		p.Match(PostgreSQLParserFOR)
	}
	{
		p.SetState(1853)

		var _x = p.Role_name()

		localctx.(*Alter_user_mapping_stmtContext).user = _x
	}
	{
		p.SetState(1854)
		p.Match(PostgreSQLParserSERVER)
	}
	{
		p.SetState(1855)

		var _x = p.identifier(0)

		localctx.(*Alter_user_mapping_stmtContext).server_name = _x
	}
	{
		p.SetState(1856)
		p.Match(PostgreSQLParserOPTIONS)
	}

	{
		p.SetState(1857)
		p.Match(PostgreSQLParserOPEN_PAREN)
	}
	{
		p.SetState(1858)
		p.Alter_server_options_list()
	}
	{
		p.SetState(1859)
		p.Match(PostgreSQLParserCLOSE_PAREN)
	}

	return localctx
}

// IAlter_view_stmtContext is an interface to support dynamic dispatch.
type IAlter_view_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_view_stmtContext differentiates from other interfaces.
	IsAlter_view_stmtContext()
}

type Alter_view_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_view_stmtContext() *Alter_view_stmtContext {
	var p = new(Alter_view_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alter_view_stmt
	return p
}

func (*Alter_view_stmtContext) IsAlter_view_stmtContext() {}

func NewAlter_view_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_view_stmtContext {
	var p = new(Alter_view_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alter_view_stmt

	return p
}

func (s *Alter_view_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_view_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Alter_view_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_view_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_view_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlter_view_stmt(s)
	}
}

func (s *Alter_view_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlter_view_stmt(s)
	}
}

func (p *PostgreSQLParser) Alter_view_stmt() (localctx IAlter_view_stmtContext) {
	localctx = NewAlter_view_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, PostgreSQLParserRULE_alter_view_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1861)
		p.Todo_implement()
	}

	return localctx
}

// IAnalyze_stmtContext is an interface to support dynamic dispatch.
type IAnalyze_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnalyze_stmtContext differentiates from other interfaces.
	IsAnalyze_stmtContext()
}

type Analyze_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnalyze_stmtContext() *Analyze_stmtContext {
	var p = new(Analyze_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_analyze_stmt
	return p
}

func (*Analyze_stmtContext) IsAnalyze_stmtContext() {}

func NewAnalyze_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Analyze_stmtContext {
	var p = new(Analyze_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_analyze_stmt

	return p
}

func (s *Analyze_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Analyze_stmtContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserANALYZE, 0)
}

func (s *Analyze_stmtContext) Table_name_() ITable_name_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_Context)
}

func (s *Analyze_stmtContext) VERBOSE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVERBOSE, 0)
}

func (s *Analyze_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Analyze_stmtContext) Name_list() IName_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_listContext)
}

func (s *Analyze_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Analyze_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Analyze_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Analyze_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAnalyze_stmt(s)
	}
}

func (s *Analyze_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAnalyze_stmt(s)
	}
}

func (p *PostgreSQLParser) Analyze_stmt() (localctx IAnalyze_stmtContext) {
	localctx = NewAnalyze_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, PostgreSQLParserRULE_analyze_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1863)
		p.Match(PostgreSQLParserANALYZE)
	}
	p.SetState(1865)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserVERBOSE {
		{
			p.SetState(1864)
			p.Match(PostgreSQLParserVERBOSE)
		}

	}
	{
		p.SetState(1867)
		p.Table_name_()
	}
	p.SetState(1872)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserOPEN_PAREN {
		{
			p.SetState(1868)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(1869)
			p.Name_list()
		}
		{
			p.SetState(1870)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}

	return localctx
}

// IClose_stmtContext is an interface to support dynamic dispatch.
type IClose_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClose_stmtContext differentiates from other interfaces.
	IsClose_stmtContext()
}

type Close_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClose_stmtContext() *Close_stmtContext {
	var p = new(Close_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_close_stmt
	return p
}

func (*Close_stmtContext) IsClose_stmtContext() {}

func NewClose_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Close_stmtContext {
	var p = new(Close_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_close_stmt

	return p
}

func (s *Close_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Close_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Close_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Close_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Close_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterClose_stmt(s)
	}
}

func (s *Close_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitClose_stmt(s)
	}
}

func (p *PostgreSQLParser) Close_stmt() (localctx IClose_stmtContext) {
	localctx = NewClose_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, PostgreSQLParserRULE_close_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1874)
		p.Todo_implement()
	}

	return localctx
}

// ICluster_stmtContext is an interface to support dynamic dispatch.
type ICluster_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCluster_stmtContext differentiates from other interfaces.
	IsCluster_stmtContext()
}

type Cluster_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCluster_stmtContext() *Cluster_stmtContext {
	var p = new(Cluster_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_cluster_stmt
	return p
}

func (*Cluster_stmtContext) IsCluster_stmtContext() {}

func NewCluster_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cluster_stmtContext {
	var p = new(Cluster_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_cluster_stmt

	return p
}

func (s *Cluster_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Cluster_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Cluster_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cluster_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cluster_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCluster_stmt(s)
	}
}

func (s *Cluster_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCluster_stmt(s)
	}
}

func (p *PostgreSQLParser) Cluster_stmt() (localctx ICluster_stmtContext) {
	localctx = NewCluster_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, PostgreSQLParserRULE_cluster_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1876)
		p.Todo_implement()
	}

	return localctx
}

// IComment_stmtContext is an interface to support dynamic dispatch.
type IComment_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComment_stmtContext differentiates from other interfaces.
	IsComment_stmtContext()
}

type Comment_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComment_stmtContext() *Comment_stmtContext {
	var p = new(Comment_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_comment_stmt
	return p
}

func (*Comment_stmtContext) IsComment_stmtContext() {}

func NewComment_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Comment_stmtContext {
	var p = new(Comment_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_comment_stmt

	return p
}

func (s *Comment_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Comment_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Comment_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comment_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Comment_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterComment_stmt(s)
	}
}

func (s *Comment_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitComment_stmt(s)
	}
}

func (p *PostgreSQLParser) Comment_stmt() (localctx IComment_stmtContext) {
	localctx = NewComment_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, PostgreSQLParserRULE_comment_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1878)
		p.Todo_implement()
	}

	return localctx
}

// ICommit_stmtContext is an interface to support dynamic dispatch.
type ICommit_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommit_stmtContext differentiates from other interfaces.
	IsCommit_stmtContext()
}

type Commit_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommit_stmtContext() *Commit_stmtContext {
	var p = new(Commit_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_commit_stmt
	return p
}

func (*Commit_stmtContext) IsCommit_stmtContext() {}

func NewCommit_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Commit_stmtContext {
	var p = new(Commit_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_commit_stmt

	return p
}

func (s *Commit_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Commit_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Commit_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Commit_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Commit_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCommit_stmt(s)
	}
}

func (s *Commit_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCommit_stmt(s)
	}
}

func (p *PostgreSQLParser) Commit_stmt() (localctx ICommit_stmtContext) {
	localctx = NewCommit_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, PostgreSQLParserRULE_commit_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1880)
		p.Todo_implement()
	}

	return localctx
}

// ICommit_prepared_stmtContext is an interface to support dynamic dispatch.
type ICommit_prepared_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommit_prepared_stmtContext differentiates from other interfaces.
	IsCommit_prepared_stmtContext()
}

type Commit_prepared_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommit_prepared_stmtContext() *Commit_prepared_stmtContext {
	var p = new(Commit_prepared_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_commit_prepared_stmt
	return p
}

func (*Commit_prepared_stmtContext) IsCommit_prepared_stmtContext() {}

func NewCommit_prepared_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Commit_prepared_stmtContext {
	var p = new(Commit_prepared_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_commit_prepared_stmt

	return p
}

func (s *Commit_prepared_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Commit_prepared_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Commit_prepared_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Commit_prepared_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Commit_prepared_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCommit_prepared_stmt(s)
	}
}

func (s *Commit_prepared_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCommit_prepared_stmt(s)
	}
}

func (p *PostgreSQLParser) Commit_prepared_stmt() (localctx ICommit_prepared_stmtContext) {
	localctx = NewCommit_prepared_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, PostgreSQLParserRULE_commit_prepared_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1882)
		p.Todo_implement()
	}

	return localctx
}

// ICopy_stmtContext is an interface to support dynamic dispatch.
type ICopy_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCopy_stmtContext differentiates from other interfaces.
	IsCopy_stmtContext()
}

type Copy_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCopy_stmtContext() *Copy_stmtContext {
	var p = new(Copy_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_copy_stmt
	return p
}

func (*Copy_stmtContext) IsCopy_stmtContext() {}

func NewCopy_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Copy_stmtContext {
	var p = new(Copy_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_copy_stmt

	return p
}

func (s *Copy_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Copy_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Copy_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Copy_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Copy_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCopy_stmt(s)
	}
}

func (s *Copy_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCopy_stmt(s)
	}
}

func (p *PostgreSQLParser) Copy_stmt() (localctx ICopy_stmtContext) {
	localctx = NewCopy_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, PostgreSQLParserRULE_copy_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1884)
		p.Todo_implement()
	}

	return localctx
}

// ICreate_stmtContext is an interface to support dynamic dispatch.
type ICreate_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_stmtContext differentiates from other interfaces.
	IsCreate_stmtContext()
}

type Create_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_stmtContext() *Create_stmtContext {
	var p = new(Create_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_stmt
	return p
}

func (*Create_stmtContext) IsCreate_stmtContext() {}

func NewCreate_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_stmtContext {
	var p = new(Create_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_stmt

	return p
}

func (s *Create_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_stmtContext) Create_access_method_stmt() ICreate_access_method_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_access_method_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_access_method_stmtContext)
}

func (s *Create_stmtContext) Create_aggregate_stmt() ICreate_aggregate_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_aggregate_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_aggregate_stmtContext)
}

func (s *Create_stmtContext) Create_cast_stmt() ICreate_cast_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_cast_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_cast_stmtContext)
}

func (s *Create_stmtContext) Create_collation_stmt() ICreate_collation_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_collation_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_collation_stmtContext)
}

func (s *Create_stmtContext) Create_conversion_stmt() ICreate_conversion_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_conversion_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_conversion_stmtContext)
}

func (s *Create_stmtContext) Create_database_stmt() ICreate_database_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_database_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_database_stmtContext)
}

func (s *Create_stmtContext) Create_domain_stmt() ICreate_domain_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_domain_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_domain_stmtContext)
}

func (s *Create_stmtContext) Create_event_trigger_stmt() ICreate_event_trigger_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_event_trigger_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_event_trigger_stmtContext)
}

func (s *Create_stmtContext) Create_foreign_data_stmt() ICreate_foreign_data_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_foreign_data_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_foreign_data_stmtContext)
}

func (s *Create_stmtContext) Create_foreign_table_stmt() ICreate_foreign_table_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_foreign_table_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_foreign_table_stmtContext)
}

func (s *Create_stmtContext) Create_function_stmt() ICreate_function_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_function_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_function_stmtContext)
}

func (s *Create_stmtContext) Create_group_stmt() ICreate_group_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_group_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_group_stmtContext)
}

func (s *Create_stmtContext) Create_index_stmt() ICreate_index_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_index_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_index_stmtContext)
}

func (s *Create_stmtContext) Create_language_stmt() ICreate_language_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_language_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_language_stmtContext)
}

func (s *Create_stmtContext) Create_materialized_view_stmt() ICreate_materialized_view_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_materialized_view_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_materialized_view_stmtContext)
}

func (s *Create_stmtContext) Create_operator_stmt() ICreate_operator_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_operator_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_operator_stmtContext)
}

func (s *Create_stmtContext) Create_operator_class_stmt() ICreate_operator_class_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_operator_class_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_operator_class_stmtContext)
}

func (s *Create_stmtContext) Create_operator_family_stmt() ICreate_operator_family_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_operator_family_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_operator_family_stmtContext)
}

func (s *Create_stmtContext) Create_policy_stmt() ICreate_policy_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_policy_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_policy_stmtContext)
}

func (s *Create_stmtContext) Create_role_stmt() ICreate_role_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_role_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_role_stmtContext)
}

func (s *Create_stmtContext) Create_rule_stmt() ICreate_rule_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_rule_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_rule_stmtContext)
}

func (s *Create_stmtContext) Create_schema_stmt() ICreate_schema_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_schema_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_schema_stmtContext)
}

func (s *Create_stmtContext) Create_sequence_stmt() ICreate_sequence_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_sequence_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_sequence_stmtContext)
}

func (s *Create_stmtContext) Create_server_stmt() ICreate_server_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_server_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_server_stmtContext)
}

func (s *Create_stmtContext) Create_statistics_stmt() ICreate_statistics_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_statistics_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_statistics_stmtContext)
}

func (s *Create_stmtContext) Create_subscription_stmt() ICreate_subscription_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_subscription_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_subscription_stmtContext)
}

func (s *Create_stmtContext) Create_table_stmt() ICreate_table_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_table_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_table_stmtContext)
}

func (s *Create_stmtContext) Create_table_as_stmt() ICreate_table_as_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_table_as_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_table_as_stmtContext)
}

func (s *Create_stmtContext) Create_tablespace_stmt() ICreate_tablespace_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_tablespace_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_tablespace_stmtContext)
}

func (s *Create_stmtContext) Create_text_search_config_stmt() ICreate_text_search_config_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_text_search_config_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_text_search_config_stmtContext)
}

func (s *Create_stmtContext) Create_text_search_dict_stmt() ICreate_text_search_dict_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_text_search_dict_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_text_search_dict_stmtContext)
}

func (s *Create_stmtContext) Create_text_search_parser_stmt() ICreate_text_search_parser_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_text_search_parser_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_text_search_parser_stmtContext)
}

func (s *Create_stmtContext) Create_text_search_template_stmt() ICreate_text_search_template_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_text_search_template_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_text_search_template_stmtContext)
}

func (s *Create_stmtContext) Create_transform_stmt() ICreate_transform_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_transform_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_transform_stmtContext)
}

func (s *Create_stmtContext) Create_trigger_stmt() ICreate_trigger_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_trigger_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_trigger_stmtContext)
}

func (s *Create_stmtContext) Create_type_stmt() ICreate_type_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_type_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_type_stmtContext)
}

func (s *Create_stmtContext) Create_user_stmt() ICreate_user_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_user_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_user_stmtContext)
}

func (s *Create_stmtContext) Create_user_mapping_stmt() ICreate_user_mapping_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_user_mapping_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_user_mapping_stmtContext)
}

func (s *Create_stmtContext) Create_view_stmt() ICreate_view_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_view_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_view_stmtContext)
}

func (s *Create_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_stmt(s)
	}
}

func (s *Create_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_stmt() (localctx ICreate_stmtContext) {
	localctx = NewCreate_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, PostgreSQLParserRULE_create_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1925)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 115, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1886)
			p.Create_access_method_stmt()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1887)
			p.Create_aggregate_stmt()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1888)
			p.Create_cast_stmt()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1889)
			p.Create_collation_stmt()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1890)
			p.Create_conversion_stmt()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1891)
			p.Create_database_stmt()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1892)
			p.Create_domain_stmt()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1893)
			p.Create_event_trigger_stmt()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1894)
			p.Create_foreign_data_stmt()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1895)
			p.Create_foreign_table_stmt()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1896)
			p.Create_function_stmt()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1897)
			p.Create_group_stmt()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1898)
			p.Create_index_stmt()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1899)
			p.Create_language_stmt()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1900)
			p.Create_materialized_view_stmt()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1901)
			p.Create_operator_stmt()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1902)
			p.Create_operator_class_stmt()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(1903)
			p.Create_operator_family_stmt()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(1904)
			p.Create_policy_stmt()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1905)
			p.Create_role_stmt()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1906)
			p.Create_rule_stmt()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(1907)
			p.Create_schema_stmt()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(1908)
			p.Create_sequence_stmt()
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(1909)
			p.Create_server_stmt()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(1910)
			p.Create_statistics_stmt()
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(1911)
			p.Create_subscription_stmt()
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(1912)
			p.Create_table_stmt()
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(1913)
			p.Create_table_as_stmt()
		}

	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(1914)
			p.Create_tablespace_stmt()
		}

	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(1915)
			p.Create_text_search_config_stmt()
		}

	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(1916)
			p.Create_text_search_dict_stmt()
		}

	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(1917)
			p.Create_text_search_parser_stmt()
		}

	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(1918)
			p.Create_text_search_template_stmt()
		}

	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(1919)
			p.Create_transform_stmt()
		}

	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(1920)
			p.Create_trigger_stmt()
		}

	case 36:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(1921)
			p.Create_type_stmt()
		}

	case 37:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(1922)
			p.Create_user_stmt()
		}

	case 38:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(1923)
			p.Create_user_mapping_stmt()
		}

	case 39:
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(1924)
			p.Create_view_stmt()
		}

	}

	return localctx
}

// ICreate_access_method_stmtContext is an interface to support dynamic dispatch.
type ICreate_access_method_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_access_method_stmtContext differentiates from other interfaces.
	IsCreate_access_method_stmtContext()
}

type Create_access_method_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_access_method_stmtContext() *Create_access_method_stmtContext {
	var p = new(Create_access_method_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_access_method_stmt
	return p
}

func (*Create_access_method_stmtContext) IsCreate_access_method_stmtContext() {}

func NewCreate_access_method_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_access_method_stmtContext {
	var p = new(Create_access_method_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_access_method_stmt

	return p
}

func (s *Create_access_method_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_access_method_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_access_method_stmtContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserACCESS, 0)
}

func (s *Create_access_method_stmtContext) METHOD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMETHOD, 0)
}

func (s *Create_access_method_stmtContext) AllName_() []IName_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IName_Context)(nil)).Elem())
	var tst = make([]IName_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IName_Context)
		}
	}

	return tst
}

func (s *Create_access_method_stmtContext) Name_(i int) IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Create_access_method_stmtContext) TYPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTYPE, 0)
}

func (s *Create_access_method_stmtContext) INDEX() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINDEX, 0)
}

func (s *Create_access_method_stmtContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHANDLER, 0)
}

func (s *Create_access_method_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_access_method_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_access_method_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_access_method_stmt(s)
	}
}

func (s *Create_access_method_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_access_method_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_access_method_stmt() (localctx ICreate_access_method_stmtContext) {
	localctx = NewCreate_access_method_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, PostgreSQLParserRULE_create_access_method_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1927)
		p.Match(PostgreSQLParserCREATE)
	}
	{
		p.SetState(1928)
		p.Match(PostgreSQLParserACCESS)
	}
	{
		p.SetState(1929)
		p.Match(PostgreSQLParserMETHOD)
	}
	{
		p.SetState(1930)
		p.Name_()
	}
	{
		p.SetState(1931)
		p.Match(PostgreSQLParserTYPE)
	}
	{
		p.SetState(1932)
		p.Match(PostgreSQLParserINDEX)
	}
	{
		p.SetState(1933)
		p.Match(PostgreSQLParserHANDLER)
	}
	{
		p.SetState(1934)
		p.Name_()
	}

	return localctx
}

// ICreate_aggregate_stmtContext is an interface to support dynamic dispatch.
type ICreate_aggregate_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_aggregate_stmtContext differentiates from other interfaces.
	IsCreate_aggregate_stmtContext()
}

type Create_aggregate_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_aggregate_stmtContext() *Create_aggregate_stmtContext {
	var p = new(Create_aggregate_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_aggregate_stmt
	return p
}

func (*Create_aggregate_stmtContext) IsCreate_aggregate_stmtContext() {}

func NewCreate_aggregate_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_aggregate_stmtContext {
	var p = new(Create_aggregate_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_aggregate_stmt

	return p
}

func (s *Create_aggregate_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_aggregate_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_aggregate_stmtContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAGGREGATE, 0)
}

func (s *Create_aggregate_stmtContext) AllName_() []IName_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IName_Context)(nil)).Elem())
	var tst = make([]IName_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IName_Context)
		}
	}

	return tst
}

func (s *Create_aggregate_stmtContext) Name_(i int) IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Create_aggregate_stmtContext) AllOPEN_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPEN_PAREN)
}

func (s *Create_aggregate_stmtContext) OPEN_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, i)
}

func (s *Create_aggregate_stmtContext) AllData_type_list() []IData_type_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_type_listContext)(nil)).Elem())
	var tst = make([]IData_type_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_type_listContext)
		}
	}

	return tst
}

func (s *Create_aggregate_stmtContext) Data_type_list(i int) IData_type_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_type_listContext)
}

func (s *Create_aggregate_stmtContext) AllCLOSE_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCLOSE_PAREN)
}

func (s *Create_aggregate_stmtContext) CLOSE_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, i)
}

func (s *Create_aggregate_stmtContext) SFUNC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSFUNC, 0)
}

func (s *Create_aggregate_stmtContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserEQUAL)
}

func (s *Create_aggregate_stmtContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEQUAL, i)
}

func (s *Create_aggregate_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Create_aggregate_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_aggregate_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Create_aggregate_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Create_aggregate_stmtContext) STYPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTYPE, 0)
}

func (s *Create_aggregate_stmtContext) SSPACE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSSPACE, 0)
}

func (s *Create_aggregate_stmtContext) AllINTEGER_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserINTEGER_LITERAL)
}

func (s *Create_aggregate_stmtContext) INTEGER_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, i)
}

func (s *Create_aggregate_stmtContext) FINALFUNC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFINALFUNC, 0)
}

func (s *Create_aggregate_stmtContext) FINALFUNC_EXTRA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFINALFUNC_EXTRA, 0)
}

func (s *Create_aggregate_stmtContext) COMBINEFUNC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMBINEFUNC, 0)
}

func (s *Create_aggregate_stmtContext) SERIALFUNC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSERIALFUNC, 0)
}

func (s *Create_aggregate_stmtContext) DESERIALFUNC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDESERIALFUNC, 0)
}

func (s *Create_aggregate_stmtContext) INITCOND() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINITCOND, 0)
}

func (s *Create_aggregate_stmtContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Create_aggregate_stmtContext) MSFUNC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMSFUNC, 0)
}

func (s *Create_aggregate_stmtContext) MINVFUNC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMINVFUNC, 0)
}

func (s *Create_aggregate_stmtContext) MSTYPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMSTYPE, 0)
}

func (s *Create_aggregate_stmtContext) MSSPACE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMSSPACE, 0)
}

func (s *Create_aggregate_stmtContext) MFINALFUNC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMFINALFUNC, 0)
}

func (s *Create_aggregate_stmtContext) MFINALFUNC_EXTRA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMFINALFUNC_EXTRA, 0)
}

func (s *Create_aggregate_stmtContext) MINITCOND() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMINITCOND, 0)
}

func (s *Create_aggregate_stmtContext) SORTOP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSORTOP, 0)
}

func (s *Create_aggregate_stmtContext) PARALLEL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPARALLEL, 0)
}

func (s *Create_aggregate_stmtContext) AllIN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserIN)
}

func (s *Create_aggregate_stmtContext) IN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIN, i)
}

func (s *Create_aggregate_stmtContext) AllVARIADIC() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserVARIADIC)
}

func (s *Create_aggregate_stmtContext) VARIADIC(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVARIADIC, i)
}

func (s *Create_aggregate_stmtContext) SAFE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSAFE, 0)
}

func (s *Create_aggregate_stmtContext) RESTRICTED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICTED, 0)
}

func (s *Create_aggregate_stmtContext) UNSAFE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNSAFE, 0)
}

func (s *Create_aggregate_stmtContext) ORDER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserORDER, 0)
}

func (s *Create_aggregate_stmtContext) BY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBY, 0)
}

func (s *Create_aggregate_stmtContext) HYPOTHETICAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHYPOTHETICAL, 0)
}

func (s *Create_aggregate_stmtContext) BASETYPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBASETYPE, 0)
}

func (s *Create_aggregate_stmtContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_aggregate_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_aggregate_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_aggregate_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_aggregate_stmt(s)
	}
}

func (s *Create_aggregate_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_aggregate_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_aggregate_stmt() (localctx ICreate_aggregate_stmtContext) {
	localctx = NewCreate_aggregate_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, PostgreSQLParserRULE_create_aggregate_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2218)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1936)
			p.Match(PostgreSQLParserCREATE)
		}
		{
			p.SetState(1937)
			p.Match(PostgreSQLParserAGGREGATE)
		}
		{
			p.SetState(1938)
			p.Name_()
		}
		{
			p.SetState(1939)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		p.SetState(1941)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIN || _la == PostgreSQLParserVARIADIC {
			{
				p.SetState(1940)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserIN || _la == PostgreSQLParserVARIADIC) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(1944)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 117, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1943)
				p.Name_()
			}

		}
		{
			p.SetState(1946)
			p.Data_type_list()
		}
		{
			p.SetState(1947)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}
		{
			p.SetState(1948)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(1949)
			p.Match(PostgreSQLParserSFUNC)
		}
		{
			p.SetState(1950)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(1951)
			p.identifier(0)
		}
		{
			p.SetState(1952)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(1953)
			p.Match(PostgreSQLParserSTYPE)
		}
		{
			p.SetState(1954)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(1955)
			p.identifier(0)
		}
		p.SetState(1960)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1956)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(1957)
				p.Match(PostgreSQLParserSSPACE)
			}
			{
				p.SetState(1958)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(1959)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}

		}
		p.SetState(1966)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1962)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(1963)
				p.Match(PostgreSQLParserFINALFUNC)
			}
			{
				p.SetState(1964)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(1965)
				p.identifier(0)
			}

		}
		p.SetState(1970)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 120, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1968)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(1969)
				p.Match(PostgreSQLParserFINALFUNC_EXTRA)
			}

		}
		p.SetState(1976)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 121, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1972)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(1973)
				p.Match(PostgreSQLParserCOMBINEFUNC)
			}
			{
				p.SetState(1974)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(1975)
				p.identifier(0)
			}

		}
		p.SetState(1982)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1978)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(1979)
				p.Match(PostgreSQLParserSERIALFUNC)
			}
			{
				p.SetState(1980)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(1981)
				p.identifier(0)
			}

		}
		p.SetState(1988)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 123, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1984)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(1985)
				p.Match(PostgreSQLParserDESERIALFUNC)
			}
			{
				p.SetState(1986)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(1987)
				p.identifier(0)
			}

		}
		p.SetState(1994)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1990)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(1991)
				p.Match(PostgreSQLParserINITCOND)
			}
			{
				p.SetState(1992)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(1993)
				p.expr(0)
			}

		}
		p.SetState(2000)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1996)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(1997)
				p.Match(PostgreSQLParserMSFUNC)
			}
			{
				p.SetState(1998)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(1999)
				p.identifier(0)
			}

		}
		p.SetState(2006)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 126, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2002)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2003)
				p.Match(PostgreSQLParserMINVFUNC)
			}
			{
				p.SetState(2004)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2005)
				p.identifier(0)
			}

		}
		p.SetState(2012)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 127, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2008)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2009)
				p.Match(PostgreSQLParserMSTYPE)
			}
			{
				p.SetState(2010)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2011)
				p.identifier(0)
			}

		}
		p.SetState(2018)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2014)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2015)
				p.Match(PostgreSQLParserMSSPACE)
			}
			{
				p.SetState(2016)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2017)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}

		}
		p.SetState(2024)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2020)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2021)
				p.Match(PostgreSQLParserMFINALFUNC)
			}
			{
				p.SetState(2022)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2023)
				p.identifier(0)
			}

		}
		p.SetState(2028)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 130, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2026)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2027)
				p.Match(PostgreSQLParserMFINALFUNC_EXTRA)
			}

		}
		p.SetState(2034)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2030)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2031)
				p.Match(PostgreSQLParserMINITCOND)
			}
			{
				p.SetState(2032)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2033)
				p.identifier(0)
			}

		}
		p.SetState(2040)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 132, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2036)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2037)
				p.Match(PostgreSQLParserSORTOP)
			}
			{
				p.SetState(2038)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2039)
				p.identifier(0)
			}

		}
		p.SetState(2046)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCOMMA {
			{
				p.SetState(2042)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2043)
				p.Match(PostgreSQLParserPARALLEL)
			}
			{
				p.SetState(2044)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2045)
				_la = p.GetTokenStream().LA(1)

				if !(((_la-687)&-(0x1f+1)) == 0 && ((1<<uint((_la-687)))&((1<<(PostgreSQLParserSAFE-687))|(1<<(PostgreSQLParserRESTRICTED-687))|(1<<(PostgreSQLParserUNSAFE-687)))) != 0) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(2048)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2050)
			p.Match(PostgreSQLParserCREATE)
		}
		{
			p.SetState(2051)
			p.Match(PostgreSQLParserAGGREGATE)
		}
		{
			p.SetState(2052)
			p.Name_()
		}
		{
			p.SetState(2053)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		p.SetState(2061)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PostgreSQLParserWHITESPACE)|(1<<PostgreSQLParserA_)|(1<<PostgreSQLParserABORT)|(1<<PostgreSQLParserABS)|(1<<PostgreSQLParserABSOLUTE)|(1<<PostgreSQLParserACCESS)|(1<<PostgreSQLParserACTION)|(1<<PostgreSQLParserADA)|(1<<PostgreSQLParserADD)|(1<<PostgreSQLParserADMIN)|(1<<PostgreSQLParserAFTER)|(1<<PostgreSQLParserAGGREGATE)|(1<<PostgreSQLParserALLOCATE)|(1<<PostgreSQLParserALSO)|(1<<PostgreSQLParserALTER)|(1<<PostgreSQLParserALWAYS)|(1<<PostgreSQLParserANY)|(1<<PostgreSQLParserARE)|(1<<PostgreSQLParserASENSITIVE)|(1<<PostgreSQLParserASSERTION)|(1<<PostgreSQLParserASSIGNMENT))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(PostgreSQLParserAT-33))|(1<<(PostgreSQLParserATOMIC-33))|(1<<(PostgreSQLParserATTRIBUTE-33))|(1<<(PostgreSQLParserATTRIBUTES-33))|(1<<(PostgreSQLParserAVG-33))|(1<<(PostgreSQLParserBACKWARD-33))|(1<<(PostgreSQLParserBEFORE-33))|(1<<(PostgreSQLParserBEGIN-33))|(1<<(PostgreSQLParserBERNOULLI-33))|(1<<(PostgreSQLParserBETWEEN-33))|(1<<(PostgreSQLParserBIGINT-33))|(1<<(PostgreSQLParserBIT-33))|(1<<(PostgreSQLParserBIT_LENGTH-33))|(1<<(PostgreSQLParserBLOB-33))|(1<<(PostgreSQLParserBOOLEAN-33))|(1<<(PostgreSQLParserBREADTH-33))|(1<<(PostgreSQLParserBY-33))|(1<<(PostgreSQLParserC_-33))|(1<<(PostgreSQLParserCACHE-33))|(1<<(PostgreSQLParserCALL-33))|(1<<(PostgreSQLParserCALLED-33))|(1<<(PostgreSQLParserCARDINALITY-33))|(1<<(PostgreSQLParserCASCADE-33))|(1<<(PostgreSQLParserCASCADED-33))|(1<<(PostgreSQLParserCATALOG-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PostgreSQLParserCATALOG_NAME-65))|(1<<(PostgreSQLParserCEIL-65))|(1<<(PostgreSQLParserCEILING-65))|(1<<(PostgreSQLParserCHAIN-65))|(1<<(PostgreSQLParserCHAR-65))|(1<<(PostgreSQLParserCHAR_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER-65))|(1<<(PostgreSQLParserCHARACTER_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER_SET_CATALOG-65))|(1<<(PostgreSQLParserCHARACTER_SET_NAME-65))|(1<<(PostgreSQLParserCHARACTER_SET_SCHEMA-65))|(1<<(PostgreSQLParserCHARACTERISTICS-65))|(1<<(PostgreSQLParserCHARACTERS-65))|(1<<(PostgreSQLParserCHECKPOINT-65))|(1<<(PostgreSQLParserCLASS-65))|(1<<(PostgreSQLParserCLASS_ORIGIN-65))|(1<<(PostgreSQLParserCLOB-65))|(1<<(PostgreSQLParserCLOSE-65))|(1<<(PostgreSQLParserCLUSTER-65))|(1<<(PostgreSQLParserCOALESCE-65))|(1<<(PostgreSQLParserCOBOL-65))|(1<<(PostgreSQLParserCOLLATION_CATALOG-65))|(1<<(PostgreSQLParserCOLLATION_NAME-65))|(1<<(PostgreSQLParserCOLLATION_SCHEMA-65))|(1<<(PostgreSQLParserCOLLECT-65))|(1<<(PostgreSQLParserCOLUMN_NAME-65))|(1<<(PostgreSQLParserCOMMAND_FUNCTION-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(PostgreSQLParserCOMMAND_FUNCTION_CODE-97))|(1<<(PostgreSQLParserCOMMENT-97))|(1<<(PostgreSQLParserCOMMIT-97))|(1<<(PostgreSQLParserCOMMITTED-97))|(1<<(PostgreSQLParserCONDITION-97))|(1<<(PostgreSQLParserCONDITION_NUMBER-97))|(1<<(PostgreSQLParserCONNECT-97))|(1<<(PostgreSQLParserCONNECTION-97))|(1<<(PostgreSQLParserCONNECTION_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_CATALOG-97))|(1<<(PostgreSQLParserCONSTRAINT_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_SCHEMA-97))|(1<<(PostgreSQLParserCONSTRAINTS-97))|(1<<(PostgreSQLParserCONSTRUCTOR-97))|(1<<(PostgreSQLParserCONTAINS-97))|(1<<(PostgreSQLParserCONTINUE-97))|(1<<(PostgreSQLParserCONVERSION-97))|(1<<(PostgreSQLParserCONVERT-97))|(1<<(PostgreSQLParserCOPY-97))|(1<<(PostgreSQLParserCORR-97))|(1<<(PostgreSQLParserCORRESPONDING-97))|(1<<(PostgreSQLParserCOUNT-97))|(1<<(PostgreSQLParserCOVAR_POP-97))|(1<<(PostgreSQLParserCOVAR_SAMP-97)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(PostgreSQLParserCSV-131))|(1<<(PostgreSQLParserCUBE-131))|(1<<(PostgreSQLParserCUME_DIST-131))|(1<<(PostgreSQLParserCURRENT-131))|(1<<(PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP-131))|(1<<(PostgreSQLParserCURRENT_PATH-131))|(1<<(PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE-131))|(1<<(PostgreSQLParserCURSOR-131))|(1<<(PostgreSQLParserCURSOR_NAME-131))|(1<<(PostgreSQLParserCYCLE-131))|(1<<(PostgreSQLParserDATA-131))|(1<<(PostgreSQLParserDATABASE-131))|(1<<(PostgreSQLParserDATE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_CODE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_PRECISION-131))|(1<<(PostgreSQLParserDAY-131))|(1<<(PostgreSQLParserDEALLOCATE-131))|(1<<(PostgreSQLParserDEC-131))|(1<<(PostgreSQLParserDECIMAL-131))|(1<<(PostgreSQLParserDECLARE-131))|(1<<(PostgreSQLParserDEFAULTS-131))|(1<<(PostgreSQLParserDEFERRED-131))|(1<<(PostgreSQLParserDEFINED-131))|(1<<(PostgreSQLParserDEFINER-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(PostgreSQLParserDEGREE-163))|(1<<(PostgreSQLParserDELETE-163))|(1<<(PostgreSQLParserDELIMITER-163))|(1<<(PostgreSQLParserDELIMITERS-163))|(1<<(PostgreSQLParserDENSE_RANK-163))|(1<<(PostgreSQLParserDEPTH-163))|(1<<(PostgreSQLParserDEREF-163))|(1<<(PostgreSQLParserDERIVED-163))|(1<<(PostgreSQLParserDESCRIBE-163))|(1<<(PostgreSQLParserDESCRIPTOR-163))|(1<<(PostgreSQLParserDETERMINISTIC-163))|(1<<(PostgreSQLParserDIAGNOSTICS-163))|(1<<(PostgreSQLParserDICTIONARY-163))|(1<<(PostgreSQLParserDISCONNECT-163))|(1<<(PostgreSQLParserDISPATCH-163))|(1<<(PostgreSQLParserDOMAIN-163))|(1<<(PostgreSQLParserDOUBLE-163))|(1<<(PostgreSQLParserDYNAMIC-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION_CODE-163))|(1<<(PostgreSQLParserEACH-163))|(1<<(PostgreSQLParserELEMENT-163)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(PostgreSQLParserENCODING-197))|(1<<(PostgreSQLParserENCRYPTED-197))|(1<<(PostgreSQLParserEND-197))|(1<<(PostgreSQLParserEQUALS-197))|(1<<(PostgreSQLParserESCAPE-197))|(1<<(PostgreSQLParserEVERY-197))|(1<<(PostgreSQLParserEXCEPTION-197))|(1<<(PostgreSQLParserEXCLUDE-197))|(1<<(PostgreSQLParserEXCLUDING-197))|(1<<(PostgreSQLParserEXCLUSIVE-197))|(1<<(PostgreSQLParserEXEC-197))|(1<<(PostgreSQLParserEXECUTE-197))|(1<<(PostgreSQLParserEXISTS-197))|(1<<(PostgreSQLParserEXP-197))|(1<<(PostgreSQLParserEXPLAIN-197))|(1<<(PostgreSQLParserEXTENSION-197))|(1<<(PostgreSQLParserEXTERNAL-197))|(1<<(PostgreSQLParserEXTRACT-197))|(1<<(PostgreSQLParserFILTER-197))|(1<<(PostgreSQLParserFINAL-197))|(1<<(PostgreSQLParserFIRST-197))|(1<<(PostgreSQLParserFLOAT-197))|(1<<(PostgreSQLParserFLOOR-197))|(1<<(PostgreSQLParserFOLLOWING-197)))) != 0) || (((_la-229)&-(0x1f+1)) == 0 && ((1<<uint((_la-229)))&((1<<(PostgreSQLParserFORCE-229))|(1<<(PostgreSQLParserFORMAT-229))|(1<<(PostgreSQLParserFORTRAN-229))|(1<<(PostgreSQLParserFORWARD-229))|(1<<(PostgreSQLParserFOUND-229))|(1<<(PostgreSQLParserFREE-229))|(1<<(PostgreSQLParserFUNCTION-229))|(1<<(PostgreSQLParserFUSION-229))|(1<<(PostgreSQLParserG_-229))|(1<<(PostgreSQLParserGENERAL-229))|(1<<(PostgreSQLParserGENERATED-229))|(1<<(PostgreSQLParserGET-229))|(1<<(PostgreSQLParserGLOBAL-229))|(1<<(PostgreSQLParserGO-229))|(1<<(PostgreSQLParserGOTO-229))|(1<<(PostgreSQLParserGRANTED-229))|(1<<(PostgreSQLParserGREATEST-229))|(1<<(PostgreSQLParserGROUPING-229))|(1<<(PostgreSQLParserHANDLER-229))|(1<<(PostgreSQLParserHIERARCHY-229))|(1<<(PostgreSQLParserHOLD-229))|(1<<(PostgreSQLParserHOST-229))|(1<<(PostgreSQLParserHOUR-229))|(1<<(PostgreSQLParserIDENTITY-229))|(1<<(PostgreSQLParserIGNORE-229)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(PostgreSQLParserIMMEDIATE-262))|(1<<(PostgreSQLParserIMMUTABLE-262))|(1<<(PostgreSQLParserIMPLEMENTATION-262))|(1<<(PostgreSQLParserIMPLICIT-262))|(1<<(PostgreSQLParserIN-262))|(1<<(PostgreSQLParserINCLUDING-262))|(1<<(PostgreSQLParserINCREMENT-262))|(1<<(PostgreSQLParserINDEX-262))|(1<<(PostgreSQLParserINDICATOR-262))|(1<<(PostgreSQLParserINHERITS-262))|(1<<(PostgreSQLParserINOUT-262))|(1<<(PostgreSQLParserINPUT-262))|(1<<(PostgreSQLParserINSENSITIVE-262))|(1<<(PostgreSQLParserINSERT-262))|(1<<(PostgreSQLParserINSTANCE-262))|(1<<(PostgreSQLParserINSTANTIABLE-262))|(1<<(PostgreSQLParserINSTEAD-262))|(1<<(PostgreSQLParserINT-262))|(1<<(PostgreSQLParserINTEGER-262))|(1<<(PostgreSQLParserINTERSECTION-262))|(1<<(PostgreSQLParserINTERVAL-262))|(1<<(PostgreSQLParserINVOKER-262))|(1<<(PostgreSQLParserISOLATION-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(PostgreSQLParserK_-294))|(1<<(PostgreSQLParserKEY-294))|(1<<(PostgreSQLParserKEY_MEMBER-294))|(1<<(PostgreSQLParserKEY_TYPE-294))|(1<<(PostgreSQLParserLANGUAGE-294))|(1<<(PostgreSQLParserLARGE-294))|(1<<(PostgreSQLParserLAST-294))|(1<<(PostgreSQLParserLEAST-294))|(1<<(PostgreSQLParserLEFT-294))|(1<<(PostgreSQLParserLENGTH-294))|(1<<(PostgreSQLParserLEVEL-294))|(1<<(PostgreSQLParserLISTEN-294))|(1<<(PostgreSQLParserLN-294))|(1<<(PostgreSQLParserLOAD-294))|(1<<(PostgreSQLParserLOCAL-294))|(1<<(PostgreSQLParserLOCATION-294))|(1<<(PostgreSQLParserLOCATOR-294))|(1<<(PostgreSQLParserLOCK-294))|(1<<(PostgreSQLParserLOCKED-294))|(1<<(PostgreSQLParserLOWER-294))|(1<<(PostgreSQLParserM_-294))|(1<<(PostgreSQLParserMAP-294)))) != 0) || (((_la-327)&-(0x1f+1)) == 0 && ((1<<uint((_la-327)))&((1<<(PostgreSQLParserMATCH-327))|(1<<(PostgreSQLParserMATCHED-327))|(1<<(PostgreSQLParserMAX-327))|(1<<(PostgreSQLParserMAXVALUE-327))|(1<<(PostgreSQLParserMEMBER-327))|(1<<(PostgreSQLParserMERGE-327))|(1<<(PostgreSQLParserMESSAGE_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_OCTET_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_TEXT-327))|(1<<(PostgreSQLParserMETHOD-327))|(1<<(PostgreSQLParserMIN-327))|(1<<(PostgreSQLParserMINUTE-327))|(1<<(PostgreSQLParserMINVALUE-327))|(1<<(PostgreSQLParserMOD-327))|(1<<(PostgreSQLParserMODE-327))|(1<<(PostgreSQLParserMODIFIES-327))|(1<<(PostgreSQLParserMODULE-327))|(1<<(PostgreSQLParserMONTH-327))|(1<<(PostgreSQLParserMORE_-327))|(1<<(PostgreSQLParserMOVE-327))|(1<<(PostgreSQLParserMULTISET-327))|(1<<(PostgreSQLParserMUMPS-327))|(1<<(PostgreSQLParserNAME-327))|(1<<(PostgreSQLParserNAMES-327))|(1<<(PostgreSQLParserNATIONAL-327))|(1<<(PostgreSQLParserNCHAR-327))|(1<<(PostgreSQLParserNCLOB-327))|(1<<(PostgreSQLParserNESTING-327))|(1<<(PostgreSQLParserNEW-327)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(PostgreSQLParserNEXT-359))|(1<<(PostgreSQLParserNO-359))|(1<<(PostgreSQLParserNONE-359))|(1<<(PostgreSQLParserNORMALIZE-359))|(1<<(PostgreSQLParserNORMALIZED-359))|(1<<(PostgreSQLParserNOTHING-359))|(1<<(PostgreSQLParserNOTIFY-359))|(1<<(PostgreSQLParserNOWAIT-359))|(1<<(PostgreSQLParserNULLABLE-359))|(1<<(PostgreSQLParserNULLIF-359))|(1<<(PostgreSQLParserNULLS-359))|(1<<(PostgreSQLParserNUMBER-359))|(1<<(PostgreSQLParserNUMERIC-359))|(1<<(PostgreSQLParserOBJECT-359))|(1<<(PostgreSQLParserOCTET_LENGTH-359))|(1<<(PostgreSQLParserOCTETS-359))|(1<<(PostgreSQLParserOF-359))|(1<<(PostgreSQLParserOFF-359))|(1<<(PostgreSQLParserOIDS-359))|(1<<(PostgreSQLParserOLD-359))|(1<<(PostgreSQLParserOPEN-359))|(1<<(PostgreSQLParserOPERATOR-359))|(1<<(PostgreSQLParserOPTION-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(PostgreSQLParserOPTIONS-391))|(1<<(PostgreSQLParserORDERING-391))|(1<<(PostgreSQLParserORDINALITY-391))|(1<<(PostgreSQLParserOTHERS-391))|(1<<(PostgreSQLParserOUT-391))|(1<<(PostgreSQLParserOUTPUT-391))|(1<<(PostgreSQLParserOVER-391))|(1<<(PostgreSQLParserOVERLAY-391))|(1<<(PostgreSQLParserOVERRIDING-391))|(1<<(PostgreSQLParserOWNER-391))|(1<<(PostgreSQLParserPAD-391))|(1<<(PostgreSQLParserPARAMETER-391))|(1<<(PostgreSQLParserPARAMETER_MODE-391))|(1<<(PostgreSQLParserPARAMETER_NAME-391))|(1<<(PostgreSQLParserPARAMETER_ORDINAL_POSITION-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_CATALOG-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_NAME-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA-391))|(1<<(PostgreSQLParserPARTIAL-391))|(1<<(PostgreSQLParserPARTITION-391))|(1<<(PostgreSQLParserPASCAL-391))|(1<<(PostgreSQLParserPASSWORD-391))|(1<<(PostgreSQLParserPATH-391))|(1<<(PostgreSQLParserPERCENT_RANK-391))|(1<<(PostgreSQLParserPERCENTILE_CONT-391))|(1<<(PostgreSQLParserPERCENTILE_DISC-391)))) != 0) || (((_la-424)&-(0x1f+1)) == 0 && ((1<<uint((_la-424)))&((1<<(PostgreSQLParserPLAIN-424))|(1<<(PostgreSQLParserPLI-424))|(1<<(PostgreSQLParserPOSITION-424))|(1<<(PostgreSQLParserPOWER-424))|(1<<(PostgreSQLParserPRECEDING-424))|(1<<(PostgreSQLParserPRECISION-424))|(1<<(PostgreSQLParserPREPARE-424))|(1<<(PostgreSQLParserPRESERVE-424))|(1<<(PostgreSQLParserPRIOR-424))|(1<<(PostgreSQLParserPRIVILEGES-424))|(1<<(PostgreSQLParserPROCEDURAL-424))|(1<<(PostgreSQLParserPROCEDURE-424))|(1<<(PostgreSQLParserPUBLIC-424))|(1<<(PostgreSQLParserQUOTE-424))|(1<<(PostgreSQLParserRANGE-424))|(1<<(PostgreSQLParserRANK-424))|(1<<(PostgreSQLParserREAD-424))|(1<<(PostgreSQLParserREADS-424))|(1<<(PostgreSQLParserREAL-424))|(1<<(PostgreSQLParserRECHECK-424))|(1<<(PostgreSQLParserRECURSIVE-424))|(1<<(PostgreSQLParserREF-424))|(1<<(PostgreSQLParserREFERENCING-424)))) != 0) || (((_la-456)&-(0x1f+1)) == 0 && ((1<<uint((_la-456)))&((1<<(PostgreSQLParserREFRESH-456))|(1<<(PostgreSQLParserREGR_AVGX-456))|(1<<(PostgreSQLParserREGR_AVGY-456))|(1<<(PostgreSQLParserREGR_COUNT-456))|(1<<(PostgreSQLParserREGR_INTERCEPT-456))|(1<<(PostgreSQLParserREGR_SLOPE-456))|(1<<(PostgreSQLParserREGR_SXX-456))|(1<<(PostgreSQLParserREGR_SXY-456))|(1<<(PostgreSQLParserREGR_SYY-456))|(1<<(PostgreSQLParserREINDEX-456))|(1<<(PostgreSQLParserRELATIVE-456))|(1<<(PostgreSQLParserRELEASE-456))|(1<<(PostgreSQLParserRENAME-456))|(1<<(PostgreSQLParserREPEATABLE-456))|(1<<(PostgreSQLParserREPLACE-456))|(1<<(PostgreSQLParserRESET-456))|(1<<(PostgreSQLParserRESTART-456))|(1<<(PostgreSQLParserRESTRICT-456))|(1<<(PostgreSQLParserRESULT-456))|(1<<(PostgreSQLParserRETURN-456))|(1<<(PostgreSQLParserRETURNED_CARDINALITY-456))|(1<<(PostgreSQLParserRETURNED_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_OCTET_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_SQLSTATE-456))|(1<<(PostgreSQLParserRETURNS-456))|(1<<(PostgreSQLParserREVOKE-456))|(1<<(PostgreSQLParserRIGHT-456))|(1<<(PostgreSQLParserROLE-456))|(1<<(PostgreSQLParserROLLBACK-456)))) != 0) || (((_la-488)&-(0x1f+1)) == 0 && ((1<<uint((_la-488)))&((1<<(PostgreSQLParserROLLUP-488))|(1<<(PostgreSQLParserROUTINE-488))|(1<<(PostgreSQLParserROUTINE_CATALOG-488))|(1<<(PostgreSQLParserROUTINE_NAME-488))|(1<<(PostgreSQLParserROUTINE_SCHEMA-488))|(1<<(PostgreSQLParserROW-488))|(1<<(PostgreSQLParserROW_COUNT-488))|(1<<(PostgreSQLParserROW_NUMBER-488))|(1<<(PostgreSQLParserROWS-488))|(1<<(PostgreSQLParserRULE-488))|(1<<(PostgreSQLParserSAVEPOINT-488))|(1<<(PostgreSQLParserSCALE-488))|(1<<(PostgreSQLParserSCHEMA-488))|(1<<(PostgreSQLParserSCHEMA_NAME-488))|(1<<(PostgreSQLParserSCOPE-488))|(1<<(PostgreSQLParserSCOPE_CATALOG-488))|(1<<(PostgreSQLParserSCOPE_NAME-488))|(1<<(PostgreSQLParserSCOPE_SCHEMA-488))|(1<<(PostgreSQLParserSCROLL-488))|(1<<(PostgreSQLParserSEARCH-488))|(1<<(PostgreSQLParserSECOND-488))|(1<<(PostgreSQLParserSECTION-488))|(1<<(PostgreSQLParserSECURITY-488))|(1<<(PostgreSQLParserSELF-488))|(1<<(PostgreSQLParserSENSITIVE-488))|(1<<(PostgreSQLParserSEQUENCE-488))|(1<<(PostgreSQLParserSEQUENCES-488))|(1<<(PostgreSQLParserSERIALIZABLE-488))|(1<<(PostgreSQLParserSERVER_NAME-488))|(1<<(PostgreSQLParserSESSION-488)))) != 0) || (((_la-520)&-(0x1f+1)) == 0 && ((1<<uint((_la-520)))&((1<<(PostgreSQLParserSET-520))|(1<<(PostgreSQLParserSETOF-520))|(1<<(PostgreSQLParserSETS-520))|(1<<(PostgreSQLParserSHARE-520))|(1<<(PostgreSQLParserSHOW-520))|(1<<(PostgreSQLParserSIMPLE-520))|(1<<(PostgreSQLParserSIZE-520))|(1<<(PostgreSQLParserSMALLINT-520))|(1<<(PostgreSQLParserSOME-520))|(1<<(PostgreSQLParserSOURCE-520))|(1<<(PostgreSQLParserSPACE-520))|(1<<(PostgreSQLParserSPECIFIC-520))|(1<<(PostgreSQLParserSPECIFIC_NAME-520))|(1<<(PostgreSQLParserSPECIFICTYPE-520))|(1<<(PostgreSQLParserSQL-520))|(1<<(PostgreSQLParserSQLCODE-520))|(1<<(PostgreSQLParserSQLERROR-520))|(1<<(PostgreSQLParserSQLEXCEPTION-520))|(1<<(PostgreSQLParserSQLSTATE-520))|(1<<(PostgreSQLParserSQLWARNING-520))|(1<<(PostgreSQLParserSQRT-520))|(1<<(PostgreSQLParserSTABLE-520))|(1<<(PostgreSQLParserSTART-520))|(1<<(PostgreSQLParserSTATE-520))|(1<<(PostgreSQLParserSTATEMENT-520))|(1<<(PostgreSQLParserSTATIC-520))|(1<<(PostgreSQLParserSTATISTICS-520))|(1<<(PostgreSQLParserSTDDEV_POP-520))|(1<<(PostgreSQLParserSTDDEV_SAMP-520)))) != 0) || (((_la-552)&-(0x1f+1)) == 0 && ((1<<uint((_la-552)))&((1<<(PostgreSQLParserSTDIN-552))|(1<<(PostgreSQLParserSTDOUT-552))|(1<<(PostgreSQLParserSTORAGE-552))|(1<<(PostgreSQLParserSTRICT-552))|(1<<(PostgreSQLParserSTRUCTURE-552))|(1<<(PostgreSQLParserSTYLE-552))|(1<<(PostgreSQLParserSUBCLASS_ORIGIN-552))|(1<<(PostgreSQLParserSUBMULTISET-552))|(1<<(PostgreSQLParserSUBSTRING-552))|(1<<(PostgreSQLParserSUM-552))|(1<<(PostgreSQLParserSYSID-552))|(1<<(PostgreSQLParserSYSTEM-552))|(1<<(PostgreSQLParserSYSTEM_USER-552))|(1<<(PostgreSQLParserTABLE_NAME-552))|(1<<(PostgreSQLParserTABLESPACE-552))|(1<<(PostgreSQLParserTEMP-552))|(1<<(PostgreSQLParserTEMPLATE-552))|(1<<(PostgreSQLParserTEMPORARY-552))|(1<<(PostgreSQLParserTIES-552))|(1<<(PostgreSQLParserTIME-552))|(1<<(PostgreSQLParserTIMESTAMP-552))|(1<<(PostgreSQLParserTIMEZONE_HOUR-552))|(1<<(PostgreSQLParserTIMEZONE_MINUTE-552)))) != 0) || (((_la-586)&-(0x1f+1)) == 0 && ((1<<uint((_la-586)))&((1<<(PostgreSQLParserTOP_LEVEL_COUNT-586))|(1<<(PostgreSQLParserTRANSACTION-586))|(1<<(PostgreSQLParserTRANSACTION_ACTIVE-586))|(1<<(PostgreSQLParserTRANSACTIONS_COMMITTED-586))|(1<<(PostgreSQLParserTRANSACTIONS_ROLLED_BACK-586))|(1<<(PostgreSQLParserTRANSFORM-586))|(1<<(PostgreSQLParserTRANSFORMS-586))|(1<<(PostgreSQLParserTRANSLATE-586))|(1<<(PostgreSQLParserTRANSLATION-586))|(1<<(PostgreSQLParserTREAT-586))|(1<<(PostgreSQLParserTRIGGER-586))|(1<<(PostgreSQLParserTRIGGER_CATALOG-586))|(1<<(PostgreSQLParserTRIGGER_NAME-586))|(1<<(PostgreSQLParserTRIGGER_SCHEMA-586))|(1<<(PostgreSQLParserTRIM-586))|(1<<(PostgreSQLParserTRUE-586))|(1<<(PostgreSQLParserTRUNCATE-586))|(1<<(PostgreSQLParserTRUSTED-586))|(1<<(PostgreSQLParserTYPE-586))|(1<<(PostgreSQLParserUESCAPE-586))|(1<<(PostgreSQLParserUNBOUNDED-586))|(1<<(PostgreSQLParserUNCOMMITTED-586))|(1<<(PostgreSQLParserUNDER-586))|(1<<(PostgreSQLParserUNENCRYPTED-586))|(1<<(PostgreSQLParserUNKNOWN-586))|(1<<(PostgreSQLParserUNLISTEN-586))|(1<<(PostgreSQLParserUNNAMED-586))|(1<<(PostgreSQLParserUNNEST-586))|(1<<(PostgreSQLParserUNTIL-586)))) != 0) || (((_la-618)&-(0x1f+1)) == 0 && ((1<<uint((_la-618)))&((1<<(PostgreSQLParserUPDATE-618))|(1<<(PostgreSQLParserUPPER-618))|(1<<(PostgreSQLParserUSAGE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CATALOG-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CODE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_NAME-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA-618))|(1<<(PostgreSQLParserVACUUM-618))|(1<<(PostgreSQLParserVALID-618))|(1<<(PostgreSQLParserVALIDATOR-618))|(1<<(PostgreSQLParserVALUE-618))|(1<<(PostgreSQLParserVALUES-618))|(1<<(PostgreSQLParserVAR_POP-618))|(1<<(PostgreSQLParserVAR_SAMP-618))|(1<<(PostgreSQLParserVARCHAR-618))|(1<<(PostgreSQLParserVARIADIC-618))|(1<<(PostgreSQLParserVARYING-618))|(1<<(PostgreSQLParserVIEW-618))|(1<<(PostgreSQLParserVOLATILE-618))|(1<<(PostgreSQLParserWHENEVER-618))|(1<<(PostgreSQLParserWIDTH_BUCKET-618))|(1<<(PostgreSQLParserWITHIN-618))|(1<<(PostgreSQLParserWITHOUT-618)))) != 0) || (((_la-650)&-(0x1f+1)) == 0 && ((1<<uint((_la-650)))&((1<<(PostgreSQLParserWORK-650))|(1<<(PostgreSQLParserWRITE-650))|(1<<(PostgreSQLParserYEAR-650))|(1<<(PostgreSQLParserZONE-650)))) != 0) || (((_la-720)&-(0x1f+1)) == 0 && ((1<<uint((_la-720)))&((1<<(PostgreSQLParserABSTIME-720))|(1<<(PostgreSQLParserBIGSERIAL-720))|(1<<(PostgreSQLParserBIT_VARYING-720))|(1<<(PostgreSQLParserBOOL-720))|(1<<(PostgreSQLParserBOX-720))|(1<<(PostgreSQLParserBYTEA-720))|(1<<(PostgreSQLParserCHARACTER_VARYING-720))|(1<<(PostgreSQLParserCIDR-720))|(1<<(PostgreSQLParserCIRCLE-720))|(1<<(PostgreSQLParserFLOAT4-720))|(1<<(PostgreSQLParserFLOAT8-720))|(1<<(PostgreSQLParserINET-720))|(1<<(PostgreSQLParserINT2-720))|(1<<(PostgreSQLParserINT4-720))|(1<<(PostgreSQLParserINT8-720))|(1<<(PostgreSQLParserJSON-720))|(1<<(PostgreSQLParserJSONB-720))|(1<<(PostgreSQLParserLINE-720))|(1<<(PostgreSQLParserLSEG-720))|(1<<(PostgreSQLParserMACADDR-720))|(1<<(PostgreSQLParserMACADDR8-720))|(1<<(PostgreSQLParserMONEY-720))|(1<<(PostgreSQLParserPG_LSN-720))|(1<<(PostgreSQLParserPOINT-720))|(1<<(PostgreSQLParserPOLYGON-720))|(1<<(PostgreSQLParserRELTIME-720))|(1<<(PostgreSQLParserSERIAL-720))|(1<<(PostgreSQLParserSERIAL2-720))|(1<<(PostgreSQLParserSERIAL4-720))|(1<<(PostgreSQLParserSERIAL8-720))|(1<<(PostgreSQLParserSMALLSERIAL-720)))) != 0) || (((_la-752)&-(0x1f+1)) == 0 && ((1<<uint((_la-752)))&((1<<(PostgreSQLParserTEXT-752))|(1<<(PostgreSQLParserTIMESTAMPTZ-752))|(1<<(PostgreSQLParserTIMETZ-752))|(1<<(PostgreSQLParserTSQUERY-752))|(1<<(PostgreSQLParserTSVECTOR-752))|(1<<(PostgreSQLParserTXID_SNAPSHOT-752))|(1<<(PostgreSQLParserUUID-752))|(1<<(PostgreSQLParserVARBIT-752))|(1<<(PostgreSQLParserXML-752))|(1<<(PostgreSQLParserSINGLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserDOUBLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserIDENTIFIER-752))|(1<<(PostgreSQLParserIDENTIFIER_UNICODE-752)))) != 0) {
			p.SetState(2055)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PostgreSQLParserIN || _la == PostgreSQLParserVARIADIC {
				{
					p.SetState(2054)
					_la = p.GetTokenStream().LA(1)

					if !(_la == PostgreSQLParserIN || _la == PostgreSQLParserVARIADIC) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			p.SetState(2058)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(2057)
					p.Name_()
				}

			}
			{
				p.SetState(2060)
				p.Data_type_list()
			}

		}
		{
			p.SetState(2063)
			p.Match(PostgreSQLParserORDER)
		}
		{
			p.SetState(2064)
			p.Match(PostgreSQLParserBY)
		}
		p.SetState(2066)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIN || _la == PostgreSQLParserVARIADIC {
			{
				p.SetState(2065)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserIN || _la == PostgreSQLParserVARIADIC) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(2069)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2068)
				p.Name_()
			}

		}
		{
			p.SetState(2071)
			p.Data_type_list()
		}
		{
			p.SetState(2072)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}
		{
			p.SetState(2073)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(2074)
			p.Match(PostgreSQLParserSFUNC)
		}
		{
			p.SetState(2075)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2076)
			p.identifier(0)
		}
		{
			p.SetState(2077)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(2078)
			p.Match(PostgreSQLParserSTYPE)
		}
		{
			p.SetState(2079)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2080)
			p.identifier(0)
		}
		p.SetState(2085)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 139, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2081)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2082)
				p.Match(PostgreSQLParserSSPACE)
			}
			{
				p.SetState(2083)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2084)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}

		}
		p.SetState(2091)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2087)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2088)
				p.Match(PostgreSQLParserFINALFUNC)
			}
			{
				p.SetState(2089)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2090)
				p.identifier(0)
			}

		}
		p.SetState(2095)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 141, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2093)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2094)
				p.Match(PostgreSQLParserFINALFUNC_EXTRA)
			}

		}
		p.SetState(2101)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 142, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2097)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2098)
				p.Match(PostgreSQLParserINITCOND)
			}
			{
				p.SetState(2099)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2100)
				p.expr(0)
			}

		}
		p.SetState(2107)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 143, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2103)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2104)
				p.Match(PostgreSQLParserPARALLEL)
			}
			{
				p.SetState(2105)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2106)
				_la = p.GetTokenStream().LA(1)

				if !(((_la-687)&-(0x1f+1)) == 0 && ((1<<uint((_la-687)))&((1<<(PostgreSQLParserSAFE-687))|(1<<(PostgreSQLParserRESTRICTED-687))|(1<<(PostgreSQLParserUNSAFE-687)))) != 0) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(2111)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCOMMA {
			{
				p.SetState(2109)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2110)
				p.Match(PostgreSQLParserHYPOTHETICAL)
			}

		}
		{
			p.SetState(2113)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2115)
			p.Match(PostgreSQLParserCREATE)
		}
		{
			p.SetState(2116)
			p.Match(PostgreSQLParserAGGREGATE)
		}
		{
			p.SetState(2117)
			p.Name_()
		}
		{
			p.SetState(2118)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(2119)
			p.Match(PostgreSQLParserBASETYPE)
		}
		{
			p.SetState(2120)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2121)
			p.Data_type()
		}
		{
			p.SetState(2122)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(2123)
			p.Match(PostgreSQLParserSFUNC)
		}
		{
			p.SetState(2124)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2125)
			p.identifier(0)
		}
		{
			p.SetState(2126)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(2127)
			p.Match(PostgreSQLParserSTYPE)
		}
		{
			p.SetState(2128)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2129)
			p.identifier(0)
		}
		p.SetState(2134)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 145, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2130)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2131)
				p.Match(PostgreSQLParserSSPACE)
			}
			{
				p.SetState(2132)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2133)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}

		}
		p.SetState(2140)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2136)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2137)
				p.Match(PostgreSQLParserFINALFUNC)
			}
			{
				p.SetState(2138)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2139)
				p.identifier(0)
			}

		}
		p.SetState(2144)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2142)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2143)
				p.Match(PostgreSQLParserFINALFUNC_EXTRA)
			}

		}
		p.SetState(2150)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2146)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2147)
				p.Match(PostgreSQLParserCOMBINEFUNC)
			}
			{
				p.SetState(2148)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2149)
				p.identifier(0)
			}

		}
		p.SetState(2156)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 149, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2152)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2153)
				p.Match(PostgreSQLParserSERIALFUNC)
			}
			{
				p.SetState(2154)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2155)
				p.identifier(0)
			}

		}
		p.SetState(2162)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 150, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2158)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2159)
				p.Match(PostgreSQLParserDESERIALFUNC)
			}
			{
				p.SetState(2160)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2161)
				p.identifier(0)
			}

		}
		p.SetState(2168)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 151, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2164)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2165)
				p.Match(PostgreSQLParserINITCOND)
			}
			{
				p.SetState(2166)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2167)
				p.expr(0)
			}

		}
		p.SetState(2174)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2170)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2171)
				p.Match(PostgreSQLParserMSFUNC)
			}
			{
				p.SetState(2172)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2173)
				p.identifier(0)
			}

		}
		p.SetState(2180)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2176)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2177)
				p.Match(PostgreSQLParserMINVFUNC)
			}
			{
				p.SetState(2178)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2179)
				p.identifier(0)
			}

		}
		p.SetState(2186)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 154, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2182)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2183)
				p.Match(PostgreSQLParserMSTYPE)
			}
			{
				p.SetState(2184)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2185)
				p.identifier(0)
			}

		}
		p.SetState(2192)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 155, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2188)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2189)
				p.Match(PostgreSQLParserMSSPACE)
			}
			{
				p.SetState(2190)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2191)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}

		}
		p.SetState(2198)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2194)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2195)
				p.Match(PostgreSQLParserMFINALFUNC)
			}
			{
				p.SetState(2196)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2197)
				p.identifier(0)
			}

		}
		p.SetState(2202)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2200)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2201)
				p.Match(PostgreSQLParserMFINALFUNC_EXTRA)
			}

		}
		p.SetState(2208)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2204)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2205)
				p.Match(PostgreSQLParserMINITCOND)
			}
			{
				p.SetState(2206)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2207)
				p.identifier(0)
			}

		}
		p.SetState(2214)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCOMMA {
			{
				p.SetState(2210)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2211)
				p.Match(PostgreSQLParserSORTOP)
			}
			{
				p.SetState(2212)
				p.Match(PostgreSQLParserEQUAL)
			}
			{
				p.SetState(2213)
				p.identifier(0)
			}

		}
		{
			p.SetState(2216)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}

	return localctx
}

// ICreate_cast_stmtContext is an interface to support dynamic dispatch.
type ICreate_cast_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_cast_stmtContext differentiates from other interfaces.
	IsCreate_cast_stmtContext()
}

type Create_cast_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_cast_stmtContext() *Create_cast_stmtContext {
	var p = new(Create_cast_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_cast_stmt
	return p
}

func (*Create_cast_stmtContext) IsCreate_cast_stmtContext() {}

func NewCreate_cast_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_cast_stmtContext {
	var p = new(Create_cast_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_cast_stmt

	return p
}

func (s *Create_cast_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_cast_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_cast_stmtContext) CAST() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCAST, 0)
}

func (s *Create_cast_stmtContext) AllOPEN_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPEN_PAREN)
}

func (s *Create_cast_stmtContext) OPEN_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, i)
}

func (s *Create_cast_stmtContext) AllData_type() []IData_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_typeContext)(nil)).Elem())
	var tst = make([]IData_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_typeContext)
		}
	}

	return tst
}

func (s *Create_cast_stmtContext) Data_type(i int) IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_cast_stmtContext) AllAS() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserAS)
}

func (s *Create_cast_stmtContext) AS(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAS, i)
}

func (s *Create_cast_stmtContext) AllCLOSE_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCLOSE_PAREN)
}

func (s *Create_cast_stmtContext) CLOSE_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, i)
}

func (s *Create_cast_stmtContext) ASSIGNMENT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserASSIGNMENT, 0)
}

func (s *Create_cast_stmtContext) IMPLICIT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIMPLICIT, 0)
}

func (s *Create_cast_stmtContext) WITH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITH, 0)
}

func (s *Create_cast_stmtContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFUNCTION, 0)
}

func (s *Create_cast_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_cast_stmtContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITHOUT, 0)
}

func (s *Create_cast_stmtContext) INOUT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINOUT, 0)
}

func (s *Create_cast_stmtContext) Data_type_list() IData_type_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_listContext)
}

func (s *Create_cast_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_cast_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_cast_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_cast_stmt(s)
	}
}

func (s *Create_cast_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_cast_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_cast_stmt() (localctx ICreate_cast_stmtContext) {
	localctx = NewCreate_cast_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, PostgreSQLParserRULE_create_cast_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2220)
		p.Match(PostgreSQLParserCREATE)
	}
	{
		p.SetState(2221)
		p.Match(PostgreSQLParserCAST)
	}
	{
		p.SetState(2222)
		p.Match(PostgreSQLParserOPEN_PAREN)
	}
	{
		p.SetState(2223)
		p.Data_type()
	}
	{
		p.SetState(2224)
		p.Match(PostgreSQLParserAS)
	}
	{
		p.SetState(2225)
		p.Data_type()
	}
	{
		p.SetState(2226)
		p.Match(PostgreSQLParserCLOSE_PAREN)
	}
	p.SetState(2240)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 162, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2227)
			p.Match(PostgreSQLParserWITH)
		}
		{
			p.SetState(2228)
			p.Match(PostgreSQLParserFUNCTION)
		}
		{
			p.SetState(2229)
			p.identifier(0)
		}
		p.SetState(2234)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserOPEN_PAREN {
			{
				p.SetState(2230)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(2231)
				p.Data_type_list()
			}
			{
				p.SetState(2232)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case 2:
		{
			p.SetState(2236)
			p.Match(PostgreSQLParserWITHOUT)
		}
		{
			p.SetState(2237)
			p.Match(PostgreSQLParserFUNCTION)
		}

	case 3:
		{
			p.SetState(2238)
			p.Match(PostgreSQLParserWITH)
		}
		{
			p.SetState(2239)
			p.Match(PostgreSQLParserINOUT)
		}

	}
	p.SetState(2246)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 163, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2242)
			p.Match(PostgreSQLParserAS)
		}
		{
			p.SetState(2243)
			p.Match(PostgreSQLParserASSIGNMENT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 163, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(2244)
			p.Match(PostgreSQLParserAS)
		}
		{
			p.SetState(2245)
			p.Match(PostgreSQLParserIMPLICIT)
		}

	}

	return localctx
}

// ICreate_collation_optContext is an interface to support dynamic dispatch.
type ICreate_collation_optContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_collation_optContext differentiates from other interfaces.
	IsCreate_collation_optContext()
}

type Create_collation_optContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_collation_optContext() *Create_collation_optContext {
	var p = new(Create_collation_optContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_collation_opt
	return p
}

func (*Create_collation_optContext) IsCreate_collation_optContext() {}

func NewCreate_collation_optContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_collation_optContext {
	var p = new(Create_collation_optContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_collation_opt

	return p
}

func (s *Create_collation_optContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_collation_optContext) LOCALE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLOCALE, 0)
}

func (s *Create_collation_optContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEQUAL, 0)
}

func (s *Create_collation_optContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Create_collation_optContext) LC_COLLATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLC_COLLATE, 0)
}

func (s *Create_collation_optContext) LC_CTYPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLC_CTYPE, 0)
}

func (s *Create_collation_optContext) PROVIDER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPROVIDER, 0)
}

func (s *Create_collation_optContext) VERSION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVERSION, 0)
}

func (s *Create_collation_optContext) DOUBLEQ_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDOUBLEQ_STRING_LITERAL, 0)
}

func (s *Create_collation_optContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_collation_optContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_collation_optContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_collation_opt(s)
	}
}

func (s *Create_collation_optContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_collation_opt(s)
	}
}

func (p *PostgreSQLParser) Create_collation_opt() (localctx ICreate_collation_optContext) {
	localctx = NewCreate_collation_optContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, PostgreSQLParserRULE_create_collation_opt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2266)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserLOCALE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2248)
			p.Match(PostgreSQLParserLOCALE)
		}
		{
			p.SetState(2249)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2250)
			p.expr(0)
		}

	case PostgreSQLParserLC_COLLATE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2251)
			p.Match(PostgreSQLParserLC_COLLATE)
		}
		{
			p.SetState(2252)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2253)
			p.expr(0)
		}

	case PostgreSQLParserLC_CTYPE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2254)
			p.Match(PostgreSQLParserLC_CTYPE)
		}
		{
			p.SetState(2255)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2256)
			p.expr(0)
		}

	case PostgreSQLParserPROVIDER:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2257)
			p.Match(PostgreSQLParserPROVIDER)
		}
		{
			p.SetState(2258)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2259)
			p.expr(0)
		}

	case PostgreSQLParserVERSION:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2260)
			p.Match(PostgreSQLParserVERSION)
		}
		{
			p.SetState(2261)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2262)
			p.expr(0)
		}

	case PostgreSQLParserDOUBLEQ_STRING_LITERAL:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2263)
			p.Match(PostgreSQLParserDOUBLEQ_STRING_LITERAL)
		}
		{
			p.SetState(2264)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2265)
			p.expr(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_collation_opt_listContext is an interface to support dynamic dispatch.
type ICreate_collation_opt_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_collation_opt_listContext differentiates from other interfaces.
	IsCreate_collation_opt_listContext()
}

type Create_collation_opt_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_collation_opt_listContext() *Create_collation_opt_listContext {
	var p = new(Create_collation_opt_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_collation_opt_list
	return p
}

func (*Create_collation_opt_listContext) IsCreate_collation_opt_listContext() {}

func NewCreate_collation_opt_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_collation_opt_listContext {
	var p = new(Create_collation_opt_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_collation_opt_list

	return p
}

func (s *Create_collation_opt_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_collation_opt_listContext) AllCreate_collation_opt() []ICreate_collation_optContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreate_collation_optContext)(nil)).Elem())
	var tst = make([]ICreate_collation_optContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreate_collation_optContext)
		}
	}

	return tst
}

func (s *Create_collation_opt_listContext) Create_collation_opt(i int) ICreate_collation_optContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_collation_optContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreate_collation_optContext)
}

func (s *Create_collation_opt_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Create_collation_opt_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Create_collation_opt_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_collation_opt_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_collation_opt_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_collation_opt_list(s)
	}
}

func (s *Create_collation_opt_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_collation_opt_list(s)
	}
}

func (p *PostgreSQLParser) Create_collation_opt_list() (localctx ICreate_collation_opt_listContext) {
	localctx = NewCreate_collation_opt_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, PostgreSQLParserRULE_create_collation_opt_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2268)
		p.Create_collation_opt()
	}
	p.SetState(2273)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(2269)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(2270)
			p.Create_collation_opt()
		}

		p.SetState(2275)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICreate_collation_stmtContext is an interface to support dynamic dispatch.
type ICreate_collation_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_collation_stmtContext differentiates from other interfaces.
	IsCreate_collation_stmtContext()
}

type Create_collation_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_collation_stmtContext() *Create_collation_stmtContext {
	var p = new(Create_collation_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_collation_stmt
	return p
}

func (*Create_collation_stmtContext) IsCreate_collation_stmtContext() {}

func NewCreate_collation_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_collation_stmtContext {
	var p = new(Create_collation_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_collation_stmt

	return p
}

func (s *Create_collation_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_collation_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_collation_stmtContext) COLLATION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOLLATION, 0)
}

func (s *Create_collation_stmtContext) AllName_() []IName_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IName_Context)(nil)).Elem())
	var tst = make([]IName_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IName_Context)
		}
	}

	return tst
}

func (s *Create_collation_stmtContext) Name_(i int) IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Create_collation_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Create_collation_stmtContext) Create_collation_opt_list() ICreate_collation_opt_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_collation_opt_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_collation_opt_listContext)
}

func (s *Create_collation_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Create_collation_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Create_collation_stmtContext) NOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOT, 0)
}

func (s *Create_collation_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Create_collation_stmtContext) FROM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFROM, 0)
}

func (s *Create_collation_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_collation_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_collation_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_collation_stmt(s)
	}
}

func (s *Create_collation_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_collation_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_collation_stmt() (localctx ICreate_collation_stmtContext) {
	localctx = NewCreate_collation_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, PostgreSQLParserRULE_create_collation_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2299)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 168, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2276)
			p.Match(PostgreSQLParserCREATE)
		}
		{
			p.SetState(2277)
			p.Match(PostgreSQLParserCOLLATION)
		}
		p.SetState(2281)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIF {
			{
				p.SetState(2278)
				p.Match(PostgreSQLParserIF)
			}
			{
				p.SetState(2279)
				p.Match(PostgreSQLParserNOT)
			}
			{
				p.SetState(2280)
				p.Match(PostgreSQLParserEXISTS)
			}

		}
		{
			p.SetState(2283)
			p.Name_()
		}
		{
			p.SetState(2284)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(2285)
			p.Create_collation_opt_list()
		}
		{
			p.SetState(2286)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2288)
			p.Match(PostgreSQLParserCREATE)
		}
		{
			p.SetState(2289)
			p.Match(PostgreSQLParserCOLLATION)
		}
		p.SetState(2293)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIF {
			{
				p.SetState(2290)
				p.Match(PostgreSQLParserIF)
			}
			{
				p.SetState(2291)
				p.Match(PostgreSQLParserNOT)
			}
			{
				p.SetState(2292)
				p.Match(PostgreSQLParserEXISTS)
			}

		}
		{
			p.SetState(2295)
			p.Name_()
		}
		{
			p.SetState(2296)
			p.Match(PostgreSQLParserFROM)
		}
		{
			p.SetState(2297)
			p.Name_()
		}

	}

	return localctx
}

// ICreate_conversion_stmtContext is an interface to support dynamic dispatch.
type ICreate_conversion_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_conversion_stmtContext differentiates from other interfaces.
	IsCreate_conversion_stmtContext()
}

type Create_conversion_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_conversion_stmtContext() *Create_conversion_stmtContext {
	var p = new(Create_conversion_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_conversion_stmt
	return p
}

func (*Create_conversion_stmtContext) IsCreate_conversion_stmtContext() {}

func NewCreate_conversion_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_conversion_stmtContext {
	var p = new(Create_conversion_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_conversion_stmt

	return p
}

func (s *Create_conversion_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_conversion_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_conversion_stmtContext) CONVERSION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONVERSION, 0)
}

func (s *Create_conversion_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_conversion_stmtContext) FOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOR, 0)
}

func (s *Create_conversion_stmtContext) AllSINGLEQ_STRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserSINGLEQ_STRING_LITERAL)
}

func (s *Create_conversion_stmtContext) SINGLEQ_STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSINGLEQ_STRING_LITERAL, i)
}

func (s *Create_conversion_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Create_conversion_stmtContext) FROM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFROM, 0)
}

func (s *Create_conversion_stmtContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Create_conversion_stmtContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEFAULT, 0)
}

func (s *Create_conversion_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_conversion_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_conversion_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_conversion_stmt(s)
	}
}

func (s *Create_conversion_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_conversion_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_conversion_stmt() (localctx ICreate_conversion_stmtContext) {
	localctx = NewCreate_conversion_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, PostgreSQLParserRULE_create_conversion_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2301)
		p.Match(PostgreSQLParserCREATE)
	}
	p.SetState(2303)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserDEFAULT {
		{
			p.SetState(2302)
			p.Match(PostgreSQLParserDEFAULT)
		}

	}
	{
		p.SetState(2305)
		p.Match(PostgreSQLParserCONVERSION)
	}
	{
		p.SetState(2306)
		p.identifier(0)
	}
	{
		p.SetState(2307)
		p.Match(PostgreSQLParserFOR)
	}
	{
		p.SetState(2308)
		p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)
	}
	{
		p.SetState(2309)
		p.Match(PostgreSQLParserTO)
	}
	{
		p.SetState(2310)
		p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)
	}
	{
		p.SetState(2311)
		p.Match(PostgreSQLParserFROM)
	}
	{
		p.SetState(2312)
		p.Name_()
	}

	return localctx
}

// ICreate_database_stmtContext is an interface to support dynamic dispatch.
type ICreate_database_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_database_stmtContext differentiates from other interfaces.
	IsCreate_database_stmtContext()
}

type Create_database_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_database_stmtContext() *Create_database_stmtContext {
	var p = new(Create_database_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_database_stmt
	return p
}

func (*Create_database_stmtContext) IsCreate_database_stmtContext() {}

func NewCreate_database_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_database_stmtContext {
	var p = new(Create_database_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_database_stmt

	return p
}

func (s *Create_database_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_database_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_database_stmtContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDATABASE, 0)
}

func (s *Create_database_stmtContext) AllName_() []IName_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IName_Context)(nil)).Elem())
	var tst = make([]IName_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IName_Context)
		}
	}

	return tst
}

func (s *Create_database_stmtContext) Name_(i int) IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Create_database_stmtContext) WITH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITH, 0)
}

func (s *Create_database_stmtContext) OWNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNER, 0)
}

func (s *Create_database_stmtContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserEQUAL)
}

func (s *Create_database_stmtContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEQUAL, i)
}

func (s *Create_database_stmtContext) TEMPLATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEMPLATE, 0)
}

func (s *Create_database_stmtContext) ENCODING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserENCODING, 0)
}

func (s *Create_database_stmtContext) LC_COLLATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLC_COLLATE, 0)
}

func (s *Create_database_stmtContext) LC_CTYPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLC_CTYPE, 0)
}

func (s *Create_database_stmtContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLESPACE, 0)
}

func (s *Create_database_stmtContext) ALLOW_CONNECTIONS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALLOW_CONNECTIONS, 0)
}

func (s *Create_database_stmtContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONNECTION, 0)
}

func (s *Create_database_stmtContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLIMIT, 0)
}

func (s *Create_database_stmtContext) AllINTEGER_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserINTEGER_LITERAL)
}

func (s *Create_database_stmtContext) INTEGER_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, i)
}

func (s *Create_database_stmtContext) IS_TEMPLATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIS_TEMPLATE, 0)
}

func (s *Create_database_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_database_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_database_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_database_stmt(s)
	}
}

func (s *Create_database_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_database_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_database_stmt() (localctx ICreate_database_stmtContext) {
	localctx = NewCreate_database_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, PostgreSQLParserRULE_create_database_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2314)
		p.Match(PostgreSQLParserCREATE)
	}
	{
		p.SetState(2315)
		p.Match(PostgreSQLParserDATABASE)
	}
	{
		p.SetState(2316)
		p.Name_()
	}

	p.SetState(2318)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserWITH {
		{
			p.SetState(2317)
			p.Match(PostgreSQLParserWITH)
		}

	}
	p.SetState(2323)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserOWNER {
		{
			p.SetState(2320)
			p.Match(PostgreSQLParserOWNER)
		}
		{
			p.SetState(2321)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2322)
			p.Name_()
		}

	}
	p.SetState(2328)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserTEMPLATE {
		{
			p.SetState(2325)
			p.Match(PostgreSQLParserTEMPLATE)
		}
		{
			p.SetState(2326)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2327)
			p.Name_()
		}

	}
	p.SetState(2333)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserENCODING {
		{
			p.SetState(2330)
			p.Match(PostgreSQLParserENCODING)
		}
		{
			p.SetState(2331)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2332)
			p.Name_()
		}

	}
	p.SetState(2338)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserLC_COLLATE {
		{
			p.SetState(2335)
			p.Match(PostgreSQLParserLC_COLLATE)
		}
		{
			p.SetState(2336)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2337)
			p.Name_()
		}

	}
	p.SetState(2343)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserLC_CTYPE {
		{
			p.SetState(2340)
			p.Match(PostgreSQLParserLC_CTYPE)
		}
		{
			p.SetState(2341)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2342)
			p.Name_()
		}

	}
	p.SetState(2348)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserTABLESPACE {
		{
			p.SetState(2345)
			p.Match(PostgreSQLParserTABLESPACE)
		}
		{
			p.SetState(2346)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2347)
			p.Name_()
		}

	}
	p.SetState(2353)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserALLOW_CONNECTIONS {
		{
			p.SetState(2350)
			p.Match(PostgreSQLParserALLOW_CONNECTIONS)
		}
		{
			p.SetState(2351)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2352)
			p.Name_()
		}

	}
	p.SetState(2359)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCONNECTION {
		{
			p.SetState(2355)
			p.Match(PostgreSQLParserCONNECTION)
		}
		{
			p.SetState(2356)
			p.Match(PostgreSQLParserLIMIT)
		}
		{
			p.SetState(2357)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2358)
			p.Match(PostgreSQLParserINTEGER_LITERAL)
		}

	}
	p.SetState(2364)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIS_TEMPLATE {
		{
			p.SetState(2361)
			p.Match(PostgreSQLParserIS_TEMPLATE)
		}
		{
			p.SetState(2362)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2363)
			p.Match(PostgreSQLParserINTEGER_LITERAL)
		}

	}

	return localctx
}

// IDomain_constraintContext is an interface to support dynamic dispatch.
type IDomain_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDomain_constraintContext differentiates from other interfaces.
	IsDomain_constraintContext()
}

type Domain_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDomain_constraintContext() *Domain_constraintContext {
	var p = new(Domain_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_domain_constraint
	return p
}

func (*Domain_constraintContext) IsDomain_constraintContext() {}

func NewDomain_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Domain_constraintContext {
	var p = new(Domain_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_domain_constraint

	return p
}

func (s *Domain_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Domain_constraintContext) NOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOT, 0)
}

func (s *Domain_constraintContext) NULL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNULL, 0)
}

func (s *Domain_constraintContext) CHECK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHECK, 0)
}

func (s *Domain_constraintContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Domain_constraintContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Domain_constraintContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Domain_constraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONSTRAINT, 0)
}

func (s *Domain_constraintContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Domain_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Domain_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Domain_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDomain_constraint(s)
	}
}

func (s *Domain_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDomain_constraint(s)
	}
}

func (p *PostgreSQLParser) Domain_constraint() (localctx IDomain_constraintContext) {
	localctx = NewDomain_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, PostgreSQLParserRULE_domain_constraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2368)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCONSTRAINT {
		{
			p.SetState(2366)
			p.Match(PostgreSQLParserCONSTRAINT)
		}
		{
			p.SetState(2367)
			p.Name_()
		}

	}
	p.SetState(2378)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserNOT:
		{
			p.SetState(2370)
			p.Match(PostgreSQLParserNOT)
		}
		{
			p.SetState(2371)
			p.Match(PostgreSQLParserNULL)
		}

	case PostgreSQLParserNULL:
		{
			p.SetState(2372)
			p.Match(PostgreSQLParserNULL)
		}

	case PostgreSQLParserCHECK:
		{
			p.SetState(2373)
			p.Match(PostgreSQLParserCHECK)
		}
		{
			p.SetState(2374)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(2375)
			p.expr(0)
		}
		{
			p.SetState(2376)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_domain_stmtContext is an interface to support dynamic dispatch.
type ICreate_domain_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_domain_stmtContext differentiates from other interfaces.
	IsCreate_domain_stmtContext()
}

type Create_domain_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_domain_stmtContext() *Create_domain_stmtContext {
	var p = new(Create_domain_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_domain_stmt
	return p
}

func (*Create_domain_stmtContext) IsCreate_domain_stmtContext() {}

func NewCreate_domain_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_domain_stmtContext {
	var p = new(Create_domain_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_domain_stmt

	return p
}

func (s *Create_domain_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_domain_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_domain_stmtContext) DOMAIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDOMAIN, 0)
}

func (s *Create_domain_stmtContext) AllName_() []IName_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IName_Context)(nil)).Elem())
	var tst = make([]IName_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IName_Context)
		}
	}

	return tst
}

func (s *Create_domain_stmtContext) Name_(i int) IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Create_domain_stmtContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_domain_stmtContext) AS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAS, 0)
}

func (s *Create_domain_stmtContext) AllDomain_constraint() []IDomain_constraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDomain_constraintContext)(nil)).Elem())
	var tst = make([]IDomain_constraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDomain_constraintContext)
		}
	}

	return tst
}

func (s *Create_domain_stmtContext) Domain_constraint(i int) IDomain_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDomain_constraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDomain_constraintContext)
}

func (s *Create_domain_stmtContext) AllCOLLATE() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOLLATE)
}

func (s *Create_domain_stmtContext) COLLATE(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOLLATE, i)
}

func (s *Create_domain_stmtContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserDEFAULT)
}

func (s *Create_domain_stmtContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEFAULT, i)
}

func (s *Create_domain_stmtContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Create_domain_stmtContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Create_domain_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_domain_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_domain_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_domain_stmt(s)
	}
}

func (s *Create_domain_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_domain_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_domain_stmt() (localctx ICreate_domain_stmtContext) {
	localctx = NewCreate_domain_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, PostgreSQLParserRULE_create_domain_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2380)
		p.Match(PostgreSQLParserCREATE)
	}
	{
		p.SetState(2381)
		p.Match(PostgreSQLParserDOMAIN)
	}
	{
		p.SetState(2382)
		p.Name_()
	}
	p.SetState(2384)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserAS {
		{
			p.SetState(2383)
			p.Match(PostgreSQLParserAS)
		}

	}
	{
		p.SetState(2386)
		p.Data_type()
	}
	p.SetState(2394)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-78)&-(0x1f+1)) == 0 && ((1<<uint((_la-78)))&((1<<(PostgreSQLParserCHECK-78))|(1<<(PostgreSQLParserCOLLATE-78))|(1<<(PostgreSQLParserCONSTRAINT-78)))) != 0) || _la == PostgreSQLParserDEFAULT || _la == PostgreSQLParserNOT || _la == PostgreSQLParserNULL {
		p.SetState(2392)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PostgreSQLParserCOLLATE:
			{
				p.SetState(2387)
				p.Match(PostgreSQLParserCOLLATE)
			}
			{
				p.SetState(2388)
				p.Name_()
			}

		case PostgreSQLParserDEFAULT:
			{
				p.SetState(2389)
				p.Match(PostgreSQLParserDEFAULT)
			}
			{
				p.SetState(2390)
				p.expr(0)
			}

		case PostgreSQLParserCHECK, PostgreSQLParserCONSTRAINT, PostgreSQLParserNOT, PostgreSQLParserNULL:
			{
				p.SetState(2391)
				p.Domain_constraint()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2396)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICreate_event_trigger_condContext is an interface to support dynamic dispatch.
type ICreate_event_trigger_condContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFilter_stmt returns the filter_stmt rule contexts.
	GetFilter_stmt() IIdentifierContext

	// SetFilter_stmt sets the filter_stmt rule contexts.
	SetFilter_stmt(IIdentifierContext)

	// IsCreate_event_trigger_condContext differentiates from other interfaces.
	IsCreate_event_trigger_condContext()
}

type Create_event_trigger_condContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	filter_stmt IIdentifierContext
}

func NewEmptyCreate_event_trigger_condContext() *Create_event_trigger_condContext {
	var p = new(Create_event_trigger_condContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_event_trigger_cond
	return p
}

func (*Create_event_trigger_condContext) IsCreate_event_trigger_condContext() {}

func NewCreate_event_trigger_condContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_event_trigger_condContext {
	var p = new(Create_event_trigger_condContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_event_trigger_cond

	return p
}

func (s *Create_event_trigger_condContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_event_trigger_condContext) GetFilter_stmt() IIdentifierContext { return s.filter_stmt }

func (s *Create_event_trigger_condContext) SetFilter_stmt(v IIdentifierContext) { s.filter_stmt = v }

func (s *Create_event_trigger_condContext) IN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIN, 0)
}

func (s *Create_event_trigger_condContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Create_event_trigger_condContext) AllSINGLEQ_STRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserSINGLEQ_STRING_LITERAL)
}

func (s *Create_event_trigger_condContext) SINGLEQ_STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSINGLEQ_STRING_LITERAL, i)
}

func (s *Create_event_trigger_condContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Create_event_trigger_condContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_event_trigger_condContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Create_event_trigger_condContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Create_event_trigger_condContext) AllAND() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserAND)
}

func (s *Create_event_trigger_condContext) AND(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAND, i)
}

func (s *Create_event_trigger_condContext) AllCreate_event_trigger_cond() []ICreate_event_trigger_condContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreate_event_trigger_condContext)(nil)).Elem())
	var tst = make([]ICreate_event_trigger_condContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreate_event_trigger_condContext)
		}
	}

	return tst
}

func (s *Create_event_trigger_condContext) Create_event_trigger_cond(i int) ICreate_event_trigger_condContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_event_trigger_condContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreate_event_trigger_condContext)
}

func (s *Create_event_trigger_condContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_event_trigger_condContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_event_trigger_condContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_event_trigger_cond(s)
	}
}

func (s *Create_event_trigger_condContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_event_trigger_cond(s)
	}
}

func (p *PostgreSQLParser) Create_event_trigger_cond() (localctx ICreate_event_trigger_condContext) {
	localctx = NewCreate_event_trigger_condContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, PostgreSQLParserRULE_create_event_trigger_cond)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2397)

		var _x = p.identifier(0)

		localctx.(*Create_event_trigger_condContext).filter_stmt = _x
	}
	{
		p.SetState(2398)
		p.Match(PostgreSQLParserIN)
	}
	{
		p.SetState(2399)
		p.Match(PostgreSQLParserOPEN_PAREN)
	}
	{
		p.SetState(2400)
		p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)
	}
	p.SetState(2405)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(2401)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(2402)
			p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)
		}

		p.SetState(2407)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2408)
		p.Match(PostgreSQLParserCLOSE_PAREN)
	}
	p.SetState(2413)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2409)
				p.Match(PostgreSQLParserAND)
			}
			{
				p.SetState(2410)
				p.Create_event_trigger_cond()
			}

		}
		p.SetState(2415)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext())
	}

	return localctx
}

// ICreate_event_trigger_stmtContext is an interface to support dynamic dispatch.
type ICreate_event_trigger_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTrigger returns the trigger rule contexts.
	GetTrigger() IIdentifierContext

	// GetEvent returns the event rule contexts.
	GetEvent() IIdentifierContext

	// GetFn_name returns the fn_name rule contexts.
	GetFn_name() IIdentifierContext

	// SetTrigger sets the trigger rule contexts.
	SetTrigger(IIdentifierContext)

	// SetEvent sets the event rule contexts.
	SetEvent(IIdentifierContext)

	// SetFn_name sets the fn_name rule contexts.
	SetFn_name(IIdentifierContext)

	// IsCreate_event_trigger_stmtContext differentiates from other interfaces.
	IsCreate_event_trigger_stmtContext()
}

type Create_event_trigger_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	trigger IIdentifierContext
	event   IIdentifierContext
	fn_name IIdentifierContext
}

func NewEmptyCreate_event_trigger_stmtContext() *Create_event_trigger_stmtContext {
	var p = new(Create_event_trigger_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_event_trigger_stmt
	return p
}

func (*Create_event_trigger_stmtContext) IsCreate_event_trigger_stmtContext() {}

func NewCreate_event_trigger_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_event_trigger_stmtContext {
	var p = new(Create_event_trigger_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_event_trigger_stmt

	return p
}

func (s *Create_event_trigger_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_event_trigger_stmtContext) GetTrigger() IIdentifierContext { return s.trigger }

func (s *Create_event_trigger_stmtContext) GetEvent() IIdentifierContext { return s.event }

func (s *Create_event_trigger_stmtContext) GetFn_name() IIdentifierContext { return s.fn_name }

func (s *Create_event_trigger_stmtContext) SetTrigger(v IIdentifierContext) { s.trigger = v }

func (s *Create_event_trigger_stmtContext) SetEvent(v IIdentifierContext) { s.event = v }

func (s *Create_event_trigger_stmtContext) SetFn_name(v IIdentifierContext) { s.fn_name = v }

func (s *Create_event_trigger_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_event_trigger_stmtContext) EVENT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEVENT, 0)
}

func (s *Create_event_trigger_stmtContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRIGGER, 0)
}

func (s *Create_event_trigger_stmtContext) ON() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserON, 0)
}

func (s *Create_event_trigger_stmtContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXECUTE, 0)
}

func (s *Create_event_trigger_stmtContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPROCEDURE, 0)
}

func (s *Create_event_trigger_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Create_event_trigger_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Create_event_trigger_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Create_event_trigger_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_event_trigger_stmtContext) WHEN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWHEN, 0)
}

func (s *Create_event_trigger_stmtContext) Create_event_trigger_cond() ICreate_event_trigger_condContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_event_trigger_condContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_event_trigger_condContext)
}

func (s *Create_event_trigger_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_event_trigger_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_event_trigger_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_event_trigger_stmt(s)
	}
}

func (s *Create_event_trigger_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_event_trigger_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_event_trigger_stmt() (localctx ICreate_event_trigger_stmtContext) {
	localctx = NewCreate_event_trigger_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, PostgreSQLParserRULE_create_event_trigger_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2416)
		p.Match(PostgreSQLParserCREATE)
	}
	{
		p.SetState(2417)
		p.Match(PostgreSQLParserEVENT)
	}
	{
		p.SetState(2418)
		p.Match(PostgreSQLParserTRIGGER)
	}
	{
		p.SetState(2419)

		var _x = p.identifier(0)

		localctx.(*Create_event_trigger_stmtContext).trigger = _x
	}
	{
		p.SetState(2420)
		p.Match(PostgreSQLParserON)
	}
	{
		p.SetState(2421)

		var _x = p.identifier(0)

		localctx.(*Create_event_trigger_stmtContext).event = _x
	}
	p.SetState(2424)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserWHEN {
		{
			p.SetState(2422)
			p.Match(PostgreSQLParserWHEN)
		}
		{
			p.SetState(2423)
			p.Create_event_trigger_cond()
		}

	}
	{
		p.SetState(2426)
		p.Match(PostgreSQLParserEXECUTE)
	}
	{
		p.SetState(2427)
		p.Match(PostgreSQLParserPROCEDURE)
	}
	{
		p.SetState(2428)

		var _x = p.identifier(0)

		localctx.(*Create_event_trigger_stmtContext).fn_name = _x
	}
	{
		p.SetState(2429)
		p.Match(PostgreSQLParserOPEN_PAREN)
	}
	{
		p.SetState(2430)
		p.Match(PostgreSQLParserCLOSE_PAREN)
	}

	return localctx
}

// ICreate_foreign_data_optionsContext is an interface to support dynamic dispatch.
type ICreate_foreign_data_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOpt returns the opt rule contexts.
	GetOpt() IName_Context

	// SetOpt sets the opt rule contexts.
	SetOpt(IName_Context)

	// IsCreate_foreign_data_optionsContext differentiates from other interfaces.
	IsCreate_foreign_data_optionsContext()
}

type Create_foreign_data_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	opt    IName_Context
}

func NewEmptyCreate_foreign_data_optionsContext() *Create_foreign_data_optionsContext {
	var p = new(Create_foreign_data_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_foreign_data_options
	return p
}

func (*Create_foreign_data_optionsContext) IsCreate_foreign_data_optionsContext() {}

func NewCreate_foreign_data_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_foreign_data_optionsContext {
	var p = new(Create_foreign_data_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_foreign_data_options

	return p
}

func (s *Create_foreign_data_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_foreign_data_optionsContext) GetOpt() IName_Context { return s.opt }

func (s *Create_foreign_data_optionsContext) SetOpt(v IName_Context) { s.opt = v }

func (s *Create_foreign_data_optionsContext) SINGLEQ_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSINGLEQ_STRING_LITERAL, 0)
}

func (s *Create_foreign_data_optionsContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Create_foreign_data_optionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Create_foreign_data_optionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Create_foreign_data_optionsContext) AllCreate_foreign_data_options() []ICreate_foreign_data_optionsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreate_foreign_data_optionsContext)(nil)).Elem())
	var tst = make([]ICreate_foreign_data_optionsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreate_foreign_data_optionsContext)
		}
	}

	return tst
}

func (s *Create_foreign_data_optionsContext) Create_foreign_data_options(i int) ICreate_foreign_data_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_foreign_data_optionsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreate_foreign_data_optionsContext)
}

func (s *Create_foreign_data_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_foreign_data_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_foreign_data_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_foreign_data_options(s)
	}
}

func (s *Create_foreign_data_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_foreign_data_options(s)
	}
}

func (p *PostgreSQLParser) Create_foreign_data_options() (localctx ICreate_foreign_data_optionsContext) {
	localctx = NewCreate_foreign_data_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, PostgreSQLParserRULE_create_foreign_data_options)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2432)

		var _x = p.Name_()

		localctx.(*Create_foreign_data_optionsContext).opt = _x
	}
	{
		p.SetState(2433)
		p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)
	}
	p.SetState(2438)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 188, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2434)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2435)
				p.Create_foreign_data_options()
			}

		}
		p.SetState(2440)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 188, p.GetParserRuleContext())
	}

	return localctx
}

// ICreate_foreign_data_stmtContext is an interface to support dynamic dispatch.
type ICreate_foreign_data_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWrapper returns the wrapper rule contexts.
	GetWrapper() IIdentifierContext

	// GetHandler returns the handler rule contexts.
	GetHandler() IIdentifierContext

	// GetValidator returns the validator rule contexts.
	GetValidator() IIdentifierContext

	// GetOpts returns the opts rule contexts.
	GetOpts() ICreate_foreign_data_optionsContext

	// SetWrapper sets the wrapper rule contexts.
	SetWrapper(IIdentifierContext)

	// SetHandler sets the handler rule contexts.
	SetHandler(IIdentifierContext)

	// SetValidator sets the validator rule contexts.
	SetValidator(IIdentifierContext)

	// SetOpts sets the opts rule contexts.
	SetOpts(ICreate_foreign_data_optionsContext)

	// IsCreate_foreign_data_stmtContext differentiates from other interfaces.
	IsCreate_foreign_data_stmtContext()
}

type Create_foreign_data_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	wrapper   IIdentifierContext
	handler   IIdentifierContext
	validator IIdentifierContext
	opts      ICreate_foreign_data_optionsContext
}

func NewEmptyCreate_foreign_data_stmtContext() *Create_foreign_data_stmtContext {
	var p = new(Create_foreign_data_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_foreign_data_stmt
	return p
}

func (*Create_foreign_data_stmtContext) IsCreate_foreign_data_stmtContext() {}

func NewCreate_foreign_data_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_foreign_data_stmtContext {
	var p = new(Create_foreign_data_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_foreign_data_stmt

	return p
}

func (s *Create_foreign_data_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_foreign_data_stmtContext) GetWrapper() IIdentifierContext { return s.wrapper }

func (s *Create_foreign_data_stmtContext) GetHandler() IIdentifierContext { return s.handler }

func (s *Create_foreign_data_stmtContext) GetValidator() IIdentifierContext { return s.validator }

func (s *Create_foreign_data_stmtContext) GetOpts() ICreate_foreign_data_optionsContext {
	return s.opts
}

func (s *Create_foreign_data_stmtContext) SetWrapper(v IIdentifierContext) { s.wrapper = v }

func (s *Create_foreign_data_stmtContext) SetHandler(v IIdentifierContext) { s.handler = v }

func (s *Create_foreign_data_stmtContext) SetValidator(v IIdentifierContext) { s.validator = v }

func (s *Create_foreign_data_stmtContext) SetOpts(v ICreate_foreign_data_optionsContext) { s.opts = v }

func (s *Create_foreign_data_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_foreign_data_stmtContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOREIGN, 0)
}

func (s *Create_foreign_data_stmtContext) DATA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDATA, 0)
}

func (s *Create_foreign_data_stmtContext) WRAPPER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWRAPPER, 0)
}

func (s *Create_foreign_data_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Create_foreign_data_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_foreign_data_stmtContext) AllHANDLER() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserHANDLER)
}

func (s *Create_foreign_data_stmtContext) HANDLER(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHANDLER, i)
}

func (s *Create_foreign_data_stmtContext) AllNO() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNO)
}

func (s *Create_foreign_data_stmtContext) NO(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNO, i)
}

func (s *Create_foreign_data_stmtContext) VALIDATOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVALIDATOR, 0)
}

func (s *Create_foreign_data_stmtContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPTIONS, 0)
}

func (s *Create_foreign_data_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Create_foreign_data_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Create_foreign_data_stmtContext) Create_foreign_data_options() ICreate_foreign_data_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_foreign_data_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_foreign_data_optionsContext)
}

func (s *Create_foreign_data_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_foreign_data_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_foreign_data_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_foreign_data_stmt(s)
	}
}

func (s *Create_foreign_data_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_foreign_data_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_foreign_data_stmt() (localctx ICreate_foreign_data_stmtContext) {
	localctx = NewCreate_foreign_data_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, PostgreSQLParserRULE_create_foreign_data_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2441)
		p.Match(PostgreSQLParserCREATE)
	}
	{
		p.SetState(2442)
		p.Match(PostgreSQLParserFOREIGN)
	}
	{
		p.SetState(2443)
		p.Match(PostgreSQLParserDATA)
	}
	{
		p.SetState(2444)
		p.Match(PostgreSQLParserWRAPPER)
	}
	{
		p.SetState(2445)

		var _x = p.identifier(0)

		localctx.(*Create_foreign_data_stmtContext).wrapper = _x
	}
	p.SetState(2452)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 190, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(2450)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case PostgreSQLParserHANDLER:
				{
					p.SetState(2446)
					p.Match(PostgreSQLParserHANDLER)
				}
				{
					p.SetState(2447)

					var _x = p.identifier(0)

					localctx.(*Create_foreign_data_stmtContext).handler = _x
				}

			case PostgreSQLParserNO:
				{
					p.SetState(2448)
					p.Match(PostgreSQLParserNO)
				}
				{
					p.SetState(2449)
					p.Match(PostgreSQLParserHANDLER)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(2454)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 190, p.GetParserRuleContext())
	}
	p.SetState(2459)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserVALIDATOR:
		{
			p.SetState(2455)
			p.Match(PostgreSQLParserVALIDATOR)
		}
		{
			p.SetState(2456)

			var _x = p.identifier(0)

			localctx.(*Create_foreign_data_stmtContext).validator = _x
		}

	case PostgreSQLParserNO:
		{
			p.SetState(2457)
			p.Match(PostgreSQLParserNO)
		}
		{
			p.SetState(2458)
			p.Match(PostgreSQLParserVALIDATOR)
		}

	case PostgreSQLParserEOF, PostgreSQLParserOPTIONS, PostgreSQLParserCLOSE_PAREN, PostgreSQLParserSEMI:

	default:
	}
	p.SetState(2466)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserOPTIONS {
		{
			p.SetState(2461)
			p.Match(PostgreSQLParserOPTIONS)
		}
		{
			p.SetState(2462)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(2463)

			var _x = p.Create_foreign_data_options()

			localctx.(*Create_foreign_data_stmtContext).opts = _x
		}
		{
			p.SetState(2464)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}

	return localctx
}

// ICreate_foreign_table_stmtContext is an interface to support dynamic dispatch.
type ICreate_foreign_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTable_name_TODO returns the table_name_TODO rule contexts.
	GetTable_name_TODO() IIdentifierContext

	// GetColumn_name_TODO returns the column_name_TODO rule contexts.
	GetColumn_name_TODO() IIdentifierContext

	// GetColumn_type returns the column_type rule contexts.
	GetColumn_type() IIdentifierContext

	// GetOpts returns the opts rule contexts.
	GetOpts() ICreate_foreign_data_optionsContext

	// GetServer_name returns the server_name rule contexts.
	GetServer_name() IName_Context

	// SetTable_name_TODO sets the table_name_TODO rule contexts.
	SetTable_name_TODO(IIdentifierContext)

	// SetColumn_name_TODO sets the column_name_TODO rule contexts.
	SetColumn_name_TODO(IIdentifierContext)

	// SetColumn_type sets the column_type rule contexts.
	SetColumn_type(IIdentifierContext)

	// SetOpts sets the opts rule contexts.
	SetOpts(ICreate_foreign_data_optionsContext)

	// SetServer_name sets the server_name rule contexts.
	SetServer_name(IName_Context)

	// IsCreate_foreign_table_stmtContext differentiates from other interfaces.
	IsCreate_foreign_table_stmtContext()
}

type Create_foreign_table_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	table_name_TODO  IIdentifierContext
	column_name_TODO IIdentifierContext
	column_type      IIdentifierContext
	opts             ICreate_foreign_data_optionsContext
	server_name      IName_Context
}

func NewEmptyCreate_foreign_table_stmtContext() *Create_foreign_table_stmtContext {
	var p = new(Create_foreign_table_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_foreign_table_stmt
	return p
}

func (*Create_foreign_table_stmtContext) IsCreate_foreign_table_stmtContext() {}

func NewCreate_foreign_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_foreign_table_stmtContext {
	var p = new(Create_foreign_table_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_foreign_table_stmt

	return p
}

func (s *Create_foreign_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_foreign_table_stmtContext) GetTable_name_TODO() IIdentifierContext {
	return s.table_name_TODO
}

func (s *Create_foreign_table_stmtContext) GetColumn_name_TODO() IIdentifierContext {
	return s.column_name_TODO
}

func (s *Create_foreign_table_stmtContext) GetColumn_type() IIdentifierContext { return s.column_type }

func (s *Create_foreign_table_stmtContext) GetOpts() ICreate_foreign_data_optionsContext {
	return s.opts
}

func (s *Create_foreign_table_stmtContext) GetServer_name() IName_Context { return s.server_name }

func (s *Create_foreign_table_stmtContext) SetTable_name_TODO(v IIdentifierContext) {
	s.table_name_TODO = v
}

func (s *Create_foreign_table_stmtContext) SetColumn_name_TODO(v IIdentifierContext) {
	s.column_name_TODO = v
}

func (s *Create_foreign_table_stmtContext) SetColumn_type(v IIdentifierContext) { s.column_type = v }

func (s *Create_foreign_table_stmtContext) SetOpts(v ICreate_foreign_data_optionsContext) { s.opts = v }

func (s *Create_foreign_table_stmtContext) SetServer_name(v IName_Context) { s.server_name = v }

func (s *Create_foreign_table_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_foreign_table_stmtContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOREIGN, 0)
}

func (s *Create_foreign_table_stmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLE, 0)
}

func (s *Create_foreign_table_stmtContext) AllOPEN_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPEN_PAREN)
}

func (s *Create_foreign_table_stmtContext) OPEN_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, i)
}

func (s *Create_foreign_table_stmtContext) AllCLOSE_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCLOSE_PAREN)
}

func (s *Create_foreign_table_stmtContext) CLOSE_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, i)
}

func (s *Create_foreign_table_stmtContext) SERVER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSERVER, 0)
}

func (s *Create_foreign_table_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Create_foreign_table_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_foreign_table_stmtContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Create_foreign_table_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Create_foreign_table_stmtContext) NOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOT, 0)
}

func (s *Create_foreign_table_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Create_foreign_table_stmtContext) AllOPTIONS() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPTIONS)
}

func (s *Create_foreign_table_stmtContext) OPTIONS(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPTIONS, i)
}

func (s *Create_foreign_table_stmtContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOLLATE, 0)
}

func (s *Create_foreign_table_stmtContext) Create_collation_opt() ICreate_collation_optContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_collation_optContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_collation_optContext)
}

func (s *Create_foreign_table_stmtContext) INHERITS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINHERITS, 0)
}

func (s *Create_foreign_table_stmtContext) Name_list() IName_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_listContext)
}

func (s *Create_foreign_table_stmtContext) AllCreate_foreign_data_options() []ICreate_foreign_data_optionsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreate_foreign_data_optionsContext)(nil)).Elem())
	var tst = make([]ICreate_foreign_data_optionsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreate_foreign_data_optionsContext)
		}
	}

	return tst
}

func (s *Create_foreign_table_stmtContext) Create_foreign_data_options(i int) ICreate_foreign_data_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_foreign_data_optionsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreate_foreign_data_optionsContext)
}

func (s *Create_foreign_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_foreign_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_foreign_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_foreign_table_stmt(s)
	}
}

func (s *Create_foreign_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_foreign_table_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_foreign_table_stmt() (localctx ICreate_foreign_table_stmtContext) {
	localctx = NewCreate_foreign_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, PostgreSQLParserRULE_create_foreign_table_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2468)
		p.Match(PostgreSQLParserCREATE)
	}
	{
		p.SetState(2469)
		p.Match(PostgreSQLParserFOREIGN)
	}
	{
		p.SetState(2470)
		p.Match(PostgreSQLParserTABLE)
	}
	p.SetState(2474)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(2471)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(2472)
			p.Match(PostgreSQLParserNOT)
		}
		{
			p.SetState(2473)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(2476)

		var _x = p.identifier(0)

		localctx.(*Create_foreign_table_stmtContext).table_name_TODO = _x
	}
	{
		p.SetState(2477)
		p.Match(PostgreSQLParserOPEN_PAREN)
	}
	{
		p.SetState(2478)

		var _x = p.identifier(0)

		localctx.(*Create_foreign_table_stmtContext).column_name_TODO = _x
	}
	{
		p.SetState(2479)

		var _x = p.identifier(0)

		localctx.(*Create_foreign_table_stmtContext).column_type = _x
	}
	p.SetState(2485)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserOPTIONS {
		{
			p.SetState(2480)
			p.Match(PostgreSQLParserOPTIONS)
		}
		{
			p.SetState(2481)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(2482)

			var _x = p.Create_foreign_data_options()

			localctx.(*Create_foreign_table_stmtContext).opts = _x
		}
		{
			p.SetState(2483)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}
	p.SetState(2489)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCOLLATE {
		{
			p.SetState(2487)
			p.Match(PostgreSQLParserCOLLATE)
		}
		{
			p.SetState(2488)
			p.Create_collation_opt()
		}

	}
	{
		p.SetState(2491)
		p.Match(PostgreSQLParserCLOSE_PAREN)
	}
	p.SetState(2494)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserINHERITS {
		{
			p.SetState(2492)
			p.Match(PostgreSQLParserINHERITS)
		}
		{
			p.SetState(2493)
			p.Name_list()
		}

	}
	{
		p.SetState(2496)
		p.Match(PostgreSQLParserSERVER)
	}
	{
		p.SetState(2497)

		var _x = p.Name_()

		localctx.(*Create_foreign_table_stmtContext).server_name = _x
	}
	p.SetState(2503)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserOPTIONS {
		{
			p.SetState(2498)
			p.Match(PostgreSQLParserOPTIONS)
		}
		{
			p.SetState(2499)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(2500)

			var _x = p.Create_foreign_data_options()

			localctx.(*Create_foreign_table_stmtContext).opts = _x
		}
		{
			p.SetState(2501)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}

	return localctx
}

// ICreate_function_stmtContext is an interface to support dynamic dispatch.
type ICreate_function_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFn_name returns the fn_name rule contexts.
	GetFn_name() IName_Context

	// SetFn_name sets the fn_name rule contexts.
	SetFn_name(IName_Context)

	// IsCreate_function_stmtContext differentiates from other interfaces.
	IsCreate_function_stmtContext()
}

type Create_function_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	fn_name IName_Context
}

func NewEmptyCreate_function_stmtContext() *Create_function_stmtContext {
	var p = new(Create_function_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_function_stmt
	return p
}

func (*Create_function_stmtContext) IsCreate_function_stmtContext() {}

func NewCreate_function_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_function_stmtContext {
	var p = new(Create_function_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_function_stmt

	return p
}

func (s *Create_function_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_function_stmtContext) GetFn_name() IName_Context { return s.fn_name }

func (s *Create_function_stmtContext) SetFn_name(v IName_Context) { s.fn_name = v }

func (s *Create_function_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_function_stmtContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFUNCTION, 0)
}

func (s *Create_function_stmtContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Create_function_stmtContext) OR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOR, 0)
}

func (s *Create_function_stmtContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREPLACE, 0)
}

func (s *Create_function_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_function_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_function_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_function_stmt(s)
	}
}

func (s *Create_function_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_function_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_function_stmt() (localctx ICreate_function_stmtContext) {
	localctx = NewCreate_function_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, PostgreSQLParserRULE_create_function_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2505)
		p.Match(PostgreSQLParserCREATE)
	}
	p.SetState(2508)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserOR {
		{
			p.SetState(2506)
			p.Match(PostgreSQLParserOR)
		}
		{
			p.SetState(2507)
			p.Match(PostgreSQLParserREPLACE)
		}

	}
	{
		p.SetState(2510)
		p.Match(PostgreSQLParserFUNCTION)
	}
	{
		p.SetState(2511)

		var _x = p.Name_()

		localctx.(*Create_function_stmtContext).fn_name = _x
	}

	return localctx
}

// ICreate_group_stmtContext is an interface to support dynamic dispatch.
type ICreate_group_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetGroup returns the group rule contexts.
	GetGroup() IIdentifierContext

	// SetGroup sets the group rule contexts.
	SetGroup(IIdentifierContext)

	// IsCreate_group_stmtContext differentiates from other interfaces.
	IsCreate_group_stmtContext()
}

type Create_group_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	group  IIdentifierContext
}

func NewEmptyCreate_group_stmtContext() *Create_group_stmtContext {
	var p = new(Create_group_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_group_stmt
	return p
}

func (*Create_group_stmtContext) IsCreate_group_stmtContext() {}

func NewCreate_group_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_group_stmtContext {
	var p = new(Create_group_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_group_stmt

	return p
}

func (s *Create_group_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_group_stmtContext) GetGroup() IIdentifierContext { return s.group }

func (s *Create_group_stmtContext) SetGroup(v IIdentifierContext) { s.group = v }

func (s *Create_group_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_group_stmtContext) AllGROUP() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserGROUP)
}

func (s *Create_group_stmtContext) GROUP(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGROUP, i)
}

func (s *Create_group_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_group_stmtContext) WITH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITH, 0)
}

func (s *Create_group_stmtContext) AllSUPERUSER() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserSUPERUSER)
}

func (s *Create_group_stmtContext) SUPERUSER(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSUPERUSER, i)
}

func (s *Create_group_stmtContext) AllNOSUPERUSER() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNOSUPERUSER)
}

func (s *Create_group_stmtContext) NOSUPERUSER(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOSUPERUSER, i)
}

func (s *Create_group_stmtContext) AllCREATEDB() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCREATEDB)
}

func (s *Create_group_stmtContext) CREATEDB(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATEDB, i)
}

func (s *Create_group_stmtContext) AllNOCREATEDB() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNOCREATEDB)
}

func (s *Create_group_stmtContext) NOCREATEDB(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOCREATEDB, i)
}

func (s *Create_group_stmtContext) AllCREATEROLE() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCREATEROLE)
}

func (s *Create_group_stmtContext) CREATEROLE(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATEROLE, i)
}

func (s *Create_group_stmtContext) AllNOCREATEROLE() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNOCREATEROLE)
}

func (s *Create_group_stmtContext) NOCREATEROLE(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOCREATEROLE, i)
}

func (s *Create_group_stmtContext) AllCREATEUSER() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCREATEUSER)
}

func (s *Create_group_stmtContext) CREATEUSER(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATEUSER, i)
}

func (s *Create_group_stmtContext) AllNOCREATEUSER() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNOCREATEUSER)
}

func (s *Create_group_stmtContext) NOCREATEUSER(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOCREATEUSER, i)
}

func (s *Create_group_stmtContext) AllINHERIT() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserINHERIT)
}

func (s *Create_group_stmtContext) INHERIT(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINHERIT, i)
}

func (s *Create_group_stmtContext) AllNOINHERIT() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNOINHERIT)
}

func (s *Create_group_stmtContext) NOINHERIT(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOINHERIT, i)
}

func (s *Create_group_stmtContext) AllLOGIN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserLOGIN)
}

func (s *Create_group_stmtContext) LOGIN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLOGIN, i)
}

func (s *Create_group_stmtContext) AllNOLOGIN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNOLOGIN)
}

func (s *Create_group_stmtContext) NOLOGIN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOLOGIN, i)
}

func (s *Create_group_stmtContext) AllPASSWORD() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserPASSWORD)
}

func (s *Create_group_stmtContext) PASSWORD(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPASSWORD, i)
}

func (s *Create_group_stmtContext) AllVALID() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserVALID)
}

func (s *Create_group_stmtContext) VALID(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVALID, i)
}

func (s *Create_group_stmtContext) AllUNTIL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserUNTIL)
}

func (s *Create_group_stmtContext) UNTIL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNTIL, i)
}

func (s *Create_group_stmtContext) AllSINGLEQ_STRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserSINGLEQ_STRING_LITERAL)
}

func (s *Create_group_stmtContext) SINGLEQ_STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSINGLEQ_STRING_LITERAL, i)
}

func (s *Create_group_stmtContext) AllIN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserIN)
}

func (s *Create_group_stmtContext) IN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIN, i)
}

func (s *Create_group_stmtContext) AllROLE() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserROLE)
}

func (s *Create_group_stmtContext) ROLE(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROLE, i)
}

func (s *Create_group_stmtContext) AllName_list() []IName_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IName_listContext)(nil)).Elem())
	var tst = make([]IName_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IName_listContext)
		}
	}

	return tst
}

func (s *Create_group_stmtContext) Name_list(i int) IName_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IName_listContext)
}

func (s *Create_group_stmtContext) AllADMIN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserADMIN)
}

func (s *Create_group_stmtContext) ADMIN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserADMIN, i)
}

func (s *Create_group_stmtContext) AllUSER() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserUSER)
}

func (s *Create_group_stmtContext) USER(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSER, i)
}

func (s *Create_group_stmtContext) AllSYSID() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserSYSID)
}

func (s *Create_group_stmtContext) SYSID(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSYSID, i)
}

func (s *Create_group_stmtContext) AllINTEGER_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserINTEGER_LITERAL)
}

func (s *Create_group_stmtContext) INTEGER_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, i)
}

func (s *Create_group_stmtContext) AllNULL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNULL)
}

func (s *Create_group_stmtContext) NULL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNULL, i)
}

func (s *Create_group_stmtContext) AllENCRYPTED() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserENCRYPTED)
}

func (s *Create_group_stmtContext) ENCRYPTED(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserENCRYPTED, i)
}

func (s *Create_group_stmtContext) AllUNENCRYPTED() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserUNENCRYPTED)
}

func (s *Create_group_stmtContext) UNENCRYPTED(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNENCRYPTED, i)
}

func (s *Create_group_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_group_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_group_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_group_stmt(s)
	}
}

func (s *Create_group_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_group_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_group_stmt() (localctx ICreate_group_stmtContext) {
	localctx = NewCreate_group_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, PostgreSQLParserRULE_create_group_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2513)
		p.Match(PostgreSQLParserCREATE)
	}
	{
		p.SetState(2514)
		p.Match(PostgreSQLParserGROUP)
	}
	{
		p.SetState(2515)

		var _x = p.identifier(0)

		localctx.(*Create_group_stmtContext).group = _x
	}
	p.SetState(2557)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserADMIN || _la == PostgreSQLParserCREATEDB || _la == PostgreSQLParserCREATEUSER || _la == PostgreSQLParserENCRYPTED || _la == PostgreSQLParserIN || _la == PostgreSQLParserNOCREATEDB || _la == PostgreSQLParserNOCREATEUSER || _la == PostgreSQLParserPASSWORD || _la == PostgreSQLParserROLE || _la == PostgreSQLParserSYSID || (((_la-610)&-(0x1f+1)) == 0 && ((1<<uint((_la-610)))&((1<<(PostgreSQLParserUNENCRYPTED-610))|(1<<(PostgreSQLParserUSER-610))|(1<<(PostgreSQLParserVALID-610)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(PostgreSQLParserWITH-647))|(1<<(PostgreSQLParserSUPERUSER-647))|(1<<(PostgreSQLParserNOSUPERUSER-647))|(1<<(PostgreSQLParserCREATEROLE-647))|(1<<(PostgreSQLParserNOCREATEROLE-647))|(1<<(PostgreSQLParserINHERIT-647))|(1<<(PostgreSQLParserNOINHERIT-647))|(1<<(PostgreSQLParserLOGIN-647))|(1<<(PostgreSQLParserNOLOGIN-647)))) != 0) {
		p.SetState(2517)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserWITH {
			{
				p.SetState(2516)
				p.Match(PostgreSQLParserWITH)
			}

		}
		p.SetState(2553)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == PostgreSQLParserADMIN || _la == PostgreSQLParserCREATEDB || _la == PostgreSQLParserCREATEUSER || _la == PostgreSQLParserENCRYPTED || _la == PostgreSQLParserIN || _la == PostgreSQLParserNOCREATEDB || _la == PostgreSQLParserNOCREATEUSER || _la == PostgreSQLParserPASSWORD || _la == PostgreSQLParserROLE || _la == PostgreSQLParserSYSID || (((_la-610)&-(0x1f+1)) == 0 && ((1<<uint((_la-610)))&((1<<(PostgreSQLParserUNENCRYPTED-610))|(1<<(PostgreSQLParserUSER-610))|(1<<(PostgreSQLParserVALID-610)))) != 0) || (((_la-656)&-(0x1f+1)) == 0 && ((1<<uint((_la-656)))&((1<<(PostgreSQLParserSUPERUSER-656))|(1<<(PostgreSQLParserNOSUPERUSER-656))|(1<<(PostgreSQLParserCREATEROLE-656))|(1<<(PostgreSQLParserNOCREATEROLE-656))|(1<<(PostgreSQLParserINHERIT-656))|(1<<(PostgreSQLParserNOINHERIT-656))|(1<<(PostgreSQLParserLOGIN-656))|(1<<(PostgreSQLParserNOLOGIN-656)))) != 0) {
			p.SetState(2553)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 201, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(2519)
					p.Match(PostgreSQLParserSUPERUSER)
				}

			case 2:
				{
					p.SetState(2520)
					p.Match(PostgreSQLParserNOSUPERUSER)
				}

			case 3:
				{
					p.SetState(2521)
					p.Match(PostgreSQLParserCREATEDB)
				}

			case 4:
				{
					p.SetState(2522)
					p.Match(PostgreSQLParserNOCREATEDB)
				}

			case 5:
				{
					p.SetState(2523)
					p.Match(PostgreSQLParserCREATEROLE)
				}

			case 6:
				{
					p.SetState(2524)
					p.Match(PostgreSQLParserNOCREATEROLE)
				}

			case 7:
				{
					p.SetState(2525)
					p.Match(PostgreSQLParserCREATEUSER)
				}

			case 8:
				{
					p.SetState(2526)
					p.Match(PostgreSQLParserNOCREATEUSER)
				}

			case 9:
				{
					p.SetState(2527)
					p.Match(PostgreSQLParserINHERIT)
				}

			case 10:
				{
					p.SetState(2528)
					p.Match(PostgreSQLParserNOINHERIT)
				}

			case 11:
				{
					p.SetState(2529)
					p.Match(PostgreSQLParserLOGIN)
				}

			case 12:
				{
					p.SetState(2530)
					p.Match(PostgreSQLParserNOLOGIN)
				}

			case 13:
				p.SetState(2532)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == PostgreSQLParserENCRYPTED || _la == PostgreSQLParserUNENCRYPTED {
					{
						p.SetState(2531)
						_la = p.GetTokenStream().LA(1)

						if !(_la == PostgreSQLParserENCRYPTED || _la == PostgreSQLParserUNENCRYPTED) {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}
					}

				}
				{
					p.SetState(2534)
					p.Match(PostgreSQLParserPASSWORD)
				}
				{
					p.SetState(2535)
					_la = p.GetTokenStream().LA(1)

					if !(_la == PostgreSQLParserNULL || _la == PostgreSQLParserSINGLEQ_STRING_LITERAL) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			case 14:
				{
					p.SetState(2536)
					p.Match(PostgreSQLParserVALID)
				}
				{
					p.SetState(2537)
					p.Match(PostgreSQLParserUNTIL)
				}
				{
					p.SetState(2538)
					p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)
				}

			case 15:
				{
					p.SetState(2539)
					p.Match(PostgreSQLParserIN)
				}
				{
					p.SetState(2540)
					p.Match(PostgreSQLParserROLE)
				}
				{
					p.SetState(2541)
					p.Name_list()
				}

			case 16:
				{
					p.SetState(2542)
					p.Match(PostgreSQLParserIN)
				}
				{
					p.SetState(2543)
					p.Match(PostgreSQLParserGROUP)
				}
				{
					p.SetState(2544)
					p.Name_list()
				}

			case 17:
				{
					p.SetState(2545)
					p.Match(PostgreSQLParserROLE)
				}
				{
					p.SetState(2546)
					p.Name_list()
				}

			case 18:
				{
					p.SetState(2547)
					p.Match(PostgreSQLParserADMIN)
				}
				{
					p.SetState(2548)
					p.Name_list()
				}

			case 19:
				{
					p.SetState(2549)
					p.Match(PostgreSQLParserUSER)
				}
				{
					p.SetState(2550)
					p.Name_list()
				}

			case 20:
				{
					p.SetState(2551)
					p.Match(PostgreSQLParserSYSID)
				}
				{
					p.SetState(2552)
					p.Match(PostgreSQLParserINTEGER_LITERAL)
				}

			}

			p.SetState(2555)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ICreate_index_stmtContext is an interface to support dynamic dispatch.
type ICreate_index_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIndex_name returns the index_name rule contexts.
	GetIndex_name() IIdentifierContext

	// GetTableName returns the tableName rule contexts.
	GetTableName() IIdentifierContext

	// GetTablespace_name returns the tablespace_name rule contexts.
	GetTablespace_name() IIdentifierContext

	// SetIndex_name sets the index_name rule contexts.
	SetIndex_name(IIdentifierContext)

	// SetTableName sets the tableName rule contexts.
	SetTableName(IIdentifierContext)

	// SetTablespace_name sets the tablespace_name rule contexts.
	SetTablespace_name(IIdentifierContext)

	// IsCreate_index_stmtContext differentiates from other interfaces.
	IsCreate_index_stmtContext()
}

type Create_index_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	index_name      IIdentifierContext
	tableName       IIdentifierContext
	tablespace_name IIdentifierContext
}

func NewEmptyCreate_index_stmtContext() *Create_index_stmtContext {
	var p = new(Create_index_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_index_stmt
	return p
}

func (*Create_index_stmtContext) IsCreate_index_stmtContext() {}

func NewCreate_index_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_index_stmtContext {
	var p = new(Create_index_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_index_stmt

	return p
}

func (s *Create_index_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_index_stmtContext) GetIndex_name() IIdentifierContext { return s.index_name }

func (s *Create_index_stmtContext) GetTableName() IIdentifierContext { return s.tableName }

func (s *Create_index_stmtContext) GetTablespace_name() IIdentifierContext { return s.tablespace_name }

func (s *Create_index_stmtContext) SetIndex_name(v IIdentifierContext) { s.index_name = v }

func (s *Create_index_stmtContext) SetTableName(v IIdentifierContext) { s.tableName = v }

func (s *Create_index_stmtContext) SetTablespace_name(v IIdentifierContext) { s.tablespace_name = v }

func (s *Create_index_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_index_stmtContext) INDEX() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINDEX, 0)
}

func (s *Create_index_stmtContext) ON() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserON, 0)
}

func (s *Create_index_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Create_index_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_index_stmtContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNIQUE, 0)
}

func (s *Create_index_stmtContext) CONCURRENTLY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONCURRENTLY, 0)
}

func (s *Create_index_stmtContext) USING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSING, 0)
}

func (s *Create_index_stmtContext) Index_method() IIndex_methodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_methodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_methodContext)
}

func (s *Create_index_stmtContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLESPACE, 0)
}

func (s *Create_index_stmtContext) WHERE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWHERE, 0)
}

func (s *Create_index_stmtContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *Create_index_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Create_index_stmtContext) NOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOT, 0)
}

func (s *Create_index_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Create_index_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_index_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_index_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_index_stmt(s)
	}
}

func (s *Create_index_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_index_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_index_stmt() (localctx ICreate_index_stmtContext) {
	localctx = NewCreate_index_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, PostgreSQLParserRULE_create_index_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2559)
		p.Match(PostgreSQLParserCREATE)
	}
	p.SetState(2561)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserUNIQUE {
		{
			p.SetState(2560)
			p.Match(PostgreSQLParserUNIQUE)
		}

	}
	{
		p.SetState(2563)
		p.Match(PostgreSQLParserINDEX)
	}
	p.SetState(2565)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCONCURRENTLY {
		{
			p.SetState(2564)
			p.Match(PostgreSQLParserCONCURRENTLY)
		}

	}
	p.SetState(2573)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PostgreSQLParserWHITESPACE)|(1<<PostgreSQLParserA_)|(1<<PostgreSQLParserABORT)|(1<<PostgreSQLParserABS)|(1<<PostgreSQLParserABSOLUTE)|(1<<PostgreSQLParserACCESS)|(1<<PostgreSQLParserACTION)|(1<<PostgreSQLParserADA)|(1<<PostgreSQLParserADD)|(1<<PostgreSQLParserADMIN)|(1<<PostgreSQLParserAFTER)|(1<<PostgreSQLParserAGGREGATE)|(1<<PostgreSQLParserALLOCATE)|(1<<PostgreSQLParserALSO)|(1<<PostgreSQLParserALTER)|(1<<PostgreSQLParserALWAYS)|(1<<PostgreSQLParserANY)|(1<<PostgreSQLParserARE)|(1<<PostgreSQLParserASENSITIVE)|(1<<PostgreSQLParserASSERTION)|(1<<PostgreSQLParserASSIGNMENT))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(PostgreSQLParserAT-33))|(1<<(PostgreSQLParserATOMIC-33))|(1<<(PostgreSQLParserATTRIBUTE-33))|(1<<(PostgreSQLParserATTRIBUTES-33))|(1<<(PostgreSQLParserAVG-33))|(1<<(PostgreSQLParserBACKWARD-33))|(1<<(PostgreSQLParserBEFORE-33))|(1<<(PostgreSQLParserBEGIN-33))|(1<<(PostgreSQLParserBERNOULLI-33))|(1<<(PostgreSQLParserBETWEEN-33))|(1<<(PostgreSQLParserBIGINT-33))|(1<<(PostgreSQLParserBIT-33))|(1<<(PostgreSQLParserBIT_LENGTH-33))|(1<<(PostgreSQLParserBLOB-33))|(1<<(PostgreSQLParserBOOLEAN-33))|(1<<(PostgreSQLParserBREADTH-33))|(1<<(PostgreSQLParserBY-33))|(1<<(PostgreSQLParserC_-33))|(1<<(PostgreSQLParserCACHE-33))|(1<<(PostgreSQLParserCALL-33))|(1<<(PostgreSQLParserCALLED-33))|(1<<(PostgreSQLParserCARDINALITY-33))|(1<<(PostgreSQLParserCASCADE-33))|(1<<(PostgreSQLParserCASCADED-33))|(1<<(PostgreSQLParserCATALOG-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PostgreSQLParserCATALOG_NAME-65))|(1<<(PostgreSQLParserCEIL-65))|(1<<(PostgreSQLParserCEILING-65))|(1<<(PostgreSQLParserCHAIN-65))|(1<<(PostgreSQLParserCHAR-65))|(1<<(PostgreSQLParserCHAR_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER-65))|(1<<(PostgreSQLParserCHARACTER_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER_SET_CATALOG-65))|(1<<(PostgreSQLParserCHARACTER_SET_NAME-65))|(1<<(PostgreSQLParserCHARACTER_SET_SCHEMA-65))|(1<<(PostgreSQLParserCHARACTERISTICS-65))|(1<<(PostgreSQLParserCHARACTERS-65))|(1<<(PostgreSQLParserCHECKPOINT-65))|(1<<(PostgreSQLParserCLASS-65))|(1<<(PostgreSQLParserCLASS_ORIGIN-65))|(1<<(PostgreSQLParserCLOB-65))|(1<<(PostgreSQLParserCLOSE-65))|(1<<(PostgreSQLParserCLUSTER-65))|(1<<(PostgreSQLParserCOALESCE-65))|(1<<(PostgreSQLParserCOBOL-65))|(1<<(PostgreSQLParserCOLLATION_CATALOG-65))|(1<<(PostgreSQLParserCOLLATION_NAME-65))|(1<<(PostgreSQLParserCOLLATION_SCHEMA-65))|(1<<(PostgreSQLParserCOLLECT-65))|(1<<(PostgreSQLParserCOLUMN_NAME-65))|(1<<(PostgreSQLParserCOMMAND_FUNCTION-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(PostgreSQLParserCOMMAND_FUNCTION_CODE-97))|(1<<(PostgreSQLParserCOMMENT-97))|(1<<(PostgreSQLParserCOMMIT-97))|(1<<(PostgreSQLParserCOMMITTED-97))|(1<<(PostgreSQLParserCONDITION-97))|(1<<(PostgreSQLParserCONDITION_NUMBER-97))|(1<<(PostgreSQLParserCONNECT-97))|(1<<(PostgreSQLParserCONNECTION-97))|(1<<(PostgreSQLParserCONNECTION_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_CATALOG-97))|(1<<(PostgreSQLParserCONSTRAINT_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_SCHEMA-97))|(1<<(PostgreSQLParserCONSTRAINTS-97))|(1<<(PostgreSQLParserCONSTRUCTOR-97))|(1<<(PostgreSQLParserCONTAINS-97))|(1<<(PostgreSQLParserCONTINUE-97))|(1<<(PostgreSQLParserCONVERSION-97))|(1<<(PostgreSQLParserCONVERT-97))|(1<<(PostgreSQLParserCOPY-97))|(1<<(PostgreSQLParserCORR-97))|(1<<(PostgreSQLParserCORRESPONDING-97))|(1<<(PostgreSQLParserCOUNT-97))|(1<<(PostgreSQLParserCOVAR_POP-97))|(1<<(PostgreSQLParserCOVAR_SAMP-97)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(PostgreSQLParserCSV-131))|(1<<(PostgreSQLParserCUBE-131))|(1<<(PostgreSQLParserCUME_DIST-131))|(1<<(PostgreSQLParserCURRENT-131))|(1<<(PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP-131))|(1<<(PostgreSQLParserCURRENT_PATH-131))|(1<<(PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE-131))|(1<<(PostgreSQLParserCURSOR-131))|(1<<(PostgreSQLParserCURSOR_NAME-131))|(1<<(PostgreSQLParserCYCLE-131))|(1<<(PostgreSQLParserDATA-131))|(1<<(PostgreSQLParserDATABASE-131))|(1<<(PostgreSQLParserDATE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_CODE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_PRECISION-131))|(1<<(PostgreSQLParserDAY-131))|(1<<(PostgreSQLParserDEALLOCATE-131))|(1<<(PostgreSQLParserDEC-131))|(1<<(PostgreSQLParserDECIMAL-131))|(1<<(PostgreSQLParserDECLARE-131))|(1<<(PostgreSQLParserDEFAULTS-131))|(1<<(PostgreSQLParserDEFERRED-131))|(1<<(PostgreSQLParserDEFINED-131))|(1<<(PostgreSQLParserDEFINER-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(PostgreSQLParserDEGREE-163))|(1<<(PostgreSQLParserDELETE-163))|(1<<(PostgreSQLParserDELIMITER-163))|(1<<(PostgreSQLParserDELIMITERS-163))|(1<<(PostgreSQLParserDENSE_RANK-163))|(1<<(PostgreSQLParserDEPTH-163))|(1<<(PostgreSQLParserDEREF-163))|(1<<(PostgreSQLParserDERIVED-163))|(1<<(PostgreSQLParserDESCRIBE-163))|(1<<(PostgreSQLParserDESCRIPTOR-163))|(1<<(PostgreSQLParserDETERMINISTIC-163))|(1<<(PostgreSQLParserDIAGNOSTICS-163))|(1<<(PostgreSQLParserDICTIONARY-163))|(1<<(PostgreSQLParserDISCONNECT-163))|(1<<(PostgreSQLParserDISPATCH-163))|(1<<(PostgreSQLParserDOMAIN-163))|(1<<(PostgreSQLParserDOUBLE-163))|(1<<(PostgreSQLParserDYNAMIC-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION_CODE-163))|(1<<(PostgreSQLParserEACH-163))|(1<<(PostgreSQLParserELEMENT-163)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(PostgreSQLParserENCODING-197))|(1<<(PostgreSQLParserENCRYPTED-197))|(1<<(PostgreSQLParserEND-197))|(1<<(PostgreSQLParserEQUALS-197))|(1<<(PostgreSQLParserESCAPE-197))|(1<<(PostgreSQLParserEVERY-197))|(1<<(PostgreSQLParserEXCEPTION-197))|(1<<(PostgreSQLParserEXCLUDE-197))|(1<<(PostgreSQLParserEXCLUDING-197))|(1<<(PostgreSQLParserEXCLUSIVE-197))|(1<<(PostgreSQLParserEXEC-197))|(1<<(PostgreSQLParserEXECUTE-197))|(1<<(PostgreSQLParserEXISTS-197))|(1<<(PostgreSQLParserEXP-197))|(1<<(PostgreSQLParserEXPLAIN-197))|(1<<(PostgreSQLParserEXTENSION-197))|(1<<(PostgreSQLParserEXTERNAL-197))|(1<<(PostgreSQLParserEXTRACT-197))|(1<<(PostgreSQLParserFILTER-197))|(1<<(PostgreSQLParserFINAL-197))|(1<<(PostgreSQLParserFIRST-197))|(1<<(PostgreSQLParserFLOAT-197))|(1<<(PostgreSQLParserFLOOR-197))|(1<<(PostgreSQLParserFOLLOWING-197)))) != 0) || (((_la-229)&-(0x1f+1)) == 0 && ((1<<uint((_la-229)))&((1<<(PostgreSQLParserFORCE-229))|(1<<(PostgreSQLParserFORMAT-229))|(1<<(PostgreSQLParserFORTRAN-229))|(1<<(PostgreSQLParserFORWARD-229))|(1<<(PostgreSQLParserFOUND-229))|(1<<(PostgreSQLParserFREE-229))|(1<<(PostgreSQLParserFUNCTION-229))|(1<<(PostgreSQLParserFUSION-229))|(1<<(PostgreSQLParserG_-229))|(1<<(PostgreSQLParserGENERAL-229))|(1<<(PostgreSQLParserGENERATED-229))|(1<<(PostgreSQLParserGET-229))|(1<<(PostgreSQLParserGLOBAL-229))|(1<<(PostgreSQLParserGO-229))|(1<<(PostgreSQLParserGOTO-229))|(1<<(PostgreSQLParserGRANTED-229))|(1<<(PostgreSQLParserGREATEST-229))|(1<<(PostgreSQLParserGROUPING-229))|(1<<(PostgreSQLParserHANDLER-229))|(1<<(PostgreSQLParserHIERARCHY-229))|(1<<(PostgreSQLParserHOLD-229))|(1<<(PostgreSQLParserHOST-229))|(1<<(PostgreSQLParserHOUR-229))|(1<<(PostgreSQLParserIDENTITY-229))|(1<<(PostgreSQLParserIGNORE-229)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(PostgreSQLParserIMMEDIATE-262))|(1<<(PostgreSQLParserIMMUTABLE-262))|(1<<(PostgreSQLParserIMPLEMENTATION-262))|(1<<(PostgreSQLParserIMPLICIT-262))|(1<<(PostgreSQLParserINCLUDING-262))|(1<<(PostgreSQLParserINCREMENT-262))|(1<<(PostgreSQLParserINDEX-262))|(1<<(PostgreSQLParserINDICATOR-262))|(1<<(PostgreSQLParserINHERITS-262))|(1<<(PostgreSQLParserINOUT-262))|(1<<(PostgreSQLParserINPUT-262))|(1<<(PostgreSQLParserINSENSITIVE-262))|(1<<(PostgreSQLParserINSERT-262))|(1<<(PostgreSQLParserINSTANCE-262))|(1<<(PostgreSQLParserINSTANTIABLE-262))|(1<<(PostgreSQLParserINSTEAD-262))|(1<<(PostgreSQLParserINT-262))|(1<<(PostgreSQLParserINTEGER-262))|(1<<(PostgreSQLParserINTERSECTION-262))|(1<<(PostgreSQLParserINTERVAL-262))|(1<<(PostgreSQLParserINVOKER-262))|(1<<(PostgreSQLParserISOLATION-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(PostgreSQLParserK_-294))|(1<<(PostgreSQLParserKEY-294))|(1<<(PostgreSQLParserKEY_MEMBER-294))|(1<<(PostgreSQLParserKEY_TYPE-294))|(1<<(PostgreSQLParserLANGUAGE-294))|(1<<(PostgreSQLParserLARGE-294))|(1<<(PostgreSQLParserLAST-294))|(1<<(PostgreSQLParserLEAST-294))|(1<<(PostgreSQLParserLEFT-294))|(1<<(PostgreSQLParserLENGTH-294))|(1<<(PostgreSQLParserLEVEL-294))|(1<<(PostgreSQLParserLISTEN-294))|(1<<(PostgreSQLParserLN-294))|(1<<(PostgreSQLParserLOAD-294))|(1<<(PostgreSQLParserLOCAL-294))|(1<<(PostgreSQLParserLOCATION-294))|(1<<(PostgreSQLParserLOCATOR-294))|(1<<(PostgreSQLParserLOCK-294))|(1<<(PostgreSQLParserLOCKED-294))|(1<<(PostgreSQLParserLOWER-294))|(1<<(PostgreSQLParserM_-294))|(1<<(PostgreSQLParserMAP-294)))) != 0) || (((_la-327)&-(0x1f+1)) == 0 && ((1<<uint((_la-327)))&((1<<(PostgreSQLParserMATCH-327))|(1<<(PostgreSQLParserMATCHED-327))|(1<<(PostgreSQLParserMAX-327))|(1<<(PostgreSQLParserMAXVALUE-327))|(1<<(PostgreSQLParserMEMBER-327))|(1<<(PostgreSQLParserMERGE-327))|(1<<(PostgreSQLParserMESSAGE_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_OCTET_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_TEXT-327))|(1<<(PostgreSQLParserMETHOD-327))|(1<<(PostgreSQLParserMIN-327))|(1<<(PostgreSQLParserMINUTE-327))|(1<<(PostgreSQLParserMINVALUE-327))|(1<<(PostgreSQLParserMOD-327))|(1<<(PostgreSQLParserMODE-327))|(1<<(PostgreSQLParserMODIFIES-327))|(1<<(PostgreSQLParserMODULE-327))|(1<<(PostgreSQLParserMONTH-327))|(1<<(PostgreSQLParserMORE_-327))|(1<<(PostgreSQLParserMOVE-327))|(1<<(PostgreSQLParserMULTISET-327))|(1<<(PostgreSQLParserMUMPS-327))|(1<<(PostgreSQLParserNAME-327))|(1<<(PostgreSQLParserNAMES-327))|(1<<(PostgreSQLParserNATIONAL-327))|(1<<(PostgreSQLParserNCHAR-327))|(1<<(PostgreSQLParserNCLOB-327))|(1<<(PostgreSQLParserNESTING-327))|(1<<(PostgreSQLParserNEW-327)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(PostgreSQLParserNEXT-359))|(1<<(PostgreSQLParserNO-359))|(1<<(PostgreSQLParserNONE-359))|(1<<(PostgreSQLParserNORMALIZE-359))|(1<<(PostgreSQLParserNORMALIZED-359))|(1<<(PostgreSQLParserNOTHING-359))|(1<<(PostgreSQLParserNOTIFY-359))|(1<<(PostgreSQLParserNOWAIT-359))|(1<<(PostgreSQLParserNULLABLE-359))|(1<<(PostgreSQLParserNULLIF-359))|(1<<(PostgreSQLParserNULLS-359))|(1<<(PostgreSQLParserNUMBER-359))|(1<<(PostgreSQLParserNUMERIC-359))|(1<<(PostgreSQLParserOBJECT-359))|(1<<(PostgreSQLParserOCTET_LENGTH-359))|(1<<(PostgreSQLParserOCTETS-359))|(1<<(PostgreSQLParserOF-359))|(1<<(PostgreSQLParserOFF-359))|(1<<(PostgreSQLParserOIDS-359))|(1<<(PostgreSQLParserOLD-359))|(1<<(PostgreSQLParserOPEN-359))|(1<<(PostgreSQLParserOPERATOR-359))|(1<<(PostgreSQLParserOPTION-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(PostgreSQLParserOPTIONS-391))|(1<<(PostgreSQLParserORDERING-391))|(1<<(PostgreSQLParserORDINALITY-391))|(1<<(PostgreSQLParserOTHERS-391))|(1<<(PostgreSQLParserOUT-391))|(1<<(PostgreSQLParserOUTPUT-391))|(1<<(PostgreSQLParserOVER-391))|(1<<(PostgreSQLParserOVERLAY-391))|(1<<(PostgreSQLParserOVERRIDING-391))|(1<<(PostgreSQLParserOWNER-391))|(1<<(PostgreSQLParserPAD-391))|(1<<(PostgreSQLParserPARAMETER-391))|(1<<(PostgreSQLParserPARAMETER_MODE-391))|(1<<(PostgreSQLParserPARAMETER_NAME-391))|(1<<(PostgreSQLParserPARAMETER_ORDINAL_POSITION-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_CATALOG-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_NAME-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA-391))|(1<<(PostgreSQLParserPARTIAL-391))|(1<<(PostgreSQLParserPARTITION-391))|(1<<(PostgreSQLParserPASCAL-391))|(1<<(PostgreSQLParserPASSWORD-391))|(1<<(PostgreSQLParserPATH-391))|(1<<(PostgreSQLParserPERCENT_RANK-391))|(1<<(PostgreSQLParserPERCENTILE_CONT-391))|(1<<(PostgreSQLParserPERCENTILE_DISC-391)))) != 0) || (((_la-424)&-(0x1f+1)) == 0 && ((1<<uint((_la-424)))&((1<<(PostgreSQLParserPLAIN-424))|(1<<(PostgreSQLParserPLI-424))|(1<<(PostgreSQLParserPOSITION-424))|(1<<(PostgreSQLParserPOWER-424))|(1<<(PostgreSQLParserPRECEDING-424))|(1<<(PostgreSQLParserPRECISION-424))|(1<<(PostgreSQLParserPREPARE-424))|(1<<(PostgreSQLParserPRESERVE-424))|(1<<(PostgreSQLParserPRIOR-424))|(1<<(PostgreSQLParserPRIVILEGES-424))|(1<<(PostgreSQLParserPROCEDURAL-424))|(1<<(PostgreSQLParserPROCEDURE-424))|(1<<(PostgreSQLParserPUBLIC-424))|(1<<(PostgreSQLParserQUOTE-424))|(1<<(PostgreSQLParserRANGE-424))|(1<<(PostgreSQLParserRANK-424))|(1<<(PostgreSQLParserREAD-424))|(1<<(PostgreSQLParserREADS-424))|(1<<(PostgreSQLParserREAL-424))|(1<<(PostgreSQLParserRECHECK-424))|(1<<(PostgreSQLParserRECURSIVE-424))|(1<<(PostgreSQLParserREF-424))|(1<<(PostgreSQLParserREFERENCING-424)))) != 0) || (((_la-456)&-(0x1f+1)) == 0 && ((1<<uint((_la-456)))&((1<<(PostgreSQLParserREFRESH-456))|(1<<(PostgreSQLParserREGR_AVGX-456))|(1<<(PostgreSQLParserREGR_AVGY-456))|(1<<(PostgreSQLParserREGR_COUNT-456))|(1<<(PostgreSQLParserREGR_INTERCEPT-456))|(1<<(PostgreSQLParserREGR_SLOPE-456))|(1<<(PostgreSQLParserREGR_SXX-456))|(1<<(PostgreSQLParserREGR_SXY-456))|(1<<(PostgreSQLParserREGR_SYY-456))|(1<<(PostgreSQLParserREINDEX-456))|(1<<(PostgreSQLParserRELATIVE-456))|(1<<(PostgreSQLParserRELEASE-456))|(1<<(PostgreSQLParserRENAME-456))|(1<<(PostgreSQLParserREPEATABLE-456))|(1<<(PostgreSQLParserREPLACE-456))|(1<<(PostgreSQLParserRESET-456))|(1<<(PostgreSQLParserRESTART-456))|(1<<(PostgreSQLParserRESTRICT-456))|(1<<(PostgreSQLParserRESULT-456))|(1<<(PostgreSQLParserRETURN-456))|(1<<(PostgreSQLParserRETURNED_CARDINALITY-456))|(1<<(PostgreSQLParserRETURNED_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_OCTET_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_SQLSTATE-456))|(1<<(PostgreSQLParserRETURNS-456))|(1<<(PostgreSQLParserREVOKE-456))|(1<<(PostgreSQLParserRIGHT-456))|(1<<(PostgreSQLParserROLE-456))|(1<<(PostgreSQLParserROLLBACK-456)))) != 0) || (((_la-488)&-(0x1f+1)) == 0 && ((1<<uint((_la-488)))&((1<<(PostgreSQLParserROLLUP-488))|(1<<(PostgreSQLParserROUTINE-488))|(1<<(PostgreSQLParserROUTINE_CATALOG-488))|(1<<(PostgreSQLParserROUTINE_NAME-488))|(1<<(PostgreSQLParserROUTINE_SCHEMA-488))|(1<<(PostgreSQLParserROW-488))|(1<<(PostgreSQLParserROW_COUNT-488))|(1<<(PostgreSQLParserROW_NUMBER-488))|(1<<(PostgreSQLParserROWS-488))|(1<<(PostgreSQLParserRULE-488))|(1<<(PostgreSQLParserSAVEPOINT-488))|(1<<(PostgreSQLParserSCALE-488))|(1<<(PostgreSQLParserSCHEMA-488))|(1<<(PostgreSQLParserSCHEMA_NAME-488))|(1<<(PostgreSQLParserSCOPE-488))|(1<<(PostgreSQLParserSCOPE_CATALOG-488))|(1<<(PostgreSQLParserSCOPE_NAME-488))|(1<<(PostgreSQLParserSCOPE_SCHEMA-488))|(1<<(PostgreSQLParserSCROLL-488))|(1<<(PostgreSQLParserSEARCH-488))|(1<<(PostgreSQLParserSECOND-488))|(1<<(PostgreSQLParserSECTION-488))|(1<<(PostgreSQLParserSECURITY-488))|(1<<(PostgreSQLParserSELF-488))|(1<<(PostgreSQLParserSENSITIVE-488))|(1<<(PostgreSQLParserSEQUENCE-488))|(1<<(PostgreSQLParserSEQUENCES-488))|(1<<(PostgreSQLParserSERIALIZABLE-488))|(1<<(PostgreSQLParserSERVER_NAME-488))|(1<<(PostgreSQLParserSESSION-488)))) != 0) || (((_la-520)&-(0x1f+1)) == 0 && ((1<<uint((_la-520)))&((1<<(PostgreSQLParserSET-520))|(1<<(PostgreSQLParserSETOF-520))|(1<<(PostgreSQLParserSETS-520))|(1<<(PostgreSQLParserSHARE-520))|(1<<(PostgreSQLParserSHOW-520))|(1<<(PostgreSQLParserSIMPLE-520))|(1<<(PostgreSQLParserSIZE-520))|(1<<(PostgreSQLParserSMALLINT-520))|(1<<(PostgreSQLParserSOME-520))|(1<<(PostgreSQLParserSOURCE-520))|(1<<(PostgreSQLParserSPACE-520))|(1<<(PostgreSQLParserSPECIFIC-520))|(1<<(PostgreSQLParserSPECIFIC_NAME-520))|(1<<(PostgreSQLParserSPECIFICTYPE-520))|(1<<(PostgreSQLParserSQL-520))|(1<<(PostgreSQLParserSQLCODE-520))|(1<<(PostgreSQLParserSQLERROR-520))|(1<<(PostgreSQLParserSQLEXCEPTION-520))|(1<<(PostgreSQLParserSQLSTATE-520))|(1<<(PostgreSQLParserSQLWARNING-520))|(1<<(PostgreSQLParserSQRT-520))|(1<<(PostgreSQLParserSTABLE-520))|(1<<(PostgreSQLParserSTART-520))|(1<<(PostgreSQLParserSTATE-520))|(1<<(PostgreSQLParserSTATEMENT-520))|(1<<(PostgreSQLParserSTATIC-520))|(1<<(PostgreSQLParserSTATISTICS-520))|(1<<(PostgreSQLParserSTDDEV_POP-520))|(1<<(PostgreSQLParserSTDDEV_SAMP-520)))) != 0) || (((_la-552)&-(0x1f+1)) == 0 && ((1<<uint((_la-552)))&((1<<(PostgreSQLParserSTDIN-552))|(1<<(PostgreSQLParserSTDOUT-552))|(1<<(PostgreSQLParserSTORAGE-552))|(1<<(PostgreSQLParserSTRICT-552))|(1<<(PostgreSQLParserSTRUCTURE-552))|(1<<(PostgreSQLParserSTYLE-552))|(1<<(PostgreSQLParserSUBCLASS_ORIGIN-552))|(1<<(PostgreSQLParserSUBMULTISET-552))|(1<<(PostgreSQLParserSUBSTRING-552))|(1<<(PostgreSQLParserSUM-552))|(1<<(PostgreSQLParserSYSID-552))|(1<<(PostgreSQLParserSYSTEM-552))|(1<<(PostgreSQLParserSYSTEM_USER-552))|(1<<(PostgreSQLParserTABLE_NAME-552))|(1<<(PostgreSQLParserTABLESPACE-552))|(1<<(PostgreSQLParserTEMP-552))|(1<<(PostgreSQLParserTEMPLATE-552))|(1<<(PostgreSQLParserTEMPORARY-552))|(1<<(PostgreSQLParserTIES-552))|(1<<(PostgreSQLParserTIME-552))|(1<<(PostgreSQLParserTIMESTAMP-552))|(1<<(PostgreSQLParserTIMEZONE_HOUR-552))|(1<<(PostgreSQLParserTIMEZONE_MINUTE-552)))) != 0) || (((_la-586)&-(0x1f+1)) == 0 && ((1<<uint((_la-586)))&((1<<(PostgreSQLParserTOP_LEVEL_COUNT-586))|(1<<(PostgreSQLParserTRANSACTION-586))|(1<<(PostgreSQLParserTRANSACTION_ACTIVE-586))|(1<<(PostgreSQLParserTRANSACTIONS_COMMITTED-586))|(1<<(PostgreSQLParserTRANSACTIONS_ROLLED_BACK-586))|(1<<(PostgreSQLParserTRANSFORM-586))|(1<<(PostgreSQLParserTRANSFORMS-586))|(1<<(PostgreSQLParserTRANSLATE-586))|(1<<(PostgreSQLParserTRANSLATION-586))|(1<<(PostgreSQLParserTREAT-586))|(1<<(PostgreSQLParserTRIGGER-586))|(1<<(PostgreSQLParserTRIGGER_CATALOG-586))|(1<<(PostgreSQLParserTRIGGER_NAME-586))|(1<<(PostgreSQLParserTRIGGER_SCHEMA-586))|(1<<(PostgreSQLParserTRIM-586))|(1<<(PostgreSQLParserTRUE-586))|(1<<(PostgreSQLParserTRUNCATE-586))|(1<<(PostgreSQLParserTRUSTED-586))|(1<<(PostgreSQLParserTYPE-586))|(1<<(PostgreSQLParserUESCAPE-586))|(1<<(PostgreSQLParserUNBOUNDED-586))|(1<<(PostgreSQLParserUNCOMMITTED-586))|(1<<(PostgreSQLParserUNDER-586))|(1<<(PostgreSQLParserUNENCRYPTED-586))|(1<<(PostgreSQLParserUNKNOWN-586))|(1<<(PostgreSQLParserUNLISTEN-586))|(1<<(PostgreSQLParserUNNAMED-586))|(1<<(PostgreSQLParserUNNEST-586))|(1<<(PostgreSQLParserUNTIL-586)))) != 0) || (((_la-618)&-(0x1f+1)) == 0 && ((1<<uint((_la-618)))&((1<<(PostgreSQLParserUPDATE-618))|(1<<(PostgreSQLParserUPPER-618))|(1<<(PostgreSQLParserUSAGE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CATALOG-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CODE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_NAME-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA-618))|(1<<(PostgreSQLParserVACUUM-618))|(1<<(PostgreSQLParserVALID-618))|(1<<(PostgreSQLParserVALIDATOR-618))|(1<<(PostgreSQLParserVALUE-618))|(1<<(PostgreSQLParserVALUES-618))|(1<<(PostgreSQLParserVAR_POP-618))|(1<<(PostgreSQLParserVAR_SAMP-618))|(1<<(PostgreSQLParserVARCHAR-618))|(1<<(PostgreSQLParserVARYING-618))|(1<<(PostgreSQLParserVIEW-618))|(1<<(PostgreSQLParserVOLATILE-618))|(1<<(PostgreSQLParserWHENEVER-618))|(1<<(PostgreSQLParserWIDTH_BUCKET-618))|(1<<(PostgreSQLParserWITHIN-618))|(1<<(PostgreSQLParserWITHOUT-618)))) != 0) || (((_la-650)&-(0x1f+1)) == 0 && ((1<<uint((_la-650)))&((1<<(PostgreSQLParserWORK-650))|(1<<(PostgreSQLParserWRITE-650))|(1<<(PostgreSQLParserYEAR-650))|(1<<(PostgreSQLParserZONE-650)))) != 0) || (((_la-691)&-(0x1f+1)) == 0 && ((1<<uint((_la-691)))&((1<<(PostgreSQLParserIF-691))|(1<<(PostgreSQLParserABSTIME-691))|(1<<(PostgreSQLParserBIGSERIAL-691))|(1<<(PostgreSQLParserBIT_VARYING-691)))) != 0) || (((_la-723)&-(0x1f+1)) == 0 && ((1<<uint((_la-723)))&((1<<(PostgreSQLParserBOOL-723))|(1<<(PostgreSQLParserBOX-723))|(1<<(PostgreSQLParserBYTEA-723))|(1<<(PostgreSQLParserCHARACTER_VARYING-723))|(1<<(PostgreSQLParserCIDR-723))|(1<<(PostgreSQLParserCIRCLE-723))|(1<<(PostgreSQLParserFLOAT4-723))|(1<<(PostgreSQLParserFLOAT8-723))|(1<<(PostgreSQLParserINET-723))|(1<<(PostgreSQLParserINT2-723))|(1<<(PostgreSQLParserINT4-723))|(1<<(PostgreSQLParserINT8-723))|(1<<(PostgreSQLParserJSON-723))|(1<<(PostgreSQLParserJSONB-723))|(1<<(PostgreSQLParserLINE-723))|(1<<(PostgreSQLParserLSEG-723))|(1<<(PostgreSQLParserMACADDR-723))|(1<<(PostgreSQLParserMACADDR8-723))|(1<<(PostgreSQLParserMONEY-723))|(1<<(PostgreSQLParserPG_LSN-723))|(1<<(PostgreSQLParserPOINT-723))|(1<<(PostgreSQLParserPOLYGON-723))|(1<<(PostgreSQLParserRELTIME-723))|(1<<(PostgreSQLParserSERIAL-723))|(1<<(PostgreSQLParserSERIAL2-723))|(1<<(PostgreSQLParserSERIAL4-723))|(1<<(PostgreSQLParserSERIAL8-723))|(1<<(PostgreSQLParserSMALLSERIAL-723))|(1<<(PostgreSQLParserTEXT-723))|(1<<(PostgreSQLParserTIMESTAMPTZ-723))|(1<<(PostgreSQLParserTIMETZ-723)))) != 0) || (((_la-755)&-(0x1f+1)) == 0 && ((1<<uint((_la-755)))&((1<<(PostgreSQLParserTSQUERY-755))|(1<<(PostgreSQLParserTSVECTOR-755))|(1<<(PostgreSQLParserTXID_SNAPSHOT-755))|(1<<(PostgreSQLParserUUID-755))|(1<<(PostgreSQLParserVARBIT-755))|(1<<(PostgreSQLParserXML-755))|(1<<(PostgreSQLParserDOUBLEQ_STRING_LITERAL-755))|(1<<(PostgreSQLParserIDENTIFIER-755))|(1<<(PostgreSQLParserIDENTIFIER_UNICODE-755)))) != 0) {
		p.SetState(2570)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIF {
			{
				p.SetState(2567)
				p.Match(PostgreSQLParserIF)
			}
			{
				p.SetState(2568)
				p.Match(PostgreSQLParserNOT)
			}
			{
				p.SetState(2569)
				p.Match(PostgreSQLParserEXISTS)
			}

		}
		{
			p.SetState(2572)

			var _x = p.identifier(0)

			localctx.(*Create_index_stmtContext).index_name = _x
		}

	}
	{
		p.SetState(2575)
		p.Match(PostgreSQLParserON)
	}
	{
		p.SetState(2576)

		var _x = p.identifier(0)

		localctx.(*Create_index_stmtContext).tableName = _x
	}
	p.SetState(2579)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserUSING {
		{
			p.SetState(2577)
			p.Match(PostgreSQLParserUSING)
		}
		{
			p.SetState(2578)
			p.Index_method()
		}

	}
	p.SetState(2583)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserTABLESPACE {
		{
			p.SetState(2581)
			p.Match(PostgreSQLParserTABLESPACE)
		}
		{
			p.SetState(2582)

			var _x = p.identifier(0)

			localctx.(*Create_index_stmtContext).tablespace_name = _x
		}

	}
	p.SetState(2587)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserWHERE {
		{
			p.SetState(2585)
			p.Match(PostgreSQLParserWHERE)
		}
		{
			p.SetState(2586)
			p.predicate(0)
		}

	}

	return localctx
}

// ICreate_language_stmtContext is an interface to support dynamic dispatch.
type ICreate_language_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLanguage_name returns the language_name rule contexts.
	GetLanguage_name() IIdentifierContext

	// GetCall_handler returns the call_handler rule contexts.
	GetCall_handler() IIdentifierContext

	// GetInline_handler returns the inline_handler rule contexts.
	GetInline_handler() IIdentifierContext

	// GetValfunction returns the valfunction rule contexts.
	GetValfunction() IIdentifierContext

	// SetLanguage_name sets the language_name rule contexts.
	SetLanguage_name(IIdentifierContext)

	// SetCall_handler sets the call_handler rule contexts.
	SetCall_handler(IIdentifierContext)

	// SetInline_handler sets the inline_handler rule contexts.
	SetInline_handler(IIdentifierContext)

	// SetValfunction sets the valfunction rule contexts.
	SetValfunction(IIdentifierContext)

	// IsCreate_language_stmtContext differentiates from other interfaces.
	IsCreate_language_stmtContext()
}

type Create_language_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	language_name  IIdentifierContext
	call_handler   IIdentifierContext
	inline_handler IIdentifierContext
	valfunction    IIdentifierContext
}

func NewEmptyCreate_language_stmtContext() *Create_language_stmtContext {
	var p = new(Create_language_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_language_stmt
	return p
}

func (*Create_language_stmtContext) IsCreate_language_stmtContext() {}

func NewCreate_language_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_language_stmtContext {
	var p = new(Create_language_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_language_stmt

	return p
}

func (s *Create_language_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_language_stmtContext) GetLanguage_name() IIdentifierContext { return s.language_name }

func (s *Create_language_stmtContext) GetCall_handler() IIdentifierContext { return s.call_handler }

func (s *Create_language_stmtContext) GetInline_handler() IIdentifierContext { return s.inline_handler }

func (s *Create_language_stmtContext) GetValfunction() IIdentifierContext { return s.valfunction }

func (s *Create_language_stmtContext) SetLanguage_name(v IIdentifierContext) { s.language_name = v }

func (s *Create_language_stmtContext) SetCall_handler(v IIdentifierContext) { s.call_handler = v }

func (s *Create_language_stmtContext) SetInline_handler(v IIdentifierContext) { s.inline_handler = v }

func (s *Create_language_stmtContext) SetValfunction(v IIdentifierContext) { s.valfunction = v }

func (s *Create_language_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_language_stmtContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLANGUAGE, 0)
}

func (s *Create_language_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Create_language_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_language_stmtContext) OR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOR, 0)
}

func (s *Create_language_stmtContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREPLACE, 0)
}

func (s *Create_language_stmtContext) PROCEDURAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPROCEDURAL, 0)
}

func (s *Create_language_stmtContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHANDLER, 0)
}

func (s *Create_language_stmtContext) TRUSTED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRUSTED, 0)
}

func (s *Create_language_stmtContext) INLINE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINLINE, 0)
}

func (s *Create_language_stmtContext) VALIDATOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVALIDATOR, 0)
}

func (s *Create_language_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_language_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_language_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_language_stmt(s)
	}
}

func (s *Create_language_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_language_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_language_stmt() (localctx ICreate_language_stmtContext) {
	localctx = NewCreate_language_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, PostgreSQLParserRULE_create_language_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2622)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2589)
			p.Match(PostgreSQLParserCREATE)
		}
		p.SetState(2592)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserOR {
			{
				p.SetState(2590)
				p.Match(PostgreSQLParserOR)
			}
			{
				p.SetState(2591)
				p.Match(PostgreSQLParserREPLACE)
			}

		}
		p.SetState(2595)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserPROCEDURAL {
			{
				p.SetState(2594)
				p.Match(PostgreSQLParserPROCEDURAL)
			}

		}
		{
			p.SetState(2597)
			p.Match(PostgreSQLParserLANGUAGE)
		}
		{
			p.SetState(2598)

			var _x = p.identifier(0)

			localctx.(*Create_language_stmtContext).language_name = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2599)
			p.Match(PostgreSQLParserCREATE)
		}
		p.SetState(2602)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserOR {
			{
				p.SetState(2600)
				p.Match(PostgreSQLParserOR)
			}
			{
				p.SetState(2601)
				p.Match(PostgreSQLParserREPLACE)
			}

		}
		p.SetState(2605)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserTRUSTED {
			{
				p.SetState(2604)
				p.Match(PostgreSQLParserTRUSTED)
			}

		}
		p.SetState(2608)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserPROCEDURAL {
			{
				p.SetState(2607)
				p.Match(PostgreSQLParserPROCEDURAL)
			}

		}
		{
			p.SetState(2610)
			p.Match(PostgreSQLParserLANGUAGE)
		}
		{
			p.SetState(2611)

			var _x = p.identifier(0)

			localctx.(*Create_language_stmtContext).language_name = _x
		}
		{
			p.SetState(2612)
			p.Match(PostgreSQLParserHANDLER)
		}
		{
			p.SetState(2613)

			var _x = p.identifier(0)

			localctx.(*Create_language_stmtContext).call_handler = _x
		}
		p.SetState(2616)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserINLINE {
			{
				p.SetState(2614)
				p.Match(PostgreSQLParserINLINE)
			}
			{
				p.SetState(2615)

				var _x = p.identifier(0)

				localctx.(*Create_language_stmtContext).inline_handler = _x
			}

		}
		p.SetState(2620)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserVALIDATOR {
			{
				p.SetState(2618)
				p.Match(PostgreSQLParserVALIDATOR)
			}
			{
				p.SetState(2619)

				var _x = p.identifier(0)

				localctx.(*Create_language_stmtContext).valfunction = _x
			}

		}

	}

	return localctx
}

// ICreate_materialized_view_stmtContext is an interface to support dynamic dispatch.
type ICreate_materialized_view_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTableName returns the tableName rule contexts.
	GetTableName() IIdentifierContext

	// GetColumns returns the columns rule contexts.
	GetColumns() IIdentifier_listContext

	// GetTablespace_name returns the tablespace_name rule contexts.
	GetTablespace_name() IIdentifierContext

	// GetQuery returns the query rule contexts.
	GetQuery() ISelect_stmtContext

	// SetTableName sets the tableName rule contexts.
	SetTableName(IIdentifierContext)

	// SetColumns sets the columns rule contexts.
	SetColumns(IIdentifier_listContext)

	// SetTablespace_name sets the tablespace_name rule contexts.
	SetTablespace_name(IIdentifierContext)

	// SetQuery sets the query rule contexts.
	SetQuery(ISelect_stmtContext)

	// IsCreate_materialized_view_stmtContext differentiates from other interfaces.
	IsCreate_materialized_view_stmtContext()
}

type Create_materialized_view_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	tableName       IIdentifierContext
	columns         IIdentifier_listContext
	tablespace_name IIdentifierContext
	query           ISelect_stmtContext
}

func NewEmptyCreate_materialized_view_stmtContext() *Create_materialized_view_stmtContext {
	var p = new(Create_materialized_view_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_materialized_view_stmt
	return p
}

func (*Create_materialized_view_stmtContext) IsCreate_materialized_view_stmtContext() {}

func NewCreate_materialized_view_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_materialized_view_stmtContext {
	var p = new(Create_materialized_view_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_materialized_view_stmt

	return p
}

func (s *Create_materialized_view_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_materialized_view_stmtContext) GetTableName() IIdentifierContext { return s.tableName }

func (s *Create_materialized_view_stmtContext) GetColumns() IIdentifier_listContext { return s.columns }

func (s *Create_materialized_view_stmtContext) GetTablespace_name() IIdentifierContext {
	return s.tablespace_name
}

func (s *Create_materialized_view_stmtContext) GetQuery() ISelect_stmtContext { return s.query }

func (s *Create_materialized_view_stmtContext) SetTableName(v IIdentifierContext) { s.tableName = v }

func (s *Create_materialized_view_stmtContext) SetColumns(v IIdentifier_listContext) { s.columns = v }

func (s *Create_materialized_view_stmtContext) SetTablespace_name(v IIdentifierContext) {
	s.tablespace_name = v
}

func (s *Create_materialized_view_stmtContext) SetQuery(v ISelect_stmtContext) { s.query = v }

func (s *Create_materialized_view_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_materialized_view_stmtContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMATERIALIZED, 0)
}

func (s *Create_materialized_view_stmtContext) VIEW() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVIEW, 0)
}

func (s *Create_materialized_view_stmtContext) AS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAS, 0)
}

func (s *Create_materialized_view_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Create_materialized_view_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_materialized_view_stmtContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_materialized_view_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Create_materialized_view_stmtContext) NOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOT, 0)
}

func (s *Create_materialized_view_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Create_materialized_view_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Create_materialized_view_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Create_materialized_view_stmtContext) AllWITH() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserWITH)
}

func (s *Create_materialized_view_stmtContext) WITH(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITH, i)
}

func (s *Create_materialized_view_stmtContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLESPACE, 0)
}

func (s *Create_materialized_view_stmtContext) DATA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDATA, 0)
}

func (s *Create_materialized_view_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Create_materialized_view_stmtContext) NO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNO, 0)
}

func (s *Create_materialized_view_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_materialized_view_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_materialized_view_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_materialized_view_stmt(s)
	}
}

func (s *Create_materialized_view_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_materialized_view_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_materialized_view_stmt() (localctx ICreate_materialized_view_stmtContext) {
	localctx = NewCreate_materialized_view_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, PostgreSQLParserRULE_create_materialized_view_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2624)
		p.Match(PostgreSQLParserCREATE)
	}
	{
		p.SetState(2625)
		p.Match(PostgreSQLParserMATERIALIZED)
	}
	{
		p.SetState(2626)
		p.Match(PostgreSQLParserVIEW)
	}
	p.SetState(2630)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(2627)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(2628)
			p.Match(PostgreSQLParserNOT)
		}
		{
			p.SetState(2629)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(2632)

		var _x = p.identifier(0)

		localctx.(*Create_materialized_view_stmtContext).tableName = _x
	}
	p.SetState(2637)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserOPEN_PAREN {
		{
			p.SetState(2633)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(2634)

			var _x = p.Identifier_list()

			localctx.(*Create_materialized_view_stmtContext).columns = _x
		}
		{
			p.SetState(2635)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}
	p.SetState(2640)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserWITH {
		{
			p.SetState(2639)
			p.Match(PostgreSQLParserWITH)
		}

	}
	p.SetState(2644)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserTABLESPACE {
		{
			p.SetState(2642)
			p.Match(PostgreSQLParserTABLESPACE)
		}
		{
			p.SetState(2643)

			var _x = p.identifier(0)

			localctx.(*Create_materialized_view_stmtContext).tablespace_name = _x
		}

	}
	{
		p.SetState(2646)
		p.Match(PostgreSQLParserAS)
	}
	{
		p.SetState(2647)

		var _x = p.Select_stmt()

		localctx.(*Create_materialized_view_stmtContext).query = _x
	}
	p.SetState(2653)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserWITH {
		{
			p.SetState(2648)
			p.Match(PostgreSQLParserWITH)
		}
		p.SetState(2650)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserNO {
			{
				p.SetState(2649)
				p.Match(PostgreSQLParserNO)
			}

		}
		{
			p.SetState(2652)
			p.Match(PostgreSQLParserDATA)
		}

	}

	return localctx
}

// ICreate_operator_stmtContext is an interface to support dynamic dispatch.
type ICreate_operator_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOpName returns the opName rule contexts.
	GetOpName() IIdentifierContext

	// GetFunction_name returns the function_name rule contexts.
	GetFunction_name() IIdentifierContext

	// GetLeft_type returns the left_type rule contexts.
	GetLeft_type() IName_Context

	// GetRight_type returns the right_type rule contexts.
	GetRight_type() IName_Context

	// GetCom_op returns the com_op rule contexts.
	GetCom_op() IName_Context

	// GetNeg_op returns the neg_op rule contexts.
	GetNeg_op() IName_Context

	// GetRes_proc returns the res_proc rule contexts.
	GetRes_proc() IName_Context

	// GetJoin_proc returns the join_proc rule contexts.
	GetJoin_proc() IName_Context

	// SetOpName sets the opName rule contexts.
	SetOpName(IIdentifierContext)

	// SetFunction_name sets the function_name rule contexts.
	SetFunction_name(IIdentifierContext)

	// SetLeft_type sets the left_type rule contexts.
	SetLeft_type(IName_Context)

	// SetRight_type sets the right_type rule contexts.
	SetRight_type(IName_Context)

	// SetCom_op sets the com_op rule contexts.
	SetCom_op(IName_Context)

	// SetNeg_op sets the neg_op rule contexts.
	SetNeg_op(IName_Context)

	// SetRes_proc sets the res_proc rule contexts.
	SetRes_proc(IName_Context)

	// SetJoin_proc sets the join_proc rule contexts.
	SetJoin_proc(IName_Context)

	// IsCreate_operator_stmtContext differentiates from other interfaces.
	IsCreate_operator_stmtContext()
}

type Create_operator_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	opName        IIdentifierContext
	function_name IIdentifierContext
	left_type     IName_Context
	right_type    IName_Context
	com_op        IName_Context
	neg_op        IName_Context
	res_proc      IName_Context
	join_proc     IName_Context
}

func NewEmptyCreate_operator_stmtContext() *Create_operator_stmtContext {
	var p = new(Create_operator_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_operator_stmt
	return p
}

func (*Create_operator_stmtContext) IsCreate_operator_stmtContext() {}

func NewCreate_operator_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_operator_stmtContext {
	var p = new(Create_operator_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_operator_stmt

	return p
}

func (s *Create_operator_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_operator_stmtContext) GetOpName() IIdentifierContext { return s.opName }

func (s *Create_operator_stmtContext) GetFunction_name() IIdentifierContext { return s.function_name }

func (s *Create_operator_stmtContext) GetLeft_type() IName_Context { return s.left_type }

func (s *Create_operator_stmtContext) GetRight_type() IName_Context { return s.right_type }

func (s *Create_operator_stmtContext) GetCom_op() IName_Context { return s.com_op }

func (s *Create_operator_stmtContext) GetNeg_op() IName_Context { return s.neg_op }

func (s *Create_operator_stmtContext) GetRes_proc() IName_Context { return s.res_proc }

func (s *Create_operator_stmtContext) GetJoin_proc() IName_Context { return s.join_proc }

func (s *Create_operator_stmtContext) SetOpName(v IIdentifierContext) { s.opName = v }

func (s *Create_operator_stmtContext) SetFunction_name(v IIdentifierContext) { s.function_name = v }

func (s *Create_operator_stmtContext) SetLeft_type(v IName_Context) { s.left_type = v }

func (s *Create_operator_stmtContext) SetRight_type(v IName_Context) { s.right_type = v }

func (s *Create_operator_stmtContext) SetCom_op(v IName_Context) { s.com_op = v }

func (s *Create_operator_stmtContext) SetNeg_op(v IName_Context) { s.neg_op = v }

func (s *Create_operator_stmtContext) SetRes_proc(v IName_Context) { s.res_proc = v }

func (s *Create_operator_stmtContext) SetJoin_proc(v IName_Context) { s.join_proc = v }

func (s *Create_operator_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_operator_stmtContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPERATOR, 0)
}

func (s *Create_operator_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Create_operator_stmtContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPROCEDURE, 0)
}

func (s *Create_operator_stmtContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserEQUAL)
}

func (s *Create_operator_stmtContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEQUAL, i)
}

func (s *Create_operator_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Create_operator_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Create_operator_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_operator_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Create_operator_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Create_operator_stmtContext) LEFTARG() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLEFTARG, 0)
}

func (s *Create_operator_stmtContext) RIGHTARG() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRIGHTARG, 0)
}

func (s *Create_operator_stmtContext) COMMUTATOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMUTATOR, 0)
}

func (s *Create_operator_stmtContext) NEGATOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNEGATOR, 0)
}

func (s *Create_operator_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Create_operator_stmtContext) JOIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserJOIN, 0)
}

func (s *Create_operator_stmtContext) HASHES() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHASHES, 0)
}

func (s *Create_operator_stmtContext) MERGES() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMERGES, 0)
}

func (s *Create_operator_stmtContext) AllName_() []IName_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IName_Context)(nil)).Elem())
	var tst = make([]IName_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IName_Context)
		}
	}

	return tst
}

func (s *Create_operator_stmtContext) Name_(i int) IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Create_operator_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_operator_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_operator_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_operator_stmt(s)
	}
}

func (s *Create_operator_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_operator_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_operator_stmt() (localctx ICreate_operator_stmtContext) {
	localctx = NewCreate_operator_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, PostgreSQLParserRULE_create_operator_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2655)
		p.Match(PostgreSQLParserCREATE)
	}
	{
		p.SetState(2656)
		p.Match(PostgreSQLParserOPERATOR)
	}
	{
		p.SetState(2657)

		var _x = p.identifier(0)

		localctx.(*Create_operator_stmtContext).opName = _x
	}
	{
		p.SetState(2658)
		p.Match(PostgreSQLParserOPEN_PAREN)
	}
	{
		p.SetState(2659)
		p.Match(PostgreSQLParserPROCEDURE)
	}
	{
		p.SetState(2660)
		p.Match(PostgreSQLParserEQUAL)
	}
	{
		p.SetState(2661)

		var _x = p.identifier(0)

		localctx.(*Create_operator_stmtContext).function_name = _x
	}
	p.SetState(2666)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 225, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2662)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(2663)
			p.Match(PostgreSQLParserLEFTARG)
		}
		{
			p.SetState(2664)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2665)

			var _x = p.Name_()

			localctx.(*Create_operator_stmtContext).left_type = _x
		}

	}
	p.SetState(2672)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 226, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2668)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(2669)
			p.Match(PostgreSQLParserRIGHTARG)
		}
		{
			p.SetState(2670)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2671)

			var _x = p.Name_()

			localctx.(*Create_operator_stmtContext).right_type = _x
		}

	}
	p.SetState(2678)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 227, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2674)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(2675)
			p.Match(PostgreSQLParserCOMMUTATOR)
		}
		{
			p.SetState(2676)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2677)

			var _x = p.Name_()

			localctx.(*Create_operator_stmtContext).com_op = _x
		}

	}
	p.SetState(2684)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 228, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2680)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(2681)
			p.Match(PostgreSQLParserNEGATOR)
		}
		{
			p.SetState(2682)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2683)

			var _x = p.Name_()

			localctx.(*Create_operator_stmtContext).neg_op = _x
		}

	}
	p.SetState(2690)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 229, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2686)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(2687)
			p.Match(PostgreSQLParserRESTRICT)
		}
		{
			p.SetState(2688)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2689)

			var _x = p.Name_()

			localctx.(*Create_operator_stmtContext).res_proc = _x
		}

	}
	p.SetState(2696)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2692)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(2693)
			p.Match(PostgreSQLParserJOIN)
		}
		{
			p.SetState(2694)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(2695)

			var _x = p.Name_()

			localctx.(*Create_operator_stmtContext).join_proc = _x
		}

	}
	p.SetState(2700)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 231, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2698)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(2699)
			p.Match(PostgreSQLParserHASHES)
		}

	}
	p.SetState(2704)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCOMMA {
		{
			p.SetState(2702)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(2703)
			p.Match(PostgreSQLParserMERGES)
		}

	}
	{
		p.SetState(2706)
		p.Match(PostgreSQLParserCLOSE_PAREN)
	}

	return localctx
}

// ICreate_operator_class_optContext is an interface to support dynamic dispatch.
type ICreate_operator_class_optContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetStrategy_number returns the strategy_number token.
	GetStrategy_number() antlr.Token

	// GetSupport_number returns the support_number token.
	GetSupport_number() antlr.Token

	// SetStrategy_number sets the strategy_number token.
	SetStrategy_number(antlr.Token)

	// SetSupport_number sets the support_number token.
	SetSupport_number(antlr.Token)

	// GetOpName returns the opName rule contexts.
	GetOpName() IIdentifierContext

	// GetFunc_name_ returns the func_name_ rule contexts.
	GetFunc_name_() IIdentifierContext

	// GetStorage_type returns the storage_type rule contexts.
	GetStorage_type() IIdentifierContext

	// SetOpName sets the opName rule contexts.
	SetOpName(IIdentifierContext)

	// SetFunc_name_ sets the func_name_ rule contexts.
	SetFunc_name_(IIdentifierContext)

	// SetStorage_type sets the storage_type rule contexts.
	SetStorage_type(IIdentifierContext)

	// IsCreate_operator_class_optContext differentiates from other interfaces.
	IsCreate_operator_class_optContext()
}

type Create_operator_class_optContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	strategy_number antlr.Token
	opName          IIdentifierContext
	support_number  antlr.Token
	func_name_      IIdentifierContext
	storage_type    IIdentifierContext
}

func NewEmptyCreate_operator_class_optContext() *Create_operator_class_optContext {
	var p = new(Create_operator_class_optContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_operator_class_opt
	return p
}

func (*Create_operator_class_optContext) IsCreate_operator_class_optContext() {}

func NewCreate_operator_class_optContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_operator_class_optContext {
	var p = new(Create_operator_class_optContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_operator_class_opt

	return p
}

func (s *Create_operator_class_optContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_operator_class_optContext) GetStrategy_number() antlr.Token { return s.strategy_number }

func (s *Create_operator_class_optContext) GetSupport_number() antlr.Token { return s.support_number }

func (s *Create_operator_class_optContext) SetStrategy_number(v antlr.Token) { s.strategy_number = v }

func (s *Create_operator_class_optContext) SetSupport_number(v antlr.Token) { s.support_number = v }

func (s *Create_operator_class_optContext) GetOpName() IIdentifierContext { return s.opName }

func (s *Create_operator_class_optContext) GetFunc_name_() IIdentifierContext { return s.func_name_ }

func (s *Create_operator_class_optContext) GetStorage_type() IIdentifierContext {
	return s.storage_type
}

func (s *Create_operator_class_optContext) SetOpName(v IIdentifierContext) { s.opName = v }

func (s *Create_operator_class_optContext) SetFunc_name_(v IIdentifierContext) { s.func_name_ = v }

func (s *Create_operator_class_optContext) SetStorage_type(v IIdentifierContext) { s.storage_type = v }

func (s *Create_operator_class_optContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPERATOR, 0)
}

func (s *Create_operator_class_optContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, 0)
}

func (s *Create_operator_class_optContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Create_operator_class_optContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_operator_class_optContext) AllOPEN_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPEN_PAREN)
}

func (s *Create_operator_class_optContext) OPEN_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, i)
}

func (s *Create_operator_class_optContext) COMMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, 0)
}

func (s *Create_operator_class_optContext) AllCLOSE_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCLOSE_PAREN)
}

func (s *Create_operator_class_optContext) CLOSE_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, i)
}

func (s *Create_operator_class_optContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFUNCTION, 0)
}

func (s *Create_operator_class_optContext) Data_type_list() IData_type_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_listContext)
}

func (s *Create_operator_class_optContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTORAGE, 0)
}

func (s *Create_operator_class_optContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_operator_class_optContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_operator_class_optContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_operator_class_opt(s)
	}
}

func (s *Create_operator_class_optContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_operator_class_opt(s)
	}
}

func (p *PostgreSQLParser) Create_operator_class_opt() (localctx ICreate_operator_class_optContext) {
	localctx = NewCreate_operator_class_optContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, PostgreSQLParserRULE_create_operator_class_opt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2738)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserOPERATOR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2708)
			p.Match(PostgreSQLParserOPERATOR)
		}
		{
			p.SetState(2709)

			var _m = p.Match(PostgreSQLParserINTEGER_LITERAL)

			localctx.(*Create_operator_class_optContext).strategy_number = _m
		}
		{
			p.SetState(2710)

			var _x = p.identifier(0)

			localctx.(*Create_operator_class_optContext).opName = _x
		}
		p.SetState(2717)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserOPEN_PAREN {
			{
				p.SetState(2711)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(2712)
				p.identifier(0)
			}
			{
				p.SetState(2713)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(2714)
				p.identifier(0)
			}
			{
				p.SetState(2715)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case PostgreSQLParserFUNCTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2719)
			p.Match(PostgreSQLParserFUNCTION)
		}
		{
			p.SetState(2720)

			var _m = p.Match(PostgreSQLParserINTEGER_LITERAL)

			localctx.(*Create_operator_class_optContext).support_number = _m
		}
		p.SetState(2729)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserOPEN_PAREN {
			{
				p.SetState(2721)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(2722)
				p.identifier(0)
			}
			p.SetState(2725)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PostgreSQLParserCOMMA {
				{
					p.SetState(2723)
					p.Match(PostgreSQLParserCOMMA)
				}
				{
					p.SetState(2724)
					p.identifier(0)
				}

			}
			{
				p.SetState(2727)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}
		{
			p.SetState(2731)

			var _x = p.identifier(0)

			localctx.(*Create_operator_class_optContext).func_name_ = _x
		}
		{
			p.SetState(2732)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(2733)
			p.Data_type_list()
		}
		{
			p.SetState(2734)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case PostgreSQLParserSTORAGE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2736)
			p.Match(PostgreSQLParserSTORAGE)
		}
		{
			p.SetState(2737)

			var _x = p.identifier(0)

			localctx.(*Create_operator_class_optContext).storage_type = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_operator_class_stmtContext is an interface to support dynamic dispatch.
type ICreate_operator_class_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetOp_type returns the op_type rule contexts.
	GetOp_type() IIdentifierContext

	// GetFamily_name returns the family_name rule contexts.
	GetFamily_name() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetOp_type sets the op_type rule contexts.
	SetOp_type(IIdentifierContext)

	// SetFamily_name sets the family_name rule contexts.
	SetFamily_name(IIdentifierContext)

	// IsCreate_operator_class_stmtContext differentiates from other interfaces.
	IsCreate_operator_class_stmtContext()
}

type Create_operator_class_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	name        IIdentifierContext
	op_type     IIdentifierContext
	family_name IIdentifierContext
}

func NewEmptyCreate_operator_class_stmtContext() *Create_operator_class_stmtContext {
	var p = new(Create_operator_class_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_operator_class_stmt
	return p
}

func (*Create_operator_class_stmtContext) IsCreate_operator_class_stmtContext() {}

func NewCreate_operator_class_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_operator_class_stmtContext {
	var p = new(Create_operator_class_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_operator_class_stmt

	return p
}

func (s *Create_operator_class_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_operator_class_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Create_operator_class_stmtContext) GetOp_type() IIdentifierContext { return s.op_type }

func (s *Create_operator_class_stmtContext) GetFamily_name() IIdentifierContext { return s.family_name }

func (s *Create_operator_class_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Create_operator_class_stmtContext) SetOp_type(v IIdentifierContext) { s.op_type = v }

func (s *Create_operator_class_stmtContext) SetFamily_name(v IIdentifierContext) { s.family_name = v }

func (s *Create_operator_class_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_operator_class_stmtContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPERATOR, 0)
}

func (s *Create_operator_class_stmtContext) CLASS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLASS, 0)
}

func (s *Create_operator_class_stmtContext) FOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOR, 0)
}

func (s *Create_operator_class_stmtContext) TYPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTYPE, 0)
}

func (s *Create_operator_class_stmtContext) USING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSING, 0)
}

func (s *Create_operator_class_stmtContext) Index_method() IIndex_methodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_methodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_methodContext)
}

func (s *Create_operator_class_stmtContext) AS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAS, 0)
}

func (s *Create_operator_class_stmtContext) AllCreate_operator_class_opt() []ICreate_operator_class_optContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreate_operator_class_optContext)(nil)).Elem())
	var tst = make([]ICreate_operator_class_optContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreate_operator_class_optContext)
		}
	}

	return tst
}

func (s *Create_operator_class_stmtContext) Create_operator_class_opt(i int) ICreate_operator_class_optContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_operator_class_optContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreate_operator_class_optContext)
}

func (s *Create_operator_class_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Create_operator_class_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_operator_class_stmtContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEFAULT, 0)
}

func (s *Create_operator_class_stmtContext) FAMILY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFAMILY, 0)
}

func (s *Create_operator_class_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Create_operator_class_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Create_operator_class_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_operator_class_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_operator_class_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_operator_class_stmt(s)
	}
}

func (s *Create_operator_class_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_operator_class_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_operator_class_stmt() (localctx ICreate_operator_class_stmtContext) {
	localctx = NewCreate_operator_class_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, PostgreSQLParserRULE_create_operator_class_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2740)
		p.Match(PostgreSQLParserCREATE)
	}
	{
		p.SetState(2741)
		p.Match(PostgreSQLParserOPERATOR)
	}
	{
		p.SetState(2742)
		p.Match(PostgreSQLParserCLASS)
	}
	{
		p.SetState(2743)

		var _x = p.identifier(0)

		localctx.(*Create_operator_class_stmtContext).name = _x
	}
	p.SetState(2745)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserDEFAULT {
		{
			p.SetState(2744)
			p.Match(PostgreSQLParserDEFAULT)
		}

	}
	{
		p.SetState(2747)
		p.Match(PostgreSQLParserFOR)
	}
	{
		p.SetState(2748)
		p.Match(PostgreSQLParserTYPE)
	}
	{
		p.SetState(2749)

		var _x = p.identifier(0)

		localctx.(*Create_operator_class_stmtContext).op_type = _x
	}
	{
		p.SetState(2750)
		p.Match(PostgreSQLParserUSING)
	}
	{
		p.SetState(2751)
		p.Index_method()
	}
	p.SetState(2754)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserFAMILY {
		{
			p.SetState(2752)
			p.Match(PostgreSQLParserFAMILY)
		}
		{
			p.SetState(2753)

			var _x = p.identifier(0)

			localctx.(*Create_operator_class_stmtContext).family_name = _x
		}

	}
	{
		p.SetState(2756)
		p.Match(PostgreSQLParserAS)
	}
	{
		p.SetState(2757)
		p.Create_operator_class_opt()
	}
	p.SetState(2762)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(2758)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(2759)
			p.Create_operator_class_opt()
		}

		p.SetState(2764)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICreate_operator_family_stmtContext is an interface to support dynamic dispatch.
type ICreate_operator_family_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsCreate_operator_family_stmtContext differentiates from other interfaces.
	IsCreate_operator_family_stmtContext()
}

type Create_operator_family_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyCreate_operator_family_stmtContext() *Create_operator_family_stmtContext {
	var p = new(Create_operator_family_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_operator_family_stmt
	return p
}

func (*Create_operator_family_stmtContext) IsCreate_operator_family_stmtContext() {}

func NewCreate_operator_family_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_operator_family_stmtContext {
	var p = new(Create_operator_family_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_operator_family_stmt

	return p
}

func (s *Create_operator_family_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_operator_family_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Create_operator_family_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Create_operator_family_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_operator_family_stmtContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPERATOR, 0)
}

func (s *Create_operator_family_stmtContext) FAMILY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFAMILY, 0)
}

func (s *Create_operator_family_stmtContext) USING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSING, 0)
}

func (s *Create_operator_family_stmtContext) Index_method() IIndex_methodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_methodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_methodContext)
}

func (s *Create_operator_family_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_operator_family_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_operator_family_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_operator_family_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_operator_family_stmt(s)
	}
}

func (s *Create_operator_family_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_operator_family_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_operator_family_stmt() (localctx ICreate_operator_family_stmtContext) {
	localctx = NewCreate_operator_family_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, PostgreSQLParserRULE_create_operator_family_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2765)
		p.Match(PostgreSQLParserCREATE)
	}
	{
		p.SetState(2766)
		p.Match(PostgreSQLParserOPERATOR)
	}
	{
		p.SetState(2767)
		p.Match(PostgreSQLParserFAMILY)
	}
	{
		p.SetState(2768)

		var _x = p.identifier(0)

		localctx.(*Create_operator_family_stmtContext).name = _x
	}
	{
		p.SetState(2769)
		p.Match(PostgreSQLParserUSING)
	}
	{
		p.SetState(2770)
		p.Index_method()
	}

	return localctx
}

// ICreate_policy_stmtContext is an interface to support dynamic dispatch.
type ICreate_policy_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetTableName returns the tableName rule contexts.
	GetTableName() IIdentifierContext

	// GetRole returns the role rule contexts.
	GetRole() IRole_nameContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetTableName sets the tableName rule contexts.
	SetTableName(IIdentifierContext)

	// SetRole sets the role rule contexts.
	SetRole(IRole_nameContext)

	// IsCreate_policy_stmtContext differentiates from other interfaces.
	IsCreate_policy_stmtContext()
}

type Create_policy_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	name      IIdentifierContext
	tableName IIdentifierContext
	role      IRole_nameContext
}

func NewEmptyCreate_policy_stmtContext() *Create_policy_stmtContext {
	var p = new(Create_policy_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_policy_stmt
	return p
}

func (*Create_policy_stmtContext) IsCreate_policy_stmtContext() {}

func NewCreate_policy_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_policy_stmtContext {
	var p = new(Create_policy_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_policy_stmt

	return p
}

func (s *Create_policy_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_policy_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Create_policy_stmtContext) GetTableName() IIdentifierContext { return s.tableName }

func (s *Create_policy_stmtContext) GetRole() IRole_nameContext { return s.role }

func (s *Create_policy_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Create_policy_stmtContext) SetTableName(v IIdentifierContext) { s.tableName = v }

func (s *Create_policy_stmtContext) SetRole(v IRole_nameContext) { s.role = v }

func (s *Create_policy_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_policy_stmtContext) POLICY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPOLICY, 0)
}

func (s *Create_policy_stmtContext) ON() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserON, 0)
}

func (s *Create_policy_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Create_policy_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_policy_stmtContext) FOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOR, 0)
}

func (s *Create_policy_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Create_policy_stmtContext) USING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSING, 0)
}

func (s *Create_policy_stmtContext) AllOPEN_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPEN_PAREN)
}

func (s *Create_policy_stmtContext) OPEN_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, i)
}

func (s *Create_policy_stmtContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *Create_policy_stmtContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *Create_policy_stmtContext) AllCLOSE_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCLOSE_PAREN)
}

func (s *Create_policy_stmtContext) CLOSE_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, i)
}

func (s *Create_policy_stmtContext) WITH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITH, 0)
}

func (s *Create_policy_stmtContext) CHECK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHECK, 0)
}

func (s *Create_policy_stmtContext) ALL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALL, 0)
}

func (s *Create_policy_stmtContext) SELECT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSELECT, 0)
}

func (s *Create_policy_stmtContext) INSERT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINSERT, 0)
}

func (s *Create_policy_stmtContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUPDATE, 0)
}

func (s *Create_policy_stmtContext) DELETE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDELETE, 0)
}

func (s *Create_policy_stmtContext) Role_name() IRole_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRole_nameContext)
}

func (s *Create_policy_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_policy_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_policy_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_policy_stmt(s)
	}
}

func (s *Create_policy_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_policy_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_policy_stmt() (localctx ICreate_policy_stmtContext) {
	localctx = NewCreate_policy_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, PostgreSQLParserRULE_create_policy_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2772)
		p.Match(PostgreSQLParserCREATE)
	}
	{
		p.SetState(2773)
		p.Match(PostgreSQLParserPOLICY)
	}
	{
		p.SetState(2774)

		var _x = p.identifier(0)

		localctx.(*Create_policy_stmtContext).name = _x
	}
	{
		p.SetState(2775)
		p.Match(PostgreSQLParserON)
	}
	{
		p.SetState(2776)

		var _x = p.identifier(0)

		localctx.(*Create_policy_stmtContext).tableName = _x
	}
	p.SetState(2779)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserFOR {
		{
			p.SetState(2777)
			p.Match(PostgreSQLParserFOR)
		}
		{
			p.SetState(2778)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserALL || _la == PostgreSQLParserDELETE || _la == PostgreSQLParserINSERT || _la == PostgreSQLParserSELECT || _la == PostgreSQLParserUPDATE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(2783)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserTO {
		{
			p.SetState(2781)
			p.Match(PostgreSQLParserTO)
		}
		{
			p.SetState(2782)

			var _x = p.Role_name()

			localctx.(*Create_policy_stmtContext).role = _x
		}

	}
	p.SetState(2790)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserUSING {
		{
			p.SetState(2785)
			p.Match(PostgreSQLParserUSING)
		}
		{
			p.SetState(2786)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(2787)
			p.predicate(0)
		}
		{
			p.SetState(2788)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}
	p.SetState(2798)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserWITH {
		{
			p.SetState(2792)
			p.Match(PostgreSQLParserWITH)
		}
		{
			p.SetState(2793)
			p.Match(PostgreSQLParserCHECK)
		}
		{
			p.SetState(2794)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(2795)
			p.predicate(0)
		}
		{
			p.SetState(2796)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}

	return localctx
}

// ICreate_role_stmtContext is an interface to support dynamic dispatch.
type ICreate_role_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRole returns the role rule contexts.
	GetRole() IRole_nameContext

	// SetRole sets the role rule contexts.
	SetRole(IRole_nameContext)

	// IsCreate_role_stmtContext differentiates from other interfaces.
	IsCreate_role_stmtContext()
}

type Create_role_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	role   IRole_nameContext
}

func NewEmptyCreate_role_stmtContext() *Create_role_stmtContext {
	var p = new(Create_role_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_role_stmt
	return p
}

func (*Create_role_stmtContext) IsCreate_role_stmtContext() {}

func NewCreate_role_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_role_stmtContext {
	var p = new(Create_role_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_role_stmt

	return p
}

func (s *Create_role_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_role_stmtContext) GetRole() IRole_nameContext { return s.role }

func (s *Create_role_stmtContext) SetRole(v IRole_nameContext) { s.role = v }

func (s *Create_role_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_role_stmtContext) AllROLE() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserROLE)
}

func (s *Create_role_stmtContext) ROLE(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROLE, i)
}

func (s *Create_role_stmtContext) Role_name() IRole_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRole_nameContext)
}

func (s *Create_role_stmtContext) WITH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITH, 0)
}

func (s *Create_role_stmtContext) AllSUPERUSER() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserSUPERUSER)
}

func (s *Create_role_stmtContext) SUPERUSER(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSUPERUSER, i)
}

func (s *Create_role_stmtContext) AllNOSUPERUSER() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNOSUPERUSER)
}

func (s *Create_role_stmtContext) NOSUPERUSER(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOSUPERUSER, i)
}

func (s *Create_role_stmtContext) AllCREATEDB() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCREATEDB)
}

func (s *Create_role_stmtContext) CREATEDB(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATEDB, i)
}

func (s *Create_role_stmtContext) AllNOCREATEDB() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNOCREATEDB)
}

func (s *Create_role_stmtContext) NOCREATEDB(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOCREATEDB, i)
}

func (s *Create_role_stmtContext) AllCREATEROLE() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCREATEROLE)
}

func (s *Create_role_stmtContext) CREATEROLE(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATEROLE, i)
}

func (s *Create_role_stmtContext) AllNOCREATEROLE() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNOCREATEROLE)
}

func (s *Create_role_stmtContext) NOCREATEROLE(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOCREATEROLE, i)
}

func (s *Create_role_stmtContext) AllINHERIT() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserINHERIT)
}

func (s *Create_role_stmtContext) INHERIT(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINHERIT, i)
}

func (s *Create_role_stmtContext) AllNOINHERIT() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNOINHERIT)
}

func (s *Create_role_stmtContext) NOINHERIT(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOINHERIT, i)
}

func (s *Create_role_stmtContext) AllLOGIN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserLOGIN)
}

func (s *Create_role_stmtContext) LOGIN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLOGIN, i)
}

func (s *Create_role_stmtContext) AllNOLOGIN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNOLOGIN)
}

func (s *Create_role_stmtContext) NOLOGIN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOLOGIN, i)
}

func (s *Create_role_stmtContext) AllREPLICATION() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserREPLICATION)
}

func (s *Create_role_stmtContext) REPLICATION(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREPLICATION, i)
}

func (s *Create_role_stmtContext) AllNOREPLICATION() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNOREPLICATION)
}

func (s *Create_role_stmtContext) NOREPLICATION(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOREPLICATION, i)
}

func (s *Create_role_stmtContext) AllBYPASSRLS() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserBYPASSRLS)
}

func (s *Create_role_stmtContext) BYPASSRLS(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBYPASSRLS, i)
}

func (s *Create_role_stmtContext) AllNOBYPASSRLS() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNOBYPASSRLS)
}

func (s *Create_role_stmtContext) NOBYPASSRLS(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOBYPASSRLS, i)
}

func (s *Create_role_stmtContext) AllCONNECTION() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCONNECTION)
}

func (s *Create_role_stmtContext) CONNECTION(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONNECTION, i)
}

func (s *Create_role_stmtContext) AllLIMIT() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserLIMIT)
}

func (s *Create_role_stmtContext) LIMIT(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLIMIT, i)
}

func (s *Create_role_stmtContext) AllINTEGER_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserINTEGER_LITERAL)
}

func (s *Create_role_stmtContext) INTEGER_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, i)
}

func (s *Create_role_stmtContext) AllPASSWORD() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserPASSWORD)
}

func (s *Create_role_stmtContext) PASSWORD(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPASSWORD, i)
}

func (s *Create_role_stmtContext) AllVALID() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserVALID)
}

func (s *Create_role_stmtContext) VALID(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVALID, i)
}

func (s *Create_role_stmtContext) AllUNTIL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserUNTIL)
}

func (s *Create_role_stmtContext) UNTIL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNTIL, i)
}

func (s *Create_role_stmtContext) AllSINGLEQ_STRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserSINGLEQ_STRING_LITERAL)
}

func (s *Create_role_stmtContext) SINGLEQ_STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSINGLEQ_STRING_LITERAL, i)
}

func (s *Create_role_stmtContext) AllIN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserIN)
}

func (s *Create_role_stmtContext) IN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIN, i)
}

func (s *Create_role_stmtContext) AllName_list() []IName_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IName_listContext)(nil)).Elem())
	var tst = make([]IName_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IName_listContext)
		}
	}

	return tst
}

func (s *Create_role_stmtContext) Name_list(i int) IName_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IName_listContext)
}

func (s *Create_role_stmtContext) AllGROUP() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserGROUP)
}

func (s *Create_role_stmtContext) GROUP(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGROUP, i)
}

func (s *Create_role_stmtContext) AllADMIN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserADMIN)
}

func (s *Create_role_stmtContext) ADMIN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserADMIN, i)
}

func (s *Create_role_stmtContext) AllUSER() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserUSER)
}

func (s *Create_role_stmtContext) USER(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSER, i)
}

func (s *Create_role_stmtContext) AllSYSID() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserSYSID)
}

func (s *Create_role_stmtContext) SYSID(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSYSID, i)
}

func (s *Create_role_stmtContext) AllNULL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNULL)
}

func (s *Create_role_stmtContext) NULL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNULL, i)
}

func (s *Create_role_stmtContext) AllENCRYPTED() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserENCRYPTED)
}

func (s *Create_role_stmtContext) ENCRYPTED(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserENCRYPTED, i)
}

func (s *Create_role_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_role_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_role_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_role_stmt(s)
	}
}

func (s *Create_role_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_role_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_role_stmt() (localctx ICreate_role_stmtContext) {
	localctx = NewCreate_role_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, PostgreSQLParserRULE_create_role_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2800)
		p.Match(PostgreSQLParserCREATE)
	}
	{
		p.SetState(2801)
		p.Match(PostgreSQLParserROLE)
	}
	{
		p.SetState(2802)

		var _x = p.Role_name()

		localctx.(*Create_role_stmtContext).role = _x
	}
	p.SetState(2849)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserADMIN || _la == PostgreSQLParserCONNECTION || _la == PostgreSQLParserCREATEDB || _la == PostgreSQLParserENCRYPTED || _la == PostgreSQLParserIN || _la == PostgreSQLParserNOCREATEDB || _la == PostgreSQLParserPASSWORD || _la == PostgreSQLParserROLE || _la == PostgreSQLParserSYSID || (((_la-621)&-(0x1f+1)) == 0 && ((1<<uint((_la-621)))&((1<<(PostgreSQLParserUSER-621))|(1<<(PostgreSQLParserVALID-621))|(1<<(PostgreSQLParserWITH-621)))) != 0) || (((_la-656)&-(0x1f+1)) == 0 && ((1<<uint((_la-656)))&((1<<(PostgreSQLParserSUPERUSER-656))|(1<<(PostgreSQLParserNOSUPERUSER-656))|(1<<(PostgreSQLParserCREATEROLE-656))|(1<<(PostgreSQLParserNOCREATEROLE-656))|(1<<(PostgreSQLParserINHERIT-656))|(1<<(PostgreSQLParserNOINHERIT-656))|(1<<(PostgreSQLParserLOGIN-656))|(1<<(PostgreSQLParserNOLOGIN-656))|(1<<(PostgreSQLParserREPLICATION-656))|(1<<(PostgreSQLParserNOREPLICATION-656))|(1<<(PostgreSQLParserBYPASSRLS-656))|(1<<(PostgreSQLParserNOBYPASSRLS-656)))) != 0) {
		p.SetState(2804)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserWITH {
			{
				p.SetState(2803)
				p.Match(PostgreSQLParserWITH)
			}

		}
		p.SetState(2845)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == PostgreSQLParserADMIN || _la == PostgreSQLParserCONNECTION || _la == PostgreSQLParserCREATEDB || _la == PostgreSQLParserENCRYPTED || _la == PostgreSQLParserIN || _la == PostgreSQLParserNOCREATEDB || _la == PostgreSQLParserPASSWORD || _la == PostgreSQLParserROLE || _la == PostgreSQLParserSYSID || _la == PostgreSQLParserUSER || _la == PostgreSQLParserVALID || (((_la-656)&-(0x1f+1)) == 0 && ((1<<uint((_la-656)))&((1<<(PostgreSQLParserSUPERUSER-656))|(1<<(PostgreSQLParserNOSUPERUSER-656))|(1<<(PostgreSQLParserCREATEROLE-656))|(1<<(PostgreSQLParserNOCREATEROLE-656))|(1<<(PostgreSQLParserINHERIT-656))|(1<<(PostgreSQLParserNOINHERIT-656))|(1<<(PostgreSQLParserLOGIN-656))|(1<<(PostgreSQLParserNOLOGIN-656))|(1<<(PostgreSQLParserREPLICATION-656))|(1<<(PostgreSQLParserNOREPLICATION-656))|(1<<(PostgreSQLParserBYPASSRLS-656))|(1<<(PostgreSQLParserNOBYPASSRLS-656)))) != 0) {
			p.SetState(2845)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 246, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(2806)
					p.Match(PostgreSQLParserSUPERUSER)
				}

			case 2:
				{
					p.SetState(2807)
					p.Match(PostgreSQLParserNOSUPERUSER)
				}

			case 3:
				{
					p.SetState(2808)
					p.Match(PostgreSQLParserCREATEDB)
				}

			case 4:
				{
					p.SetState(2809)
					p.Match(PostgreSQLParserNOCREATEDB)
				}

			case 5:
				{
					p.SetState(2810)
					p.Match(PostgreSQLParserCREATEROLE)
				}

			case 6:
				{
					p.SetState(2811)
					p.Match(PostgreSQLParserNOCREATEROLE)
				}

			case 7:
				{
					p.SetState(2812)
					p.Match(PostgreSQLParserINHERIT)
				}

			case 8:
				{
					p.SetState(2813)
					p.Match(PostgreSQLParserNOINHERIT)
				}

			case 9:
				{
					p.SetState(2814)
					p.Match(PostgreSQLParserLOGIN)
				}

			case 10:
				{
					p.SetState(2815)
					p.Match(PostgreSQLParserNOLOGIN)
				}

			case 11:
				{
					p.SetState(2816)
					p.Match(PostgreSQLParserREPLICATION)
				}

			case 12:
				{
					p.SetState(2817)
					p.Match(PostgreSQLParserNOREPLICATION)
				}

			case 13:
				{
					p.SetState(2818)
					p.Match(PostgreSQLParserBYPASSRLS)
				}

			case 14:
				{
					p.SetState(2819)
					p.Match(PostgreSQLParserNOBYPASSRLS)
				}

			case 15:
				{
					p.SetState(2820)
					p.Match(PostgreSQLParserCONNECTION)
				}
				{
					p.SetState(2821)
					p.Match(PostgreSQLParserLIMIT)
				}
				{
					p.SetState(2822)
					p.Match(PostgreSQLParserINTEGER_LITERAL)
				}

			case 16:
				p.SetState(2824)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == PostgreSQLParserENCRYPTED {
					{
						p.SetState(2823)
						p.Match(PostgreSQLParserENCRYPTED)
					}

				}
				{
					p.SetState(2826)
					p.Match(PostgreSQLParserPASSWORD)
				}
				{
					p.SetState(2827)
					_la = p.GetTokenStream().LA(1)

					if !(_la == PostgreSQLParserNULL || _la == PostgreSQLParserSINGLEQ_STRING_LITERAL) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			case 17:
				{
					p.SetState(2828)
					p.Match(PostgreSQLParserVALID)
				}
				{
					p.SetState(2829)
					p.Match(PostgreSQLParserUNTIL)
				}
				{
					p.SetState(2830)
					p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)
				}

			case 18:
				{
					p.SetState(2831)
					p.Match(PostgreSQLParserIN)
				}
				{
					p.SetState(2832)
					p.Match(PostgreSQLParserROLE)
				}
				{
					p.SetState(2833)
					p.Name_list()
				}

			case 19:
				{
					p.SetState(2834)
					p.Match(PostgreSQLParserIN)
				}
				{
					p.SetState(2835)
					p.Match(PostgreSQLParserGROUP)
				}
				{
					p.SetState(2836)
					p.Name_list()
				}

			case 20:
				{
					p.SetState(2837)
					p.Match(PostgreSQLParserROLE)
				}
				{
					p.SetState(2838)
					p.Name_list()
				}

			case 21:
				{
					p.SetState(2839)
					p.Match(PostgreSQLParserADMIN)
				}
				{
					p.SetState(2840)
					p.Name_list()
				}

			case 22:
				{
					p.SetState(2841)
					p.Match(PostgreSQLParserUSER)
				}
				{
					p.SetState(2842)
					p.Name_list()
				}

			case 23:
				{
					p.SetState(2843)
					p.Match(PostgreSQLParserSYSID)
				}
				{
					p.SetState(2844)
					p.Match(PostgreSQLParserINTEGER_LITERAL)
				}

			}

			p.SetState(2847)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ICreate_rule_eventContext is an interface to support dynamic dispatch.
type ICreate_rule_eventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_rule_eventContext differentiates from other interfaces.
	IsCreate_rule_eventContext()
}

type Create_rule_eventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_rule_eventContext() *Create_rule_eventContext {
	var p = new(Create_rule_eventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_rule_event
	return p
}

func (*Create_rule_eventContext) IsCreate_rule_eventContext() {}

func NewCreate_rule_eventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_rule_eventContext {
	var p = new(Create_rule_eventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_rule_event

	return p
}

func (s *Create_rule_eventContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_rule_eventContext) SELECT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSELECT, 0)
}

func (s *Create_rule_eventContext) INSERT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINSERT, 0)
}

func (s *Create_rule_eventContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUPDATE, 0)
}

func (s *Create_rule_eventContext) DELETE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDELETE, 0)
}

func (s *Create_rule_eventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_rule_eventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_rule_eventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_rule_event(s)
	}
}

func (s *Create_rule_eventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_rule_event(s)
	}
}

func (p *PostgreSQLParser) Create_rule_event() (localctx ICreate_rule_eventContext) {
	localctx = NewCreate_rule_eventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, PostgreSQLParserRULE_create_rule_event)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2851)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PostgreSQLParserDELETE || _la == PostgreSQLParserINSERT || _la == PostgreSQLParserSELECT || _la == PostgreSQLParserUPDATE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICreate_rule_stmtContext is an interface to support dynamic dispatch.
type ICreate_rule_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IName_Context

	// GetEvent returns the event rule contexts.
	GetEvent() ICreate_rule_eventContext

	// GetTableName returns the tableName rule contexts.
	GetTableName() IIdentifierContext

	// GetCommand returns the command rule contexts.
	GetCommand() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IName_Context)

	// SetEvent sets the event rule contexts.
	SetEvent(ICreate_rule_eventContext)

	// SetTableName sets the tableName rule contexts.
	SetTableName(IIdentifierContext)

	// SetCommand sets the command rule contexts.
	SetCommand(IIdentifierContext)

	// IsCreate_rule_stmtContext differentiates from other interfaces.
	IsCreate_rule_stmtContext()
}

type Create_rule_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	name      IName_Context
	event     ICreate_rule_eventContext
	tableName IIdentifierContext
	command   IIdentifierContext
}

func NewEmptyCreate_rule_stmtContext() *Create_rule_stmtContext {
	var p = new(Create_rule_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_rule_stmt
	return p
}

func (*Create_rule_stmtContext) IsCreate_rule_stmtContext() {}

func NewCreate_rule_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_rule_stmtContext {
	var p = new(Create_rule_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_rule_stmt

	return p
}

func (s *Create_rule_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_rule_stmtContext) GetName() IName_Context { return s.name }

func (s *Create_rule_stmtContext) GetEvent() ICreate_rule_eventContext { return s.event }

func (s *Create_rule_stmtContext) GetTableName() IIdentifierContext { return s.tableName }

func (s *Create_rule_stmtContext) GetCommand() IIdentifierContext { return s.command }

func (s *Create_rule_stmtContext) SetName(v IName_Context) { s.name = v }

func (s *Create_rule_stmtContext) SetEvent(v ICreate_rule_eventContext) { s.event = v }

func (s *Create_rule_stmtContext) SetTableName(v IIdentifierContext) { s.tableName = v }

func (s *Create_rule_stmtContext) SetCommand(v IIdentifierContext) { s.command = v }

func (s *Create_rule_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_rule_stmtContext) RULE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRULE, 0)
}

func (s *Create_rule_stmtContext) AS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAS, 0)
}

func (s *Create_rule_stmtContext) ON() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserON, 0)
}

func (s *Create_rule_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Create_rule_stmtContext) DO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDO, 0)
}

func (s *Create_rule_stmtContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Create_rule_stmtContext) Create_rule_event() ICreate_rule_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_rule_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_rule_eventContext)
}

func (s *Create_rule_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Create_rule_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_rule_stmtContext) NOTHING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOTHING, 0)
}

func (s *Create_rule_stmtContext) OR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOR, 0)
}

func (s *Create_rule_stmtContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREPLACE, 0)
}

func (s *Create_rule_stmtContext) WHERE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWHERE, 0)
}

func (s *Create_rule_stmtContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *Create_rule_stmtContext) ALSO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALSO, 0)
}

func (s *Create_rule_stmtContext) INSTEAD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINSTEAD, 0)
}

func (s *Create_rule_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_rule_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_rule_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_rule_stmt(s)
	}
}

func (s *Create_rule_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_rule_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_rule_stmt() (localctx ICreate_rule_stmtContext) {
	localctx = NewCreate_rule_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, PostgreSQLParserRULE_create_rule_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2853)
		p.Match(PostgreSQLParserCREATE)
	}
	p.SetState(2856)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserOR {
		{
			p.SetState(2854)
			p.Match(PostgreSQLParserOR)
		}
		{
			p.SetState(2855)
			p.Match(PostgreSQLParserREPLACE)
		}

	}
	{
		p.SetState(2858)
		p.Match(PostgreSQLParserRULE)
	}
	{
		p.SetState(2859)

		var _x = p.Name_()

		localctx.(*Create_rule_stmtContext).name = _x
	}
	{
		p.SetState(2860)
		p.Match(PostgreSQLParserAS)
	}
	{
		p.SetState(2861)
		p.Match(PostgreSQLParserON)
	}
	{
		p.SetState(2862)

		var _x = p.Create_rule_event()

		localctx.(*Create_rule_stmtContext).event = _x
	}
	{
		p.SetState(2863)
		p.Match(PostgreSQLParserTO)
	}
	{
		p.SetState(2864)

		var _x = p.identifier(0)

		localctx.(*Create_rule_stmtContext).tableName = _x
	}
	p.SetState(2867)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserWHERE {
		{
			p.SetState(2865)
			p.Match(PostgreSQLParserWHERE)
		}
		{
			p.SetState(2866)
			p.predicate(0)
		}

	}
	{
		p.SetState(2869)
		p.Match(PostgreSQLParserDO)
	}
	p.SetState(2871)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 251, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2870)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserALSO || _la == PostgreSQLParserINSTEAD) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(2875)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 252, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2873)
			p.Match(PostgreSQLParserNOTHING)
		}

	case 2:
		{
			p.SetState(2874)

			var _x = p.identifier(0)

			localctx.(*Create_rule_stmtContext).command = _x
		}

	}

	return localctx
}

// ICreate_schema_stmtContext is an interface to support dynamic dispatch.
type ICreate_schema_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdentifierContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdentifierContext)

	// IsCreate_schema_stmtContext differentiates from other interfaces.
	IsCreate_schema_stmtContext()
}

type Create_schema_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	schema_name IIdentifierContext
}

func NewEmptyCreate_schema_stmtContext() *Create_schema_stmtContext {
	var p = new(Create_schema_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_schema_stmt
	return p
}

func (*Create_schema_stmtContext) IsCreate_schema_stmtContext() {}

func NewCreate_schema_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_schema_stmtContext {
	var p = new(Create_schema_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_schema_stmt

	return p
}

func (s *Create_schema_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_schema_stmtContext) GetSchema_name() IIdentifierContext { return s.schema_name }

func (s *Create_schema_stmtContext) SetSchema_name(v IIdentifierContext) { s.schema_name = v }

func (s *Create_schema_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_schema_stmtContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCHEMA, 0)
}

func (s *Create_schema_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_schema_stmtContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAUTHORIZATION, 0)
}

func (s *Create_schema_stmtContext) Role_name() IRole_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRole_nameContext)
}

func (s *Create_schema_stmtContext) Todo_fill_in() ITodo_fill_inContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_fill_inContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_fill_inContext)
}

func (s *Create_schema_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Create_schema_stmtContext) NOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOT, 0)
}

func (s *Create_schema_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Create_schema_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_schema_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_schema_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_schema_stmt(s)
	}
}

func (s *Create_schema_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_schema_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_schema_stmt() (localctx ICreate_schema_stmtContext) {
	localctx = NewCreate_schema_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, PostgreSQLParserRULE_create_schema_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2911)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 257, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2877)
			p.Match(PostgreSQLParserCREATE)
		}
		{
			p.SetState(2878)
			p.Match(PostgreSQLParserSCHEMA)
		}
		{
			p.SetState(2879)

			var _x = p.identifier(0)

			localctx.(*Create_schema_stmtContext).schema_name = _x
		}
		p.SetState(2882)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 253, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2880)
				p.Match(PostgreSQLParserAUTHORIZATION)
			}
			{
				p.SetState(2881)
				p.Role_name()
			}

		}
		p.SetState(2885)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 254, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2884)
				p.Todo_fill_in()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2887)
			p.Match(PostgreSQLParserCREATE)
		}
		{
			p.SetState(2888)
			p.Match(PostgreSQLParserSCHEMA)
		}
		{
			p.SetState(2889)
			p.Match(PostgreSQLParserAUTHORIZATION)
		}
		{
			p.SetState(2890)
			p.Role_name()
		}
		p.SetState(2892)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 255, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2891)
				p.Todo_fill_in()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2894)
			p.Match(PostgreSQLParserCREATE)
		}
		{
			p.SetState(2895)
			p.Match(PostgreSQLParserSCHEMA)
		}
		{
			p.SetState(2896)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(2897)
			p.Match(PostgreSQLParserNOT)
		}
		{
			p.SetState(2898)
			p.Match(PostgreSQLParserEXISTS)
		}
		{
			p.SetState(2899)

			var _x = p.identifier(0)

			localctx.(*Create_schema_stmtContext).schema_name = _x
		}
		p.SetState(2902)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserAUTHORIZATION {
			{
				p.SetState(2900)
				p.Match(PostgreSQLParserAUTHORIZATION)
			}
			{
				p.SetState(2901)
				p.Role_name()
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2904)
			p.Match(PostgreSQLParserCREATE)
		}
		{
			p.SetState(2905)
			p.Match(PostgreSQLParserSCHEMA)
		}
		{
			p.SetState(2906)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(2907)
			p.Match(PostgreSQLParserNOT)
		}
		{
			p.SetState(2908)
			p.Match(PostgreSQLParserEXISTS)
		}
		{
			p.SetState(2909)
			p.Match(PostgreSQLParserAUTHORIZATION)
		}
		{
			p.SetState(2910)
			p.Role_name()
		}

	}

	return localctx
}

// ICreate_sequence_stmtContext is an interface to support dynamic dispatch.
type ICreate_sequence_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIncrement returns the increment token.
	GetIncrement() antlr.Token

	// GetMinvalue returns the minvalue token.
	GetMinvalue() antlr.Token

	// GetMaxvalue returns the maxvalue token.
	GetMaxvalue() antlr.Token

	// GetStart returns the start token.
	GetStart() antlr.Token

	// GetCache returns the cache token.
	GetCache() antlr.Token

	// SetIncrement sets the increment token.
	SetIncrement(antlr.Token)

	// SetMinvalue sets the minvalue token.
	SetMinvalue(antlr.Token)

	// SetMaxvalue sets the maxvalue token.
	SetMaxvalue(antlr.Token)

	// SetStart sets the start token.
	SetStart(antlr.Token)

	// SetCache sets the cache token.
	SetCache(antlr.Token)

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() IIdentifierContext

	// GetColumn_name_ returns the column_name_ rule contexts.
	GetColumn_name_() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(IIdentifierContext)

	// SetColumn_name_ sets the column_name_ rule contexts.
	SetColumn_name_(IIdentifierContext)

	// IsCreate_sequence_stmtContext differentiates from other interfaces.
	IsCreate_sequence_stmtContext()
}

type Create_sequence_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	name         IIdentifierContext
	increment    antlr.Token
	minvalue     antlr.Token
	maxvalue     antlr.Token
	start        antlr.Token
	cache        antlr.Token
	table_name   IIdentifierContext
	column_name_ IIdentifierContext
}

func NewEmptyCreate_sequence_stmtContext() *Create_sequence_stmtContext {
	var p = new(Create_sequence_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_sequence_stmt
	return p
}

func (*Create_sequence_stmtContext) IsCreate_sequence_stmtContext() {}

func NewCreate_sequence_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_sequence_stmtContext {
	var p = new(Create_sequence_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_sequence_stmt

	return p
}

func (s *Create_sequence_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_sequence_stmtContext) GetIncrement() antlr.Token { return s.increment }

func (s *Create_sequence_stmtContext) GetMinvalue() antlr.Token { return s.minvalue }

func (s *Create_sequence_stmtContext) GetMaxvalue() antlr.Token { return s.maxvalue }

func (s *Create_sequence_stmtContext) GetStart() antlr.Token { return s.start }

func (s *Create_sequence_stmtContext) GetCache() antlr.Token { return s.cache }

func (s *Create_sequence_stmtContext) SetIncrement(v antlr.Token) { s.increment = v }

func (s *Create_sequence_stmtContext) SetMinvalue(v antlr.Token) { s.minvalue = v }

func (s *Create_sequence_stmtContext) SetMaxvalue(v antlr.Token) { s.maxvalue = v }

func (s *Create_sequence_stmtContext) SetStart(v antlr.Token) { s.start = v }

func (s *Create_sequence_stmtContext) SetCache(v antlr.Token) { s.cache = v }

func (s *Create_sequence_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Create_sequence_stmtContext) GetTable_name() IIdentifierContext { return s.table_name }

func (s *Create_sequence_stmtContext) GetColumn_name_() IIdentifierContext { return s.column_name_ }

func (s *Create_sequence_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Create_sequence_stmtContext) SetTable_name(v IIdentifierContext) { s.table_name = v }

func (s *Create_sequence_stmtContext) SetColumn_name_(v IIdentifierContext) { s.column_name_ = v }

func (s *Create_sequence_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_sequence_stmtContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSEQUENCE, 0)
}

func (s *Create_sequence_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Create_sequence_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_sequence_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Create_sequence_stmtContext) NOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOT, 0)
}

func (s *Create_sequence_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Create_sequence_stmtContext) INCREMENT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINCREMENT, 0)
}

func (s *Create_sequence_stmtContext) MINVALUE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMINVALUE, 0)
}

func (s *Create_sequence_stmtContext) AllNO() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNO)
}

func (s *Create_sequence_stmtContext) NO(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNO, i)
}

func (s *Create_sequence_stmtContext) MAXVALUE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMAXVALUE, 0)
}

func (s *Create_sequence_stmtContext) START() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTART, 0)
}

func (s *Create_sequence_stmtContext) CACHE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCACHE, 0)
}

func (s *Create_sequence_stmtContext) CYCLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCYCLE, 0)
}

func (s *Create_sequence_stmtContext) OWNED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNED, 0)
}

func (s *Create_sequence_stmtContext) AllBY() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserBY)
}

func (s *Create_sequence_stmtContext) BY(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBY, i)
}

func (s *Create_sequence_stmtContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEMPORARY, 0)
}

func (s *Create_sequence_stmtContext) TEMP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEMP, 0)
}

func (s *Create_sequence_stmtContext) AllINTEGER_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserINTEGER_LITERAL)
}

func (s *Create_sequence_stmtContext) INTEGER_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, i)
}

func (s *Create_sequence_stmtContext) NONE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNONE, 0)
}

func (s *Create_sequence_stmtContext) WITH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITH, 0)
}

func (s *Create_sequence_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDOT, 0)
}

func (s *Create_sequence_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_sequence_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_sequence_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_sequence_stmt(s)
	}
}

func (s *Create_sequence_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_sequence_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_sequence_stmt() (localctx ICreate_sequence_stmtContext) {
	localctx = NewCreate_sequence_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, PostgreSQLParserRULE_create_sequence_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2913)
		p.Match(PostgreSQLParserCREATE)
	}
	p.SetState(2915)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserTEMP || _la == PostgreSQLParserTEMPORARY {
		{
			p.SetState(2914)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserTEMP || _la == PostgreSQLParserTEMPORARY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(2917)
		p.Match(PostgreSQLParserSEQUENCE)
	}
	p.SetState(2921)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(2918)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(2919)
			p.Match(PostgreSQLParserNOT)
		}
		{
			p.SetState(2920)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(2923)

		var _x = p.identifier(0)

		localctx.(*Create_sequence_stmtContext).name = _x
	}
	p.SetState(2929)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserINCREMENT {
		{
			p.SetState(2924)
			p.Match(PostgreSQLParserINCREMENT)
		}
		p.SetState(2926)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserBY {
			{
				p.SetState(2925)
				p.Match(PostgreSQLParserBY)
			}

		}
		{
			p.SetState(2928)

			var _m = p.Match(PostgreSQLParserINTEGER_LITERAL)

			localctx.(*Create_sequence_stmtContext).increment = _m
		}

	}
	p.SetState(2935)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 262, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2931)
			p.Match(PostgreSQLParserMINVALUE)
		}
		{
			p.SetState(2932)

			var _m = p.Match(PostgreSQLParserINTEGER_LITERAL)

			localctx.(*Create_sequence_stmtContext).minvalue = _m
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 262, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(2933)
			p.Match(PostgreSQLParserNO)
		}
		{
			p.SetState(2934)
			p.Match(PostgreSQLParserMINVALUE)
		}

	}
	p.SetState(2941)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 263, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2937)
			p.Match(PostgreSQLParserMAXVALUE)
		}
		{
			p.SetState(2938)

			var _m = p.Match(PostgreSQLParserINTEGER_LITERAL)

			localctx.(*Create_sequence_stmtContext).maxvalue = _m
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 263, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(2939)
			p.Match(PostgreSQLParserNO)
		}
		{
			p.SetState(2940)
			p.Match(PostgreSQLParserMAXVALUE)
		}

	}
	p.SetState(2948)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserSTART {
		{
			p.SetState(2943)
			p.Match(PostgreSQLParserSTART)
		}
		p.SetState(2945)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserWITH {
			{
				p.SetState(2944)
				p.Match(PostgreSQLParserWITH)
			}

		}
		{
			p.SetState(2947)

			var _m = p.Match(PostgreSQLParserINTEGER_LITERAL)

			localctx.(*Create_sequence_stmtContext).start = _m
		}

	}
	p.SetState(2952)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCACHE {
		{
			p.SetState(2950)
			p.Match(PostgreSQLParserCACHE)
		}
		{
			p.SetState(2951)

			var _m = p.Match(PostgreSQLParserINTEGER_LITERAL)

			localctx.(*Create_sequence_stmtContext).cache = _m
		}

	}
	p.SetState(2958)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCYCLE || _la == PostgreSQLParserNO {
		p.SetState(2955)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserNO {
			{
				p.SetState(2954)
				p.Match(PostgreSQLParserNO)
			}

		}
		{
			p.SetState(2957)
			p.Match(PostgreSQLParserCYCLE)
		}

	}
	p.SetState(2969)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserOWNED {
		{
			p.SetState(2960)
			p.Match(PostgreSQLParserOWNED)
		}
		{
			p.SetState(2961)
			p.Match(PostgreSQLParserBY)
		}
		p.SetState(2967)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 269, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(2962)

				var _x = p.identifier(0)

				localctx.(*Create_sequence_stmtContext).table_name = _x
			}
			{
				p.SetState(2963)
				p.Match(PostgreSQLParserDOT)
			}
			{
				p.SetState(2964)

				var _x = p.identifier(0)

				localctx.(*Create_sequence_stmtContext).column_name_ = _x
			}

		case 2:
			{
				p.SetState(2966)
				p.Match(PostgreSQLParserNONE)
			}

		}

	}

	return localctx
}

// ICreate_server_stmtContext is an interface to support dynamic dispatch.
type ICreate_server_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_server_stmtContext differentiates from other interfaces.
	IsCreate_server_stmtContext()
}

type Create_server_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_server_stmtContext() *Create_server_stmtContext {
	var p = new(Create_server_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_server_stmt
	return p
}

func (*Create_server_stmtContext) IsCreate_server_stmtContext() {}

func NewCreate_server_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_server_stmtContext {
	var p = new(Create_server_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_server_stmt

	return p
}

func (s *Create_server_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_server_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Create_server_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_server_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_server_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_server_stmt(s)
	}
}

func (s *Create_server_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_server_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_server_stmt() (localctx ICreate_server_stmtContext) {
	localctx = NewCreate_server_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, PostgreSQLParserRULE_create_server_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2971)
		p.Todo_implement()
	}

	return localctx
}

// ICreate_statistics_stmtContext is an interface to support dynamic dispatch.
type ICreate_statistics_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_statistics_stmtContext differentiates from other interfaces.
	IsCreate_statistics_stmtContext()
}

type Create_statistics_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_statistics_stmtContext() *Create_statistics_stmtContext {
	var p = new(Create_statistics_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_statistics_stmt
	return p
}

func (*Create_statistics_stmtContext) IsCreate_statistics_stmtContext() {}

func NewCreate_statistics_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_statistics_stmtContext {
	var p = new(Create_statistics_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_statistics_stmt

	return p
}

func (s *Create_statistics_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_statistics_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Create_statistics_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_statistics_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_statistics_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_statistics_stmt(s)
	}
}

func (s *Create_statistics_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_statistics_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_statistics_stmt() (localctx ICreate_statistics_stmtContext) {
	localctx = NewCreate_statistics_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, PostgreSQLParserRULE_create_statistics_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2973)
		p.Todo_implement()
	}

	return localctx
}

// ICreate_subscription_stmtContext is an interface to support dynamic dispatch.
type ICreate_subscription_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_subscription_stmtContext differentiates from other interfaces.
	IsCreate_subscription_stmtContext()
}

type Create_subscription_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_subscription_stmtContext() *Create_subscription_stmtContext {
	var p = new(Create_subscription_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_subscription_stmt
	return p
}

func (*Create_subscription_stmtContext) IsCreate_subscription_stmtContext() {}

func NewCreate_subscription_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_subscription_stmtContext {
	var p = new(Create_subscription_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_subscription_stmt

	return p
}

func (s *Create_subscription_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_subscription_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Create_subscription_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_subscription_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_subscription_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_subscription_stmt(s)
	}
}

func (s *Create_subscription_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_subscription_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_subscription_stmt() (localctx ICreate_subscription_stmtContext) {
	localctx = NewCreate_subscription_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, PostgreSQLParserRULE_create_subscription_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2975)
		p.Todo_implement()
	}

	return localctx
}

// ICreate_table_stmtContext is an interface to support dynamic dispatch.
type ICreate_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_table_stmtContext differentiates from other interfaces.
	IsCreate_table_stmtContext()
}

type Create_table_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_table_stmtContext() *Create_table_stmtContext {
	var p = new(Create_table_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_table_stmt
	return p
}

func (*Create_table_stmtContext) IsCreate_table_stmtContext() {}

func NewCreate_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_table_stmtContext {
	var p = new(Create_table_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_table_stmt

	return p
}

func (s *Create_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_table_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_table_stmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLE, 0)
}

func (s *Create_table_stmtContext) Table_name_() ITable_name_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_Context)
}

func (s *Create_table_stmtContext) Create_definitions() ICreate_definitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_definitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_definitionsContext)
}

func (s *Create_table_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Create_table_stmtContext) NOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOT, 0)
}

func (s *Create_table_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Create_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_table_stmt(s)
	}
}

func (s *Create_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_table_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_table_stmt() (localctx ICreate_table_stmtContext) {
	localctx = NewCreate_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, PostgreSQLParserRULE_create_table_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2977)
		p.Match(PostgreSQLParserCREATE)
	}
	{
		p.SetState(2978)
		p.Match(PostgreSQLParserTABLE)
	}
	p.SetState(2982)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(2979)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(2980)
			p.Match(PostgreSQLParserNOT)
		}
		{
			p.SetState(2981)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(2984)
		p.Table_name_()
	}
	{
		p.SetState(2985)
		p.Create_definitions()
	}

	return localctx
}

// ICreate_definitionsContext is an interface to support dynamic dispatch.
type ICreate_definitionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_definitionsContext differentiates from other interfaces.
	IsCreate_definitionsContext()
}

type Create_definitionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_definitionsContext() *Create_definitionsContext {
	var p = new(Create_definitionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_definitions
	return p
}

func (*Create_definitionsContext) IsCreate_definitionsContext() {}

func NewCreate_definitionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_definitionsContext {
	var p = new(Create_definitionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_definitions

	return p
}

func (s *Create_definitionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_definitionsContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Create_definitionsContext) AllCreate_definition() []ICreate_definitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreate_definitionContext)(nil)).Elem())
	var tst = make([]ICreate_definitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreate_definitionContext)
		}
	}

	return tst
}

func (s *Create_definitionsContext) Create_definition(i int) ICreate_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_definitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreate_definitionContext)
}

func (s *Create_definitionsContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Create_definitionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Create_definitionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Create_definitionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_definitionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_definitionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_definitions(s)
	}
}

func (s *Create_definitionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_definitions(s)
	}
}

func (p *PostgreSQLParser) Create_definitions() (localctx ICreate_definitionsContext) {
	localctx = NewCreate_definitionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, PostgreSQLParserRULE_create_definitions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2987)
		p.Match(PostgreSQLParserOPEN_PAREN)
	}
	{
		p.SetState(2988)
		p.Create_definition()
	}
	p.SetState(2993)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(2989)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(2990)
			p.Create_definition()
		}

		p.SetState(2995)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2996)
		p.Match(PostgreSQLParserCLOSE_PAREN)
	}

	return localctx
}

// ICreate_definitionContext is an interface to support dynamic dispatch.
type ICreate_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_definitionContext differentiates from other interfaces.
	IsCreate_definitionContext()
}

type Create_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_definitionContext() *Create_definitionContext {
	var p = new(Create_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_definition
	return p
}

func (*Create_definitionContext) IsCreate_definitionContext() {}

func NewCreate_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_definitionContext {
	var p = new(Create_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_definition

	return p
}

func (s *Create_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_definitionContext) Column_definition() IColumn_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_definitionContext)
}

func (s *Create_definitionContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_definitionContext) Table_constraint() ITable_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_constraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_constraintContext)
}

func (s *Create_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_definition(s)
	}
}

func (s *Create_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_definition(s)
	}
}

func (p *PostgreSQLParser) Create_definition() (localctx ICreate_definitionContext) {
	localctx = NewCreate_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, PostgreSQLParserRULE_create_definition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3002)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 273, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2998)
			p.Column_definition()
		}
		{
			p.SetState(2999)
			p.Data_type()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3001)
			p.Table_constraint()
		}

	}

	return localctx
}

// ICreate_table_as_stmtContext is an interface to support dynamic dispatch.
type ICreate_table_as_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_table_as_stmtContext differentiates from other interfaces.
	IsCreate_table_as_stmtContext()
}

type Create_table_as_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_table_as_stmtContext() *Create_table_as_stmtContext {
	var p = new(Create_table_as_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_table_as_stmt
	return p
}

func (*Create_table_as_stmtContext) IsCreate_table_as_stmtContext() {}

func NewCreate_table_as_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_table_as_stmtContext {
	var p = new(Create_table_as_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_table_as_stmt

	return p
}

func (s *Create_table_as_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_table_as_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Create_table_as_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_table_as_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_table_as_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_table_as_stmt(s)
	}
}

func (s *Create_table_as_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_table_as_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_table_as_stmt() (localctx ICreate_table_as_stmtContext) {
	localctx = NewCreate_table_as_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, PostgreSQLParserRULE_create_table_as_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3004)
		p.Todo_implement()
	}

	return localctx
}

// ICreate_tablespace_stmtContext is an interface to support dynamic dispatch.
type ICreate_tablespace_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_tablespace_stmtContext differentiates from other interfaces.
	IsCreate_tablespace_stmtContext()
}

type Create_tablespace_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_tablespace_stmtContext() *Create_tablespace_stmtContext {
	var p = new(Create_tablespace_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_tablespace_stmt
	return p
}

func (*Create_tablespace_stmtContext) IsCreate_tablespace_stmtContext() {}

func NewCreate_tablespace_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_tablespace_stmtContext {
	var p = new(Create_tablespace_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_tablespace_stmt

	return p
}

func (s *Create_tablespace_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_tablespace_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Create_tablespace_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_tablespace_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_tablespace_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_tablespace_stmt(s)
	}
}

func (s *Create_tablespace_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_tablespace_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_tablespace_stmt() (localctx ICreate_tablespace_stmtContext) {
	localctx = NewCreate_tablespace_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, PostgreSQLParserRULE_create_tablespace_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3006)
		p.Todo_implement()
	}

	return localctx
}

// ICreate_text_search_config_stmtContext is an interface to support dynamic dispatch.
type ICreate_text_search_config_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_text_search_config_stmtContext differentiates from other interfaces.
	IsCreate_text_search_config_stmtContext()
}

type Create_text_search_config_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_text_search_config_stmtContext() *Create_text_search_config_stmtContext {
	var p = new(Create_text_search_config_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_text_search_config_stmt
	return p
}

func (*Create_text_search_config_stmtContext) IsCreate_text_search_config_stmtContext() {}

func NewCreate_text_search_config_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_text_search_config_stmtContext {
	var p = new(Create_text_search_config_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_text_search_config_stmt

	return p
}

func (s *Create_text_search_config_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_text_search_config_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Create_text_search_config_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_text_search_config_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_text_search_config_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_text_search_config_stmt(s)
	}
}

func (s *Create_text_search_config_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_text_search_config_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_text_search_config_stmt() (localctx ICreate_text_search_config_stmtContext) {
	localctx = NewCreate_text_search_config_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, PostgreSQLParserRULE_create_text_search_config_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3008)
		p.Todo_implement()
	}

	return localctx
}

// ICreate_text_search_dict_stmtContext is an interface to support dynamic dispatch.
type ICreate_text_search_dict_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_text_search_dict_stmtContext differentiates from other interfaces.
	IsCreate_text_search_dict_stmtContext()
}

type Create_text_search_dict_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_text_search_dict_stmtContext() *Create_text_search_dict_stmtContext {
	var p = new(Create_text_search_dict_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_text_search_dict_stmt
	return p
}

func (*Create_text_search_dict_stmtContext) IsCreate_text_search_dict_stmtContext() {}

func NewCreate_text_search_dict_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_text_search_dict_stmtContext {
	var p = new(Create_text_search_dict_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_text_search_dict_stmt

	return p
}

func (s *Create_text_search_dict_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_text_search_dict_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Create_text_search_dict_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_text_search_dict_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_text_search_dict_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_text_search_dict_stmt(s)
	}
}

func (s *Create_text_search_dict_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_text_search_dict_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_text_search_dict_stmt() (localctx ICreate_text_search_dict_stmtContext) {
	localctx = NewCreate_text_search_dict_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, PostgreSQLParserRULE_create_text_search_dict_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3010)
		p.Todo_implement()
	}

	return localctx
}

// ICreate_text_search_parser_stmtContext is an interface to support dynamic dispatch.
type ICreate_text_search_parser_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_text_search_parser_stmtContext differentiates from other interfaces.
	IsCreate_text_search_parser_stmtContext()
}

type Create_text_search_parser_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_text_search_parser_stmtContext() *Create_text_search_parser_stmtContext {
	var p = new(Create_text_search_parser_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_text_search_parser_stmt
	return p
}

func (*Create_text_search_parser_stmtContext) IsCreate_text_search_parser_stmtContext() {}

func NewCreate_text_search_parser_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_text_search_parser_stmtContext {
	var p = new(Create_text_search_parser_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_text_search_parser_stmt

	return p
}

func (s *Create_text_search_parser_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_text_search_parser_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Create_text_search_parser_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_text_search_parser_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_text_search_parser_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_text_search_parser_stmt(s)
	}
}

func (s *Create_text_search_parser_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_text_search_parser_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_text_search_parser_stmt() (localctx ICreate_text_search_parser_stmtContext) {
	localctx = NewCreate_text_search_parser_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, PostgreSQLParserRULE_create_text_search_parser_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3012)
		p.Todo_implement()
	}

	return localctx
}

// ICreate_text_search_template_stmtContext is an interface to support dynamic dispatch.
type ICreate_text_search_template_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_text_search_template_stmtContext differentiates from other interfaces.
	IsCreate_text_search_template_stmtContext()
}

type Create_text_search_template_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_text_search_template_stmtContext() *Create_text_search_template_stmtContext {
	var p = new(Create_text_search_template_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_text_search_template_stmt
	return p
}

func (*Create_text_search_template_stmtContext) IsCreate_text_search_template_stmtContext() {}

func NewCreate_text_search_template_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_text_search_template_stmtContext {
	var p = new(Create_text_search_template_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_text_search_template_stmt

	return p
}

func (s *Create_text_search_template_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_text_search_template_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Create_text_search_template_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_text_search_template_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_text_search_template_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_text_search_template_stmt(s)
	}
}

func (s *Create_text_search_template_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_text_search_template_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_text_search_template_stmt() (localctx ICreate_text_search_template_stmtContext) {
	localctx = NewCreate_text_search_template_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, PostgreSQLParserRULE_create_text_search_template_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3014)
		p.Todo_implement()
	}

	return localctx
}

// ICreate_transform_stmtContext is an interface to support dynamic dispatch.
type ICreate_transform_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_transform_stmtContext differentiates from other interfaces.
	IsCreate_transform_stmtContext()
}

type Create_transform_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_transform_stmtContext() *Create_transform_stmtContext {
	var p = new(Create_transform_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_transform_stmt
	return p
}

func (*Create_transform_stmtContext) IsCreate_transform_stmtContext() {}

func NewCreate_transform_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_transform_stmtContext {
	var p = new(Create_transform_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_transform_stmt

	return p
}

func (s *Create_transform_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_transform_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Create_transform_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_transform_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_transform_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_transform_stmt(s)
	}
}

func (s *Create_transform_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_transform_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_transform_stmt() (localctx ICreate_transform_stmtContext) {
	localctx = NewCreate_transform_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, PostgreSQLParserRULE_create_transform_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3016)
		p.Todo_implement()
	}

	return localctx
}

// ICreate_trigger_stmtContext is an interface to support dynamic dispatch.
type ICreate_trigger_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_trigger_stmtContext differentiates from other interfaces.
	IsCreate_trigger_stmtContext()
}

type Create_trigger_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_trigger_stmtContext() *Create_trigger_stmtContext {
	var p = new(Create_trigger_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_trigger_stmt
	return p
}

func (*Create_trigger_stmtContext) IsCreate_trigger_stmtContext() {}

func NewCreate_trigger_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_trigger_stmtContext {
	var p = new(Create_trigger_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_trigger_stmt

	return p
}

func (s *Create_trigger_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_trigger_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Create_trigger_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_trigger_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_trigger_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_trigger_stmt(s)
	}
}

func (s *Create_trigger_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_trigger_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_trigger_stmt() (localctx ICreate_trigger_stmtContext) {
	localctx = NewCreate_trigger_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, PostgreSQLParserRULE_create_trigger_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3018)
		p.Todo_implement()
	}

	return localctx
}

// ICreate_type_stmtContext is an interface to support dynamic dispatch.
type ICreate_type_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_type_stmtContext differentiates from other interfaces.
	IsCreate_type_stmtContext()
}

type Create_type_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_type_stmtContext() *Create_type_stmtContext {
	var p = new(Create_type_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_type_stmt
	return p
}

func (*Create_type_stmtContext) IsCreate_type_stmtContext() {}

func NewCreate_type_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_type_stmtContext {
	var p = new(Create_type_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_type_stmt

	return p
}

func (s *Create_type_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_type_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Create_type_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_type_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_type_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_type_stmt(s)
	}
}

func (s *Create_type_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_type_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_type_stmt() (localctx ICreate_type_stmtContext) {
	localctx = NewCreate_type_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, PostgreSQLParserRULE_create_type_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3020)
		p.Todo_implement()
	}

	return localctx
}

// ICreate_user_stmtContext is an interface to support dynamic dispatch.
type ICreate_user_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_user_stmtContext differentiates from other interfaces.
	IsCreate_user_stmtContext()
}

type Create_user_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_user_stmtContext() *Create_user_stmtContext {
	var p = new(Create_user_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_user_stmt
	return p
}

func (*Create_user_stmtContext) IsCreate_user_stmtContext() {}

func NewCreate_user_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_user_stmtContext {
	var p = new(Create_user_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_user_stmt

	return p
}

func (s *Create_user_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_user_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Create_user_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_user_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_user_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_user_stmt(s)
	}
}

func (s *Create_user_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_user_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_user_stmt() (localctx ICreate_user_stmtContext) {
	localctx = NewCreate_user_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, PostgreSQLParserRULE_create_user_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3022)
		p.Todo_implement()
	}

	return localctx
}

// ICreate_user_mapping_stmtContext is an interface to support dynamic dispatch.
type ICreate_user_mapping_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_user_mapping_stmtContext differentiates from other interfaces.
	IsCreate_user_mapping_stmtContext()
}

type Create_user_mapping_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_user_mapping_stmtContext() *Create_user_mapping_stmtContext {
	var p = new(Create_user_mapping_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_user_mapping_stmt
	return p
}

func (*Create_user_mapping_stmtContext) IsCreate_user_mapping_stmtContext() {}

func NewCreate_user_mapping_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_user_mapping_stmtContext {
	var p = new(Create_user_mapping_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_user_mapping_stmt

	return p
}

func (s *Create_user_mapping_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_user_mapping_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Create_user_mapping_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_user_mapping_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_user_mapping_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_user_mapping_stmt(s)
	}
}

func (s *Create_user_mapping_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_user_mapping_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_user_mapping_stmt() (localctx ICreate_user_mapping_stmtContext) {
	localctx = NewCreate_user_mapping_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, PostgreSQLParserRULE_create_user_mapping_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3024)
		p.Todo_implement()
	}

	return localctx
}

// ICreate_view_stmtContext is an interface to support dynamic dispatch.
type ICreate_view_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IName_Context

	// SetName sets the name rule contexts.
	SetName(IName_Context)

	// IsCreate_view_stmtContext differentiates from other interfaces.
	IsCreate_view_stmtContext()
}

type Create_view_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IName_Context
}

func NewEmptyCreate_view_stmtContext() *Create_view_stmtContext {
	var p = new(Create_view_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_create_view_stmt
	return p
}

func (*Create_view_stmtContext) IsCreate_view_stmtContext() {}

func NewCreate_view_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_view_stmtContext {
	var p = new(Create_view_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_create_view_stmt

	return p
}

func (s *Create_view_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_view_stmtContext) GetName() IName_Context { return s.name }

func (s *Create_view_stmtContext) SetName(v IName_Context) { s.name = v }

func (s *Create_view_stmtContext) CREATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCREATE, 0)
}

func (s *Create_view_stmtContext) VIEW() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVIEW, 0)
}

func (s *Create_view_stmtContext) AS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAS, 0)
}

func (s *Create_view_stmtContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Create_view_stmtContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_view_stmtContext) Values_stmt() IValues_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValues_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValues_stmtContext)
}

func (s *Create_view_stmtContext) OR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOR, 0)
}

func (s *Create_view_stmtContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREPLACE, 0)
}

func (s *Create_view_stmtContext) RECURSIVE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRECURSIVE, 0)
}

func (s *Create_view_stmtContext) AllOPEN_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPEN_PAREN)
}

func (s *Create_view_stmtContext) OPEN_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, i)
}

func (s *Create_view_stmtContext) Name_list() IName_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_listContext)
}

func (s *Create_view_stmtContext) AllCLOSE_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCLOSE_PAREN)
}

func (s *Create_view_stmtContext) CLOSE_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, i)
}

func (s *Create_view_stmtContext) AllWITH() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserWITH)
}

func (s *Create_view_stmtContext) WITH(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITH, i)
}

func (s *Create_view_stmtContext) Option_list() IOption_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_listContext)
}

func (s *Create_view_stmtContext) CHECK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHECK, 0)
}

func (s *Create_view_stmtContext) OPTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPTION, 0)
}

func (s *Create_view_stmtContext) TEMP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEMP, 0)
}

func (s *Create_view_stmtContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEMPORARY, 0)
}

func (s *Create_view_stmtContext) CASCADED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADED, 0)
}

func (s *Create_view_stmtContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLOCAL, 0)
}

func (s *Create_view_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_view_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_view_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCreate_view_stmt(s)
	}
}

func (s *Create_view_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCreate_view_stmt(s)
	}
}

func (p *PostgreSQLParser) Create_view_stmt() (localctx ICreate_view_stmtContext) {
	localctx = NewCreate_view_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, PostgreSQLParserRULE_create_view_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3026)
		p.Match(PostgreSQLParserCREATE)
	}
	p.SetState(3029)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserOR {
		{
			p.SetState(3027)
			p.Match(PostgreSQLParserOR)
		}
		{
			p.SetState(3028)
			p.Match(PostgreSQLParserREPLACE)
		}

	}
	p.SetState(3032)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserTEMP || _la == PostgreSQLParserTEMPORARY {
		{
			p.SetState(3031)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserTEMP || _la == PostgreSQLParserTEMPORARY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(3035)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserRECURSIVE {
		{
			p.SetState(3034)
			p.Match(PostgreSQLParserRECURSIVE)
		}

	}
	{
		p.SetState(3037)
		p.Match(PostgreSQLParserVIEW)
	}
	{
		p.SetState(3038)

		var _x = p.Name_()

		localctx.(*Create_view_stmtContext).name = _x
	}
	p.SetState(3043)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserOPEN_PAREN {
		{
			p.SetState(3039)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(3040)
			p.Name_list()
		}
		{
			p.SetState(3041)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}
	p.SetState(3050)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserWITH {
		{
			p.SetState(3045)
			p.Match(PostgreSQLParserWITH)
		}
		{
			p.SetState(3046)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(3047)
			p.Option_list()
		}
		{
			p.SetState(3048)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}
	{
		p.SetState(3052)
		p.Match(PostgreSQLParserAS)
	}
	p.SetState(3055)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 279, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3053)
			p.Select_stmt()
		}

	case 2:
		{
			p.SetState(3054)
			p.Values_stmt()
		}

	}
	p.SetState(3063)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserWITH {
		{
			p.SetState(3057)
			p.Match(PostgreSQLParserWITH)
		}
		p.SetState(3059)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserCASCADED || _la == PostgreSQLParserLOCAL {
			{
				p.SetState(3058)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserCASCADED || _la == PostgreSQLParserLOCAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(3061)
			p.Match(PostgreSQLParserCHECK)
		}
		{
			p.SetState(3062)
			p.Match(PostgreSQLParserOPTION)
		}

	}

	return localctx
}

// IDeallocate_stmtContext is an interface to support dynamic dispatch.
type IDeallocate_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeallocate_stmtContext differentiates from other interfaces.
	IsDeallocate_stmtContext()
}

type Deallocate_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeallocate_stmtContext() *Deallocate_stmtContext {
	var p = new(Deallocate_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_deallocate_stmt
	return p
}

func (*Deallocate_stmtContext) IsDeallocate_stmtContext() {}

func NewDeallocate_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Deallocate_stmtContext {
	var p = new(Deallocate_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_deallocate_stmt

	return p
}

func (s *Deallocate_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Deallocate_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Deallocate_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Deallocate_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Deallocate_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDeallocate_stmt(s)
	}
}

func (s *Deallocate_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDeallocate_stmt(s)
	}
}

func (p *PostgreSQLParser) Deallocate_stmt() (localctx IDeallocate_stmtContext) {
	localctx = NewDeallocate_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, PostgreSQLParserRULE_deallocate_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3065)
		p.Todo_implement()
	}

	return localctx
}

// IDeclare_stmtContext is an interface to support dynamic dispatch.
type IDeclare_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_stmtContext differentiates from other interfaces.
	IsDeclare_stmtContext()
}

type Declare_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_stmtContext() *Declare_stmtContext {
	var p = new(Declare_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_declare_stmt
	return p
}

func (*Declare_stmtContext) IsDeclare_stmtContext() {}

func NewDeclare_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_stmtContext {
	var p = new(Declare_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_declare_stmt

	return p
}

func (s *Declare_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Declare_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDeclare_stmt(s)
	}
}

func (s *Declare_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDeclare_stmt(s)
	}
}

func (p *PostgreSQLParser) Declare_stmt() (localctx IDeclare_stmtContext) {
	localctx = NewDeclare_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, PostgreSQLParserRULE_declare_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3067)
		p.Todo_implement()
	}

	return localctx
}

// IDelete_stmtContext is an interface to support dynamic dispatch.
type IDelete_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCursor_name_ returns the cursor_name_ rule contexts.
	GetCursor_name_() IIdentifierContext

	// SetCursor_name_ sets the cursor_name_ rule contexts.
	SetCursor_name_(IIdentifierContext)

	// IsDelete_stmtContext differentiates from other interfaces.
	IsDelete_stmtContext()
}

type Delete_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	cursor_name_ IIdentifierContext
}

func NewEmptyDelete_stmtContext() *Delete_stmtContext {
	var p = new(Delete_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_delete_stmt
	return p
}

func (*Delete_stmtContext) IsDelete_stmtContext() {}

func NewDelete_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_stmtContext {
	var p = new(Delete_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_delete_stmt

	return p
}

func (s *Delete_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_stmtContext) GetCursor_name_() IIdentifierContext { return s.cursor_name_ }

func (s *Delete_stmtContext) SetCursor_name_(v IIdentifierContext) { s.cursor_name_ = v }

func (s *Delete_stmtContext) DELETE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDELETE, 0)
}

func (s *Delete_stmtContext) FROM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFROM, 0)
}

func (s *Delete_stmtContext) Table_name_() ITable_name_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_Context)
}

func (s *Delete_stmtContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Delete_stmtContext) ONLY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserONLY, 0)
}

func (s *Delete_stmtContext) STAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTAR, 0)
}

func (s *Delete_stmtContext) Alias() IAliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *Delete_stmtContext) USING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSING, 0)
}

func (s *Delete_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Delete_stmtContext) Where_clause() IWhere_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhere_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhere_clauseContext)
}

func (s *Delete_stmtContext) Returning_clause() IReturning_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturning_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturning_clauseContext)
}

func (s *Delete_stmtContext) WHERE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWHERE, 0)
}

func (s *Delete_stmtContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT, 0)
}

func (s *Delete_stmtContext) OF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOF, 0)
}

func (s *Delete_stmtContext) AS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAS, 0)
}

func (s *Delete_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Delete_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delete_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDelete_stmt(s)
	}
}

func (s *Delete_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDelete_stmt(s)
	}
}

func (p *PostgreSQLParser) Delete_stmt() (localctx IDelete_stmtContext) {
	localctx = NewDelete_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, PostgreSQLParserRULE_delete_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3070)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserWITH {
		{
			p.SetState(3069)
			p.With_clause()
		}

	}
	{
		p.SetState(3072)
		p.Match(PostgreSQLParserDELETE)
	}
	{
		p.SetState(3073)
		p.Match(PostgreSQLParserFROM)
	}
	p.SetState(3075)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserONLY {
		{
			p.SetState(3074)
			p.Match(PostgreSQLParserONLY)
		}

	}
	{
		p.SetState(3077)
		p.Table_name_()
	}
	p.SetState(3079)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserSTAR {
		{
			p.SetState(3078)
			p.Match(PostgreSQLParserSTAR)
		}

	}
	p.SetState(3085)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PostgreSQLParserWHITESPACE)|(1<<PostgreSQLParserA_)|(1<<PostgreSQLParserABORT)|(1<<PostgreSQLParserABS)|(1<<PostgreSQLParserABSOLUTE)|(1<<PostgreSQLParserACCESS)|(1<<PostgreSQLParserACTION)|(1<<PostgreSQLParserADA)|(1<<PostgreSQLParserADD)|(1<<PostgreSQLParserADMIN)|(1<<PostgreSQLParserAFTER)|(1<<PostgreSQLParserAGGREGATE)|(1<<PostgreSQLParserALLOCATE)|(1<<PostgreSQLParserALSO)|(1<<PostgreSQLParserALTER)|(1<<PostgreSQLParserALWAYS)|(1<<PostgreSQLParserANY)|(1<<PostgreSQLParserARE)|(1<<PostgreSQLParserAS)|(1<<PostgreSQLParserASENSITIVE)|(1<<PostgreSQLParserASSERTION)|(1<<PostgreSQLParserASSIGNMENT))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(PostgreSQLParserAT-33))|(1<<(PostgreSQLParserATOMIC-33))|(1<<(PostgreSQLParserATTRIBUTE-33))|(1<<(PostgreSQLParserATTRIBUTES-33))|(1<<(PostgreSQLParserAVG-33))|(1<<(PostgreSQLParserBACKWARD-33))|(1<<(PostgreSQLParserBEFORE-33))|(1<<(PostgreSQLParserBEGIN-33))|(1<<(PostgreSQLParserBERNOULLI-33))|(1<<(PostgreSQLParserBETWEEN-33))|(1<<(PostgreSQLParserBIGINT-33))|(1<<(PostgreSQLParserBIT-33))|(1<<(PostgreSQLParserBIT_LENGTH-33))|(1<<(PostgreSQLParserBLOB-33))|(1<<(PostgreSQLParserBOOLEAN-33))|(1<<(PostgreSQLParserBREADTH-33))|(1<<(PostgreSQLParserBY-33))|(1<<(PostgreSQLParserC_-33))|(1<<(PostgreSQLParserCACHE-33))|(1<<(PostgreSQLParserCALL-33))|(1<<(PostgreSQLParserCALLED-33))|(1<<(PostgreSQLParserCARDINALITY-33))|(1<<(PostgreSQLParserCASCADE-33))|(1<<(PostgreSQLParserCASCADED-33))|(1<<(PostgreSQLParserCATALOG-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PostgreSQLParserCATALOG_NAME-65))|(1<<(PostgreSQLParserCEIL-65))|(1<<(PostgreSQLParserCEILING-65))|(1<<(PostgreSQLParserCHAIN-65))|(1<<(PostgreSQLParserCHAR-65))|(1<<(PostgreSQLParserCHAR_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER-65))|(1<<(PostgreSQLParserCHARACTER_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER_SET_CATALOG-65))|(1<<(PostgreSQLParserCHARACTER_SET_NAME-65))|(1<<(PostgreSQLParserCHARACTER_SET_SCHEMA-65))|(1<<(PostgreSQLParserCHARACTERISTICS-65))|(1<<(PostgreSQLParserCHARACTERS-65))|(1<<(PostgreSQLParserCHECKPOINT-65))|(1<<(PostgreSQLParserCLASS-65))|(1<<(PostgreSQLParserCLASS_ORIGIN-65))|(1<<(PostgreSQLParserCLOB-65))|(1<<(PostgreSQLParserCLOSE-65))|(1<<(PostgreSQLParserCLUSTER-65))|(1<<(PostgreSQLParserCOALESCE-65))|(1<<(PostgreSQLParserCOBOL-65))|(1<<(PostgreSQLParserCOLLATION_CATALOG-65))|(1<<(PostgreSQLParserCOLLATION_NAME-65))|(1<<(PostgreSQLParserCOLLATION_SCHEMA-65))|(1<<(PostgreSQLParserCOLLECT-65))|(1<<(PostgreSQLParserCOLUMN_NAME-65))|(1<<(PostgreSQLParserCOMMAND_FUNCTION-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(PostgreSQLParserCOMMAND_FUNCTION_CODE-97))|(1<<(PostgreSQLParserCOMMENT-97))|(1<<(PostgreSQLParserCOMMIT-97))|(1<<(PostgreSQLParserCOMMITTED-97))|(1<<(PostgreSQLParserCONDITION-97))|(1<<(PostgreSQLParserCONDITION_NUMBER-97))|(1<<(PostgreSQLParserCONNECT-97))|(1<<(PostgreSQLParserCONNECTION-97))|(1<<(PostgreSQLParserCONNECTION_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_CATALOG-97))|(1<<(PostgreSQLParserCONSTRAINT_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_SCHEMA-97))|(1<<(PostgreSQLParserCONSTRAINTS-97))|(1<<(PostgreSQLParserCONSTRUCTOR-97))|(1<<(PostgreSQLParserCONTAINS-97))|(1<<(PostgreSQLParserCONTINUE-97))|(1<<(PostgreSQLParserCONVERSION-97))|(1<<(PostgreSQLParserCONVERT-97))|(1<<(PostgreSQLParserCOPY-97))|(1<<(PostgreSQLParserCORR-97))|(1<<(PostgreSQLParserCORRESPONDING-97))|(1<<(PostgreSQLParserCOUNT-97))|(1<<(PostgreSQLParserCOVAR_POP-97))|(1<<(PostgreSQLParserCOVAR_SAMP-97)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(PostgreSQLParserCSV-131))|(1<<(PostgreSQLParserCUBE-131))|(1<<(PostgreSQLParserCUME_DIST-131))|(1<<(PostgreSQLParserCURRENT-131))|(1<<(PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP-131))|(1<<(PostgreSQLParserCURRENT_PATH-131))|(1<<(PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE-131))|(1<<(PostgreSQLParserCURSOR-131))|(1<<(PostgreSQLParserCURSOR_NAME-131))|(1<<(PostgreSQLParserCYCLE-131))|(1<<(PostgreSQLParserDATA-131))|(1<<(PostgreSQLParserDATABASE-131))|(1<<(PostgreSQLParserDATE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_CODE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_PRECISION-131))|(1<<(PostgreSQLParserDAY-131))|(1<<(PostgreSQLParserDEALLOCATE-131))|(1<<(PostgreSQLParserDEC-131))|(1<<(PostgreSQLParserDECIMAL-131))|(1<<(PostgreSQLParserDECLARE-131))|(1<<(PostgreSQLParserDEFAULTS-131))|(1<<(PostgreSQLParserDEFERRED-131))|(1<<(PostgreSQLParserDEFINED-131))|(1<<(PostgreSQLParserDEFINER-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(PostgreSQLParserDEGREE-163))|(1<<(PostgreSQLParserDELETE-163))|(1<<(PostgreSQLParserDELIMITER-163))|(1<<(PostgreSQLParserDELIMITERS-163))|(1<<(PostgreSQLParserDENSE_RANK-163))|(1<<(PostgreSQLParserDEPTH-163))|(1<<(PostgreSQLParserDEREF-163))|(1<<(PostgreSQLParserDERIVED-163))|(1<<(PostgreSQLParserDESCRIBE-163))|(1<<(PostgreSQLParserDESCRIPTOR-163))|(1<<(PostgreSQLParserDETERMINISTIC-163))|(1<<(PostgreSQLParserDIAGNOSTICS-163))|(1<<(PostgreSQLParserDICTIONARY-163))|(1<<(PostgreSQLParserDISCONNECT-163))|(1<<(PostgreSQLParserDISPATCH-163))|(1<<(PostgreSQLParserDOMAIN-163))|(1<<(PostgreSQLParserDOUBLE-163))|(1<<(PostgreSQLParserDYNAMIC-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION_CODE-163))|(1<<(PostgreSQLParserEACH-163))|(1<<(PostgreSQLParserELEMENT-163)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(PostgreSQLParserENCODING-197))|(1<<(PostgreSQLParserENCRYPTED-197))|(1<<(PostgreSQLParserEND-197))|(1<<(PostgreSQLParserEQUALS-197))|(1<<(PostgreSQLParserESCAPE-197))|(1<<(PostgreSQLParserEVERY-197))|(1<<(PostgreSQLParserEXCEPTION-197))|(1<<(PostgreSQLParserEXCLUDE-197))|(1<<(PostgreSQLParserEXCLUDING-197))|(1<<(PostgreSQLParserEXCLUSIVE-197))|(1<<(PostgreSQLParserEXEC-197))|(1<<(PostgreSQLParserEXECUTE-197))|(1<<(PostgreSQLParserEXISTS-197))|(1<<(PostgreSQLParserEXP-197))|(1<<(PostgreSQLParserEXPLAIN-197))|(1<<(PostgreSQLParserEXTENSION-197))|(1<<(PostgreSQLParserEXTERNAL-197))|(1<<(PostgreSQLParserEXTRACT-197))|(1<<(PostgreSQLParserFILTER-197))|(1<<(PostgreSQLParserFINAL-197))|(1<<(PostgreSQLParserFIRST-197))|(1<<(PostgreSQLParserFLOAT-197))|(1<<(PostgreSQLParserFLOOR-197))|(1<<(PostgreSQLParserFOLLOWING-197)))) != 0) || (((_la-229)&-(0x1f+1)) == 0 && ((1<<uint((_la-229)))&((1<<(PostgreSQLParserFORCE-229))|(1<<(PostgreSQLParserFORMAT-229))|(1<<(PostgreSQLParserFORTRAN-229))|(1<<(PostgreSQLParserFORWARD-229))|(1<<(PostgreSQLParserFOUND-229))|(1<<(PostgreSQLParserFREE-229))|(1<<(PostgreSQLParserFUNCTION-229))|(1<<(PostgreSQLParserFUSION-229))|(1<<(PostgreSQLParserG_-229))|(1<<(PostgreSQLParserGENERAL-229))|(1<<(PostgreSQLParserGENERATED-229))|(1<<(PostgreSQLParserGET-229))|(1<<(PostgreSQLParserGLOBAL-229))|(1<<(PostgreSQLParserGO-229))|(1<<(PostgreSQLParserGOTO-229))|(1<<(PostgreSQLParserGRANTED-229))|(1<<(PostgreSQLParserGREATEST-229))|(1<<(PostgreSQLParserGROUPING-229))|(1<<(PostgreSQLParserHANDLER-229))|(1<<(PostgreSQLParserHIERARCHY-229))|(1<<(PostgreSQLParserHOLD-229))|(1<<(PostgreSQLParserHOST-229))|(1<<(PostgreSQLParserHOUR-229))|(1<<(PostgreSQLParserIDENTITY-229))|(1<<(PostgreSQLParserIGNORE-229)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(PostgreSQLParserIMMEDIATE-262))|(1<<(PostgreSQLParserIMMUTABLE-262))|(1<<(PostgreSQLParserIMPLEMENTATION-262))|(1<<(PostgreSQLParserIMPLICIT-262))|(1<<(PostgreSQLParserINCLUDING-262))|(1<<(PostgreSQLParserINCREMENT-262))|(1<<(PostgreSQLParserINDEX-262))|(1<<(PostgreSQLParserINDICATOR-262))|(1<<(PostgreSQLParserINHERITS-262))|(1<<(PostgreSQLParserINOUT-262))|(1<<(PostgreSQLParserINPUT-262))|(1<<(PostgreSQLParserINSENSITIVE-262))|(1<<(PostgreSQLParserINSERT-262))|(1<<(PostgreSQLParserINSTANCE-262))|(1<<(PostgreSQLParserINSTANTIABLE-262))|(1<<(PostgreSQLParserINSTEAD-262))|(1<<(PostgreSQLParserINT-262))|(1<<(PostgreSQLParserINTEGER-262))|(1<<(PostgreSQLParserINTERSECTION-262))|(1<<(PostgreSQLParserINTERVAL-262))|(1<<(PostgreSQLParserINVOKER-262))|(1<<(PostgreSQLParserISOLATION-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(PostgreSQLParserK_-294))|(1<<(PostgreSQLParserKEY-294))|(1<<(PostgreSQLParserKEY_MEMBER-294))|(1<<(PostgreSQLParserKEY_TYPE-294))|(1<<(PostgreSQLParserLANGUAGE-294))|(1<<(PostgreSQLParserLARGE-294))|(1<<(PostgreSQLParserLAST-294))|(1<<(PostgreSQLParserLEAST-294))|(1<<(PostgreSQLParserLEFT-294))|(1<<(PostgreSQLParserLENGTH-294))|(1<<(PostgreSQLParserLEVEL-294))|(1<<(PostgreSQLParserLISTEN-294))|(1<<(PostgreSQLParserLN-294))|(1<<(PostgreSQLParserLOAD-294))|(1<<(PostgreSQLParserLOCAL-294))|(1<<(PostgreSQLParserLOCATION-294))|(1<<(PostgreSQLParserLOCATOR-294))|(1<<(PostgreSQLParserLOCK-294))|(1<<(PostgreSQLParserLOCKED-294))|(1<<(PostgreSQLParserLOWER-294))|(1<<(PostgreSQLParserM_-294))|(1<<(PostgreSQLParserMAP-294)))) != 0) || (((_la-327)&-(0x1f+1)) == 0 && ((1<<uint((_la-327)))&((1<<(PostgreSQLParserMATCH-327))|(1<<(PostgreSQLParserMATCHED-327))|(1<<(PostgreSQLParserMAX-327))|(1<<(PostgreSQLParserMAXVALUE-327))|(1<<(PostgreSQLParserMEMBER-327))|(1<<(PostgreSQLParserMERGE-327))|(1<<(PostgreSQLParserMESSAGE_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_OCTET_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_TEXT-327))|(1<<(PostgreSQLParserMETHOD-327))|(1<<(PostgreSQLParserMIN-327))|(1<<(PostgreSQLParserMINUTE-327))|(1<<(PostgreSQLParserMINVALUE-327))|(1<<(PostgreSQLParserMOD-327))|(1<<(PostgreSQLParserMODE-327))|(1<<(PostgreSQLParserMODIFIES-327))|(1<<(PostgreSQLParserMODULE-327))|(1<<(PostgreSQLParserMONTH-327))|(1<<(PostgreSQLParserMORE_-327))|(1<<(PostgreSQLParserMOVE-327))|(1<<(PostgreSQLParserMULTISET-327))|(1<<(PostgreSQLParserMUMPS-327))|(1<<(PostgreSQLParserNAME-327))|(1<<(PostgreSQLParserNAMES-327))|(1<<(PostgreSQLParserNATIONAL-327))|(1<<(PostgreSQLParserNCHAR-327))|(1<<(PostgreSQLParserNCLOB-327))|(1<<(PostgreSQLParserNESTING-327))|(1<<(PostgreSQLParserNEW-327)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(PostgreSQLParserNEXT-359))|(1<<(PostgreSQLParserNO-359))|(1<<(PostgreSQLParserNONE-359))|(1<<(PostgreSQLParserNORMALIZE-359))|(1<<(PostgreSQLParserNORMALIZED-359))|(1<<(PostgreSQLParserNOTHING-359))|(1<<(PostgreSQLParserNOTIFY-359))|(1<<(PostgreSQLParserNOWAIT-359))|(1<<(PostgreSQLParserNULLABLE-359))|(1<<(PostgreSQLParserNULLIF-359))|(1<<(PostgreSQLParserNULLS-359))|(1<<(PostgreSQLParserNUMBER-359))|(1<<(PostgreSQLParserNUMERIC-359))|(1<<(PostgreSQLParserOBJECT-359))|(1<<(PostgreSQLParserOCTET_LENGTH-359))|(1<<(PostgreSQLParserOCTETS-359))|(1<<(PostgreSQLParserOF-359))|(1<<(PostgreSQLParserOFF-359))|(1<<(PostgreSQLParserOIDS-359))|(1<<(PostgreSQLParserOLD-359))|(1<<(PostgreSQLParserOPEN-359))|(1<<(PostgreSQLParserOPERATOR-359))|(1<<(PostgreSQLParserOPTION-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(PostgreSQLParserOPTIONS-391))|(1<<(PostgreSQLParserORDERING-391))|(1<<(PostgreSQLParserORDINALITY-391))|(1<<(PostgreSQLParserOTHERS-391))|(1<<(PostgreSQLParserOUT-391))|(1<<(PostgreSQLParserOUTPUT-391))|(1<<(PostgreSQLParserOVER-391))|(1<<(PostgreSQLParserOVERLAY-391))|(1<<(PostgreSQLParserOVERRIDING-391))|(1<<(PostgreSQLParserOWNER-391))|(1<<(PostgreSQLParserPAD-391))|(1<<(PostgreSQLParserPARAMETER-391))|(1<<(PostgreSQLParserPARAMETER_MODE-391))|(1<<(PostgreSQLParserPARAMETER_NAME-391))|(1<<(PostgreSQLParserPARAMETER_ORDINAL_POSITION-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_CATALOG-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_NAME-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA-391))|(1<<(PostgreSQLParserPARTIAL-391))|(1<<(PostgreSQLParserPARTITION-391))|(1<<(PostgreSQLParserPASCAL-391))|(1<<(PostgreSQLParserPASSWORD-391))|(1<<(PostgreSQLParserPATH-391))|(1<<(PostgreSQLParserPERCENT_RANK-391))|(1<<(PostgreSQLParserPERCENTILE_CONT-391))|(1<<(PostgreSQLParserPERCENTILE_DISC-391)))) != 0) || (((_la-424)&-(0x1f+1)) == 0 && ((1<<uint((_la-424)))&((1<<(PostgreSQLParserPLAIN-424))|(1<<(PostgreSQLParserPLI-424))|(1<<(PostgreSQLParserPOSITION-424))|(1<<(PostgreSQLParserPOWER-424))|(1<<(PostgreSQLParserPRECEDING-424))|(1<<(PostgreSQLParserPRECISION-424))|(1<<(PostgreSQLParserPREPARE-424))|(1<<(PostgreSQLParserPRESERVE-424))|(1<<(PostgreSQLParserPRIOR-424))|(1<<(PostgreSQLParserPRIVILEGES-424))|(1<<(PostgreSQLParserPROCEDURAL-424))|(1<<(PostgreSQLParserPROCEDURE-424))|(1<<(PostgreSQLParserPUBLIC-424))|(1<<(PostgreSQLParserQUOTE-424))|(1<<(PostgreSQLParserRANGE-424))|(1<<(PostgreSQLParserRANK-424))|(1<<(PostgreSQLParserREAD-424))|(1<<(PostgreSQLParserREADS-424))|(1<<(PostgreSQLParserREAL-424))|(1<<(PostgreSQLParserRECHECK-424))|(1<<(PostgreSQLParserRECURSIVE-424))|(1<<(PostgreSQLParserREF-424))|(1<<(PostgreSQLParserREFERENCING-424)))) != 0) || (((_la-456)&-(0x1f+1)) == 0 && ((1<<uint((_la-456)))&((1<<(PostgreSQLParserREFRESH-456))|(1<<(PostgreSQLParserREGR_AVGX-456))|(1<<(PostgreSQLParserREGR_AVGY-456))|(1<<(PostgreSQLParserREGR_COUNT-456))|(1<<(PostgreSQLParserREGR_INTERCEPT-456))|(1<<(PostgreSQLParserREGR_SLOPE-456))|(1<<(PostgreSQLParserREGR_SXX-456))|(1<<(PostgreSQLParserREGR_SXY-456))|(1<<(PostgreSQLParserREGR_SYY-456))|(1<<(PostgreSQLParserREINDEX-456))|(1<<(PostgreSQLParserRELATIVE-456))|(1<<(PostgreSQLParserRELEASE-456))|(1<<(PostgreSQLParserRENAME-456))|(1<<(PostgreSQLParserREPEATABLE-456))|(1<<(PostgreSQLParserREPLACE-456))|(1<<(PostgreSQLParserRESET-456))|(1<<(PostgreSQLParserRESTART-456))|(1<<(PostgreSQLParserRESTRICT-456))|(1<<(PostgreSQLParserRESULT-456))|(1<<(PostgreSQLParserRETURN-456))|(1<<(PostgreSQLParserRETURNED_CARDINALITY-456))|(1<<(PostgreSQLParserRETURNED_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_OCTET_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_SQLSTATE-456))|(1<<(PostgreSQLParserRETURNS-456))|(1<<(PostgreSQLParserREVOKE-456))|(1<<(PostgreSQLParserRIGHT-456))|(1<<(PostgreSQLParserROLE-456))|(1<<(PostgreSQLParserROLLBACK-456)))) != 0) || (((_la-488)&-(0x1f+1)) == 0 && ((1<<uint((_la-488)))&((1<<(PostgreSQLParserROLLUP-488))|(1<<(PostgreSQLParserROUTINE-488))|(1<<(PostgreSQLParserROUTINE_CATALOG-488))|(1<<(PostgreSQLParserROUTINE_NAME-488))|(1<<(PostgreSQLParserROUTINE_SCHEMA-488))|(1<<(PostgreSQLParserROW-488))|(1<<(PostgreSQLParserROW_COUNT-488))|(1<<(PostgreSQLParserROW_NUMBER-488))|(1<<(PostgreSQLParserROWS-488))|(1<<(PostgreSQLParserRULE-488))|(1<<(PostgreSQLParserSAVEPOINT-488))|(1<<(PostgreSQLParserSCALE-488))|(1<<(PostgreSQLParserSCHEMA-488))|(1<<(PostgreSQLParserSCHEMA_NAME-488))|(1<<(PostgreSQLParserSCOPE-488))|(1<<(PostgreSQLParserSCOPE_CATALOG-488))|(1<<(PostgreSQLParserSCOPE_NAME-488))|(1<<(PostgreSQLParserSCOPE_SCHEMA-488))|(1<<(PostgreSQLParserSCROLL-488))|(1<<(PostgreSQLParserSEARCH-488))|(1<<(PostgreSQLParserSECOND-488))|(1<<(PostgreSQLParserSECTION-488))|(1<<(PostgreSQLParserSECURITY-488))|(1<<(PostgreSQLParserSELF-488))|(1<<(PostgreSQLParserSENSITIVE-488))|(1<<(PostgreSQLParserSEQUENCE-488))|(1<<(PostgreSQLParserSEQUENCES-488))|(1<<(PostgreSQLParserSERIALIZABLE-488))|(1<<(PostgreSQLParserSERVER_NAME-488))|(1<<(PostgreSQLParserSESSION-488)))) != 0) || (((_la-520)&-(0x1f+1)) == 0 && ((1<<uint((_la-520)))&((1<<(PostgreSQLParserSET-520))|(1<<(PostgreSQLParserSETOF-520))|(1<<(PostgreSQLParserSETS-520))|(1<<(PostgreSQLParserSHARE-520))|(1<<(PostgreSQLParserSHOW-520))|(1<<(PostgreSQLParserSIMPLE-520))|(1<<(PostgreSQLParserSIZE-520))|(1<<(PostgreSQLParserSMALLINT-520))|(1<<(PostgreSQLParserSOME-520))|(1<<(PostgreSQLParserSOURCE-520))|(1<<(PostgreSQLParserSPACE-520))|(1<<(PostgreSQLParserSPECIFIC-520))|(1<<(PostgreSQLParserSPECIFIC_NAME-520))|(1<<(PostgreSQLParserSPECIFICTYPE-520))|(1<<(PostgreSQLParserSQL-520))|(1<<(PostgreSQLParserSQLCODE-520))|(1<<(PostgreSQLParserSQLERROR-520))|(1<<(PostgreSQLParserSQLEXCEPTION-520))|(1<<(PostgreSQLParserSQLSTATE-520))|(1<<(PostgreSQLParserSQLWARNING-520))|(1<<(PostgreSQLParserSQRT-520))|(1<<(PostgreSQLParserSTABLE-520))|(1<<(PostgreSQLParserSTART-520))|(1<<(PostgreSQLParserSTATE-520))|(1<<(PostgreSQLParserSTATEMENT-520))|(1<<(PostgreSQLParserSTATIC-520))|(1<<(PostgreSQLParserSTATISTICS-520))|(1<<(PostgreSQLParserSTDDEV_POP-520))|(1<<(PostgreSQLParserSTDDEV_SAMP-520)))) != 0) || (((_la-552)&-(0x1f+1)) == 0 && ((1<<uint((_la-552)))&((1<<(PostgreSQLParserSTDIN-552))|(1<<(PostgreSQLParserSTDOUT-552))|(1<<(PostgreSQLParserSTORAGE-552))|(1<<(PostgreSQLParserSTRICT-552))|(1<<(PostgreSQLParserSTRUCTURE-552))|(1<<(PostgreSQLParserSTYLE-552))|(1<<(PostgreSQLParserSUBCLASS_ORIGIN-552))|(1<<(PostgreSQLParserSUBMULTISET-552))|(1<<(PostgreSQLParserSUBSTRING-552))|(1<<(PostgreSQLParserSUM-552))|(1<<(PostgreSQLParserSYSID-552))|(1<<(PostgreSQLParserSYSTEM-552))|(1<<(PostgreSQLParserSYSTEM_USER-552))|(1<<(PostgreSQLParserTABLE_NAME-552))|(1<<(PostgreSQLParserTABLESPACE-552))|(1<<(PostgreSQLParserTEMP-552))|(1<<(PostgreSQLParserTEMPLATE-552))|(1<<(PostgreSQLParserTEMPORARY-552))|(1<<(PostgreSQLParserTIES-552))|(1<<(PostgreSQLParserTIME-552))|(1<<(PostgreSQLParserTIMESTAMP-552))|(1<<(PostgreSQLParserTIMEZONE_HOUR-552))|(1<<(PostgreSQLParserTIMEZONE_MINUTE-552)))) != 0) || (((_la-586)&-(0x1f+1)) == 0 && ((1<<uint((_la-586)))&((1<<(PostgreSQLParserTOP_LEVEL_COUNT-586))|(1<<(PostgreSQLParserTRANSACTION-586))|(1<<(PostgreSQLParserTRANSACTION_ACTIVE-586))|(1<<(PostgreSQLParserTRANSACTIONS_COMMITTED-586))|(1<<(PostgreSQLParserTRANSACTIONS_ROLLED_BACK-586))|(1<<(PostgreSQLParserTRANSFORM-586))|(1<<(PostgreSQLParserTRANSFORMS-586))|(1<<(PostgreSQLParserTRANSLATE-586))|(1<<(PostgreSQLParserTRANSLATION-586))|(1<<(PostgreSQLParserTREAT-586))|(1<<(PostgreSQLParserTRIGGER-586))|(1<<(PostgreSQLParserTRIGGER_CATALOG-586))|(1<<(PostgreSQLParserTRIGGER_NAME-586))|(1<<(PostgreSQLParserTRIGGER_SCHEMA-586))|(1<<(PostgreSQLParserTRIM-586))|(1<<(PostgreSQLParserTRUE-586))|(1<<(PostgreSQLParserTRUNCATE-586))|(1<<(PostgreSQLParserTRUSTED-586))|(1<<(PostgreSQLParserTYPE-586))|(1<<(PostgreSQLParserUESCAPE-586))|(1<<(PostgreSQLParserUNBOUNDED-586))|(1<<(PostgreSQLParserUNCOMMITTED-586))|(1<<(PostgreSQLParserUNDER-586))|(1<<(PostgreSQLParserUNENCRYPTED-586))|(1<<(PostgreSQLParserUNKNOWN-586))|(1<<(PostgreSQLParserUNLISTEN-586))|(1<<(PostgreSQLParserUNNAMED-586))|(1<<(PostgreSQLParserUNNEST-586))|(1<<(PostgreSQLParserUNTIL-586)))) != 0) || (((_la-618)&-(0x1f+1)) == 0 && ((1<<uint((_la-618)))&((1<<(PostgreSQLParserUPDATE-618))|(1<<(PostgreSQLParserUPPER-618))|(1<<(PostgreSQLParserUSAGE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CATALOG-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CODE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_NAME-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA-618))|(1<<(PostgreSQLParserVACUUM-618))|(1<<(PostgreSQLParserVALID-618))|(1<<(PostgreSQLParserVALIDATOR-618))|(1<<(PostgreSQLParserVALUE-618))|(1<<(PostgreSQLParserVALUES-618))|(1<<(PostgreSQLParserVAR_POP-618))|(1<<(PostgreSQLParserVAR_SAMP-618))|(1<<(PostgreSQLParserVARCHAR-618))|(1<<(PostgreSQLParserVARYING-618))|(1<<(PostgreSQLParserVIEW-618))|(1<<(PostgreSQLParserVOLATILE-618))|(1<<(PostgreSQLParserWHENEVER-618))|(1<<(PostgreSQLParserWIDTH_BUCKET-618))|(1<<(PostgreSQLParserWITHIN-618))|(1<<(PostgreSQLParserWITHOUT-618)))) != 0) || (((_la-650)&-(0x1f+1)) == 0 && ((1<<uint((_la-650)))&((1<<(PostgreSQLParserWORK-650))|(1<<(PostgreSQLParserWRITE-650))|(1<<(PostgreSQLParserYEAR-650))|(1<<(PostgreSQLParserZONE-650)))) != 0) || (((_la-720)&-(0x1f+1)) == 0 && ((1<<uint((_la-720)))&((1<<(PostgreSQLParserABSTIME-720))|(1<<(PostgreSQLParserBIGSERIAL-720))|(1<<(PostgreSQLParserBIT_VARYING-720))|(1<<(PostgreSQLParserBOOL-720))|(1<<(PostgreSQLParserBOX-720))|(1<<(PostgreSQLParserBYTEA-720))|(1<<(PostgreSQLParserCHARACTER_VARYING-720))|(1<<(PostgreSQLParserCIDR-720))|(1<<(PostgreSQLParserCIRCLE-720))|(1<<(PostgreSQLParserFLOAT4-720))|(1<<(PostgreSQLParserFLOAT8-720))|(1<<(PostgreSQLParserINET-720))|(1<<(PostgreSQLParserINT2-720))|(1<<(PostgreSQLParserINT4-720))|(1<<(PostgreSQLParserINT8-720))|(1<<(PostgreSQLParserJSON-720))|(1<<(PostgreSQLParserJSONB-720))|(1<<(PostgreSQLParserLINE-720))|(1<<(PostgreSQLParserLSEG-720))|(1<<(PostgreSQLParserMACADDR-720))|(1<<(PostgreSQLParserMACADDR8-720))|(1<<(PostgreSQLParserMONEY-720))|(1<<(PostgreSQLParserPG_LSN-720))|(1<<(PostgreSQLParserPOINT-720))|(1<<(PostgreSQLParserPOLYGON-720))|(1<<(PostgreSQLParserRELTIME-720))|(1<<(PostgreSQLParserSERIAL-720))|(1<<(PostgreSQLParserSERIAL2-720))|(1<<(PostgreSQLParserSERIAL4-720))|(1<<(PostgreSQLParserSERIAL8-720))|(1<<(PostgreSQLParserSMALLSERIAL-720)))) != 0) || (((_la-752)&-(0x1f+1)) == 0 && ((1<<uint((_la-752)))&((1<<(PostgreSQLParserTEXT-752))|(1<<(PostgreSQLParserTIMESTAMPTZ-752))|(1<<(PostgreSQLParserTIMETZ-752))|(1<<(PostgreSQLParserTSQUERY-752))|(1<<(PostgreSQLParserTSVECTOR-752))|(1<<(PostgreSQLParserTXID_SNAPSHOT-752))|(1<<(PostgreSQLParserUUID-752))|(1<<(PostgreSQLParserVARBIT-752))|(1<<(PostgreSQLParserXML-752))|(1<<(PostgreSQLParserDOUBLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserIDENTIFIER-752))|(1<<(PostgreSQLParserIDENTIFIER_UNICODE-752)))) != 0) {
		p.SetState(3082)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserAS {
			{
				p.SetState(3081)
				p.Match(PostgreSQLParserAS)
			}

		}
		{
			p.SetState(3084)
			p.Alias()
		}

	}
	p.SetState(3089)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserUSING {
		{
			p.SetState(3087)
			p.Match(PostgreSQLParserUSING)
		}
		{
			p.SetState(3088)
			p.Identifier_list()
		}

	}
	p.SetState(3096)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 288, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3091)
			p.Where_clause()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 288, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(3092)
			p.Match(PostgreSQLParserWHERE)
		}
		{
			p.SetState(3093)
			p.Match(PostgreSQLParserCURRENT)
		}
		{
			p.SetState(3094)
			p.Match(PostgreSQLParserOF)
		}
		{
			p.SetState(3095)

			var _x = p.identifier(0)

			localctx.(*Delete_stmtContext).cursor_name_ = _x
		}

	}
	p.SetState(3099)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserRETURNING {
		{
			p.SetState(3098)
			p.Returning_clause()
		}

	}

	return localctx
}

// IDiscard_stmtContext is an interface to support dynamic dispatch.
type IDiscard_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDiscard_stmtContext differentiates from other interfaces.
	IsDiscard_stmtContext()
}

type Discard_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDiscard_stmtContext() *Discard_stmtContext {
	var p = new(Discard_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_discard_stmt
	return p
}

func (*Discard_stmtContext) IsDiscard_stmtContext() {}

func NewDiscard_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Discard_stmtContext {
	var p = new(Discard_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_discard_stmt

	return p
}

func (s *Discard_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Discard_stmtContext) DISCARD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDISCARD, 0)
}

func (s *Discard_stmtContext) ALL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALL, 0)
}

func (s *Discard_stmtContext) PLANS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPLANS, 0)
}

func (s *Discard_stmtContext) SEQUENCES() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSEQUENCES, 0)
}

func (s *Discard_stmtContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEMPORARY, 0)
}

func (s *Discard_stmtContext) TEMP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEMP, 0)
}

func (s *Discard_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Discard_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Discard_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDiscard_stmt(s)
	}
}

func (s *Discard_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDiscard_stmt(s)
	}
}

func (p *PostgreSQLParser) Discard_stmt() (localctx IDiscard_stmtContext) {
	localctx = NewDiscard_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, PostgreSQLParserRULE_discard_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3101)
		p.Match(PostgreSQLParserDISCARD)
	}
	{
		p.SetState(3102)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PostgreSQLParserALL || _la == PostgreSQLParserPLANS || _la == PostgreSQLParserSEQUENCES || _la == PostgreSQLParserTEMP || _la == PostgreSQLParserTEMPORARY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDrop_stmtContext is an interface to support dynamic dispatch.
type IDrop_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_stmtContext differentiates from other interfaces.
	IsDrop_stmtContext()
}

type Drop_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_stmtContext() *Drop_stmtContext {
	var p = new(Drop_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_stmt
	return p
}

func (*Drop_stmtContext) IsDrop_stmtContext() {}

func NewDrop_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_stmtContext {
	var p = new(Drop_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_stmt

	return p
}

func (s *Drop_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_stmtContext) Drop_access_method_stmt() IDrop_access_method_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_access_method_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_access_method_stmtContext)
}

func (s *Drop_stmtContext) Drop_aggregate_stmt() IDrop_aggregate_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_aggregate_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_aggregate_stmtContext)
}

func (s *Drop_stmtContext) Drop_cast_stmt() IDrop_cast_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_cast_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_cast_stmtContext)
}

func (s *Drop_stmtContext) Drop_collation_stmt() IDrop_collation_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_collation_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_collation_stmtContext)
}

func (s *Drop_stmtContext) Drop_conversion_stmt() IDrop_conversion_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_conversion_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_conversion_stmtContext)
}

func (s *Drop_stmtContext) Drop_database_stmt() IDrop_database_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_database_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_database_stmtContext)
}

func (s *Drop_stmtContext) Drop_domain_stmt() IDrop_domain_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_domain_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_domain_stmtContext)
}

func (s *Drop_stmtContext) Drop_event_trigger_stmt() IDrop_event_trigger_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_event_trigger_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_event_trigger_stmtContext)
}

func (s *Drop_stmtContext) Drop_extension_stmt() IDrop_extension_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_extension_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_extension_stmtContext)
}

func (s *Drop_stmtContext) Drop_foreign_data_wrapper_stmt() IDrop_foreign_data_wrapper_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_foreign_data_wrapper_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_foreign_data_wrapper_stmtContext)
}

func (s *Drop_stmtContext) Drop_foreign_table_stmt() IDrop_foreign_table_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_foreign_table_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_foreign_table_stmtContext)
}

func (s *Drop_stmtContext) Drop_function_stmt() IDrop_function_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_function_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_function_stmtContext)
}

func (s *Drop_stmtContext) Drop_group_stmt() IDrop_group_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_group_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_group_stmtContext)
}

func (s *Drop_stmtContext) Drop_index_stmt() IDrop_index_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_index_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_index_stmtContext)
}

func (s *Drop_stmtContext) Drop_language_stmt() IDrop_language_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_language_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_language_stmtContext)
}

func (s *Drop_stmtContext) Drop_materialized_view_stmt() IDrop_materialized_view_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_materialized_view_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_materialized_view_stmtContext)
}

func (s *Drop_stmtContext) Drop_operator_stmt() IDrop_operator_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_operator_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_operator_stmtContext)
}

func (s *Drop_stmtContext) Drop_operator_class_stmt() IDrop_operator_class_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_operator_class_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_operator_class_stmtContext)
}

func (s *Drop_stmtContext) Drop_operator_family_stmt() IDrop_operator_family_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_operator_family_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_operator_family_stmtContext)
}

func (s *Drop_stmtContext) Drop_owned_stmt() IDrop_owned_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_owned_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_owned_stmtContext)
}

func (s *Drop_stmtContext) Drop_policy_stmt() IDrop_policy_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_policy_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_policy_stmtContext)
}

func (s *Drop_stmtContext) Drop_publication_stmt() IDrop_publication_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_publication_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_publication_stmtContext)
}

func (s *Drop_stmtContext) Drop_role_stmt() IDrop_role_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_role_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_role_stmtContext)
}

func (s *Drop_stmtContext) Drop_rule_stmt() IDrop_rule_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_rule_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_rule_stmtContext)
}

func (s *Drop_stmtContext) Drop_schema_stmt() IDrop_schema_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_schema_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_schema_stmtContext)
}

func (s *Drop_stmtContext) Drop_sequence_stmt() IDrop_sequence_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_sequence_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_sequence_stmtContext)
}

func (s *Drop_stmtContext) Drop_server_stmt() IDrop_server_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_server_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_server_stmtContext)
}

func (s *Drop_stmtContext) Drop_statistics_stmt() IDrop_statistics_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_statistics_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_statistics_stmtContext)
}

func (s *Drop_stmtContext) Drop_subscription_stmt() IDrop_subscription_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_subscription_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_subscription_stmtContext)
}

func (s *Drop_stmtContext) Drop_table_stmt() IDrop_table_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_table_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_table_stmtContext)
}

func (s *Drop_stmtContext) Drop_tablespace_stmt() IDrop_tablespace_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_tablespace_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_tablespace_stmtContext)
}

func (s *Drop_stmtContext) Drop_text_search_config_stmt() IDrop_text_search_config_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_text_search_config_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_text_search_config_stmtContext)
}

func (s *Drop_stmtContext) Drop_text_search_dict_stmt() IDrop_text_search_dict_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_text_search_dict_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_text_search_dict_stmtContext)
}

func (s *Drop_stmtContext) Drop_text_search_parser_stmt() IDrop_text_search_parser_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_text_search_parser_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_text_search_parser_stmtContext)
}

func (s *Drop_stmtContext) Drop_text_search_template_stmt() IDrop_text_search_template_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_text_search_template_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_text_search_template_stmtContext)
}

func (s *Drop_stmtContext) Drop_transform_stmt() IDrop_transform_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_transform_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_transform_stmtContext)
}

func (s *Drop_stmtContext) Drop_trigger_stmt() IDrop_trigger_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_trigger_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_trigger_stmtContext)
}

func (s *Drop_stmtContext) Drop_type_stmt() IDrop_type_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_type_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_type_stmtContext)
}

func (s *Drop_stmtContext) Drop_user_stmt() IDrop_user_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_user_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_user_stmtContext)
}

func (s *Drop_stmtContext) Drop_user_mapping_stmt() IDrop_user_mapping_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_user_mapping_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_user_mapping_stmtContext)
}

func (s *Drop_stmtContext) Drop_view_stmt() IDrop_view_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_view_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_view_stmtContext)
}

func (s *Drop_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_stmt(s)
	}
}

func (s *Drop_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_stmt() (localctx IDrop_stmtContext) {
	localctx = NewDrop_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, PostgreSQLParserRULE_drop_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3145)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 290, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3104)
			p.Drop_access_method_stmt()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3105)
			p.Drop_aggregate_stmt()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3106)
			p.Drop_cast_stmt()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3107)
			p.Drop_collation_stmt()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3108)
			p.Drop_conversion_stmt()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3109)
			p.Drop_database_stmt()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3110)
			p.Drop_domain_stmt()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3111)
			p.Drop_event_trigger_stmt()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(3112)
			p.Drop_extension_stmt()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(3113)
			p.Drop_foreign_data_wrapper_stmt()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(3114)
			p.Drop_foreign_table_stmt()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(3115)
			p.Drop_function_stmt()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(3116)
			p.Drop_group_stmt()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(3117)
			p.Drop_index_stmt()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(3118)
			p.Drop_language_stmt()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(3119)
			p.Drop_materialized_view_stmt()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(3120)
			p.Drop_operator_stmt()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(3121)
			p.Drop_operator_class_stmt()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(3122)
			p.Drop_operator_family_stmt()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(3123)
			p.Drop_owned_stmt()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(3124)
			p.Drop_policy_stmt()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(3125)
			p.Drop_publication_stmt()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(3126)
			p.Drop_role_stmt()
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(3127)
			p.Drop_rule_stmt()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(3128)
			p.Drop_schema_stmt()
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(3129)
			p.Drop_sequence_stmt()
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(3130)
			p.Drop_server_stmt()
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(3131)
			p.Drop_statistics_stmt()
		}

	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(3132)
			p.Drop_subscription_stmt()
		}

	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(3133)
			p.Drop_table_stmt()
		}

	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(3134)
			p.Drop_tablespace_stmt()
		}

	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(3135)
			p.Drop_text_search_config_stmt()
		}

	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(3136)
			p.Drop_text_search_dict_stmt()
		}

	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(3137)
			p.Drop_text_search_parser_stmt()
		}

	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(3138)
			p.Drop_text_search_template_stmt()
		}

	case 36:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(3139)
			p.Drop_transform_stmt()
		}

	case 37:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(3140)
			p.Drop_trigger_stmt()
		}

	case 38:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(3141)
			p.Drop_type_stmt()
		}

	case 39:
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(3142)
			p.Drop_user_stmt()
		}

	case 40:
		p.EnterOuterAlt(localctx, 40)
		{
			p.SetState(3143)
			p.Drop_user_mapping_stmt()
		}

	case 41:
		p.EnterOuterAlt(localctx, 41)
		{
			p.SetState(3144)
			p.Drop_view_stmt()
		}

	}

	return localctx
}

// IDrop_access_method_stmtContext is an interface to support dynamic dispatch.
type IDrop_access_method_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsDrop_access_method_stmtContext differentiates from other interfaces.
	IsDrop_access_method_stmtContext()
}

type Drop_access_method_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyDrop_access_method_stmtContext() *Drop_access_method_stmtContext {
	var p = new(Drop_access_method_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_access_method_stmt
	return p
}

func (*Drop_access_method_stmtContext) IsDrop_access_method_stmtContext() {}

func NewDrop_access_method_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_access_method_stmtContext {
	var p = new(Drop_access_method_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_access_method_stmt

	return p
}

func (s *Drop_access_method_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_access_method_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Drop_access_method_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Drop_access_method_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_access_method_stmtContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserACCESS, 0)
}

func (s *Drop_access_method_stmtContext) METHOD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMETHOD, 0)
}

func (s *Drop_access_method_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_access_method_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_access_method_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_access_method_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_access_method_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_access_method_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_access_method_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_access_method_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_access_method_stmt(s)
	}
}

func (s *Drop_access_method_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_access_method_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_access_method_stmt() (localctx IDrop_access_method_stmtContext) {
	localctx = NewDrop_access_method_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, PostgreSQLParserRULE_drop_access_method_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3147)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3148)
		p.Match(PostgreSQLParserACCESS)
	}
	{
		p.SetState(3149)
		p.Match(PostgreSQLParserMETHOD)
	}
	p.SetState(3152)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3150)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3151)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3154)

		var _x = p.identifier(0)

		localctx.(*Drop_access_method_stmtContext).name = _x
	}
	p.SetState(3156)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3155)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_aggregate_stmtContext is an interface to support dynamic dispatch.
type IDrop_aggregate_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsDrop_aggregate_stmtContext differentiates from other interfaces.
	IsDrop_aggregate_stmtContext()
}

type Drop_aggregate_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyDrop_aggregate_stmtContext() *Drop_aggregate_stmtContext {
	var p = new(Drop_aggregate_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_aggregate_stmt
	return p
}

func (*Drop_aggregate_stmtContext) IsDrop_aggregate_stmtContext() {}

func NewDrop_aggregate_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_aggregate_stmtContext {
	var p = new(Drop_aggregate_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_aggregate_stmt

	return p
}

func (s *Drop_aggregate_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_aggregate_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Drop_aggregate_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Drop_aggregate_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_aggregate_stmtContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAGGREGATE, 0)
}

func (s *Drop_aggregate_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Drop_aggregate_stmtContext) Aggregate_signature() IAggregate_signatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAggregate_signatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAggregate_signatureContext)
}

func (s *Drop_aggregate_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Drop_aggregate_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_aggregate_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_aggregate_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_aggregate_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_aggregate_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_aggregate_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_aggregate_stmt(s)
	}
}

func (s *Drop_aggregate_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_aggregate_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_aggregate_stmt() (localctx IDrop_aggregate_stmtContext) {
	localctx = NewDrop_aggregate_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, PostgreSQLParserRULE_drop_aggregate_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3158)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3159)
		p.Match(PostgreSQLParserAGGREGATE)
	}
	p.SetState(3162)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3160)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3161)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3164)

		var _x = p.identifier(0)

		localctx.(*Drop_aggregate_stmtContext).name = _x
	}
	{
		p.SetState(3165)
		p.Match(PostgreSQLParserOPEN_PAREN)
	}
	{
		p.SetState(3166)
		p.Aggregate_signature()
	}
	{
		p.SetState(3167)
		p.Match(PostgreSQLParserCLOSE_PAREN)
	}

	return localctx
}

// IDrop_cast_stmtContext is an interface to support dynamic dispatch.
type IDrop_cast_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSource_type returns the source_type rule contexts.
	GetSource_type() IData_typeContext

	// GetTarget_type returns the target_type rule contexts.
	GetTarget_type() IIdentifierContext

	// SetSource_type sets the source_type rule contexts.
	SetSource_type(IData_typeContext)

	// SetTarget_type sets the target_type rule contexts.
	SetTarget_type(IIdentifierContext)

	// IsDrop_cast_stmtContext differentiates from other interfaces.
	IsDrop_cast_stmtContext()
}

type Drop_cast_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	source_type IData_typeContext
	target_type IIdentifierContext
}

func NewEmptyDrop_cast_stmtContext() *Drop_cast_stmtContext {
	var p = new(Drop_cast_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_cast_stmt
	return p
}

func (*Drop_cast_stmtContext) IsDrop_cast_stmtContext() {}

func NewDrop_cast_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_cast_stmtContext {
	var p = new(Drop_cast_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_cast_stmt

	return p
}

func (s *Drop_cast_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_cast_stmtContext) GetSource_type() IData_typeContext { return s.source_type }

func (s *Drop_cast_stmtContext) GetTarget_type() IIdentifierContext { return s.target_type }

func (s *Drop_cast_stmtContext) SetSource_type(v IData_typeContext) { s.source_type = v }

func (s *Drop_cast_stmtContext) SetTarget_type(v IIdentifierContext) { s.target_type = v }

func (s *Drop_cast_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_cast_stmtContext) CAST() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCAST, 0)
}

func (s *Drop_cast_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Drop_cast_stmtContext) AS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAS, 0)
}

func (s *Drop_cast_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Drop_cast_stmtContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Drop_cast_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_cast_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_cast_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_cast_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_cast_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_cast_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_cast_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_cast_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_cast_stmt(s)
	}
}

func (s *Drop_cast_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_cast_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_cast_stmt() (localctx IDrop_cast_stmtContext) {
	localctx = NewDrop_cast_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, PostgreSQLParserRULE_drop_cast_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3169)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3170)
		p.Match(PostgreSQLParserCAST)
	}
	p.SetState(3173)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3171)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3172)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3175)
		p.Match(PostgreSQLParserOPEN_PAREN)
	}
	{
		p.SetState(3176)

		var _x = p.Data_type()

		localctx.(*Drop_cast_stmtContext).source_type = _x
	}
	{
		p.SetState(3177)
		p.Match(PostgreSQLParserAS)
	}
	{
		p.SetState(3178)

		var _x = p.identifier(0)

		localctx.(*Drop_cast_stmtContext).target_type = _x
	}
	{
		p.SetState(3179)
		p.Match(PostgreSQLParserCLOSE_PAREN)
	}
	p.SetState(3181)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3180)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_collation_stmtContext is an interface to support dynamic dispatch.
type IDrop_collation_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNames returns the names rule contexts.
	GetNames() IIdentifier_listContext

	// SetNames sets the names rule contexts.
	SetNames(IIdentifier_listContext)

	// IsDrop_collation_stmtContext differentiates from other interfaces.
	IsDrop_collation_stmtContext()
}

type Drop_collation_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	names  IIdentifier_listContext
}

func NewEmptyDrop_collation_stmtContext() *Drop_collation_stmtContext {
	var p = new(Drop_collation_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_collation_stmt
	return p
}

func (*Drop_collation_stmtContext) IsDrop_collation_stmtContext() {}

func NewDrop_collation_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_collation_stmtContext {
	var p = new(Drop_collation_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_collation_stmt

	return p
}

func (s *Drop_collation_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_collation_stmtContext) GetNames() IIdentifier_listContext { return s.names }

func (s *Drop_collation_stmtContext) SetNames(v IIdentifier_listContext) { s.names = v }

func (s *Drop_collation_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_collation_stmtContext) COLLATION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOLLATION, 0)
}

func (s *Drop_collation_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Drop_collation_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_collation_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_collation_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_collation_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_collation_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_collation_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_collation_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_collation_stmt(s)
	}
}

func (s *Drop_collation_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_collation_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_collation_stmt() (localctx IDrop_collation_stmtContext) {
	localctx = NewDrop_collation_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, PostgreSQLParserRULE_drop_collation_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3183)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3184)
		p.Match(PostgreSQLParserCOLLATION)
	}
	p.SetState(3187)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3185)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3186)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3189)

		var _x = p.Identifier_list()

		localctx.(*Drop_collation_stmtContext).names = _x
	}
	p.SetState(3191)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3190)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_conversion_stmtContext is an interface to support dynamic dispatch.
type IDrop_conversion_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsDrop_conversion_stmtContext differentiates from other interfaces.
	IsDrop_conversion_stmtContext()
}

type Drop_conversion_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyDrop_conversion_stmtContext() *Drop_conversion_stmtContext {
	var p = new(Drop_conversion_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_conversion_stmt
	return p
}

func (*Drop_conversion_stmtContext) IsDrop_conversion_stmtContext() {}

func NewDrop_conversion_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_conversion_stmtContext {
	var p = new(Drop_conversion_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_conversion_stmt

	return p
}

func (s *Drop_conversion_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_conversion_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Drop_conversion_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Drop_conversion_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_conversion_stmtContext) CONVERSION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONVERSION, 0)
}

func (s *Drop_conversion_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_conversion_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_conversion_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_conversion_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_conversion_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_conversion_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_conversion_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_conversion_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_conversion_stmt(s)
	}
}

func (s *Drop_conversion_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_conversion_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_conversion_stmt() (localctx IDrop_conversion_stmtContext) {
	localctx = NewDrop_conversion_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, PostgreSQLParserRULE_drop_conversion_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3193)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3194)
		p.Match(PostgreSQLParserCONVERSION)
	}
	p.SetState(3197)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3195)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3196)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3199)

		var _x = p.identifier(0)

		localctx.(*Drop_conversion_stmtContext).name = _x
	}
	p.SetState(3201)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3200)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_database_stmtContext is an interface to support dynamic dispatch.
type IDrop_database_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsDrop_database_stmtContext differentiates from other interfaces.
	IsDrop_database_stmtContext()
}

type Drop_database_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyDrop_database_stmtContext() *Drop_database_stmtContext {
	var p = new(Drop_database_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_database_stmt
	return p
}

func (*Drop_database_stmtContext) IsDrop_database_stmtContext() {}

func NewDrop_database_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_database_stmtContext {
	var p = new(Drop_database_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_database_stmt

	return p
}

func (s *Drop_database_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_database_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Drop_database_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Drop_database_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_database_stmtContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDATABASE, 0)
}

func (s *Drop_database_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_database_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_database_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_database_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_database_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_database_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_database_stmt(s)
	}
}

func (s *Drop_database_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_database_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_database_stmt() (localctx IDrop_database_stmtContext) {
	localctx = NewDrop_database_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, PostgreSQLParserRULE_drop_database_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3203)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3204)
		p.Match(PostgreSQLParserDATABASE)
	}
	p.SetState(3207)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3205)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3206)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3209)

		var _x = p.identifier(0)

		localctx.(*Drop_database_stmtContext).name = _x
	}

	return localctx
}

// IDrop_domain_stmtContext is an interface to support dynamic dispatch.
type IDrop_domain_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNames returns the names rule contexts.
	GetNames() IIdentifier_listContext

	// SetNames sets the names rule contexts.
	SetNames(IIdentifier_listContext)

	// IsDrop_domain_stmtContext differentiates from other interfaces.
	IsDrop_domain_stmtContext()
}

type Drop_domain_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	names  IIdentifier_listContext
}

func NewEmptyDrop_domain_stmtContext() *Drop_domain_stmtContext {
	var p = new(Drop_domain_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_domain_stmt
	return p
}

func (*Drop_domain_stmtContext) IsDrop_domain_stmtContext() {}

func NewDrop_domain_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_domain_stmtContext {
	var p = new(Drop_domain_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_domain_stmt

	return p
}

func (s *Drop_domain_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_domain_stmtContext) GetNames() IIdentifier_listContext { return s.names }

func (s *Drop_domain_stmtContext) SetNames(v IIdentifier_listContext) { s.names = v }

func (s *Drop_domain_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_domain_stmtContext) DOMAIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDOMAIN, 0)
}

func (s *Drop_domain_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Drop_domain_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_domain_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_domain_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_domain_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_domain_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_domain_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_domain_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_domain_stmt(s)
	}
}

func (s *Drop_domain_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_domain_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_domain_stmt() (localctx IDrop_domain_stmtContext) {
	localctx = NewDrop_domain_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, PostgreSQLParserRULE_drop_domain_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3211)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3212)
		p.Match(PostgreSQLParserDOMAIN)
	}
	p.SetState(3215)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3213)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3214)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3217)

		var _x = p.Identifier_list()

		localctx.(*Drop_domain_stmtContext).names = _x
	}
	p.SetState(3219)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3218)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_event_trigger_stmtContext is an interface to support dynamic dispatch.
type IDrop_event_trigger_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsDrop_event_trigger_stmtContext differentiates from other interfaces.
	IsDrop_event_trigger_stmtContext()
}

type Drop_event_trigger_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyDrop_event_trigger_stmtContext() *Drop_event_trigger_stmtContext {
	var p = new(Drop_event_trigger_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_event_trigger_stmt
	return p
}

func (*Drop_event_trigger_stmtContext) IsDrop_event_trigger_stmtContext() {}

func NewDrop_event_trigger_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_event_trigger_stmtContext {
	var p = new(Drop_event_trigger_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_event_trigger_stmt

	return p
}

func (s *Drop_event_trigger_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_event_trigger_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Drop_event_trigger_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Drop_event_trigger_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_event_trigger_stmtContext) EVENT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEVENT, 0)
}

func (s *Drop_event_trigger_stmtContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRIGGER, 0)
}

func (s *Drop_event_trigger_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_event_trigger_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_event_trigger_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_event_trigger_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_event_trigger_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_event_trigger_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_event_trigger_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_event_trigger_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_event_trigger_stmt(s)
	}
}

func (s *Drop_event_trigger_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_event_trigger_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_event_trigger_stmt() (localctx IDrop_event_trigger_stmtContext) {
	localctx = NewDrop_event_trigger_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, PostgreSQLParserRULE_drop_event_trigger_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3221)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3222)
		p.Match(PostgreSQLParserEVENT)
	}
	{
		p.SetState(3223)
		p.Match(PostgreSQLParserTRIGGER)
	}
	p.SetState(3226)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3224)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3225)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3228)

		var _x = p.identifier(0)

		localctx.(*Drop_event_trigger_stmtContext).name = _x
	}
	p.SetState(3230)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3229)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_extension_stmtContext is an interface to support dynamic dispatch.
type IDrop_extension_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNames returns the names rule contexts.
	GetNames() IIdentifier_listContext

	// SetNames sets the names rule contexts.
	SetNames(IIdentifier_listContext)

	// IsDrop_extension_stmtContext differentiates from other interfaces.
	IsDrop_extension_stmtContext()
}

type Drop_extension_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	names  IIdentifier_listContext
}

func NewEmptyDrop_extension_stmtContext() *Drop_extension_stmtContext {
	var p = new(Drop_extension_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_extension_stmt
	return p
}

func (*Drop_extension_stmtContext) IsDrop_extension_stmtContext() {}

func NewDrop_extension_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_extension_stmtContext {
	var p = new(Drop_extension_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_extension_stmt

	return p
}

func (s *Drop_extension_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_extension_stmtContext) GetNames() IIdentifier_listContext { return s.names }

func (s *Drop_extension_stmtContext) SetNames(v IIdentifier_listContext) { s.names = v }

func (s *Drop_extension_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_extension_stmtContext) EXTENSION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXTENSION, 0)
}

func (s *Drop_extension_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Drop_extension_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_extension_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_extension_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_extension_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_extension_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_extension_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_extension_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_extension_stmt(s)
	}
}

func (s *Drop_extension_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_extension_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_extension_stmt() (localctx IDrop_extension_stmtContext) {
	localctx = NewDrop_extension_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, PostgreSQLParserRULE_drop_extension_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3232)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3233)
		p.Match(PostgreSQLParserEXTENSION)
	}
	p.SetState(3236)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3234)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3235)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3238)

		var _x = p.Identifier_list()

		localctx.(*Drop_extension_stmtContext).names = _x
	}
	p.SetState(3240)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3239)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_foreign_data_wrapper_stmtContext is an interface to support dynamic dispatch.
type IDrop_foreign_data_wrapper_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNames returns the names rule contexts.
	GetNames() IIdentifier_listContext

	// SetNames sets the names rule contexts.
	SetNames(IIdentifier_listContext)

	// IsDrop_foreign_data_wrapper_stmtContext differentiates from other interfaces.
	IsDrop_foreign_data_wrapper_stmtContext()
}

type Drop_foreign_data_wrapper_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	names  IIdentifier_listContext
}

func NewEmptyDrop_foreign_data_wrapper_stmtContext() *Drop_foreign_data_wrapper_stmtContext {
	var p = new(Drop_foreign_data_wrapper_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_foreign_data_wrapper_stmt
	return p
}

func (*Drop_foreign_data_wrapper_stmtContext) IsDrop_foreign_data_wrapper_stmtContext() {}

func NewDrop_foreign_data_wrapper_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_foreign_data_wrapper_stmtContext {
	var p = new(Drop_foreign_data_wrapper_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_foreign_data_wrapper_stmt

	return p
}

func (s *Drop_foreign_data_wrapper_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_foreign_data_wrapper_stmtContext) GetNames() IIdentifier_listContext { return s.names }

func (s *Drop_foreign_data_wrapper_stmtContext) SetNames(v IIdentifier_listContext) { s.names = v }

func (s *Drop_foreign_data_wrapper_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_foreign_data_wrapper_stmtContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOREIGN, 0)
}

func (s *Drop_foreign_data_wrapper_stmtContext) DATA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDATA, 0)
}

func (s *Drop_foreign_data_wrapper_stmtContext) WRAPPER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWRAPPER, 0)
}

func (s *Drop_foreign_data_wrapper_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Drop_foreign_data_wrapper_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_foreign_data_wrapper_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_foreign_data_wrapper_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_foreign_data_wrapper_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_foreign_data_wrapper_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_foreign_data_wrapper_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_foreign_data_wrapper_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_foreign_data_wrapper_stmt(s)
	}
}

func (s *Drop_foreign_data_wrapper_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_foreign_data_wrapper_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_foreign_data_wrapper_stmt() (localctx IDrop_foreign_data_wrapper_stmtContext) {
	localctx = NewDrop_foreign_data_wrapper_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, PostgreSQLParserRULE_drop_foreign_data_wrapper_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3242)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3243)
		p.Match(PostgreSQLParserFOREIGN)
	}
	{
		p.SetState(3244)
		p.Match(PostgreSQLParserDATA)
	}
	{
		p.SetState(3245)
		p.Match(PostgreSQLParserWRAPPER)
	}
	p.SetState(3248)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3246)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3247)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3250)

		var _x = p.Identifier_list()

		localctx.(*Drop_foreign_data_wrapper_stmtContext).names = _x
	}
	p.SetState(3252)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3251)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_foreign_table_stmtContext is an interface to support dynamic dispatch.
type IDrop_foreign_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNames returns the names rule contexts.
	GetNames() IIdentifier_listContext

	// SetNames sets the names rule contexts.
	SetNames(IIdentifier_listContext)

	// IsDrop_foreign_table_stmtContext differentiates from other interfaces.
	IsDrop_foreign_table_stmtContext()
}

type Drop_foreign_table_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	names  IIdentifier_listContext
}

func NewEmptyDrop_foreign_table_stmtContext() *Drop_foreign_table_stmtContext {
	var p = new(Drop_foreign_table_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_foreign_table_stmt
	return p
}

func (*Drop_foreign_table_stmtContext) IsDrop_foreign_table_stmtContext() {}

func NewDrop_foreign_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_foreign_table_stmtContext {
	var p = new(Drop_foreign_table_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_foreign_table_stmt

	return p
}

func (s *Drop_foreign_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_foreign_table_stmtContext) GetNames() IIdentifier_listContext { return s.names }

func (s *Drop_foreign_table_stmtContext) SetNames(v IIdentifier_listContext) { s.names = v }

func (s *Drop_foreign_table_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_foreign_table_stmtContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOREIGN, 0)
}

func (s *Drop_foreign_table_stmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLE, 0)
}

func (s *Drop_foreign_table_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Drop_foreign_table_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_foreign_table_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_foreign_table_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_foreign_table_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_foreign_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_foreign_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_foreign_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_foreign_table_stmt(s)
	}
}

func (s *Drop_foreign_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_foreign_table_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_foreign_table_stmt() (localctx IDrop_foreign_table_stmtContext) {
	localctx = NewDrop_foreign_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, PostgreSQLParserRULE_drop_foreign_table_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3254)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3255)
		p.Match(PostgreSQLParserFOREIGN)
	}
	{
		p.SetState(3256)
		p.Match(PostgreSQLParserTABLE)
	}
	p.SetState(3259)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3257)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3258)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3261)

		var _x = p.Identifier_list()

		localctx.(*Drop_foreign_table_stmtContext).names = _x
	}
	p.SetState(3263)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3262)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_function_stmtContext is an interface to support dynamic dispatch.
type IDrop_function_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFunctions returns the functions rule contexts.
	GetFunctions() IFunc_sig_listContext

	// SetFunctions sets the functions rule contexts.
	SetFunctions(IFunc_sig_listContext)

	// IsDrop_function_stmtContext differentiates from other interfaces.
	IsDrop_function_stmtContext()
}

type Drop_function_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	functions IFunc_sig_listContext
}

func NewEmptyDrop_function_stmtContext() *Drop_function_stmtContext {
	var p = new(Drop_function_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_function_stmt
	return p
}

func (*Drop_function_stmtContext) IsDrop_function_stmtContext() {}

func NewDrop_function_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_function_stmtContext {
	var p = new(Drop_function_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_function_stmt

	return p
}

func (s *Drop_function_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_function_stmtContext) GetFunctions() IFunc_sig_listContext { return s.functions }

func (s *Drop_function_stmtContext) SetFunctions(v IFunc_sig_listContext) { s.functions = v }

func (s *Drop_function_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_function_stmtContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFUNCTION, 0)
}

func (s *Drop_function_stmtContext) Func_sig_list() IFunc_sig_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_sig_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_sig_listContext)
}

func (s *Drop_function_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_function_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_function_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_function_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_function_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_function_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_function_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_function_stmt(s)
	}
}

func (s *Drop_function_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_function_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_function_stmt() (localctx IDrop_function_stmtContext) {
	localctx = NewDrop_function_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, PostgreSQLParserRULE_drop_function_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3265)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3266)
		p.Match(PostgreSQLParserFUNCTION)
	}
	p.SetState(3269)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3267)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3268)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3271)

		var _x = p.Func_sig_list()

		localctx.(*Drop_function_stmtContext).functions = _x
	}
	p.SetState(3273)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3272)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_group_stmtContext is an interface to support dynamic dispatch.
type IDrop_group_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNames returns the names rule contexts.
	GetNames() IIdentifier_listContext

	// SetNames sets the names rule contexts.
	SetNames(IIdentifier_listContext)

	// IsDrop_group_stmtContext differentiates from other interfaces.
	IsDrop_group_stmtContext()
}

type Drop_group_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	names  IIdentifier_listContext
}

func NewEmptyDrop_group_stmtContext() *Drop_group_stmtContext {
	var p = new(Drop_group_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_group_stmt
	return p
}

func (*Drop_group_stmtContext) IsDrop_group_stmtContext() {}

func NewDrop_group_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_group_stmtContext {
	var p = new(Drop_group_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_group_stmt

	return p
}

func (s *Drop_group_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_group_stmtContext) GetNames() IIdentifier_listContext { return s.names }

func (s *Drop_group_stmtContext) SetNames(v IIdentifier_listContext) { s.names = v }

func (s *Drop_group_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_group_stmtContext) GROUP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGROUP, 0)
}

func (s *Drop_group_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Drop_group_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_group_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_group_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_group_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_group_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_group_stmt(s)
	}
}

func (s *Drop_group_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_group_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_group_stmt() (localctx IDrop_group_stmtContext) {
	localctx = NewDrop_group_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, PostgreSQLParserRULE_drop_group_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3275)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3276)
		p.Match(PostgreSQLParserGROUP)
	}
	p.SetState(3279)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3277)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3278)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3281)

		var _x = p.Identifier_list()

		localctx.(*Drop_group_stmtContext).names = _x
	}

	return localctx
}

// IDrop_index_stmtContext is an interface to support dynamic dispatch.
type IDrop_index_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNames returns the names rule contexts.
	GetNames() IName_listContext

	// SetNames sets the names rule contexts.
	SetNames(IName_listContext)

	// IsDrop_index_stmtContext differentiates from other interfaces.
	IsDrop_index_stmtContext()
}

type Drop_index_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	names  IName_listContext
}

func NewEmptyDrop_index_stmtContext() *Drop_index_stmtContext {
	var p = new(Drop_index_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_index_stmt
	return p
}

func (*Drop_index_stmtContext) IsDrop_index_stmtContext() {}

func NewDrop_index_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_index_stmtContext {
	var p = new(Drop_index_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_index_stmt

	return p
}

func (s *Drop_index_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_index_stmtContext) GetNames() IName_listContext { return s.names }

func (s *Drop_index_stmtContext) SetNames(v IName_listContext) { s.names = v }

func (s *Drop_index_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_index_stmtContext) INDEX() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINDEX, 0)
}

func (s *Drop_index_stmtContext) Name_list() IName_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_listContext)
}

func (s *Drop_index_stmtContext) CONCURRENTLY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONCURRENTLY, 0)
}

func (s *Drop_index_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_index_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_index_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_index_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_index_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_index_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_index_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_index_stmt(s)
	}
}

func (s *Drop_index_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_index_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_index_stmt() (localctx IDrop_index_stmtContext) {
	localctx = NewDrop_index_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, PostgreSQLParserRULE_drop_index_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3283)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3284)
		p.Match(PostgreSQLParserINDEX)
	}
	p.SetState(3286)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCONCURRENTLY {
		{
			p.SetState(3285)
			p.Match(PostgreSQLParserCONCURRENTLY)
		}

	}
	p.SetState(3290)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3288)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3289)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3292)

		var _x = p.Name_list()

		localctx.(*Drop_index_stmtContext).names = _x
	}
	p.SetState(3294)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3293)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_language_stmtContext is an interface to support dynamic dispatch.
type IDrop_language_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsDrop_language_stmtContext differentiates from other interfaces.
	IsDrop_language_stmtContext()
}

type Drop_language_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyDrop_language_stmtContext() *Drop_language_stmtContext {
	var p = new(Drop_language_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_language_stmt
	return p
}

func (*Drop_language_stmtContext) IsDrop_language_stmtContext() {}

func NewDrop_language_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_language_stmtContext {
	var p = new(Drop_language_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_language_stmt

	return p
}

func (s *Drop_language_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_language_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Drop_language_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Drop_language_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_language_stmtContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLANGUAGE, 0)
}

func (s *Drop_language_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_language_stmtContext) PROCEDURAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPROCEDURAL, 0)
}

func (s *Drop_language_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_language_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_language_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_language_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_language_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_language_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_language_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_language_stmt(s)
	}
}

func (s *Drop_language_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_language_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_language_stmt() (localctx IDrop_language_stmtContext) {
	localctx = NewDrop_language_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, PostgreSQLParserRULE_drop_language_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3296)
		p.Match(PostgreSQLParserDROP)
	}
	p.SetState(3298)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserPROCEDURAL {
		{
			p.SetState(3297)
			p.Match(PostgreSQLParserPROCEDURAL)
		}

	}
	{
		p.SetState(3300)
		p.Match(PostgreSQLParserLANGUAGE)
	}
	p.SetState(3303)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3301)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3302)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3305)

		var _x = p.identifier(0)

		localctx.(*Drop_language_stmtContext).name = _x
	}
	p.SetState(3307)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3306)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_materialized_view_stmtContext is an interface to support dynamic dispatch.
type IDrop_materialized_view_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNames returns the names rule contexts.
	GetNames() IIdentifier_listContext

	// SetNames sets the names rule contexts.
	SetNames(IIdentifier_listContext)

	// IsDrop_materialized_view_stmtContext differentiates from other interfaces.
	IsDrop_materialized_view_stmtContext()
}

type Drop_materialized_view_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	names  IIdentifier_listContext
}

func NewEmptyDrop_materialized_view_stmtContext() *Drop_materialized_view_stmtContext {
	var p = new(Drop_materialized_view_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_materialized_view_stmt
	return p
}

func (*Drop_materialized_view_stmtContext) IsDrop_materialized_view_stmtContext() {}

func NewDrop_materialized_view_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_materialized_view_stmtContext {
	var p = new(Drop_materialized_view_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_materialized_view_stmt

	return p
}

func (s *Drop_materialized_view_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_materialized_view_stmtContext) GetNames() IIdentifier_listContext { return s.names }

func (s *Drop_materialized_view_stmtContext) SetNames(v IIdentifier_listContext) { s.names = v }

func (s *Drop_materialized_view_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_materialized_view_stmtContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMATERIALIZED, 0)
}

func (s *Drop_materialized_view_stmtContext) VIEW() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVIEW, 0)
}

func (s *Drop_materialized_view_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Drop_materialized_view_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_materialized_view_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_materialized_view_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_materialized_view_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_materialized_view_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_materialized_view_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_materialized_view_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_materialized_view_stmt(s)
	}
}

func (s *Drop_materialized_view_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_materialized_view_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_materialized_view_stmt() (localctx IDrop_materialized_view_stmtContext) {
	localctx = NewDrop_materialized_view_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, PostgreSQLParserRULE_drop_materialized_view_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3309)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3310)
		p.Match(PostgreSQLParserMATERIALIZED)
	}
	{
		p.SetState(3311)
		p.Match(PostgreSQLParserVIEW)
	}
	p.SetState(3314)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3312)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3313)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3316)

		var _x = p.Identifier_list()

		localctx.(*Drop_materialized_view_stmtContext).names = _x
	}
	p.SetState(3318)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3317)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_operator_stmtContext is an interface to support dynamic dispatch.
type IDrop_operator_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_operator_stmtContext differentiates from other interfaces.
	IsDrop_operator_stmtContext()
}

type Drop_operator_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_operator_stmtContext() *Drop_operator_stmtContext {
	var p = new(Drop_operator_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_operator_stmt
	return p
}

func (*Drop_operator_stmtContext) IsDrop_operator_stmtContext() {}

func NewDrop_operator_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_operator_stmtContext {
	var p = new(Drop_operator_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_operator_stmt

	return p
}

func (s *Drop_operator_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_operator_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Drop_operator_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_operator_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_operator_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_operator_stmt(s)
	}
}

func (s *Drop_operator_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_operator_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_operator_stmt() (localctx IDrop_operator_stmtContext) {
	localctx = NewDrop_operator_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, PostgreSQLParserRULE_drop_operator_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3320)
		p.Todo_implement()
	}

	return localctx
}

// IDrop_operator_class_stmtContext is an interface to support dynamic dispatch.
type IDrop_operator_class_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsDrop_operator_class_stmtContext differentiates from other interfaces.
	IsDrop_operator_class_stmtContext()
}

type Drop_operator_class_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyDrop_operator_class_stmtContext() *Drop_operator_class_stmtContext {
	var p = new(Drop_operator_class_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_operator_class_stmt
	return p
}

func (*Drop_operator_class_stmtContext) IsDrop_operator_class_stmtContext() {}

func NewDrop_operator_class_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_operator_class_stmtContext {
	var p = new(Drop_operator_class_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_operator_class_stmt

	return p
}

func (s *Drop_operator_class_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_operator_class_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Drop_operator_class_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Drop_operator_class_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_operator_class_stmtContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPERATOR, 0)
}

func (s *Drop_operator_class_stmtContext) CLASS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLASS, 0)
}

func (s *Drop_operator_class_stmtContext) USING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSING, 0)
}

func (s *Drop_operator_class_stmtContext) Index_method() IIndex_methodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_methodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_methodContext)
}

func (s *Drop_operator_class_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_operator_class_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_operator_class_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_operator_class_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_operator_class_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_operator_class_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_operator_class_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_operator_class_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_operator_class_stmt(s)
	}
}

func (s *Drop_operator_class_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_operator_class_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_operator_class_stmt() (localctx IDrop_operator_class_stmtContext) {
	localctx = NewDrop_operator_class_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, PostgreSQLParserRULE_drop_operator_class_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3322)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3323)
		p.Match(PostgreSQLParserOPERATOR)
	}
	{
		p.SetState(3324)
		p.Match(PostgreSQLParserCLASS)
	}
	p.SetState(3327)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3325)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3326)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3329)

		var _x = p.identifier(0)

		localctx.(*Drop_operator_class_stmtContext).name = _x
	}
	{
		p.SetState(3330)
		p.Match(PostgreSQLParserUSING)
	}
	{
		p.SetState(3331)
		p.Index_method()
	}
	p.SetState(3333)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3332)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_operator_family_stmtContext is an interface to support dynamic dispatch.
type IDrop_operator_family_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsDrop_operator_family_stmtContext differentiates from other interfaces.
	IsDrop_operator_family_stmtContext()
}

type Drop_operator_family_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyDrop_operator_family_stmtContext() *Drop_operator_family_stmtContext {
	var p = new(Drop_operator_family_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_operator_family_stmt
	return p
}

func (*Drop_operator_family_stmtContext) IsDrop_operator_family_stmtContext() {}

func NewDrop_operator_family_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_operator_family_stmtContext {
	var p = new(Drop_operator_family_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_operator_family_stmt

	return p
}

func (s *Drop_operator_family_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_operator_family_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Drop_operator_family_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Drop_operator_family_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_operator_family_stmtContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPERATOR, 0)
}

func (s *Drop_operator_family_stmtContext) FAMILY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFAMILY, 0)
}

func (s *Drop_operator_family_stmtContext) USING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSING, 0)
}

func (s *Drop_operator_family_stmtContext) Index_method() IIndex_methodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_methodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_methodContext)
}

func (s *Drop_operator_family_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_operator_family_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_operator_family_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_operator_family_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_operator_family_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_operator_family_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_operator_family_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_operator_family_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_operator_family_stmt(s)
	}
}

func (s *Drop_operator_family_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_operator_family_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_operator_family_stmt() (localctx IDrop_operator_family_stmtContext) {
	localctx = NewDrop_operator_family_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, PostgreSQLParserRULE_drop_operator_family_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3335)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3336)
		p.Match(PostgreSQLParserOPERATOR)
	}
	{
		p.SetState(3337)
		p.Match(PostgreSQLParserFAMILY)
	}
	p.SetState(3340)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3338)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3339)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3342)

		var _x = p.identifier(0)

		localctx.(*Drop_operator_family_stmtContext).name = _x
	}
	{
		p.SetState(3343)
		p.Match(PostgreSQLParserUSING)
	}
	{
		p.SetState(3344)
		p.Index_method()
	}
	p.SetState(3346)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3345)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_owned_stmtContext is an interface to support dynamic dispatch.
type IDrop_owned_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_owned_stmtContext differentiates from other interfaces.
	IsDrop_owned_stmtContext()
}

type Drop_owned_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_owned_stmtContext() *Drop_owned_stmtContext {
	var p = new(Drop_owned_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_owned_stmt
	return p
}

func (*Drop_owned_stmtContext) IsDrop_owned_stmtContext() {}

func NewDrop_owned_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_owned_stmtContext {
	var p = new(Drop_owned_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_owned_stmt

	return p
}

func (s *Drop_owned_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_owned_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_owned_stmtContext) OWNED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNED, 0)
}

func (s *Drop_owned_stmtContext) BY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBY, 0)
}

func (s *Drop_owned_stmtContext) Role_name_list() IRole_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRole_name_listContext)
}

func (s *Drop_owned_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_owned_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_owned_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_owned_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_owned_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_owned_stmt(s)
	}
}

func (s *Drop_owned_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_owned_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_owned_stmt() (localctx IDrop_owned_stmtContext) {
	localctx = NewDrop_owned_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, PostgreSQLParserRULE_drop_owned_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3348)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3349)
		p.Match(PostgreSQLParserOWNED)
	}
	{
		p.SetState(3350)
		p.Match(PostgreSQLParserBY)
	}
	{
		p.SetState(3351)
		p.Role_name_list()
	}
	p.SetState(3353)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3352)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_policy_stmtContext is an interface to support dynamic dispatch.
type IDrop_policy_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(IIdentifierContext)

	// IsDrop_policy_stmtContext differentiates from other interfaces.
	IsDrop_policy_stmtContext()
}

type Drop_policy_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	name       IIdentifierContext
	table_name IIdentifierContext
}

func NewEmptyDrop_policy_stmtContext() *Drop_policy_stmtContext {
	var p = new(Drop_policy_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_policy_stmt
	return p
}

func (*Drop_policy_stmtContext) IsDrop_policy_stmtContext() {}

func NewDrop_policy_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_policy_stmtContext {
	var p = new(Drop_policy_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_policy_stmt

	return p
}

func (s *Drop_policy_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_policy_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Drop_policy_stmtContext) GetTable_name() IIdentifierContext { return s.table_name }

func (s *Drop_policy_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Drop_policy_stmtContext) SetTable_name(v IIdentifierContext) { s.table_name = v }

func (s *Drop_policy_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_policy_stmtContext) POLICY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPOLICY, 0)
}

func (s *Drop_policy_stmtContext) ON() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserON, 0)
}

func (s *Drop_policy_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Drop_policy_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_policy_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_policy_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_policy_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_policy_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_policy_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_policy_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_policy_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_policy_stmt(s)
	}
}

func (s *Drop_policy_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_policy_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_policy_stmt() (localctx IDrop_policy_stmtContext) {
	localctx = NewDrop_policy_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, PostgreSQLParserRULE_drop_policy_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3355)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3356)
		p.Match(PostgreSQLParserPOLICY)
	}
	p.SetState(3359)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3357)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3358)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3361)

		var _x = p.identifier(0)

		localctx.(*Drop_policy_stmtContext).name = _x
	}
	{
		p.SetState(3362)
		p.Match(PostgreSQLParserON)
	}
	{
		p.SetState(3363)

		var _x = p.identifier(0)

		localctx.(*Drop_policy_stmtContext).table_name = _x
	}
	p.SetState(3365)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3364)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_publication_stmtContext is an interface to support dynamic dispatch.
type IDrop_publication_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNames returns the names rule contexts.
	GetNames() IIdentifier_listContext

	// SetNames sets the names rule contexts.
	SetNames(IIdentifier_listContext)

	// IsDrop_publication_stmtContext differentiates from other interfaces.
	IsDrop_publication_stmtContext()
}

type Drop_publication_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	names  IIdentifier_listContext
}

func NewEmptyDrop_publication_stmtContext() *Drop_publication_stmtContext {
	var p = new(Drop_publication_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_publication_stmt
	return p
}

func (*Drop_publication_stmtContext) IsDrop_publication_stmtContext() {}

func NewDrop_publication_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_publication_stmtContext {
	var p = new(Drop_publication_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_publication_stmt

	return p
}

func (s *Drop_publication_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_publication_stmtContext) GetNames() IIdentifier_listContext { return s.names }

func (s *Drop_publication_stmtContext) SetNames(v IIdentifier_listContext) { s.names = v }

func (s *Drop_publication_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_publication_stmtContext) PUBLICATION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPUBLICATION, 0)
}

func (s *Drop_publication_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Drop_publication_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_publication_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_publication_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_publication_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_publication_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_publication_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_publication_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_publication_stmt(s)
	}
}

func (s *Drop_publication_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_publication_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_publication_stmt() (localctx IDrop_publication_stmtContext) {
	localctx = NewDrop_publication_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, PostgreSQLParserRULE_drop_publication_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3367)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3368)
		p.Match(PostgreSQLParserPUBLICATION)
	}
	p.SetState(3371)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3369)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3370)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3373)

		var _x = p.Identifier_list()

		localctx.(*Drop_publication_stmtContext).names = _x
	}
	p.SetState(3375)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3374)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_role_stmtContext is an interface to support dynamic dispatch.
type IDrop_role_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNames returns the names rule contexts.
	GetNames() IIdentifier_listContext

	// SetNames sets the names rule contexts.
	SetNames(IIdentifier_listContext)

	// IsDrop_role_stmtContext differentiates from other interfaces.
	IsDrop_role_stmtContext()
}

type Drop_role_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	names  IIdentifier_listContext
}

func NewEmptyDrop_role_stmtContext() *Drop_role_stmtContext {
	var p = new(Drop_role_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_role_stmt
	return p
}

func (*Drop_role_stmtContext) IsDrop_role_stmtContext() {}

func NewDrop_role_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_role_stmtContext {
	var p = new(Drop_role_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_role_stmt

	return p
}

func (s *Drop_role_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_role_stmtContext) GetNames() IIdentifier_listContext { return s.names }

func (s *Drop_role_stmtContext) SetNames(v IIdentifier_listContext) { s.names = v }

func (s *Drop_role_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_role_stmtContext) ROLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROLE, 0)
}

func (s *Drop_role_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Drop_role_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_role_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_role_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_role_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_role_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_role_stmt(s)
	}
}

func (s *Drop_role_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_role_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_role_stmt() (localctx IDrop_role_stmtContext) {
	localctx = NewDrop_role_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, PostgreSQLParserRULE_drop_role_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3377)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3378)
		p.Match(PostgreSQLParserROLE)
	}
	p.SetState(3381)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3379)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3380)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3383)

		var _x = p.Identifier_list()

		localctx.(*Drop_role_stmtContext).names = _x
	}

	return localctx
}

// IDrop_rule_stmtContext is an interface to support dynamic dispatch.
type IDrop_rule_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IName_Context

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IName_Context)

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(IIdentifierContext)

	// IsDrop_rule_stmtContext differentiates from other interfaces.
	IsDrop_rule_stmtContext()
}

type Drop_rule_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	name       IName_Context
	table_name IIdentifierContext
}

func NewEmptyDrop_rule_stmtContext() *Drop_rule_stmtContext {
	var p = new(Drop_rule_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_rule_stmt
	return p
}

func (*Drop_rule_stmtContext) IsDrop_rule_stmtContext() {}

func NewDrop_rule_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_rule_stmtContext {
	var p = new(Drop_rule_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_rule_stmt

	return p
}

func (s *Drop_rule_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_rule_stmtContext) GetName() IName_Context { return s.name }

func (s *Drop_rule_stmtContext) GetTable_name() IIdentifierContext { return s.table_name }

func (s *Drop_rule_stmtContext) SetName(v IName_Context) { s.name = v }

func (s *Drop_rule_stmtContext) SetTable_name(v IIdentifierContext) { s.table_name = v }

func (s *Drop_rule_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_rule_stmtContext) RULE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRULE, 0)
}

func (s *Drop_rule_stmtContext) ON() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserON, 0)
}

func (s *Drop_rule_stmtContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Drop_rule_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_rule_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_rule_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_rule_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_rule_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_rule_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_rule_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_rule_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_rule_stmt(s)
	}
}

func (s *Drop_rule_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_rule_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_rule_stmt() (localctx IDrop_rule_stmtContext) {
	localctx = NewDrop_rule_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, PostgreSQLParserRULE_drop_rule_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3385)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3386)
		p.Match(PostgreSQLParserRULE)
	}
	p.SetState(3389)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3387)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3388)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3391)

		var _x = p.Name_()

		localctx.(*Drop_rule_stmtContext).name = _x
	}
	{
		p.SetState(3392)
		p.Match(PostgreSQLParserON)
	}
	{
		p.SetState(3393)

		var _x = p.identifier(0)

		localctx.(*Drop_rule_stmtContext).table_name = _x
	}
	p.SetState(3395)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3394)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_schema_stmtContext is an interface to support dynamic dispatch.
type IDrop_schema_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNames returns the names rule contexts.
	GetNames() IIdentifier_listContext

	// SetNames sets the names rule contexts.
	SetNames(IIdentifier_listContext)

	// IsDrop_schema_stmtContext differentiates from other interfaces.
	IsDrop_schema_stmtContext()
}

type Drop_schema_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	names  IIdentifier_listContext
}

func NewEmptyDrop_schema_stmtContext() *Drop_schema_stmtContext {
	var p = new(Drop_schema_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_schema_stmt
	return p
}

func (*Drop_schema_stmtContext) IsDrop_schema_stmtContext() {}

func NewDrop_schema_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_schema_stmtContext {
	var p = new(Drop_schema_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_schema_stmt

	return p
}

func (s *Drop_schema_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_schema_stmtContext) GetNames() IIdentifier_listContext { return s.names }

func (s *Drop_schema_stmtContext) SetNames(v IIdentifier_listContext) { s.names = v }

func (s *Drop_schema_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_schema_stmtContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCHEMA, 0)
}

func (s *Drop_schema_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Drop_schema_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_schema_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_schema_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_schema_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_schema_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_schema_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_schema_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_schema_stmt(s)
	}
}

func (s *Drop_schema_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_schema_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_schema_stmt() (localctx IDrop_schema_stmtContext) {
	localctx = NewDrop_schema_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, PostgreSQLParserRULE_drop_schema_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3397)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3398)
		p.Match(PostgreSQLParserSCHEMA)
	}
	p.SetState(3401)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3399)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3400)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3403)

		var _x = p.Identifier_list()

		localctx.(*Drop_schema_stmtContext).names = _x
	}
	p.SetState(3405)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3404)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_sequence_stmtContext is an interface to support dynamic dispatch.
type IDrop_sequence_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNames returns the names rule contexts.
	GetNames() IIdentifier_listContext

	// SetNames sets the names rule contexts.
	SetNames(IIdentifier_listContext)

	// IsDrop_sequence_stmtContext differentiates from other interfaces.
	IsDrop_sequence_stmtContext()
}

type Drop_sequence_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	names  IIdentifier_listContext
}

func NewEmptyDrop_sequence_stmtContext() *Drop_sequence_stmtContext {
	var p = new(Drop_sequence_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_sequence_stmt
	return p
}

func (*Drop_sequence_stmtContext) IsDrop_sequence_stmtContext() {}

func NewDrop_sequence_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_sequence_stmtContext {
	var p = new(Drop_sequence_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_sequence_stmt

	return p
}

func (s *Drop_sequence_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_sequence_stmtContext) GetNames() IIdentifier_listContext { return s.names }

func (s *Drop_sequence_stmtContext) SetNames(v IIdentifier_listContext) { s.names = v }

func (s *Drop_sequence_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_sequence_stmtContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSEQUENCE, 0)
}

func (s *Drop_sequence_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Drop_sequence_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_sequence_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_sequence_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_sequence_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_sequence_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_sequence_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_sequence_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_sequence_stmt(s)
	}
}

func (s *Drop_sequence_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_sequence_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_sequence_stmt() (localctx IDrop_sequence_stmtContext) {
	localctx = NewDrop_sequence_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, PostgreSQLParserRULE_drop_sequence_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3407)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3408)
		p.Match(PostgreSQLParserSEQUENCE)
	}
	p.SetState(3411)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3409)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3410)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3413)

		var _x = p.Identifier_list()

		localctx.(*Drop_sequence_stmtContext).names = _x
	}
	p.SetState(3415)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3414)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_server_stmtContext is an interface to support dynamic dispatch.
type IDrop_server_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNames returns the names rule contexts.
	GetNames() IIdentifier_listContext

	// SetNames sets the names rule contexts.
	SetNames(IIdentifier_listContext)

	// IsDrop_server_stmtContext differentiates from other interfaces.
	IsDrop_server_stmtContext()
}

type Drop_server_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	names  IIdentifier_listContext
}

func NewEmptyDrop_server_stmtContext() *Drop_server_stmtContext {
	var p = new(Drop_server_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_server_stmt
	return p
}

func (*Drop_server_stmtContext) IsDrop_server_stmtContext() {}

func NewDrop_server_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_server_stmtContext {
	var p = new(Drop_server_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_server_stmt

	return p
}

func (s *Drop_server_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_server_stmtContext) GetNames() IIdentifier_listContext { return s.names }

func (s *Drop_server_stmtContext) SetNames(v IIdentifier_listContext) { s.names = v }

func (s *Drop_server_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_server_stmtContext) SERVER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSERVER, 0)
}

func (s *Drop_server_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Drop_server_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_server_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_server_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_server_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_server_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_server_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_server_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_server_stmt(s)
	}
}

func (s *Drop_server_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_server_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_server_stmt() (localctx IDrop_server_stmtContext) {
	localctx = NewDrop_server_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, PostgreSQLParserRULE_drop_server_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3417)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3418)
		p.Match(PostgreSQLParserSERVER)
	}
	p.SetState(3421)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3419)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3420)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3423)

		var _x = p.Identifier_list()

		localctx.(*Drop_server_stmtContext).names = _x
	}
	p.SetState(3425)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3424)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_statistics_stmtContext is an interface to support dynamic dispatch.
type IDrop_statistics_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNames returns the names rule contexts.
	GetNames() IIdentifier_listContext

	// SetNames sets the names rule contexts.
	SetNames(IIdentifier_listContext)

	// IsDrop_statistics_stmtContext differentiates from other interfaces.
	IsDrop_statistics_stmtContext()
}

type Drop_statistics_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	names  IIdentifier_listContext
}

func NewEmptyDrop_statistics_stmtContext() *Drop_statistics_stmtContext {
	var p = new(Drop_statistics_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_statistics_stmt
	return p
}

func (*Drop_statistics_stmtContext) IsDrop_statistics_stmtContext() {}

func NewDrop_statistics_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_statistics_stmtContext {
	var p = new(Drop_statistics_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_statistics_stmt

	return p
}

func (s *Drop_statistics_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_statistics_stmtContext) GetNames() IIdentifier_listContext { return s.names }

func (s *Drop_statistics_stmtContext) SetNames(v IIdentifier_listContext) { s.names = v }

func (s *Drop_statistics_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_statistics_stmtContext) STATISTICS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTATISTICS, 0)
}

func (s *Drop_statistics_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Drop_statistics_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_statistics_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_statistics_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_statistics_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_statistics_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_statistics_stmt(s)
	}
}

func (s *Drop_statistics_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_statistics_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_statistics_stmt() (localctx IDrop_statistics_stmtContext) {
	localctx = NewDrop_statistics_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, PostgreSQLParserRULE_drop_statistics_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3427)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3428)
		p.Match(PostgreSQLParserSTATISTICS)
	}
	p.SetState(3431)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3429)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3430)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3433)

		var _x = p.Identifier_list()

		localctx.(*Drop_statistics_stmtContext).names = _x
	}

	return localctx
}

// IDrop_subscription_stmtContext is an interface to support dynamic dispatch.
type IDrop_subscription_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsDrop_subscription_stmtContext differentiates from other interfaces.
	IsDrop_subscription_stmtContext()
}

type Drop_subscription_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyDrop_subscription_stmtContext() *Drop_subscription_stmtContext {
	var p = new(Drop_subscription_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_subscription_stmt
	return p
}

func (*Drop_subscription_stmtContext) IsDrop_subscription_stmtContext() {}

func NewDrop_subscription_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_subscription_stmtContext {
	var p = new(Drop_subscription_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_subscription_stmt

	return p
}

func (s *Drop_subscription_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_subscription_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Drop_subscription_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Drop_subscription_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_subscription_stmtContext) SUBSCRIPTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSUBSCRIPTION, 0)
}

func (s *Drop_subscription_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_subscription_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_subscription_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_subscription_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_subscription_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_subscription_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_subscription_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_subscription_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_subscription_stmt(s)
	}
}

func (s *Drop_subscription_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_subscription_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_subscription_stmt() (localctx IDrop_subscription_stmtContext) {
	localctx = NewDrop_subscription_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, PostgreSQLParserRULE_drop_subscription_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3435)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3436)
		p.Match(PostgreSQLParserSUBSCRIPTION)
	}
	p.SetState(3439)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3437)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3438)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3441)

		var _x = p.identifier(0)

		localctx.(*Drop_subscription_stmtContext).name = _x
	}
	p.SetState(3443)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3442)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_table_stmtContext is an interface to support dynamic dispatch.
type IDrop_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNames returns the names rule contexts.
	GetNames() IIdentifier_listContext

	// SetNames sets the names rule contexts.
	SetNames(IIdentifier_listContext)

	// IsDrop_table_stmtContext differentiates from other interfaces.
	IsDrop_table_stmtContext()
}

type Drop_table_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	names  IIdentifier_listContext
}

func NewEmptyDrop_table_stmtContext() *Drop_table_stmtContext {
	var p = new(Drop_table_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_table_stmt
	return p
}

func (*Drop_table_stmtContext) IsDrop_table_stmtContext() {}

func NewDrop_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_table_stmtContext {
	var p = new(Drop_table_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_table_stmt

	return p
}

func (s *Drop_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_table_stmtContext) GetNames() IIdentifier_listContext { return s.names }

func (s *Drop_table_stmtContext) SetNames(v IIdentifier_listContext) { s.names = v }

func (s *Drop_table_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_table_stmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLE, 0)
}

func (s *Drop_table_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Drop_table_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_table_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_table_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_table_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_table_stmt(s)
	}
}

func (s *Drop_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_table_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_table_stmt() (localctx IDrop_table_stmtContext) {
	localctx = NewDrop_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, PostgreSQLParserRULE_drop_table_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3445)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3446)
		p.Match(PostgreSQLParserTABLE)
	}
	p.SetState(3449)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3447)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3448)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3451)

		var _x = p.Identifier_list()

		localctx.(*Drop_table_stmtContext).names = _x
	}
	p.SetState(3453)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3452)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_tablespace_stmtContext is an interface to support dynamic dispatch.
type IDrop_tablespace_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsDrop_tablespace_stmtContext differentiates from other interfaces.
	IsDrop_tablespace_stmtContext()
}

type Drop_tablespace_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyDrop_tablespace_stmtContext() *Drop_tablespace_stmtContext {
	var p = new(Drop_tablespace_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_tablespace_stmt
	return p
}

func (*Drop_tablespace_stmtContext) IsDrop_tablespace_stmtContext() {}

func NewDrop_tablespace_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_tablespace_stmtContext {
	var p = new(Drop_tablespace_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_tablespace_stmt

	return p
}

func (s *Drop_tablespace_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_tablespace_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Drop_tablespace_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Drop_tablespace_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_tablespace_stmtContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLESPACE, 0)
}

func (s *Drop_tablespace_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_tablespace_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_tablespace_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_tablespace_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_tablespace_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_tablespace_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_tablespace_stmt(s)
	}
}

func (s *Drop_tablespace_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_tablespace_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_tablespace_stmt() (localctx IDrop_tablespace_stmtContext) {
	localctx = NewDrop_tablespace_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, PostgreSQLParserRULE_drop_tablespace_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3455)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3456)
		p.Match(PostgreSQLParserTABLESPACE)
	}
	p.SetState(3459)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3457)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3458)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3461)

		var _x = p.identifier(0)

		localctx.(*Drop_tablespace_stmtContext).name = _x
	}

	return localctx
}

// IDrop_text_search_config_stmtContext is an interface to support dynamic dispatch.
type IDrop_text_search_config_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsDrop_text_search_config_stmtContext differentiates from other interfaces.
	IsDrop_text_search_config_stmtContext()
}

type Drop_text_search_config_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyDrop_text_search_config_stmtContext() *Drop_text_search_config_stmtContext {
	var p = new(Drop_text_search_config_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_text_search_config_stmt
	return p
}

func (*Drop_text_search_config_stmtContext) IsDrop_text_search_config_stmtContext() {}

func NewDrop_text_search_config_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_text_search_config_stmtContext {
	var p = new(Drop_text_search_config_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_text_search_config_stmt

	return p
}

func (s *Drop_text_search_config_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_text_search_config_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Drop_text_search_config_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Drop_text_search_config_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_text_search_config_stmtContext) TEXT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEXT, 0)
}

func (s *Drop_text_search_config_stmtContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSEARCH, 0)
}

func (s *Drop_text_search_config_stmtContext) CONFIGURATION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONFIGURATION, 0)
}

func (s *Drop_text_search_config_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_text_search_config_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_text_search_config_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_text_search_config_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_text_search_config_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_text_search_config_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_text_search_config_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_text_search_config_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_text_search_config_stmt(s)
	}
}

func (s *Drop_text_search_config_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_text_search_config_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_text_search_config_stmt() (localctx IDrop_text_search_config_stmtContext) {
	localctx = NewDrop_text_search_config_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, PostgreSQLParserRULE_drop_text_search_config_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3463)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3464)
		p.Match(PostgreSQLParserTEXT)
	}
	{
		p.SetState(3465)
		p.Match(PostgreSQLParserSEARCH)
	}
	{
		p.SetState(3466)
		p.Match(PostgreSQLParserCONFIGURATION)
	}
	p.SetState(3469)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3467)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3468)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3471)

		var _x = p.identifier(0)

		localctx.(*Drop_text_search_config_stmtContext).name = _x
	}
	p.SetState(3473)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3472)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_text_search_dict_stmtContext is an interface to support dynamic dispatch.
type IDrop_text_search_dict_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsDrop_text_search_dict_stmtContext differentiates from other interfaces.
	IsDrop_text_search_dict_stmtContext()
}

type Drop_text_search_dict_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyDrop_text_search_dict_stmtContext() *Drop_text_search_dict_stmtContext {
	var p = new(Drop_text_search_dict_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_text_search_dict_stmt
	return p
}

func (*Drop_text_search_dict_stmtContext) IsDrop_text_search_dict_stmtContext() {}

func NewDrop_text_search_dict_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_text_search_dict_stmtContext {
	var p = new(Drop_text_search_dict_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_text_search_dict_stmt

	return p
}

func (s *Drop_text_search_dict_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_text_search_dict_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Drop_text_search_dict_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Drop_text_search_dict_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_text_search_dict_stmtContext) TEXT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEXT, 0)
}

func (s *Drop_text_search_dict_stmtContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSEARCH, 0)
}

func (s *Drop_text_search_dict_stmtContext) DICTIONARY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDICTIONARY, 0)
}

func (s *Drop_text_search_dict_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_text_search_dict_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_text_search_dict_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_text_search_dict_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_text_search_dict_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_text_search_dict_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_text_search_dict_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_text_search_dict_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_text_search_dict_stmt(s)
	}
}

func (s *Drop_text_search_dict_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_text_search_dict_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_text_search_dict_stmt() (localctx IDrop_text_search_dict_stmtContext) {
	localctx = NewDrop_text_search_dict_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, PostgreSQLParserRULE_drop_text_search_dict_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3475)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3476)
		p.Match(PostgreSQLParserTEXT)
	}
	{
		p.SetState(3477)
		p.Match(PostgreSQLParserSEARCH)
	}
	{
		p.SetState(3478)
		p.Match(PostgreSQLParserDICTIONARY)
	}
	p.SetState(3481)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3479)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3480)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3483)

		var _x = p.identifier(0)

		localctx.(*Drop_text_search_dict_stmtContext).name = _x
	}
	p.SetState(3485)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3484)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_text_search_parser_stmtContext is an interface to support dynamic dispatch.
type IDrop_text_search_parser_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsDrop_text_search_parser_stmtContext differentiates from other interfaces.
	IsDrop_text_search_parser_stmtContext()
}

type Drop_text_search_parser_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyDrop_text_search_parser_stmtContext() *Drop_text_search_parser_stmtContext {
	var p = new(Drop_text_search_parser_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_text_search_parser_stmt
	return p
}

func (*Drop_text_search_parser_stmtContext) IsDrop_text_search_parser_stmtContext() {}

func NewDrop_text_search_parser_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_text_search_parser_stmtContext {
	var p = new(Drop_text_search_parser_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_text_search_parser_stmt

	return p
}

func (s *Drop_text_search_parser_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_text_search_parser_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Drop_text_search_parser_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Drop_text_search_parser_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_text_search_parser_stmtContext) TEXT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEXT, 0)
}

func (s *Drop_text_search_parser_stmtContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSEARCH, 0)
}

func (s *Drop_text_search_parser_stmtContext) PARSER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPARSER, 0)
}

func (s *Drop_text_search_parser_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_text_search_parser_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_text_search_parser_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_text_search_parser_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_text_search_parser_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_text_search_parser_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_text_search_parser_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_text_search_parser_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_text_search_parser_stmt(s)
	}
}

func (s *Drop_text_search_parser_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_text_search_parser_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_text_search_parser_stmt() (localctx IDrop_text_search_parser_stmtContext) {
	localctx = NewDrop_text_search_parser_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, PostgreSQLParserRULE_drop_text_search_parser_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3487)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3488)
		p.Match(PostgreSQLParserTEXT)
	}
	{
		p.SetState(3489)
		p.Match(PostgreSQLParserSEARCH)
	}
	{
		p.SetState(3490)
		p.Match(PostgreSQLParserPARSER)
	}
	p.SetState(3493)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3491)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3492)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3495)

		var _x = p.identifier(0)

		localctx.(*Drop_text_search_parser_stmtContext).name = _x
	}
	p.SetState(3497)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3496)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_text_search_template_stmtContext is an interface to support dynamic dispatch.
type IDrop_text_search_template_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsDrop_text_search_template_stmtContext differentiates from other interfaces.
	IsDrop_text_search_template_stmtContext()
}

type Drop_text_search_template_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyDrop_text_search_template_stmtContext() *Drop_text_search_template_stmtContext {
	var p = new(Drop_text_search_template_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_text_search_template_stmt
	return p
}

func (*Drop_text_search_template_stmtContext) IsDrop_text_search_template_stmtContext() {}

func NewDrop_text_search_template_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_text_search_template_stmtContext {
	var p = new(Drop_text_search_template_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_text_search_template_stmt

	return p
}

func (s *Drop_text_search_template_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_text_search_template_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Drop_text_search_template_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Drop_text_search_template_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_text_search_template_stmtContext) TEXT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEXT, 0)
}

func (s *Drop_text_search_template_stmtContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSEARCH, 0)
}

func (s *Drop_text_search_template_stmtContext) TEMPLATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEMPLATE, 0)
}

func (s *Drop_text_search_template_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_text_search_template_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_text_search_template_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_text_search_template_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_text_search_template_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_text_search_template_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_text_search_template_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_text_search_template_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_text_search_template_stmt(s)
	}
}

func (s *Drop_text_search_template_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_text_search_template_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_text_search_template_stmt() (localctx IDrop_text_search_template_stmtContext) {
	localctx = NewDrop_text_search_template_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, PostgreSQLParserRULE_drop_text_search_template_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3499)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3500)
		p.Match(PostgreSQLParserTEXT)
	}
	{
		p.SetState(3501)
		p.Match(PostgreSQLParserSEARCH)
	}
	{
		p.SetState(3502)
		p.Match(PostgreSQLParserTEMPLATE)
	}
	p.SetState(3505)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3503)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3504)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3507)

		var _x = p.identifier(0)

		localctx.(*Drop_text_search_template_stmtContext).name = _x
	}
	p.SetState(3509)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3508)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_transform_stmtContext is an interface to support dynamic dispatch.
type IDrop_transform_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetType_name_ returns the type_name_ rule contexts.
	GetType_name_() IIdentifierContext

	// GetLang_name returns the lang_name rule contexts.
	GetLang_name() IIdentifierContext

	// SetType_name_ sets the type_name_ rule contexts.
	SetType_name_(IIdentifierContext)

	// SetLang_name sets the lang_name rule contexts.
	SetLang_name(IIdentifierContext)

	// IsDrop_transform_stmtContext differentiates from other interfaces.
	IsDrop_transform_stmtContext()
}

type Drop_transform_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	type_name_ IIdentifierContext
	lang_name  IIdentifierContext
}

func NewEmptyDrop_transform_stmtContext() *Drop_transform_stmtContext {
	var p = new(Drop_transform_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_transform_stmt
	return p
}

func (*Drop_transform_stmtContext) IsDrop_transform_stmtContext() {}

func NewDrop_transform_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_transform_stmtContext {
	var p = new(Drop_transform_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_transform_stmt

	return p
}

func (s *Drop_transform_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_transform_stmtContext) GetType_name_() IIdentifierContext { return s.type_name_ }

func (s *Drop_transform_stmtContext) GetLang_name() IIdentifierContext { return s.lang_name }

func (s *Drop_transform_stmtContext) SetType_name_(v IIdentifierContext) { s.type_name_ = v }

func (s *Drop_transform_stmtContext) SetLang_name(v IIdentifierContext) { s.lang_name = v }

func (s *Drop_transform_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_transform_stmtContext) TRANSFORM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRANSFORM, 0)
}

func (s *Drop_transform_stmtContext) FOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOR, 0)
}

func (s *Drop_transform_stmtContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLANGUAGE, 0)
}

func (s *Drop_transform_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Drop_transform_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_transform_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_transform_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_transform_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_transform_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_transform_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_transform_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_transform_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_transform_stmt(s)
	}
}

func (s *Drop_transform_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_transform_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_transform_stmt() (localctx IDrop_transform_stmtContext) {
	localctx = NewDrop_transform_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, PostgreSQLParserRULE_drop_transform_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3511)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3512)
		p.Match(PostgreSQLParserTRANSFORM)
	}
	p.SetState(3515)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3513)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3514)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3517)
		p.Match(PostgreSQLParserFOR)
	}
	{
		p.SetState(3518)

		var _x = p.identifier(0)

		localctx.(*Drop_transform_stmtContext).type_name_ = _x
	}
	{
		p.SetState(3519)
		p.Match(PostgreSQLParserLANGUAGE)
	}
	{
		p.SetState(3520)

		var _x = p.identifier(0)

		localctx.(*Drop_transform_stmtContext).lang_name = _x
	}
	{
		p.SetState(3521)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDrop_trigger_stmtContext is an interface to support dynamic dispatch.
type IDrop_trigger_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(IIdentifierContext)

	// IsDrop_trigger_stmtContext differentiates from other interfaces.
	IsDrop_trigger_stmtContext()
}

type Drop_trigger_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	name       IIdentifierContext
	table_name IIdentifierContext
}

func NewEmptyDrop_trigger_stmtContext() *Drop_trigger_stmtContext {
	var p = new(Drop_trigger_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_trigger_stmt
	return p
}

func (*Drop_trigger_stmtContext) IsDrop_trigger_stmtContext() {}

func NewDrop_trigger_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_trigger_stmtContext {
	var p = new(Drop_trigger_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_trigger_stmt

	return p
}

func (s *Drop_trigger_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_trigger_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Drop_trigger_stmtContext) GetTable_name() IIdentifierContext { return s.table_name }

func (s *Drop_trigger_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Drop_trigger_stmtContext) SetTable_name(v IIdentifierContext) { s.table_name = v }

func (s *Drop_trigger_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_trigger_stmtContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRIGGER, 0)
}

func (s *Drop_trigger_stmtContext) ON() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserON, 0)
}

func (s *Drop_trigger_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Drop_trigger_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_trigger_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_trigger_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_trigger_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_trigger_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_trigger_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_trigger_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_trigger_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_trigger_stmt(s)
	}
}

func (s *Drop_trigger_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_trigger_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_trigger_stmt() (localctx IDrop_trigger_stmtContext) {
	localctx = NewDrop_trigger_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, PostgreSQLParserRULE_drop_trigger_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3523)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3524)
		p.Match(PostgreSQLParserTRIGGER)
	}
	p.SetState(3527)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3525)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3526)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3529)

		var _x = p.identifier(0)

		localctx.(*Drop_trigger_stmtContext).name = _x
	}
	{
		p.SetState(3530)
		p.Match(PostgreSQLParserON)
	}
	{
		p.SetState(3531)

		var _x = p.identifier(0)

		localctx.(*Drop_trigger_stmtContext).table_name = _x
	}
	p.SetState(3533)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3532)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_type_stmtContext is an interface to support dynamic dispatch.
type IDrop_type_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNames returns the names rule contexts.
	GetNames() IIdentifier_listContext

	// SetNames sets the names rule contexts.
	SetNames(IIdentifier_listContext)

	// IsDrop_type_stmtContext differentiates from other interfaces.
	IsDrop_type_stmtContext()
}

type Drop_type_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	names  IIdentifier_listContext
}

func NewEmptyDrop_type_stmtContext() *Drop_type_stmtContext {
	var p = new(Drop_type_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_type_stmt
	return p
}

func (*Drop_type_stmtContext) IsDrop_type_stmtContext() {}

func NewDrop_type_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_type_stmtContext {
	var p = new(Drop_type_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_type_stmt

	return p
}

func (s *Drop_type_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_type_stmtContext) GetNames() IIdentifier_listContext { return s.names }

func (s *Drop_type_stmtContext) SetNames(v IIdentifier_listContext) { s.names = v }

func (s *Drop_type_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_type_stmtContext) TYPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTYPE, 0)
}

func (s *Drop_type_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Drop_type_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_type_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_type_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_type_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_type_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_type_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_type_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_type_stmt(s)
	}
}

func (s *Drop_type_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_type_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_type_stmt() (localctx IDrop_type_stmtContext) {
	localctx = NewDrop_type_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, PostgreSQLParserRULE_drop_type_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3535)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3536)
		p.Match(PostgreSQLParserTYPE)
	}
	p.SetState(3539)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3537)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3538)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3541)

		var _x = p.Identifier_list()

		localctx.(*Drop_type_stmtContext).names = _x
	}
	p.SetState(3543)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3542)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDrop_user_stmtContext is an interface to support dynamic dispatch.
type IDrop_user_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNames returns the names rule contexts.
	GetNames() IIdentifier_listContext

	// SetNames sets the names rule contexts.
	SetNames(IIdentifier_listContext)

	// IsDrop_user_stmtContext differentiates from other interfaces.
	IsDrop_user_stmtContext()
}

type Drop_user_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	names  IIdentifier_listContext
}

func NewEmptyDrop_user_stmtContext() *Drop_user_stmtContext {
	var p = new(Drop_user_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_user_stmt
	return p
}

func (*Drop_user_stmtContext) IsDrop_user_stmtContext() {}

func NewDrop_user_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_user_stmtContext {
	var p = new(Drop_user_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_user_stmt

	return p
}

func (s *Drop_user_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_user_stmtContext) GetNames() IIdentifier_listContext { return s.names }

func (s *Drop_user_stmtContext) SetNames(v IIdentifier_listContext) { s.names = v }

func (s *Drop_user_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_user_stmtContext) USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSER, 0)
}

func (s *Drop_user_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Drop_user_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_user_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_user_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_user_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_user_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_user_stmt(s)
	}
}

func (s *Drop_user_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_user_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_user_stmt() (localctx IDrop_user_stmtContext) {
	localctx = NewDrop_user_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, PostgreSQLParserRULE_drop_user_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3545)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3546)
		p.Match(PostgreSQLParserUSER)
	}
	p.SetState(3549)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3547)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3548)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3551)

		var _x = p.Identifier_list()

		localctx.(*Drop_user_stmtContext).names = _x
	}

	return localctx
}

// IDrop_user_mapping_stmtContext is an interface to support dynamic dispatch.
type IDrop_user_mapping_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUser_name returns the user_name rule contexts.
	GetUser_name() IName_Context

	// GetServer_name returns the server_name rule contexts.
	GetServer_name() IIdentifierContext

	// SetUser_name sets the user_name rule contexts.
	SetUser_name(IName_Context)

	// SetServer_name sets the server_name rule contexts.
	SetServer_name(IIdentifierContext)

	// IsDrop_user_mapping_stmtContext differentiates from other interfaces.
	IsDrop_user_mapping_stmtContext()
}

type Drop_user_mapping_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	user_name   IName_Context
	server_name IIdentifierContext
}

func NewEmptyDrop_user_mapping_stmtContext() *Drop_user_mapping_stmtContext {
	var p = new(Drop_user_mapping_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_user_mapping_stmt
	return p
}

func (*Drop_user_mapping_stmtContext) IsDrop_user_mapping_stmtContext() {}

func NewDrop_user_mapping_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_user_mapping_stmtContext {
	var p = new(Drop_user_mapping_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_user_mapping_stmt

	return p
}

func (s *Drop_user_mapping_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_user_mapping_stmtContext) GetUser_name() IName_Context { return s.user_name }

func (s *Drop_user_mapping_stmtContext) GetServer_name() IIdentifierContext { return s.server_name }

func (s *Drop_user_mapping_stmtContext) SetUser_name(v IName_Context) { s.user_name = v }

func (s *Drop_user_mapping_stmtContext) SetServer_name(v IIdentifierContext) { s.server_name = v }

func (s *Drop_user_mapping_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_user_mapping_stmtContext) AllUSER() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserUSER)
}

func (s *Drop_user_mapping_stmtContext) USER(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSER, i)
}

func (s *Drop_user_mapping_stmtContext) MAPPING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMAPPING, 0)
}

func (s *Drop_user_mapping_stmtContext) FOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOR, 0)
}

func (s *Drop_user_mapping_stmtContext) SERVER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSERVER, 0)
}

func (s *Drop_user_mapping_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_user_mapping_stmtContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT_USER, 0)
}

func (s *Drop_user_mapping_stmtContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSESSION_USER, 0)
}

func (s *Drop_user_mapping_stmtContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPUBLIC, 0)
}

func (s *Drop_user_mapping_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_user_mapping_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_user_mapping_stmtContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Drop_user_mapping_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_user_mapping_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_user_mapping_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_user_mapping_stmt(s)
	}
}

func (s *Drop_user_mapping_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_user_mapping_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_user_mapping_stmt() (localctx IDrop_user_mapping_stmtContext) {
	localctx = NewDrop_user_mapping_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, PostgreSQLParserRULE_drop_user_mapping_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3553)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3554)
		p.Match(PostgreSQLParserUSER)
	}
	{
		p.SetState(3555)
		p.Match(PostgreSQLParserMAPPING)
	}
	p.SetState(3558)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3556)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3557)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3560)
		p.Match(PostgreSQLParserFOR)
	}
	p.SetState(3566)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 361, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3561)

			var _x = p.Name_()

			localctx.(*Drop_user_mapping_stmtContext).user_name = _x
		}

	case 2:
		{
			p.SetState(3562)
			p.Match(PostgreSQLParserUSER)
		}

	case 3:
		{
			p.SetState(3563)
			p.Match(PostgreSQLParserCURRENT_USER)
		}

	case 4:
		{
			p.SetState(3564)
			p.Match(PostgreSQLParserSESSION_USER)
		}

	case 5:
		{
			p.SetState(3565)
			p.Match(PostgreSQLParserPUBLIC)
		}

	}
	{
		p.SetState(3568)
		p.Match(PostgreSQLParserSERVER)
	}
	{
		p.SetState(3569)

		var _x = p.identifier(0)

		localctx.(*Drop_user_mapping_stmtContext).server_name = _x
	}

	return localctx
}

// IDrop_view_stmtContext is an interface to support dynamic dispatch.
type IDrop_view_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNames returns the names rule contexts.
	GetNames() IIdentifier_listContext

	// SetNames sets the names rule contexts.
	SetNames(IIdentifier_listContext)

	// IsDrop_view_stmtContext differentiates from other interfaces.
	IsDrop_view_stmtContext()
}

type Drop_view_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	names  IIdentifier_listContext
}

func NewEmptyDrop_view_stmtContext() *Drop_view_stmtContext {
	var p = new(Drop_view_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_drop_view_stmt
	return p
}

func (*Drop_view_stmtContext) IsDrop_view_stmtContext() {}

func NewDrop_view_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_view_stmtContext {
	var p = new(Drop_view_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_drop_view_stmt

	return p
}

func (s *Drop_view_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_view_stmtContext) GetNames() IIdentifier_listContext { return s.names }

func (s *Drop_view_stmtContext) SetNames(v IIdentifier_listContext) { s.names = v }

func (s *Drop_view_stmtContext) DROP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDROP, 0)
}

func (s *Drop_view_stmtContext) VIEW() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVIEW, 0)
}

func (s *Drop_view_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Drop_view_stmtContext) IF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIF, 0)
}

func (s *Drop_view_stmtContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Drop_view_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Drop_view_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Drop_view_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_view_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_view_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterDrop_view_stmt(s)
	}
}

func (s *Drop_view_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitDrop_view_stmt(s)
	}
}

func (p *PostgreSQLParser) Drop_view_stmt() (localctx IDrop_view_stmtContext) {
	localctx = NewDrop_view_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, PostgreSQLParserRULE_drop_view_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3571)
		p.Match(PostgreSQLParserDROP)
	}
	{
		p.SetState(3572)
		p.Match(PostgreSQLParserVIEW)
	}
	p.SetState(3575)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIF {
		{
			p.SetState(3573)
			p.Match(PostgreSQLParserIF)
		}
		{
			p.SetState(3574)
			p.Match(PostgreSQLParserEXISTS)
		}

	}
	{
		p.SetState(3577)

		var _x = p.Identifier_list()

		localctx.(*Drop_view_stmtContext).names = _x
	}
	p.SetState(3579)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(3578)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IExecute_stmtContext is an interface to support dynamic dispatch.
type IExecute_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsExecute_stmtContext differentiates from other interfaces.
	IsExecute_stmtContext()
}

type Execute_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyExecute_stmtContext() *Execute_stmtContext {
	var p = new(Execute_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_execute_stmt
	return p
}

func (*Execute_stmtContext) IsExecute_stmtContext() {}

func NewExecute_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_stmtContext {
	var p = new(Execute_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_execute_stmt

	return p
}

func (s *Execute_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Execute_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Execute_stmtContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXECUTE, 0)
}

func (s *Execute_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Execute_stmtContext) Expr_list() IExpr_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_listContext)
}

func (s *Execute_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Execute_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterExecute_stmt(s)
	}
}

func (s *Execute_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitExecute_stmt(s)
	}
}

func (p *PostgreSQLParser) Execute_stmt() (localctx IExecute_stmtContext) {
	localctx = NewExecute_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, PostgreSQLParserRULE_execute_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3581)
		p.Match(PostgreSQLParserEXECUTE)
	}
	{
		p.SetState(3582)

		var _x = p.identifier(0)

		localctx.(*Execute_stmtContext).name = _x
	}
	p.SetState(3584)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserOPEN_PAREN {
		{
			p.SetState(3583)
			p.Expr_list()
		}

	}

	return localctx
}

// IExplain_stmtContext is an interface to support dynamic dispatch.
type IExplain_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplain_stmtContext differentiates from other interfaces.
	IsExplain_stmtContext()
}

type Explain_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplain_stmtContext() *Explain_stmtContext {
	var p = new(Explain_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_explain_stmt
	return p
}

func (*Explain_stmtContext) IsExplain_stmtContext() {}

func NewExplain_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Explain_stmtContext {
	var p = new(Explain_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_explain_stmt

	return p
}

func (s *Explain_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Explain_stmtContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Explain_stmtContext) Insert_stmt() IInsert_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_stmtContext)
}

func (s *Explain_stmtContext) Update_stmt() IUpdate_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmtContext)
}

func (s *Explain_stmtContext) Delete_stmt() IDelete_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelete_stmtContext)
}

func (s *Explain_stmtContext) Values_stmt() IValues_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValues_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValues_stmtContext)
}

func (s *Explain_stmtContext) Execute_stmt() IExecute_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_stmtContext)
}

func (s *Explain_stmtContext) Declare_stmt() IDeclare_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_stmtContext)
}

func (s *Explain_stmtContext) Create_table_as_stmt() ICreate_table_as_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_table_as_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_table_as_stmtContext)
}

func (s *Explain_stmtContext) Create_materialized_view_stmt() ICreate_materialized_view_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_materialized_view_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_materialized_view_stmtContext)
}

func (s *Explain_stmtContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXPLAIN, 0)
}

func (s *Explain_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Explain_stmtContext) AllExplain_parameter() []IExplain_parameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExplain_parameterContext)(nil)).Elem())
	var tst = make([]IExplain_parameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExplain_parameterContext)
		}
	}

	return tst
}

func (s *Explain_stmtContext) Explain_parameter(i int) IExplain_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplain_parameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExplain_parameterContext)
}

func (s *Explain_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Explain_stmtContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserANALYZE, 0)
}

func (s *Explain_stmtContext) VERBOSE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVERBOSE, 0)
}

func (s *Explain_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Explain_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Explain_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Explain_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Explain_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterExplain_stmt(s)
	}
}

func (s *Explain_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitExplain_stmt(s)
	}
}

func (p *PostgreSQLParser) Explain_stmt() (localctx IExplain_stmtContext) {
	localctx = NewExplain_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, PostgreSQLParserRULE_explain_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3605)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 368, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3586)
			p.Match(PostgreSQLParserEXPLAIN)
		}
		p.SetState(3588)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserANALYZE {
			{
				p.SetState(3587)
				p.Match(PostgreSQLParserANALYZE)
			}

		}
		p.SetState(3591)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserVERBOSE {
			{
				p.SetState(3590)
				p.Match(PostgreSQLParserVERBOSE)
			}

		}

	case 2:
		{
			p.SetState(3593)
			p.Match(PostgreSQLParserEXPLAIN)
		}
		{
			p.SetState(3594)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(3595)
			p.Explain_parameter()
		}
		p.SetState(3600)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PostgreSQLParserCOMMA {
			{
				p.SetState(3596)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(3597)
				p.Explain_parameter()
			}

			p.SetState(3602)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3603)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}
	p.SetState(3616)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 369, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3607)
			p.Select_stmt()
		}

	case 2:
		{
			p.SetState(3608)
			p.Insert_stmt()
		}

	case 3:
		{
			p.SetState(3609)
			p.Update_stmt()
		}

	case 4:
		{
			p.SetState(3610)
			p.Delete_stmt()
		}

	case 5:
		{
			p.SetState(3611)
			p.Values_stmt()
		}

	case 6:
		{
			p.SetState(3612)
			p.Execute_stmt()
		}

	case 7:
		{
			p.SetState(3613)
			p.Declare_stmt()
		}

	case 8:
		{
			p.SetState(3614)
			p.Create_table_as_stmt()
		}

	case 9:
		{
			p.SetState(3615)
			p.Create_materialized_view_stmt()
		}

	}

	return localctx
}

// IFetch_stmtContext is an interface to support dynamic dispatch.
type IFetch_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFetch_stmtContext differentiates from other interfaces.
	IsFetch_stmtContext()
}

type Fetch_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFetch_stmtContext() *Fetch_stmtContext {
	var p = new(Fetch_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_fetch_stmt
	return p
}

func (*Fetch_stmtContext) IsFetch_stmtContext() {}

func NewFetch_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fetch_stmtContext {
	var p = new(Fetch_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_fetch_stmt

	return p
}

func (s *Fetch_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Fetch_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Fetch_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fetch_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Fetch_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterFetch_stmt(s)
	}
}

func (s *Fetch_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitFetch_stmt(s)
	}
}

func (p *PostgreSQLParser) Fetch_stmt() (localctx IFetch_stmtContext) {
	localctx = NewFetch_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, PostgreSQLParserRULE_fetch_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3618)
		p.Todo_implement()
	}

	return localctx
}

// IGrant_stmtContext is an interface to support dynamic dispatch.
type IGrant_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrant_stmtContext differentiates from other interfaces.
	IsGrant_stmtContext()
}

type Grant_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrant_stmtContext() *Grant_stmtContext {
	var p = new(Grant_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_grant_stmt
	return p
}

func (*Grant_stmtContext) IsGrant_stmtContext() {}

func NewGrant_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grant_stmtContext {
	var p = new(Grant_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_grant_stmt

	return p
}

func (s *Grant_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Grant_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Grant_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grant_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grant_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterGrant_stmt(s)
	}
}

func (s *Grant_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitGrant_stmt(s)
	}
}

func (p *PostgreSQLParser) Grant_stmt() (localctx IGrant_stmtContext) {
	localctx = NewGrant_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, PostgreSQLParserRULE_grant_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3620)
		p.Todo_implement()
	}

	return localctx
}

// IImport_foreign_schema_stmtContext is an interface to support dynamic dispatch.
type IImport_foreign_schema_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImport_foreign_schema_stmtContext differentiates from other interfaces.
	IsImport_foreign_schema_stmtContext()
}

type Import_foreign_schema_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImport_foreign_schema_stmtContext() *Import_foreign_schema_stmtContext {
	var p = new(Import_foreign_schema_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_import_foreign_schema_stmt
	return p
}

func (*Import_foreign_schema_stmtContext) IsImport_foreign_schema_stmtContext() {}

func NewImport_foreign_schema_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Import_foreign_schema_stmtContext {
	var p = new(Import_foreign_schema_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_import_foreign_schema_stmt

	return p
}

func (s *Import_foreign_schema_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Import_foreign_schema_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Import_foreign_schema_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Import_foreign_schema_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Import_foreign_schema_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterImport_foreign_schema_stmt(s)
	}
}

func (s *Import_foreign_schema_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitImport_foreign_schema_stmt(s)
	}
}

func (p *PostgreSQLParser) Import_foreign_schema_stmt() (localctx IImport_foreign_schema_stmtContext) {
	localctx = NewImport_foreign_schema_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, PostgreSQLParserRULE_import_foreign_schema_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3622)
		p.Todo_implement()
	}

	return localctx
}

// IInsert_stmtContext is an interface to support dynamic dispatch.
type IInsert_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlias_ returns the alias_ rule contexts.
	GetAlias_() IIdentifierContext

	// SetAlias_ sets the alias_ rule contexts.
	SetAlias_(IIdentifierContext)

	// IsInsert_stmtContext differentiates from other interfaces.
	IsInsert_stmtContext()
}

type Insert_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	alias_ IIdentifierContext
}

func NewEmptyInsert_stmtContext() *Insert_stmtContext {
	var p = new(Insert_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_insert_stmt
	return p
}

func (*Insert_stmtContext) IsInsert_stmtContext() {}

func NewInsert_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_stmtContext {
	var p = new(Insert_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_insert_stmt

	return p
}

func (s *Insert_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_stmtContext) GetAlias_() IIdentifierContext { return s.alias_ }

func (s *Insert_stmtContext) SetAlias_(v IIdentifierContext) { s.alias_ = v }

func (s *Insert_stmtContext) INSERT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINSERT, 0)
}

func (s *Insert_stmtContext) INTO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTO, 0)
}

func (s *Insert_stmtContext) Table_name_() ITable_name_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_Context)
}

func (s *Insert_stmtContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEFAULT, 0)
}

func (s *Insert_stmtContext) VALUES() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVALUES, 0)
}

func (s *Insert_stmtContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Insert_stmtContext) Values_stmt() IValues_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValues_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValues_stmtContext)
}

func (s *Insert_stmtContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Insert_stmtContext) AS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAS, 0)
}

func (s *Insert_stmtContext) AllOPEN_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPEN_PAREN)
}

func (s *Insert_stmtContext) OPEN_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, i)
}

func (s *Insert_stmtContext) Name_list() IName_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_listContext)
}

func (s *Insert_stmtContext) AllCLOSE_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCLOSE_PAREN)
}

func (s *Insert_stmtContext) CLOSE_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, i)
}

func (s *Insert_stmtContext) OVERRIDING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOVERRIDING, 0)
}

func (s *Insert_stmtContext) VALUE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVALUE, 0)
}

func (s *Insert_stmtContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserON)
}

func (s *Insert_stmtContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserON, i)
}

func (s *Insert_stmtContext) CONFLICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONFLICT, 0)
}

func (s *Insert_stmtContext) Returning_clause() IReturning_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturning_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturning_clauseContext)
}

func (s *Insert_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Insert_stmtContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Insert_stmtContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Insert_stmtContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONSTRAINT, 0)
}

func (s *Insert_stmtContext) AllWhere_clause() []IWhere_clauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWhere_clauseContext)(nil)).Elem())
	var tst = make([]IWhere_clauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWhere_clauseContext)
		}
	}

	return tst
}

func (s *Insert_stmtContext) Where_clause(i int) IWhere_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhere_clauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWhere_clauseContext)
}

func (s *Insert_stmtContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSYSTEM, 0)
}

func (s *Insert_stmtContext) USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSER, 0)
}

func (s *Insert_stmtContext) DO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDO, 0)
}

func (s *Insert_stmtContext) NOTHING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOTHING, 0)
}

func (s *Insert_stmtContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUPDATE, 0)
}

func (s *Insert_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Insert_stmtContext) Updater_clause() IUpdater_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdater_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdater_clauseContext)
}

func (s *Insert_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterInsert_stmt(s)
	}
}

func (s *Insert_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitInsert_stmt(s)
	}
}

func (p *PostgreSQLParser) Insert_stmt() (localctx IInsert_stmtContext) {
	localctx = NewInsert_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, PostgreSQLParserRULE_insert_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3625)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserWITH {
		{
			p.SetState(3624)
			p.With_clause()
		}

	}
	{
		p.SetState(3627)
		p.Match(PostgreSQLParserINSERT)
	}
	{
		p.SetState(3628)
		p.Match(PostgreSQLParserINTO)
	}
	{
		p.SetState(3629)
		p.Table_name_()
	}
	p.SetState(3632)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserAS {
		{
			p.SetState(3630)
			p.Match(PostgreSQLParserAS)
		}
		{
			p.SetState(3631)

			var _x = p.identifier(0)

			localctx.(*Insert_stmtContext).alias_ = _x
		}

	}
	p.SetState(3638)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 372, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3634)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(3635)
			p.Name_list()
		}
		{
			p.SetState(3636)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}
	p.SetState(3645)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserOVERRIDING {
		{
			p.SetState(3640)
			p.Match(PostgreSQLParserOVERRIDING)
		}
		p.SetState(3642)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserSYSTEM || _la == PostgreSQLParserUSER {
			{
				p.SetState(3641)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserSYSTEM || _la == PostgreSQLParserUSER) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(3644)
			p.Match(PostgreSQLParserVALUE)
		}

	}
	p.SetState(3651)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 375, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3647)
			p.Match(PostgreSQLParserDEFAULT)
		}
		{
			p.SetState(3648)
			p.Match(PostgreSQLParserVALUES)
		}

	case 2:
		{
			p.SetState(3649)
			p.Select_stmt()
		}

	case 3:
		{
			p.SetState(3650)
			p.Values_stmt()
		}

	}
	p.SetState(3680)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserON {
		{
			p.SetState(3653)
			p.Match(PostgreSQLParserON)
		}
		{
			p.SetState(3654)
			p.Match(PostgreSQLParserCONFLICT)
		}
		p.SetState(3659)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserOPEN_PAREN {
			{
				p.SetState(3655)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(3656)
				p.Column_name()
			}
			{
				p.SetState(3657)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}
		p.SetState(3664)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserON {
			{
				p.SetState(3661)
				p.Match(PostgreSQLParserON)
			}
			{
				p.SetState(3662)
				p.Match(PostgreSQLParserCONSTRAINT)
			}
			{
				p.SetState(3663)
				p.Column_name()
			}

		}
		p.SetState(3667)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserWHERE {
			{
				p.SetState(3666)
				p.Where_clause()
			}

		}
		p.SetState(3678)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 380, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(3669)
				p.Match(PostgreSQLParserDO)
			}
			{
				p.SetState(3670)
				p.Match(PostgreSQLParserNOTHING)
			}

		case 2:
			{
				p.SetState(3671)
				p.Match(PostgreSQLParserDO)
			}
			{
				p.SetState(3672)
				p.Match(PostgreSQLParserUPDATE)
			}
			{
				p.SetState(3673)
				p.Match(PostgreSQLParserSET)
			}
			{
				p.SetState(3674)
				p.Updater_clause()
			}
			p.SetState(3676)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PostgreSQLParserWHERE {
				{
					p.SetState(3675)
					p.Where_clause()
				}

			}

		}

	}
	p.SetState(3683)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserRETURNING {
		{
			p.SetState(3682)
			p.Returning_clause()
		}

	}

	return localctx
}

// IListen_stmtContext is an interface to support dynamic dispatch.
type IListen_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetChannel returns the channel rule contexts.
	GetChannel() IIdentifierContext

	// SetChannel sets the channel rule contexts.
	SetChannel(IIdentifierContext)

	// IsListen_stmtContext differentiates from other interfaces.
	IsListen_stmtContext()
}

type Listen_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	channel IIdentifierContext
}

func NewEmptyListen_stmtContext() *Listen_stmtContext {
	var p = new(Listen_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_listen_stmt
	return p
}

func (*Listen_stmtContext) IsListen_stmtContext() {}

func NewListen_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Listen_stmtContext {
	var p = new(Listen_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_listen_stmt

	return p
}

func (s *Listen_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Listen_stmtContext) GetChannel() IIdentifierContext { return s.channel }

func (s *Listen_stmtContext) SetChannel(v IIdentifierContext) { s.channel = v }

func (s *Listen_stmtContext) LISTEN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLISTEN, 0)
}

func (s *Listen_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Listen_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Listen_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Listen_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterListen_stmt(s)
	}
}

func (s *Listen_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitListen_stmt(s)
	}
}

func (p *PostgreSQLParser) Listen_stmt() (localctx IListen_stmtContext) {
	localctx = NewListen_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, PostgreSQLParserRULE_listen_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3685)
		p.Match(PostgreSQLParserLISTEN)
	}
	{
		p.SetState(3686)

		var _x = p.identifier(0)

		localctx.(*Listen_stmtContext).channel = _x
	}

	return localctx
}

// ILoad_stmtContext is an interface to support dynamic dispatch.
type ILoad_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoad_stmtContext differentiates from other interfaces.
	IsLoad_stmtContext()
}

type Load_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoad_stmtContext() *Load_stmtContext {
	var p = new(Load_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_load_stmt
	return p
}

func (*Load_stmtContext) IsLoad_stmtContext() {}

func NewLoad_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Load_stmtContext {
	var p = new(Load_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_load_stmt

	return p
}

func (s *Load_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Load_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Load_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Load_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Load_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterLoad_stmt(s)
	}
}

func (s *Load_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitLoad_stmt(s)
	}
}

func (p *PostgreSQLParser) Load_stmt() (localctx ILoad_stmtContext) {
	localctx = NewLoad_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, PostgreSQLParserRULE_load_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3688)
		p.Todo_implement()
	}

	return localctx
}

// ILock_stmtContext is an interface to support dynamic dispatch.
type ILock_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IName_Context

	// SetName sets the name rule contexts.
	SetName(IName_Context)

	// IsLock_stmtContext differentiates from other interfaces.
	IsLock_stmtContext()
}

type Lock_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IName_Context
}

func NewEmptyLock_stmtContext() *Lock_stmtContext {
	var p = new(Lock_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_lock_stmt
	return p
}

func (*Lock_stmtContext) IsLock_stmtContext() {}

func NewLock_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Lock_stmtContext {
	var p = new(Lock_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_lock_stmt

	return p
}

func (s *Lock_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Lock_stmtContext) GetName() IName_Context { return s.name }

func (s *Lock_stmtContext) SetName(v IName_Context) { s.name = v }

func (s *Lock_stmtContext) LOCK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLOCK, 0)
}

func (s *Lock_stmtContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Lock_stmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLE, 0)
}

func (s *Lock_stmtContext) ONLY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserONLY, 0)
}

func (s *Lock_stmtContext) STAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTAR, 0)
}

func (s *Lock_stmtContext) IN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIN, 0)
}

func (s *Lock_stmtContext) MODE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMODE, 0)
}

func (s *Lock_stmtContext) NOWAIT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOWAIT, 0)
}

func (s *Lock_stmtContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserACCESS, 0)
}

func (s *Lock_stmtContext) SHARE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSHARE, 0)
}

func (s *Lock_stmtContext) ROW() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROW, 0)
}

func (s *Lock_stmtContext) EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXCLUSIVE, 0)
}

func (s *Lock_stmtContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUPDATE, 0)
}

func (s *Lock_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Lock_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Lock_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterLock_stmt(s)
	}
}

func (s *Lock_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitLock_stmt(s)
	}
}

func (p *PostgreSQLParser) Lock_stmt() (localctx ILock_stmtContext) {
	localctx = NewLock_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, PostgreSQLParserRULE_lock_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3690)
		p.Match(PostgreSQLParserLOCK)
	}
	p.SetState(3692)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserTABLE {
		{
			p.SetState(3691)
			p.Match(PostgreSQLParserTABLE)
		}

	}
	p.SetState(3695)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserONLY {
		{
			p.SetState(3694)
			p.Match(PostgreSQLParserONLY)
		}

	}
	{
		p.SetState(3697)

		var _x = p.Name_()

		localctx.(*Lock_stmtContext).name = _x
	}
	p.SetState(3699)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserSTAR {
		{
			p.SetState(3698)
			p.Match(PostgreSQLParserSTAR)
		}

	}
	p.SetState(3721)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserIN {
		{
			p.SetState(3701)
			p.Match(PostgreSQLParserIN)
		}
		p.SetState(3718)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 386, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(3702)
				p.Match(PostgreSQLParserACCESS)
			}
			{
				p.SetState(3703)
				p.Match(PostgreSQLParserSHARE)
			}

		case 2:
			{
				p.SetState(3704)
				p.Match(PostgreSQLParserROW)
			}
			{
				p.SetState(3705)
				p.Match(PostgreSQLParserSHARE)
			}

		case 3:
			{
				p.SetState(3706)
				p.Match(PostgreSQLParserROW)
			}
			{
				p.SetState(3707)
				p.Match(PostgreSQLParserEXCLUSIVE)
			}

		case 4:
			{
				p.SetState(3708)
				p.Match(PostgreSQLParserSHARE)
			}
			{
				p.SetState(3709)
				p.Match(PostgreSQLParserUPDATE)
			}
			{
				p.SetState(3710)
				p.Match(PostgreSQLParserEXCLUSIVE)
			}

		case 5:
			{
				p.SetState(3711)
				p.Match(PostgreSQLParserSHARE)
			}

		case 6:
			{
				p.SetState(3712)
				p.Match(PostgreSQLParserSHARE)
			}
			{
				p.SetState(3713)
				p.Match(PostgreSQLParserROW)
			}
			{
				p.SetState(3714)
				p.Match(PostgreSQLParserEXCLUSIVE)
			}

		case 7:
			{
				p.SetState(3715)
				p.Match(PostgreSQLParserEXCLUSIVE)
			}

		case 8:
			{
				p.SetState(3716)
				p.Match(PostgreSQLParserACCESS)
			}
			{
				p.SetState(3717)
				p.Match(PostgreSQLParserEXCLUSIVE)
			}

		}
		{
			p.SetState(3720)
			p.Match(PostgreSQLParserMODE)
		}

	}
	p.SetState(3724)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserNOWAIT {
		{
			p.SetState(3723)
			p.Match(PostgreSQLParserNOWAIT)
		}

	}

	return localctx
}

// IMove_stmtContext is an interface to support dynamic dispatch.
type IMove_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCursor_name returns the cursor_name rule contexts.
	GetCursor_name() IName_Context

	// SetCursor_name sets the cursor_name rule contexts.
	SetCursor_name(IName_Context)

	// IsMove_stmtContext differentiates from other interfaces.
	IsMove_stmtContext()
}

type Move_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	cursor_name IName_Context
}

func NewEmptyMove_stmtContext() *Move_stmtContext {
	var p = new(Move_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_move_stmt
	return p
}

func (*Move_stmtContext) IsMove_stmtContext() {}

func NewMove_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Move_stmtContext {
	var p = new(Move_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_move_stmt

	return p
}

func (s *Move_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Move_stmtContext) GetCursor_name() IName_Context { return s.cursor_name }

func (s *Move_stmtContext) SetCursor_name(v IName_Context) { s.cursor_name = v }

func (s *Move_stmtContext) MOVE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMOVE, 0)
}

func (s *Move_stmtContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Move_stmtContext) NEXT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNEXT, 0)
}

func (s *Move_stmtContext) PRIOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPRIOR, 0)
}

func (s *Move_stmtContext) FIRST() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFIRST, 0)
}

func (s *Move_stmtContext) LAST() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLAST, 0)
}

func (s *Move_stmtContext) ABSOLUTE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserABSOLUTE, 0)
}

func (s *Move_stmtContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER, 0)
}

func (s *Move_stmtContext) RELATIVE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRELATIVE, 0)
}

func (s *Move_stmtContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, 0)
}

func (s *Move_stmtContext) ALL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALL, 0)
}

func (s *Move_stmtContext) FORWARD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFORWARD, 0)
}

func (s *Move_stmtContext) BACKWARD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBACKWARD, 0)
}

func (s *Move_stmtContext) FROM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFROM, 0)
}

func (s *Move_stmtContext) IN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIN, 0)
}

func (s *Move_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Move_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Move_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterMove_stmt(s)
	}
}

func (s *Move_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitMove_stmt(s)
	}
}

func (p *PostgreSQLParser) Move_stmt() (localctx IMove_stmtContext) {
	localctx = NewMove_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, PostgreSQLParserRULE_move_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3726)
		p.Match(PostgreSQLParserMOVE)
	}
	p.SetState(3750)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 393, p.GetParserRuleContext()) == 1 {
		p.SetState(3745)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PostgreSQLParserNEXT:
			{
				p.SetState(3727)
				p.Match(PostgreSQLParserNEXT)
			}

		case PostgreSQLParserPRIOR:
			{
				p.SetState(3728)
				p.Match(PostgreSQLParserPRIOR)
			}

		case PostgreSQLParserFIRST:
			{
				p.SetState(3729)
				p.Match(PostgreSQLParserFIRST)
			}

		case PostgreSQLParserLAST:
			{
				p.SetState(3730)
				p.Match(PostgreSQLParserLAST)
			}

		case PostgreSQLParserABSOLUTE:
			{
				p.SetState(3731)
				p.Match(PostgreSQLParserABSOLUTE)
			}
			{
				p.SetState(3732)
				p.Match(PostgreSQLParserINTEGER)
			}

		case PostgreSQLParserRELATIVE:
			{
				p.SetState(3733)
				p.Match(PostgreSQLParserRELATIVE)
			}
			{
				p.SetState(3734)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}

		case PostgreSQLParserINTEGER_LITERAL:
			{
				p.SetState(3735)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}

		case PostgreSQLParserALL:
			{
				p.SetState(3736)
				p.Match(PostgreSQLParserALL)
			}

		case PostgreSQLParserFORWARD:
			{
				p.SetState(3737)
				p.Match(PostgreSQLParserFORWARD)
			}
			p.SetState(3739)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PostgreSQLParserALL || _la == PostgreSQLParserINTEGER_LITERAL {
				{
					p.SetState(3738)
					_la = p.GetTokenStream().LA(1)

					if !(_la == PostgreSQLParserALL || _la == PostgreSQLParserINTEGER_LITERAL) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}

		case PostgreSQLParserBACKWARD:
			{
				p.SetState(3741)
				p.Match(PostgreSQLParserBACKWARD)
			}
			p.SetState(3743)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PostgreSQLParserALL || _la == PostgreSQLParserINTEGER_LITERAL {
				{
					p.SetState(3742)
					_la = p.GetTokenStream().LA(1)

					if !(_la == PostgreSQLParserALL || _la == PostgreSQLParserINTEGER_LITERAL) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(3748)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserFROM || _la == PostgreSQLParserIN {
			{
				p.SetState(3747)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserFROM || _la == PostgreSQLParserIN) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	}
	{
		p.SetState(3752)

		var _x = p.Name_()

		localctx.(*Move_stmtContext).cursor_name = _x
	}

	return localctx
}

// INotify_stmtContext is an interface to support dynamic dispatch.
type INotify_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPayload returns the payload token.
	GetPayload() antlr.Token

	// SetPayload sets the payload token.
	SetPayload(antlr.Token)

	// GetChannel returns the channel rule contexts.
	GetChannel() IName_Context

	// SetChannel sets the channel rule contexts.
	SetChannel(IName_Context)

	// IsNotify_stmtContext differentiates from other interfaces.
	IsNotify_stmtContext()
}

type Notify_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	channel IName_Context
	payload antlr.Token
}

func NewEmptyNotify_stmtContext() *Notify_stmtContext {
	var p = new(Notify_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_notify_stmt
	return p
}

func (*Notify_stmtContext) IsNotify_stmtContext() {}

func NewNotify_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Notify_stmtContext {
	var p = new(Notify_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_notify_stmt

	return p
}

func (s *Notify_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Notify_stmtContext) GetPayload() antlr.Token { return s.payload }

func (s *Notify_stmtContext) SetPayload(v antlr.Token) { s.payload = v }

func (s *Notify_stmtContext) GetChannel() IName_Context { return s.channel }

func (s *Notify_stmtContext) SetChannel(v IName_Context) { s.channel = v }

func (s *Notify_stmtContext) NOTIFY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOTIFY, 0)
}

func (s *Notify_stmtContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Notify_stmtContext) COMMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, 0)
}

func (s *Notify_stmtContext) SINGLEQ_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSINGLEQ_STRING_LITERAL, 0)
}

func (s *Notify_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Notify_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Notify_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterNotify_stmt(s)
	}
}

func (s *Notify_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitNotify_stmt(s)
	}
}

func (p *PostgreSQLParser) Notify_stmt() (localctx INotify_stmtContext) {
	localctx = NewNotify_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, PostgreSQLParserRULE_notify_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3754)
		p.Match(PostgreSQLParserNOTIFY)
	}
	{
		p.SetState(3755)

		var _x = p.Name_()

		localctx.(*Notify_stmtContext).channel = _x
	}
	p.SetState(3758)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCOMMA {
		{
			p.SetState(3756)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(3757)

			var _m = p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)

			localctx.(*Notify_stmtContext).payload = _m
		}

	}

	return localctx
}

// IPrepare_stmtContext is an interface to support dynamic dispatch.
type IPrepare_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsPrepare_stmtContext differentiates from other interfaces.
	IsPrepare_stmtContext()
}

type Prepare_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyPrepare_stmtContext() *Prepare_stmtContext {
	var p = new(Prepare_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_prepare_stmt
	return p
}

func (*Prepare_stmtContext) IsPrepare_stmtContext() {}

func NewPrepare_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Prepare_stmtContext {
	var p = new(Prepare_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_prepare_stmt

	return p
}

func (s *Prepare_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Prepare_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Prepare_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Prepare_stmtContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPREPARE, 0)
}

func (s *Prepare_stmtContext) AS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAS, 0)
}

func (s *Prepare_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Prepare_stmtContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Prepare_stmtContext) Insert_stmt() IInsert_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_stmtContext)
}

func (s *Prepare_stmtContext) Update_stmt() IUpdate_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmtContext)
}

func (s *Prepare_stmtContext) Delete_stmt() IDelete_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelete_stmtContext)
}

func (s *Prepare_stmtContext) Values_stmt() IValues_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValues_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValues_stmtContext)
}

func (s *Prepare_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Prepare_stmtContext) Data_type_list() IData_type_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_listContext)
}

func (s *Prepare_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Prepare_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Prepare_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Prepare_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterPrepare_stmt(s)
	}
}

func (s *Prepare_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitPrepare_stmt(s)
	}
}

func (p *PostgreSQLParser) Prepare_stmt() (localctx IPrepare_stmtContext) {
	localctx = NewPrepare_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, PostgreSQLParserRULE_prepare_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3760)
		p.Match(PostgreSQLParserPREPARE)
	}
	{
		p.SetState(3761)

		var _x = p.identifier(0)

		localctx.(*Prepare_stmtContext).name = _x
	}
	p.SetState(3766)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserOPEN_PAREN {
		{
			p.SetState(3762)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(3763)
			p.Data_type_list()
		}
		{
			p.SetState(3764)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}
	{
		p.SetState(3768)
		p.Match(PostgreSQLParserAS)
	}
	p.SetState(3774)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 396, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3769)
			p.Select_stmt()
		}

	case 2:
		{
			p.SetState(3770)
			p.Insert_stmt()
		}

	case 3:
		{
			p.SetState(3771)
			p.Update_stmt()
		}

	case 4:
		{
			p.SetState(3772)
			p.Delete_stmt()
		}

	case 5:
		{
			p.SetState(3773)
			p.Values_stmt()
		}

	}

	return localctx
}

// IPrepare_transaction_stmtContext is an interface to support dynamic dispatch.
type IPrepare_transaction_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IName_Context

	// SetName sets the name rule contexts.
	SetName(IName_Context)

	// IsPrepare_transaction_stmtContext differentiates from other interfaces.
	IsPrepare_transaction_stmtContext()
}

type Prepare_transaction_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IName_Context
}

func NewEmptyPrepare_transaction_stmtContext() *Prepare_transaction_stmtContext {
	var p = new(Prepare_transaction_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_prepare_transaction_stmt
	return p
}

func (*Prepare_transaction_stmtContext) IsPrepare_transaction_stmtContext() {}

func NewPrepare_transaction_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Prepare_transaction_stmtContext {
	var p = new(Prepare_transaction_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_prepare_transaction_stmt

	return p
}

func (s *Prepare_transaction_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Prepare_transaction_stmtContext) GetName() IName_Context { return s.name }

func (s *Prepare_transaction_stmtContext) SetName(v IName_Context) { s.name = v }

func (s *Prepare_transaction_stmtContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPREPARE, 0)
}

func (s *Prepare_transaction_stmtContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRANSACTION, 0)
}

func (s *Prepare_transaction_stmtContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Prepare_transaction_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Prepare_transaction_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Prepare_transaction_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterPrepare_transaction_stmt(s)
	}
}

func (s *Prepare_transaction_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitPrepare_transaction_stmt(s)
	}
}

func (p *PostgreSQLParser) Prepare_transaction_stmt() (localctx IPrepare_transaction_stmtContext) {
	localctx = NewPrepare_transaction_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, PostgreSQLParserRULE_prepare_transaction_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3776)
		p.Match(PostgreSQLParserPREPARE)
	}
	{
		p.SetState(3777)
		p.Match(PostgreSQLParserTRANSACTION)
	}
	{
		p.SetState(3778)

		var _x = p.Name_()

		localctx.(*Prepare_transaction_stmtContext).name = _x
	}

	return localctx
}

// IReassign_owned_stmtContext is an interface to support dynamic dispatch.
type IReassign_owned_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReassign_owned_stmtContext differentiates from other interfaces.
	IsReassign_owned_stmtContext()
}

type Reassign_owned_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReassign_owned_stmtContext() *Reassign_owned_stmtContext {
	var p = new(Reassign_owned_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_reassign_owned_stmt
	return p
}

func (*Reassign_owned_stmtContext) IsReassign_owned_stmtContext() {}

func NewReassign_owned_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Reassign_owned_stmtContext {
	var p = new(Reassign_owned_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_reassign_owned_stmt

	return p
}

func (s *Reassign_owned_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Reassign_owned_stmtContext) REASSIGN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREASSIGN, 0)
}

func (s *Reassign_owned_stmtContext) OWNED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNED, 0)
}

func (s *Reassign_owned_stmtContext) BY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBY, 0)
}

func (s *Reassign_owned_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Reassign_owned_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Reassign_owned_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Reassign_owned_stmtContext) AllCURRENT_USER() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCURRENT_USER)
}

func (s *Reassign_owned_stmtContext) CURRENT_USER(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT_USER, i)
}

func (s *Reassign_owned_stmtContext) AllSESSION_USER() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserSESSION_USER)
}

func (s *Reassign_owned_stmtContext) SESSION_USER(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSESSION_USER, i)
}

func (s *Reassign_owned_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Reassign_owned_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Reassign_owned_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Reassign_owned_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Reassign_owned_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterReassign_owned_stmt(s)
	}
}

func (s *Reassign_owned_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitReassign_owned_stmt(s)
	}
}

func (p *PostgreSQLParser) Reassign_owned_stmt() (localctx IReassign_owned_stmtContext) {
	localctx = NewReassign_owned_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, PostgreSQLParserRULE_reassign_owned_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3780)
		p.Match(PostgreSQLParserREASSIGN)
	}
	{
		p.SetState(3781)
		p.Match(PostgreSQLParserOWNED)
	}
	{
		p.SetState(3782)
		p.Match(PostgreSQLParserBY)
	}

	p.SetState(3786)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
		{
			p.SetState(3783)
			p.identifier(0)
		}

	case PostgreSQLParserCURRENT_USER:
		{
			p.SetState(3784)
			p.Match(PostgreSQLParserCURRENT_USER)
		}

	case PostgreSQLParserSESSION_USER:
		{
			p.SetState(3785)
			p.Match(PostgreSQLParserSESSION_USER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(3796)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(3788)
			p.Match(PostgreSQLParserCOMMA)
		}
		p.SetState(3792)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
			{
				p.SetState(3789)
				p.identifier(0)
			}

		case PostgreSQLParserCURRENT_USER:
			{
				p.SetState(3790)
				p.Match(PostgreSQLParserCURRENT_USER)
			}

		case PostgreSQLParserSESSION_USER:
			{
				p.SetState(3791)
				p.Match(PostgreSQLParserSESSION_USER)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(3798)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	{
		p.SetState(3799)
		p.Match(PostgreSQLParserTO)
	}
	p.SetState(3803)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
		{
			p.SetState(3800)
			p.identifier(0)
		}

	case PostgreSQLParserCURRENT_USER:
		{
			p.SetState(3801)
			p.Match(PostgreSQLParserCURRENT_USER)
		}

	case PostgreSQLParserSESSION_USER:
		{
			p.SetState(3802)
			p.Match(PostgreSQLParserSESSION_USER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IRefresh_materialized_view_stmtContext is an interface to support dynamic dispatch.
type IRefresh_materialized_view_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRefresh_materialized_view_stmtContext differentiates from other interfaces.
	IsRefresh_materialized_view_stmtContext()
}

type Refresh_materialized_view_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRefresh_materialized_view_stmtContext() *Refresh_materialized_view_stmtContext {
	var p = new(Refresh_materialized_view_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_refresh_materialized_view_stmt
	return p
}

func (*Refresh_materialized_view_stmtContext) IsRefresh_materialized_view_stmtContext() {}

func NewRefresh_materialized_view_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Refresh_materialized_view_stmtContext {
	var p = new(Refresh_materialized_view_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_refresh_materialized_view_stmt

	return p
}

func (s *Refresh_materialized_view_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Refresh_materialized_view_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Refresh_materialized_view_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Refresh_materialized_view_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Refresh_materialized_view_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterRefresh_materialized_view_stmt(s)
	}
}

func (s *Refresh_materialized_view_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitRefresh_materialized_view_stmt(s)
	}
}

func (p *PostgreSQLParser) Refresh_materialized_view_stmt() (localctx IRefresh_materialized_view_stmtContext) {
	localctx = NewRefresh_materialized_view_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, PostgreSQLParserRULE_refresh_materialized_view_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3805)
		p.Todo_implement()
	}

	return localctx
}

// IReindex_stmtContext is an interface to support dynamic dispatch.
type IReindex_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsReindex_stmtContext differentiates from other interfaces.
	IsReindex_stmtContext()
}

type Reindex_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyReindex_stmtContext() *Reindex_stmtContext {
	var p = new(Reindex_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_reindex_stmt
	return p
}

func (*Reindex_stmtContext) IsReindex_stmtContext() {}

func NewReindex_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Reindex_stmtContext {
	var p = new(Reindex_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_reindex_stmt

	return p
}

func (s *Reindex_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Reindex_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Reindex_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Reindex_stmtContext) REINDEX() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREINDEX, 0)
}

func (s *Reindex_stmtContext) INDEX() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINDEX, 0)
}

func (s *Reindex_stmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLE, 0)
}

func (s *Reindex_stmtContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCHEMA, 0)
}

func (s *Reindex_stmtContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDATABASE, 0)
}

func (s *Reindex_stmtContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSYSTEM, 0)
}

func (s *Reindex_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Reindex_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Reindex_stmtContext) VERBOSE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVERBOSE, 0)
}

func (s *Reindex_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Reindex_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Reindex_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Reindex_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterReindex_stmt(s)
	}
}

func (s *Reindex_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitReindex_stmt(s)
	}
}

func (p *PostgreSQLParser) Reindex_stmt() (localctx IReindex_stmtContext) {
	localctx = NewReindex_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, PostgreSQLParserRULE_reindex_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3807)
		p.Match(PostgreSQLParserREINDEX)
	}
	p.SetState(3811)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserOPEN_PAREN {
		{
			p.SetState(3808)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(3809)
			p.Match(PostgreSQLParserVERBOSE)
		}
		{
			p.SetState(3810)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}
	{
		p.SetState(3813)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PostgreSQLParserDATABASE || _la == PostgreSQLParserINDEX || _la == PostgreSQLParserSCHEMA || _la == PostgreSQLParserSYSTEM || _la == PostgreSQLParserTABLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(3814)

		var _x = p.identifier(0)

		localctx.(*Reindex_stmtContext).name = _x
	}

	return localctx
}

// IRelease_savepoint_stmtContext is an interface to support dynamic dispatch.
type IRelease_savepoint_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSavepoint_name returns the savepoint_name rule contexts.
	GetSavepoint_name() IIdentifierContext

	// SetSavepoint_name sets the savepoint_name rule contexts.
	SetSavepoint_name(IIdentifierContext)

	// IsRelease_savepoint_stmtContext differentiates from other interfaces.
	IsRelease_savepoint_stmtContext()
}

type Release_savepoint_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	savepoint_name IIdentifierContext
}

func NewEmptyRelease_savepoint_stmtContext() *Release_savepoint_stmtContext {
	var p = new(Release_savepoint_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_release_savepoint_stmt
	return p
}

func (*Release_savepoint_stmtContext) IsRelease_savepoint_stmtContext() {}

func NewRelease_savepoint_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Release_savepoint_stmtContext {
	var p = new(Release_savepoint_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_release_savepoint_stmt

	return p
}

func (s *Release_savepoint_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Release_savepoint_stmtContext) GetSavepoint_name() IIdentifierContext {
	return s.savepoint_name
}

func (s *Release_savepoint_stmtContext) SetSavepoint_name(v IIdentifierContext) { s.savepoint_name = v }

func (s *Release_savepoint_stmtContext) RELEASE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRELEASE, 0)
}

func (s *Release_savepoint_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Release_savepoint_stmtContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSAVEPOINT, 0)
}

func (s *Release_savepoint_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Release_savepoint_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Release_savepoint_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterRelease_savepoint_stmt(s)
	}
}

func (s *Release_savepoint_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitRelease_savepoint_stmt(s)
	}
}

func (p *PostgreSQLParser) Release_savepoint_stmt() (localctx IRelease_savepoint_stmtContext) {
	localctx = NewRelease_savepoint_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, PostgreSQLParserRULE_release_savepoint_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3816)
		p.Match(PostgreSQLParserRELEASE)
	}
	p.SetState(3818)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 402, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3817)
			p.Match(PostgreSQLParserSAVEPOINT)
		}

	}
	{
		p.SetState(3820)

		var _x = p.identifier(0)

		localctx.(*Release_savepoint_stmtContext).savepoint_name = _x
	}

	return localctx
}

// IReset_stmtContext is an interface to support dynamic dispatch.
type IReset_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConfiguration_parameter returns the configuration_parameter rule contexts.
	GetConfiguration_parameter() IIdentifierContext

	// SetConfiguration_parameter sets the configuration_parameter rule contexts.
	SetConfiguration_parameter(IIdentifierContext)

	// IsReset_stmtContext differentiates from other interfaces.
	IsReset_stmtContext()
}

type Reset_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	configuration_parameter IIdentifierContext
}

func NewEmptyReset_stmtContext() *Reset_stmtContext {
	var p = new(Reset_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_reset_stmt
	return p
}

func (*Reset_stmtContext) IsReset_stmtContext() {}

func NewReset_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Reset_stmtContext {
	var p = new(Reset_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_reset_stmt

	return p
}

func (s *Reset_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Reset_stmtContext) GetConfiguration_parameter() IIdentifierContext {
	return s.configuration_parameter
}

func (s *Reset_stmtContext) SetConfiguration_parameter(v IIdentifierContext) {
	s.configuration_parameter = v
}

func (s *Reset_stmtContext) RESET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESET, 0)
}

func (s *Reset_stmtContext) ALL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALL, 0)
}

func (s *Reset_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Reset_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Reset_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Reset_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterReset_stmt(s)
	}
}

func (s *Reset_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitReset_stmt(s)
	}
}

func (p *PostgreSQLParser) Reset_stmt() (localctx IReset_stmtContext) {
	localctx = NewReset_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, PostgreSQLParserRULE_reset_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3822)
		p.Match(PostgreSQLParserRESET)
	}
	p.SetState(3825)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
		{
			p.SetState(3823)

			var _x = p.identifier(0)

			localctx.(*Reset_stmtContext).configuration_parameter = _x
		}

	case PostgreSQLParserALL:
		{
			p.SetState(3824)
			p.Match(PostgreSQLParserALL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IRevoke_stmtContext is an interface to support dynamic dispatch.
type IRevoke_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRevoke_stmtContext differentiates from other interfaces.
	IsRevoke_stmtContext()
}

type Revoke_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRevoke_stmtContext() *Revoke_stmtContext {
	var p = new(Revoke_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_revoke_stmt
	return p
}

func (*Revoke_stmtContext) IsRevoke_stmtContext() {}

func NewRevoke_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Revoke_stmtContext {
	var p = new(Revoke_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_revoke_stmt

	return p
}

func (s *Revoke_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Revoke_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Revoke_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Revoke_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Revoke_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterRevoke_stmt(s)
	}
}

func (s *Revoke_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitRevoke_stmt(s)
	}
}

func (p *PostgreSQLParser) Revoke_stmt() (localctx IRevoke_stmtContext) {
	localctx = NewRevoke_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, PostgreSQLParserRULE_revoke_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3827)
		p.Todo_implement()
	}

	return localctx
}

// IRollback_stmtContext is an interface to support dynamic dispatch.
type IRollback_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRollback_stmtContext differentiates from other interfaces.
	IsRollback_stmtContext()
}

type Rollback_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRollback_stmtContext() *Rollback_stmtContext {
	var p = new(Rollback_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_rollback_stmt
	return p
}

func (*Rollback_stmtContext) IsRollback_stmtContext() {}

func NewRollback_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rollback_stmtContext {
	var p = new(Rollback_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_rollback_stmt

	return p
}

func (s *Rollback_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Rollback_stmtContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROLLBACK, 0)
}

func (s *Rollback_stmtContext) WORK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWORK, 0)
}

func (s *Rollback_stmtContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRANSACTION, 0)
}

func (s *Rollback_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rollback_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rollback_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterRollback_stmt(s)
	}
}

func (s *Rollback_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitRollback_stmt(s)
	}
}

func (p *PostgreSQLParser) Rollback_stmt() (localctx IRollback_stmtContext) {
	localctx = NewRollback_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, PostgreSQLParserRULE_rollback_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3829)
		p.Match(PostgreSQLParserROLLBACK)
	}
	p.SetState(3831)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserTRANSACTION || _la == PostgreSQLParserWORK {
		{
			p.SetState(3830)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserTRANSACTION || _la == PostgreSQLParserWORK) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IRollback_prepared_stmtContext is an interface to support dynamic dispatch.
type IRollback_prepared_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTransaction_id returns the transaction_id token.
	GetTransaction_id() antlr.Token

	// SetTransaction_id sets the transaction_id token.
	SetTransaction_id(antlr.Token)

	// IsRollback_prepared_stmtContext differentiates from other interfaces.
	IsRollback_prepared_stmtContext()
}

type Rollback_prepared_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	transaction_id antlr.Token
}

func NewEmptyRollback_prepared_stmtContext() *Rollback_prepared_stmtContext {
	var p = new(Rollback_prepared_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_rollback_prepared_stmt
	return p
}

func (*Rollback_prepared_stmtContext) IsRollback_prepared_stmtContext() {}

func NewRollback_prepared_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rollback_prepared_stmtContext {
	var p = new(Rollback_prepared_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_rollback_prepared_stmt

	return p
}

func (s *Rollback_prepared_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Rollback_prepared_stmtContext) GetTransaction_id() antlr.Token { return s.transaction_id }

func (s *Rollback_prepared_stmtContext) SetTransaction_id(v antlr.Token) { s.transaction_id = v }

func (s *Rollback_prepared_stmtContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROLLBACK, 0)
}

func (s *Rollback_prepared_stmtContext) PREPARED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPREPARED, 0)
}

func (s *Rollback_prepared_stmtContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, 0)
}

func (s *Rollback_prepared_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rollback_prepared_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rollback_prepared_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterRollback_prepared_stmt(s)
	}
}

func (s *Rollback_prepared_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitRollback_prepared_stmt(s)
	}
}

func (p *PostgreSQLParser) Rollback_prepared_stmt() (localctx IRollback_prepared_stmtContext) {
	localctx = NewRollback_prepared_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, PostgreSQLParserRULE_rollback_prepared_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3833)
		p.Match(PostgreSQLParserROLLBACK)
	}
	{
		p.SetState(3834)
		p.Match(PostgreSQLParserPREPARED)
	}
	{
		p.SetState(3835)

		var _m = p.Match(PostgreSQLParserINTEGER_LITERAL)

		localctx.(*Rollback_prepared_stmtContext).transaction_id = _m
	}

	return localctx
}

// IRollback_to_savepoint_stmtContext is an interface to support dynamic dispatch.
type IRollback_to_savepoint_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSavepoint_name returns the savepoint_name rule contexts.
	GetSavepoint_name() IIdentifierContext

	// SetSavepoint_name sets the savepoint_name rule contexts.
	SetSavepoint_name(IIdentifierContext)

	// IsRollback_to_savepoint_stmtContext differentiates from other interfaces.
	IsRollback_to_savepoint_stmtContext()
}

type Rollback_to_savepoint_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	savepoint_name IIdentifierContext
}

func NewEmptyRollback_to_savepoint_stmtContext() *Rollback_to_savepoint_stmtContext {
	var p = new(Rollback_to_savepoint_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_rollback_to_savepoint_stmt
	return p
}

func (*Rollback_to_savepoint_stmtContext) IsRollback_to_savepoint_stmtContext() {}

func NewRollback_to_savepoint_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rollback_to_savepoint_stmtContext {
	var p = new(Rollback_to_savepoint_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_rollback_to_savepoint_stmt

	return p
}

func (s *Rollback_to_savepoint_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Rollback_to_savepoint_stmtContext) GetSavepoint_name() IIdentifierContext {
	return s.savepoint_name
}

func (s *Rollback_to_savepoint_stmtContext) SetSavepoint_name(v IIdentifierContext) {
	s.savepoint_name = v
}

func (s *Rollback_to_savepoint_stmtContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROLLBACK, 0)
}

func (s *Rollback_to_savepoint_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Rollback_to_savepoint_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Rollback_to_savepoint_stmtContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSAVEPOINT, 0)
}

func (s *Rollback_to_savepoint_stmtContext) WORK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWORK, 0)
}

func (s *Rollback_to_savepoint_stmtContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRANSACTION, 0)
}

func (s *Rollback_to_savepoint_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rollback_to_savepoint_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rollback_to_savepoint_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterRollback_to_savepoint_stmt(s)
	}
}

func (s *Rollback_to_savepoint_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitRollback_to_savepoint_stmt(s)
	}
}

func (p *PostgreSQLParser) Rollback_to_savepoint_stmt() (localctx IRollback_to_savepoint_stmtContext) {
	localctx = NewRollback_to_savepoint_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, PostgreSQLParserRULE_rollback_to_savepoint_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3837)
		p.Match(PostgreSQLParserROLLBACK)
	}
	p.SetState(3839)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserTRANSACTION || _la == PostgreSQLParserWORK {
		{
			p.SetState(3838)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserTRANSACTION || _la == PostgreSQLParserWORK) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(3841)
		p.Match(PostgreSQLParserTO)
	}
	p.SetState(3843)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 406, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3842)
			p.Match(PostgreSQLParserSAVEPOINT)
		}

	}
	{
		p.SetState(3845)

		var _x = p.identifier(0)

		localctx.(*Rollback_to_savepoint_stmtContext).savepoint_name = _x
	}

	return localctx
}

// ISavepoint_stmtContext is an interface to support dynamic dispatch.
type ISavepoint_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSavepoint_name returns the savepoint_name rule contexts.
	GetSavepoint_name() IIdentifierContext

	// SetSavepoint_name sets the savepoint_name rule contexts.
	SetSavepoint_name(IIdentifierContext)

	// IsSavepoint_stmtContext differentiates from other interfaces.
	IsSavepoint_stmtContext()
}

type Savepoint_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	savepoint_name IIdentifierContext
}

func NewEmptySavepoint_stmtContext() *Savepoint_stmtContext {
	var p = new(Savepoint_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_savepoint_stmt
	return p
}

func (*Savepoint_stmtContext) IsSavepoint_stmtContext() {}

func NewSavepoint_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Savepoint_stmtContext {
	var p = new(Savepoint_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_savepoint_stmt

	return p
}

func (s *Savepoint_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Savepoint_stmtContext) GetSavepoint_name() IIdentifierContext { return s.savepoint_name }

func (s *Savepoint_stmtContext) SetSavepoint_name(v IIdentifierContext) { s.savepoint_name = v }

func (s *Savepoint_stmtContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSAVEPOINT, 0)
}

func (s *Savepoint_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Savepoint_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Savepoint_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Savepoint_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterSavepoint_stmt(s)
	}
}

func (s *Savepoint_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitSavepoint_stmt(s)
	}
}

func (p *PostgreSQLParser) Savepoint_stmt() (localctx ISavepoint_stmtContext) {
	localctx = NewSavepoint_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, PostgreSQLParserRULE_savepoint_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3847)
		p.Match(PostgreSQLParserSAVEPOINT)
	}
	{
		p.SetState(3848)

		var _x = p.identifier(0)

		localctx.(*Savepoint_stmtContext).savepoint_name = _x
	}

	return localctx
}

// ISecurity_label_stmtContext is an interface to support dynamic dispatch.
type ISecurity_label_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLarge_object_oid returns the large_object_oid token.
	GetLarge_object_oid() antlr.Token

	// GetLabel returns the label token.
	GetLabel() antlr.Token

	// SetLarge_object_oid sets the large_object_oid token.
	SetLarge_object_oid(antlr.Token)

	// SetLabel sets the label token.
	SetLabel(antlr.Token)

	// GetProvider returns the provider rule contexts.
	GetProvider() IName_Context

	// GetObject_name returns the object_name rule contexts.
	GetObject_name() IIdentifierContext

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() IIdentifierContext

	// GetColumn_name_ returns the column_name_ rule contexts.
	GetColumn_name_() IColumn_nameContext

	// GetAggregate_name returns the aggregate_name rule contexts.
	GetAggregate_name() IIdentifierContext

	// GetFunction_name returns the function_name rule contexts.
	GetFunction_name() IIdentifierContext

	// SetProvider sets the provider rule contexts.
	SetProvider(IName_Context)

	// SetObject_name sets the object_name rule contexts.
	SetObject_name(IIdentifierContext)

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(IIdentifierContext)

	// SetColumn_name_ sets the column_name_ rule contexts.
	SetColumn_name_(IColumn_nameContext)

	// SetAggregate_name sets the aggregate_name rule contexts.
	SetAggregate_name(IIdentifierContext)

	// SetFunction_name sets the function_name rule contexts.
	SetFunction_name(IIdentifierContext)

	// IsSecurity_label_stmtContext differentiates from other interfaces.
	IsSecurity_label_stmtContext()
}

type Security_label_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	provider         IName_Context
	object_name      IIdentifierContext
	table_name       IIdentifierContext
	column_name_     IColumn_nameContext
	aggregate_name   IIdentifierContext
	function_name    IIdentifierContext
	large_object_oid antlr.Token
	label            antlr.Token
}

func NewEmptySecurity_label_stmtContext() *Security_label_stmtContext {
	var p = new(Security_label_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_security_label_stmt
	return p
}

func (*Security_label_stmtContext) IsSecurity_label_stmtContext() {}

func NewSecurity_label_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Security_label_stmtContext {
	var p = new(Security_label_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_security_label_stmt

	return p
}

func (s *Security_label_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Security_label_stmtContext) GetLarge_object_oid() antlr.Token { return s.large_object_oid }

func (s *Security_label_stmtContext) GetLabel() antlr.Token { return s.label }

func (s *Security_label_stmtContext) SetLarge_object_oid(v antlr.Token) { s.large_object_oid = v }

func (s *Security_label_stmtContext) SetLabel(v antlr.Token) { s.label = v }

func (s *Security_label_stmtContext) GetProvider() IName_Context { return s.provider }

func (s *Security_label_stmtContext) GetObject_name() IIdentifierContext { return s.object_name }

func (s *Security_label_stmtContext) GetTable_name() IIdentifierContext { return s.table_name }

func (s *Security_label_stmtContext) GetColumn_name_() IColumn_nameContext { return s.column_name_ }

func (s *Security_label_stmtContext) GetAggregate_name() IIdentifierContext { return s.aggregate_name }

func (s *Security_label_stmtContext) GetFunction_name() IIdentifierContext { return s.function_name }

func (s *Security_label_stmtContext) SetProvider(v IName_Context) { s.provider = v }

func (s *Security_label_stmtContext) SetObject_name(v IIdentifierContext) { s.object_name = v }

func (s *Security_label_stmtContext) SetTable_name(v IIdentifierContext) { s.table_name = v }

func (s *Security_label_stmtContext) SetColumn_name_(v IColumn_nameContext) { s.column_name_ = v }

func (s *Security_label_stmtContext) SetAggregate_name(v IIdentifierContext) { s.aggregate_name = v }

func (s *Security_label_stmtContext) SetFunction_name(v IIdentifierContext) { s.function_name = v }

func (s *Security_label_stmtContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSECURITY, 0)
}

func (s *Security_label_stmtContext) LABEL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLABEL, 0)
}

func (s *Security_label_stmtContext) ON() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserON, 0)
}

func (s *Security_label_stmtContext) IS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIS, 0)
}

func (s *Security_label_stmtContext) SINGLEQ_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSINGLEQ_STRING_LITERAL, 0)
}

func (s *Security_label_stmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLE, 0)
}

func (s *Security_label_stmtContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOLUMN, 0)
}

func (s *Security_label_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDOT, 0)
}

func (s *Security_label_stmtContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAGGREGATE, 0)
}

func (s *Security_label_stmtContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Security_label_stmtContext) Aggregate_signature() IAggregate_signatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAggregate_signatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAggregate_signatureContext)
}

func (s *Security_label_stmtContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Security_label_stmtContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDATABASE, 0)
}

func (s *Security_label_stmtContext) DOMAIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDOMAIN, 0)
}

func (s *Security_label_stmtContext) EVENT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEVENT, 0)
}

func (s *Security_label_stmtContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRIGGER, 0)
}

func (s *Security_label_stmtContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOREIGN, 0)
}

func (s *Security_label_stmtContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFUNCTION, 0)
}

func (s *Security_label_stmtContext) Func_sig() IFunc_sigContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_sigContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_sigContext)
}

func (s *Security_label_stmtContext) LARGE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLARGE, 0)
}

func (s *Security_label_stmtContext) OBJECT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOBJECT, 0)
}

func (s *Security_label_stmtContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMATERIALIZED, 0)
}

func (s *Security_label_stmtContext) VIEW() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVIEW, 0)
}

func (s *Security_label_stmtContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLANGUAGE, 0)
}

func (s *Security_label_stmtContext) PUBLICATION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPUBLICATION, 0)
}

func (s *Security_label_stmtContext) ROLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROLE, 0)
}

func (s *Security_label_stmtContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCHEMA, 0)
}

func (s *Security_label_stmtContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSEQUENCE, 0)
}

func (s *Security_label_stmtContext) SUBSCRIPTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSUBSCRIPTION, 0)
}

func (s *Security_label_stmtContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLESPACE, 0)
}

func (s *Security_label_stmtContext) TYPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTYPE, 0)
}

func (s *Security_label_stmtContext) FOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOR, 0)
}

func (s *Security_label_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Security_label_stmtContext) Column_name() IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Security_label_stmtContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, 0)
}

func (s *Security_label_stmtContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Security_label_stmtContext) PROCEDURAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPROCEDURAL, 0)
}

func (s *Security_label_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Security_label_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Security_label_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterSecurity_label_stmt(s)
	}
}

func (s *Security_label_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitSecurity_label_stmt(s)
	}
}

func (p *PostgreSQLParser) Security_label_stmt() (localctx ISecurity_label_stmtContext) {
	localctx = NewSecurity_label_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, PostgreSQLParserRULE_security_label_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3850)
		p.Match(PostgreSQLParserSECURITY)
	}
	{
		p.SetState(3851)
		p.Match(PostgreSQLParserLABEL)
	}
	p.SetState(3854)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserFOR {
		{
			p.SetState(3852)
			p.Match(PostgreSQLParserFOR)
		}
		{
			p.SetState(3853)

			var _x = p.Name_()

			localctx.(*Security_label_stmtContext).provider = _x
		}

	}
	{
		p.SetState(3856)
		p.Match(PostgreSQLParserON)
	}
	p.SetState(3911)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserTABLE:
		{
			p.SetState(3857)
			p.Match(PostgreSQLParserTABLE)
		}
		{
			p.SetState(3858)

			var _x = p.identifier(0)

			localctx.(*Security_label_stmtContext).object_name = _x
		}

	case PostgreSQLParserCOLUMN:
		{
			p.SetState(3859)
			p.Match(PostgreSQLParserCOLUMN)
		}
		{
			p.SetState(3860)

			var _x = p.identifier(0)

			localctx.(*Security_label_stmtContext).table_name = _x
		}
		{
			p.SetState(3861)
			p.Match(PostgreSQLParserDOT)
		}
		{
			p.SetState(3862)

			var _x = p.Column_name()

			localctx.(*Security_label_stmtContext).column_name_ = _x
		}

	case PostgreSQLParserAGGREGATE:
		{
			p.SetState(3864)
			p.Match(PostgreSQLParserAGGREGATE)
		}
		{
			p.SetState(3865)

			var _x = p.identifier(0)

			localctx.(*Security_label_stmtContext).aggregate_name = _x
		}
		{
			p.SetState(3866)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(3867)
			p.Aggregate_signature()
		}
		{
			p.SetState(3868)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case PostgreSQLParserDATABASE:
		{
			p.SetState(3870)
			p.Match(PostgreSQLParserDATABASE)
		}
		{
			p.SetState(3871)

			var _x = p.identifier(0)

			localctx.(*Security_label_stmtContext).object_name = _x
		}

	case PostgreSQLParserDOMAIN:
		{
			p.SetState(3872)
			p.Match(PostgreSQLParserDOMAIN)
		}
		{
			p.SetState(3873)

			var _x = p.identifier(0)

			localctx.(*Security_label_stmtContext).object_name = _x
		}

	case PostgreSQLParserEVENT:
		{
			p.SetState(3874)
			p.Match(PostgreSQLParserEVENT)
		}
		{
			p.SetState(3875)
			p.Match(PostgreSQLParserTRIGGER)
		}
		{
			p.SetState(3876)

			var _x = p.identifier(0)

			localctx.(*Security_label_stmtContext).object_name = _x
		}

	case PostgreSQLParserFOREIGN:
		{
			p.SetState(3877)
			p.Match(PostgreSQLParserFOREIGN)
		}
		{
			p.SetState(3878)
			p.Match(PostgreSQLParserTABLE)
		}
		{
			p.SetState(3879)

			var _x = p.identifier(0)

			localctx.(*Security_label_stmtContext).object_name = _x
		}

	case PostgreSQLParserFUNCTION:
		{
			p.SetState(3880)
			p.Match(PostgreSQLParserFUNCTION)
		}
		{
			p.SetState(3881)

			var _x = p.identifier(0)

			localctx.(*Security_label_stmtContext).function_name = _x
		}
		{
			p.SetState(3882)
			p.Func_sig()
		}

	case PostgreSQLParserLARGE:
		{
			p.SetState(3884)
			p.Match(PostgreSQLParserLARGE)
		}
		{
			p.SetState(3885)
			p.Match(PostgreSQLParserOBJECT)
		}
		{
			p.SetState(3886)

			var _m = p.Match(PostgreSQLParserINTEGER_LITERAL)

			localctx.(*Security_label_stmtContext).large_object_oid = _m
		}

	case PostgreSQLParserMATERIALIZED:
		{
			p.SetState(3887)
			p.Match(PostgreSQLParserMATERIALIZED)
		}
		{
			p.SetState(3888)
			p.Match(PostgreSQLParserVIEW)
		}
		{
			p.SetState(3889)

			var _x = p.identifier(0)

			localctx.(*Security_label_stmtContext).object_name = _x
		}

	case PostgreSQLParserLANGUAGE, PostgreSQLParserPROCEDURAL:
		p.SetState(3891)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserPROCEDURAL {
			{
				p.SetState(3890)
				p.Match(PostgreSQLParserPROCEDURAL)
			}

		}
		{
			p.SetState(3893)
			p.Match(PostgreSQLParserLANGUAGE)
		}
		{
			p.SetState(3894)

			var _x = p.identifier(0)

			localctx.(*Security_label_stmtContext).object_name = _x
		}

	case PostgreSQLParserPUBLICATION:
		{
			p.SetState(3895)
			p.Match(PostgreSQLParserPUBLICATION)
		}
		{
			p.SetState(3896)

			var _x = p.identifier(0)

			localctx.(*Security_label_stmtContext).object_name = _x
		}

	case PostgreSQLParserROLE:
		{
			p.SetState(3897)
			p.Match(PostgreSQLParserROLE)
		}
		{
			p.SetState(3898)

			var _x = p.identifier(0)

			localctx.(*Security_label_stmtContext).object_name = _x
		}

	case PostgreSQLParserSCHEMA:
		{
			p.SetState(3899)
			p.Match(PostgreSQLParserSCHEMA)
		}
		{
			p.SetState(3900)

			var _x = p.identifier(0)

			localctx.(*Security_label_stmtContext).object_name = _x
		}

	case PostgreSQLParserSEQUENCE:
		{
			p.SetState(3901)
			p.Match(PostgreSQLParserSEQUENCE)
		}
		{
			p.SetState(3902)

			var _x = p.identifier(0)

			localctx.(*Security_label_stmtContext).object_name = _x
		}

	case PostgreSQLParserSUBSCRIPTION:
		{
			p.SetState(3903)
			p.Match(PostgreSQLParserSUBSCRIPTION)
		}
		{
			p.SetState(3904)

			var _x = p.identifier(0)

			localctx.(*Security_label_stmtContext).object_name = _x
		}

	case PostgreSQLParserTABLESPACE:
		{
			p.SetState(3905)
			p.Match(PostgreSQLParserTABLESPACE)
		}
		{
			p.SetState(3906)

			var _x = p.identifier(0)

			localctx.(*Security_label_stmtContext).object_name = _x
		}

	case PostgreSQLParserTYPE:
		{
			p.SetState(3907)
			p.Match(PostgreSQLParserTYPE)
		}
		{
			p.SetState(3908)

			var _x = p.identifier(0)

			localctx.(*Security_label_stmtContext).object_name = _x
		}

	case PostgreSQLParserVIEW:
		{
			p.SetState(3909)
			p.Match(PostgreSQLParserVIEW)
		}
		{
			p.SetState(3910)

			var _x = p.identifier(0)

			localctx.(*Security_label_stmtContext).object_name = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(3913)
		p.Match(PostgreSQLParserIS)
	}
	{
		p.SetState(3914)

		var _m = p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)

		localctx.(*Security_label_stmtContext).label = _m
	}

	return localctx
}

// ISelect_stmtContext is an interface to support dynamic dispatch.
type ISelect_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_stmtContext differentiates from other interfaces.
	IsSelect_stmtContext()
}

type Select_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_stmtContext() *Select_stmtContext {
	var p = new(Select_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_select_stmt
	return p
}

func (*Select_stmtContext) IsSelect_stmtContext() {}

func NewSelect_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_stmtContext {
	var p = new(Select_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_select_stmt

	return p
}

func (s *Select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_stmtContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Select_stmtContext) Where_clause() IWhere_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhere_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhere_clauseContext)
}

func (s *Select_stmtContext) Group_by_clause() IGroup_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroup_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroup_by_clauseContext)
}

func (s *Select_stmtContext) Having_clause() IHaving_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHaving_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHaving_clauseContext)
}

func (s *Select_stmtContext) Window_clause() IWindow_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_clauseContext)
}

func (s *Select_stmtContext) AllCombine_clause() []ICombine_clauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICombine_clauseContext)(nil)).Elem())
	var tst = make([]ICombine_clauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICombine_clauseContext)
		}
	}

	return tst
}

func (s *Select_stmtContext) Combine_clause(i int) ICombine_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICombine_clauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICombine_clauseContext)
}

func (s *Select_stmtContext) Order_by_clause() IOrder_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Select_stmtContext) Limit_clause() ILimit_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimit_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimit_clauseContext)
}

func (s *Select_stmtContext) Offset_clause() IOffset_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOffset_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOffset_clauseContext)
}

func (s *Select_stmtContext) Fetch_clause() IFetch_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFetch_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFetch_clauseContext)
}

func (s *Select_stmtContext) For_clause() IFor_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_clauseContext)
}

func (s *Select_stmtContext) SELECT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSELECT, 0)
}

func (s *Select_stmtContext) Selector_clause() ISelector_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelector_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelector_clauseContext)
}

func (s *Select_stmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLE, 0)
}

func (s *Select_stmtContext) Table_name_() ITable_name_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_Context)
}

func (s *Select_stmtContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Select_stmtContext) From_clause() IFrom_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrom_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrom_clauseContext)
}

func (s *Select_stmtContext) ONLY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserONLY, 0)
}

func (s *Select_stmtContext) STAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTAR, 0)
}

func (s *Select_stmtContext) AllOPEN_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPEN_PAREN)
}

func (s *Select_stmtContext) OPEN_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, i)
}

func (s *Select_stmtContext) AllCLOSE_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCLOSE_PAREN)
}

func (s *Select_stmtContext) CLOSE_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, i)
}

func (s *Select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterSelect_stmt(s)
	}
}

func (s *Select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitSelect_stmt(s)
	}
}

func (p *PostgreSQLParser) Select_stmt() (localctx ISelect_stmtContext) {
	localctx = NewSelect_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, PostgreSQLParserRULE_select_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3917)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserWITH {
		{
			p.SetState(3916)
			p.With_clause()
		}

	}
	p.SetState(3945)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserSELECT:
		{
			p.SetState(3919)
			p.Match(PostgreSQLParserSELECT)
		}
		{
			p.SetState(3920)
			p.Selector_clause()
		}
		p.SetState(3922)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 411, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3921)
				p.From_clause()
			}

		}

	case PostgreSQLParserTABLE:
		{
			p.SetState(3924)
			p.Match(PostgreSQLParserTABLE)
		}
		p.SetState(3926)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserONLY {
			{
				p.SetState(3925)
				p.Match(PostgreSQLParserONLY)
			}

		}
		{
			p.SetState(3928)
			p.Table_name_()
		}
		p.SetState(3930)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 413, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3929)
				p.Match(PostgreSQLParserSTAR)
			}

		}

	case PostgreSQLParserOPEN_PAREN:
		p.SetState(3933)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(3932)
					p.Match(PostgreSQLParserOPEN_PAREN)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(3935)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 414, p.GetParserRuleContext())
		}
		{
			p.SetState(3937)
			p.Select_stmt()
		}
		p.SetState(3939)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == PostgreSQLParserCLOSE_PAREN {
			{
				p.SetState(3938)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

			p.SetState(3941)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3943)
			p.Combine_clause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(3948)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 417, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3947)
			p.Where_clause()
		}

	}
	p.SetState(3951)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 418, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3950)
			p.Group_by_clause()
		}

	}
	p.SetState(3954)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 419, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3953)
			p.Having_clause()
		}

	}
	p.SetState(3957)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 420, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3956)
			p.Window_clause()
		}

	}
	p.SetState(3960)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 421, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3959)
			p.Combine_clause()
		}

	}
	p.SetState(3963)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 422, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3962)
			p.Order_by_clause()
		}

	}
	p.SetState(3966)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 423, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3965)
			p.Limit_clause()
		}

	}
	p.SetState(3969)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 424, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3968)
			p.Offset_clause()
		}

	}
	p.SetState(3972)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 425, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3971)
			p.Fetch_clause()
		}

	}
	p.SetState(3975)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 426, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3974)
			p.For_clause()
		}

	}

	return localctx
}

// ISelect_into_stmtContext is an interface to support dynamic dispatch.
type ISelect_into_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNew_table returns the new_table rule contexts.
	GetNew_table() ITable_name_Context

	// SetNew_table sets the new_table rule contexts.
	SetNew_table(ITable_name_Context)

	// IsSelect_into_stmtContext differentiates from other interfaces.
	IsSelect_into_stmtContext()
}

type Select_into_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	new_table ITable_name_Context
}

func NewEmptySelect_into_stmtContext() *Select_into_stmtContext {
	var p = new(Select_into_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_select_into_stmt
	return p
}

func (*Select_into_stmtContext) IsSelect_into_stmtContext() {}

func NewSelect_into_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_into_stmtContext {
	var p = new(Select_into_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_select_into_stmt

	return p
}

func (s *Select_into_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_into_stmtContext) GetNew_table() ITable_name_Context { return s.new_table }

func (s *Select_into_stmtContext) SetNew_table(v ITable_name_Context) { s.new_table = v }

func (s *Select_into_stmtContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Select_into_stmtContext) Where_clause() IWhere_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhere_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhere_clauseContext)
}

func (s *Select_into_stmtContext) Group_by_clause() IGroup_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroup_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroup_by_clauseContext)
}

func (s *Select_into_stmtContext) Having_clause() IHaving_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHaving_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHaving_clauseContext)
}

func (s *Select_into_stmtContext) Window_clause() IWindow_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_clauseContext)
}

func (s *Select_into_stmtContext) AllCombine_clause() []ICombine_clauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICombine_clauseContext)(nil)).Elem())
	var tst = make([]ICombine_clauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICombine_clauseContext)
		}
	}

	return tst
}

func (s *Select_into_stmtContext) Combine_clause(i int) ICombine_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICombine_clauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICombine_clauseContext)
}

func (s *Select_into_stmtContext) Order_by_clause() IOrder_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Select_into_stmtContext) Limit_clause() ILimit_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimit_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimit_clauseContext)
}

func (s *Select_into_stmtContext) Offset_clause() IOffset_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOffset_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOffset_clauseContext)
}

func (s *Select_into_stmtContext) Fetch_clause() IFetch_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFetch_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFetch_clauseContext)
}

func (s *Select_into_stmtContext) For_clause() IFor_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_clauseContext)
}

func (s *Select_into_stmtContext) SELECT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSELECT, 0)
}

func (s *Select_into_stmtContext) Selector_clause() ISelector_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelector_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelector_clauseContext)
}

func (s *Select_into_stmtContext) INTO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTO, 0)
}

func (s *Select_into_stmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLE, 0)
}

func (s *Select_into_stmtContext) Table_name_() ITable_name_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_Context)
}

func (s *Select_into_stmtContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Select_into_stmtContext) From_clause() IFrom_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrom_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrom_clauseContext)
}

func (s *Select_into_stmtContext) ONLY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserONLY, 0)
}

func (s *Select_into_stmtContext) STAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTAR, 0)
}

func (s *Select_into_stmtContext) AllOPEN_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPEN_PAREN)
}

func (s *Select_into_stmtContext) OPEN_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, i)
}

func (s *Select_into_stmtContext) AllCLOSE_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCLOSE_PAREN)
}

func (s *Select_into_stmtContext) CLOSE_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, i)
}

func (s *Select_into_stmtContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEMPORARY, 0)
}

func (s *Select_into_stmtContext) TEMP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEMP, 0)
}

func (s *Select_into_stmtContext) UNLOGGED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNLOGGED, 0)
}

func (s *Select_into_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_into_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_into_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterSelect_into_stmt(s)
	}
}

func (s *Select_into_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitSelect_into_stmt(s)
	}
}

func (p *PostgreSQLParser) Select_into_stmt() (localctx ISelect_into_stmtContext) {
	localctx = NewSelect_into_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, PostgreSQLParserRULE_select_into_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3978)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserWITH {
		{
			p.SetState(3977)
			p.With_clause()
		}

	}
	p.SetState(4014)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserSELECT:
		{
			p.SetState(3980)
			p.Match(PostgreSQLParserSELECT)
		}
		{
			p.SetState(3981)
			p.Selector_clause()
		}
		{
			p.SetState(3982)
			p.Match(PostgreSQLParserINTO)
		}
		p.SetState(3984)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 428, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3983)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserTEMP || _la == PostgreSQLParserTEMPORARY || _la == PostgreSQLParserUNLOGGED) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(3987)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserTABLE {
			{
				p.SetState(3986)
				p.Match(PostgreSQLParserTABLE)
			}

		}
		{
			p.SetState(3989)

			var _x = p.Table_name_()

			localctx.(*Select_into_stmtContext).new_table = _x
		}
		p.SetState(3991)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserFROM {
			{
				p.SetState(3990)
				p.From_clause()
			}

		}

	case PostgreSQLParserTABLE:
		{
			p.SetState(3993)
			p.Match(PostgreSQLParserTABLE)
		}
		p.SetState(3995)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserONLY {
			{
				p.SetState(3994)
				p.Match(PostgreSQLParserONLY)
			}

		}
		{
			p.SetState(3997)
			p.Table_name_()
		}
		p.SetState(3999)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserSTAR {
			{
				p.SetState(3998)
				p.Match(PostgreSQLParserSTAR)
			}

		}

	case PostgreSQLParserOPEN_PAREN:
		p.SetState(4002)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(4001)
					p.Match(PostgreSQLParserOPEN_PAREN)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(4004)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 433, p.GetParserRuleContext())
		}
		{
			p.SetState(4006)
			p.Select_stmt()
		}
		p.SetState(4008)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == PostgreSQLParserCLOSE_PAREN {
			{
				p.SetState(4007)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

			p.SetState(4010)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4012)
			p.Combine_clause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(4017)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserWHERE {
		{
			p.SetState(4016)
			p.Where_clause()
		}

	}
	p.SetState(4020)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserGROUP {
		{
			p.SetState(4019)
			p.Group_by_clause()
		}

	}
	p.SetState(4023)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserHAVING {
		{
			p.SetState(4022)
			p.Having_clause()
		}

	}
	p.SetState(4026)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserWINDOW {
		{
			p.SetState(4025)
			p.Window_clause()
		}

	}
	p.SetState(4029)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserEXCEPT || _la == PostgreSQLParserINTERSECT || _la == PostgreSQLParserUNION {
		{
			p.SetState(4028)
			p.Combine_clause()
		}

	}
	p.SetState(4032)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserORDER {
		{
			p.SetState(4031)
			p.Order_by_clause()
		}

	}
	p.SetState(4035)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserLIMIT {
		{
			p.SetState(4034)
			p.Limit_clause()
		}

	}
	p.SetState(4038)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserOFFSET {
		{
			p.SetState(4037)
			p.Offset_clause()
		}

	}
	p.SetState(4041)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserFETCH {
		{
			p.SetState(4040)
			p.Fetch_clause()
		}

	}
	p.SetState(4044)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserFOR {
		{
			p.SetState(4043)
			p.For_clause()
		}

	}

	return localctx
}

// IWith_clauseContext is an interface to support dynamic dispatch.
type IWith_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_clauseContext differentiates from other interfaces.
	IsWith_clauseContext()
}

type With_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_clauseContext() *With_clauseContext {
	var p = new(With_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_with_clause
	return p
}

func (*With_clauseContext) IsWith_clauseContext() {}

func NewWith_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_clauseContext {
	var p = new(With_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_with_clause

	return p
}

func (s *With_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *With_clauseContext) WITH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITH, 0)
}

func (s *With_clauseContext) AllWith_expr() []IWith_exprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWith_exprContext)(nil)).Elem())
	var tst = make([]IWith_exprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWith_exprContext)
		}
	}

	return tst
}

func (s *With_clauseContext) With_expr(i int) IWith_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_exprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWith_exprContext)
}

func (s *With_clauseContext) RECURSIVE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRECURSIVE, 0)
}

func (s *With_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *With_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *With_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterWith_clause(s)
	}
}

func (s *With_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitWith_clause(s)
	}
}

func (p *PostgreSQLParser) With_clause() (localctx IWith_clauseContext) {
	localctx = NewWith_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, PostgreSQLParserRULE_with_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4046)
		p.Match(PostgreSQLParserWITH)
	}
	p.SetState(4048)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 446, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4047)
			p.Match(PostgreSQLParserRECURSIVE)
		}

	}
	{
		p.SetState(4050)
		p.With_expr()
	}
	p.SetState(4055)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(4051)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(4052)
			p.With_expr()
		}

		p.SetState(4057)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IWith_exprContext is an interface to support dynamic dispatch.
type IWith_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_exprContext differentiates from other interfaces.
	IsWith_exprContext()
}

type With_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_exprContext() *With_exprContext {
	var p = new(With_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_with_expr
	return p
}

func (*With_exprContext) IsWith_exprContext() {}

func NewWith_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_exprContext {
	var p = new(With_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_with_expr

	return p
}

func (s *With_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *With_exprContext) Table_name_() ITable_name_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_Context)
}

func (s *With_exprContext) AS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAS, 0)
}

func (s *With_exprContext) AllOPEN_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPEN_PAREN)
}

func (s *With_exprContext) OPEN_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, i)
}

func (s *With_exprContext) AllCLOSE_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCLOSE_PAREN)
}

func (s *With_exprContext) CLOSE_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, i)
}

func (s *With_exprContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *With_exprContext) Insert_stmt() IInsert_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_stmtContext)
}

func (s *With_exprContext) Delete_stmt() IDelete_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelete_stmtContext)
}

func (s *With_exprContext) Update_stmt() IUpdate_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmtContext)
}

func (s *With_exprContext) Values_stmt() IValues_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValues_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValues_stmtContext)
}

func (s *With_exprContext) Name_list() IName_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_listContext)
}

func (s *With_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterWith_expr(s)
	}
}

func (s *With_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitWith_expr(s)
	}
}

func (p *PostgreSQLParser) With_expr() (localctx IWith_exprContext) {
	localctx = NewWith_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, PostgreSQLParserRULE_with_expr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4058)
		p.Table_name_()
	}
	p.SetState(4063)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserOPEN_PAREN {
		{
			p.SetState(4059)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(4060)
			p.Name_list()
		}
		{
			p.SetState(4061)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}
	{
		p.SetState(4065)
		p.Match(PostgreSQLParserAS)
	}
	{
		p.SetState(4066)
		p.Match(PostgreSQLParserOPEN_PAREN)
	}
	p.SetState(4072)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 449, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4067)
			p.Select_stmt()
		}

	case 2:
		{
			p.SetState(4068)
			p.Insert_stmt()
		}

	case 3:
		{
			p.SetState(4069)
			p.Delete_stmt()
		}

	case 4:
		{
			p.SetState(4070)
			p.Update_stmt()
		}

	case 5:
		{
			p.SetState(4071)
			p.Values_stmt()
		}

	}
	{
		p.SetState(4074)
		p.Match(PostgreSQLParserCLOSE_PAREN)
	}

	return localctx
}

// ISet_stmtContext is an interface to support dynamic dispatch.
type ISet_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConfiguration_parameter returns the configuration_parameter rule contexts.
	GetConfiguration_parameter() IIdentifierContext

	// GetValue returns the value rule contexts.
	GetValue() IParam_valueContext

	// SetConfiguration_parameter sets the configuration_parameter rule contexts.
	SetConfiguration_parameter(IIdentifierContext)

	// SetValue sets the value rule contexts.
	SetValue(IParam_valueContext)

	// IsSet_stmtContext differentiates from other interfaces.
	IsSet_stmtContext()
}

type Set_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	configuration_parameter IIdentifierContext
	value                   IParam_valueContext
}

func NewEmptySet_stmtContext() *Set_stmtContext {
	var p = new(Set_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_set_stmt
	return p
}

func (*Set_stmtContext) IsSet_stmtContext() {}

func NewSet_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_stmtContext {
	var p = new(Set_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_set_stmt

	return p
}

func (s *Set_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_stmtContext) GetConfiguration_parameter() IIdentifierContext {
	return s.configuration_parameter
}

func (s *Set_stmtContext) GetValue() IParam_valueContext { return s.value }

func (s *Set_stmtContext) SetConfiguration_parameter(v IIdentifierContext) {
	s.configuration_parameter = v
}

func (s *Set_stmtContext) SetValue(v IParam_valueContext) { s.value = v }

func (s *Set_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Set_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Set_stmtContext) TO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTO, 0)
}

func (s *Set_stmtContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEQUAL, 0)
}

func (s *Set_stmtContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEFAULT, 0)
}

func (s *Set_stmtContext) Param_value() IParam_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParam_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParam_valueContext)
}

func (s *Set_stmtContext) SESSION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSESSION, 0)
}

func (s *Set_stmtContext) AllLOCAL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserLOCAL)
}

func (s *Set_stmtContext) LOCAL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLOCAL, i)
}

func (s *Set_stmtContext) TIME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIME, 0)
}

func (s *Set_stmtContext) ZONE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserZONE, 0)
}

func (s *Set_stmtContext) Timezone() ITimezoneContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimezoneContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimezoneContext)
}

func (s *Set_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterSet_stmt(s)
	}
}

func (s *Set_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitSet_stmt(s)
	}
}

func (p *PostgreSQLParser) Set_stmt() (localctx ISet_stmtContext) {
	localctx = NewSet_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, PostgreSQLParserRULE_set_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4097)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 454, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4076)
			p.Match(PostgreSQLParserSET)
		}
		p.SetState(4078)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 450, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4077)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserLOCAL || _la == PostgreSQLParserSESSION) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(4080)

			var _x = p.identifier(0)

			localctx.(*Set_stmtContext).configuration_parameter = _x
		}
		{
			p.SetState(4081)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserTO || _la == PostgreSQLParserEQUAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(4084)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFALSE, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserON, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserYES, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserNUMERIC_LITERAL, PostgreSQLParserINTEGER_LITERAL, PostgreSQLParserSINGLEQ_STRING_LITERAL, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
			{
				p.SetState(4082)

				var _x = p.Param_value()

				localctx.(*Set_stmtContext).value = _x
			}

		case PostgreSQLParserDEFAULT:
			{
				p.SetState(4083)
				p.Match(PostgreSQLParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4086)
			p.Match(PostgreSQLParserSET)
		}
		p.SetState(4088)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserLOCAL || _la == PostgreSQLParserSESSION {
			{
				p.SetState(4087)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserLOCAL || _la == PostgreSQLParserSESSION) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(4090)
			p.Match(PostgreSQLParserTIME)
		}
		{
			p.SetState(4091)
			p.Match(PostgreSQLParserZONE)
		}
		p.SetState(4095)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case PostgreSQLParserNUMERIC_LITERAL, PostgreSQLParserINTEGER_LITERAL, PostgreSQLParserSINGLEQ_STRING_LITERAL, PostgreSQLParserDOUBLEQ_STRING_LITERAL:
			{
				p.SetState(4092)
				p.Timezone()
			}

		case PostgreSQLParserLOCAL:
			{
				p.SetState(4093)
				p.Match(PostgreSQLParserLOCAL)
			}

		case PostgreSQLParserDEFAULT:
			{
				p.SetState(4094)
				p.Match(PostgreSQLParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// ISet_constraints_stmtContext is an interface to support dynamic dispatch.
type ISet_constraints_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConstraints returns the constraints rule contexts.
	GetConstraints() IIdentifier_listContext

	// SetConstraints sets the constraints rule contexts.
	SetConstraints(IIdentifier_listContext)

	// IsSet_constraints_stmtContext differentiates from other interfaces.
	IsSet_constraints_stmtContext()
}

type Set_constraints_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	constraints IIdentifier_listContext
}

func NewEmptySet_constraints_stmtContext() *Set_constraints_stmtContext {
	var p = new(Set_constraints_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_set_constraints_stmt
	return p
}

func (*Set_constraints_stmtContext) IsSet_constraints_stmtContext() {}

func NewSet_constraints_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_constraints_stmtContext {
	var p = new(Set_constraints_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_set_constraints_stmt

	return p
}

func (s *Set_constraints_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_constraints_stmtContext) GetConstraints() IIdentifier_listContext { return s.constraints }

func (s *Set_constraints_stmtContext) SetConstraints(v IIdentifier_listContext) { s.constraints = v }

func (s *Set_constraints_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Set_constraints_stmtContext) CONSTRAINTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONSTRAINTS, 0)
}

func (s *Set_constraints_stmtContext) DEFERRED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEFERRED, 0)
}

func (s *Set_constraints_stmtContext) IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIMMEDIATE, 0)
}

func (s *Set_constraints_stmtContext) ALL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALL, 0)
}

func (s *Set_constraints_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Set_constraints_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_constraints_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_constraints_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterSet_constraints_stmt(s)
	}
}

func (s *Set_constraints_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitSet_constraints_stmt(s)
	}
}

func (p *PostgreSQLParser) Set_constraints_stmt() (localctx ISet_constraints_stmtContext) {
	localctx = NewSet_constraints_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, PostgreSQLParserRULE_set_constraints_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4099)
		p.Match(PostgreSQLParserSET)
	}
	{
		p.SetState(4100)
		p.Match(PostgreSQLParserCONSTRAINTS)
	}
	p.SetState(4103)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserALL:
		{
			p.SetState(4101)
			p.Match(PostgreSQLParserALL)
		}

	case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
		{
			p.SetState(4102)

			var _x = p.Identifier_list()

			localctx.(*Set_constraints_stmtContext).constraints = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(4105)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PostgreSQLParserDEFERRED || _la == PostgreSQLParserIMMEDIATE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISet_role_stmtContext is an interface to support dynamic dispatch.
type ISet_role_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRole_name_ returns the role_name_ rule contexts.
	GetRole_name_() IRole_nameContext

	// SetRole_name_ sets the role_name_ rule contexts.
	SetRole_name_(IRole_nameContext)

	// IsSet_role_stmtContext differentiates from other interfaces.
	IsSet_role_stmtContext()
}

type Set_role_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	role_name_ IRole_nameContext
}

func NewEmptySet_role_stmtContext() *Set_role_stmtContext {
	var p = new(Set_role_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_set_role_stmt
	return p
}

func (*Set_role_stmtContext) IsSet_role_stmtContext() {}

func NewSet_role_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_role_stmtContext {
	var p = new(Set_role_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_set_role_stmt

	return p
}

func (s *Set_role_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_role_stmtContext) GetRole_name_() IRole_nameContext { return s.role_name_ }

func (s *Set_role_stmtContext) SetRole_name_(v IRole_nameContext) { s.role_name_ = v }

func (s *Set_role_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Set_role_stmtContext) ROLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROLE, 0)
}

func (s *Set_role_stmtContext) NONE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNONE, 0)
}

func (s *Set_role_stmtContext) Role_name() IRole_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRole_nameContext)
}

func (s *Set_role_stmtContext) SESSION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSESSION, 0)
}

func (s *Set_role_stmtContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLOCAL, 0)
}

func (s *Set_role_stmtContext) RESET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESET, 0)
}

func (s *Set_role_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_role_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_role_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterSet_role_stmt(s)
	}
}

func (s *Set_role_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitSet_role_stmt(s)
	}
}

func (p *PostgreSQLParser) Set_role_stmt() (localctx ISet_role_stmtContext) {
	localctx = NewSet_role_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, PostgreSQLParserRULE_set_role_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4118)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserSET:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4107)
			p.Match(PostgreSQLParserSET)
		}
		p.SetState(4109)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserLOCAL || _la == PostgreSQLParserSESSION {
			{
				p.SetState(4108)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserLOCAL || _la == PostgreSQLParserSESSION) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(4111)
			p.Match(PostgreSQLParserROLE)
		}
		p.SetState(4114)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 457, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(4112)

				var _x = p.Role_name()

				localctx.(*Set_role_stmtContext).role_name_ = _x
			}

		case 2:
			{
				p.SetState(4113)
				p.Match(PostgreSQLParserNONE)
			}

		}

	case PostgreSQLParserRESET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4116)
			p.Match(PostgreSQLParserRESET)
		}
		{
			p.SetState(4117)
			p.Match(PostgreSQLParserROLE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISet_session_authorization_stmtContext is an interface to support dynamic dispatch.
type ISet_session_authorization_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_session_authorization_stmtContext differentiates from other interfaces.
	IsSet_session_authorization_stmtContext()
}

type Set_session_authorization_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_session_authorization_stmtContext() *Set_session_authorization_stmtContext {
	var p = new(Set_session_authorization_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_set_session_authorization_stmt
	return p
}

func (*Set_session_authorization_stmtContext) IsSet_session_authorization_stmtContext() {}

func NewSet_session_authorization_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_session_authorization_stmtContext {
	var p = new(Set_session_authorization_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_set_session_authorization_stmt

	return p
}

func (s *Set_session_authorization_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_session_authorization_stmtContext) Todo_implement() ITodo_implementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_implementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_implementContext)
}

func (s *Set_session_authorization_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_session_authorization_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_session_authorization_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterSet_session_authorization_stmt(s)
	}
}

func (s *Set_session_authorization_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitSet_session_authorization_stmt(s)
	}
}

func (p *PostgreSQLParser) Set_session_authorization_stmt() (localctx ISet_session_authorization_stmtContext) {
	localctx = NewSet_session_authorization_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, PostgreSQLParserRULE_set_session_authorization_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4120)
		p.Todo_implement()
	}

	return localctx
}

// ITransaction_modeContext is an interface to support dynamic dispatch.
type ITransaction_modeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransaction_modeContext differentiates from other interfaces.
	IsTransaction_modeContext()
}

type Transaction_modeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransaction_modeContext() *Transaction_modeContext {
	var p = new(Transaction_modeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_transaction_mode
	return p
}

func (*Transaction_modeContext) IsTransaction_modeContext() {}

func NewTransaction_modeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transaction_modeContext {
	var p = new(Transaction_modeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_transaction_mode

	return p
}

func (s *Transaction_modeContext) GetParser() antlr.Parser { return s.parser }

func (s *Transaction_modeContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserISOLATION, 0)
}

func (s *Transaction_modeContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLEVEL, 0)
}

func (s *Transaction_modeContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSERIALIZABLE, 0)
}

func (s *Transaction_modeContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREPEATABLE, 0)
}

func (s *Transaction_modeContext) READ() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREAD, 0)
}

func (s *Transaction_modeContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMITTED, 0)
}

func (s *Transaction_modeContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNCOMMITTED, 0)
}

func (s *Transaction_modeContext) WRITE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWRITE, 0)
}

func (s *Transaction_modeContext) ONLY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserONLY, 0)
}

func (s *Transaction_modeContext) DEFERRABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEFERRABLE, 0)
}

func (s *Transaction_modeContext) NOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOT, 0)
}

func (s *Transaction_modeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transaction_modeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Transaction_modeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterTransaction_mode(s)
	}
}

func (s *Transaction_modeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitTransaction_mode(s)
	}
}

func (p *PostgreSQLParser) Transaction_mode() (localctx ITransaction_modeContext) {
	localctx = NewTransaction_modeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, PostgreSQLParserRULE_transaction_mode)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4141)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 461, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4122)
			p.Match(PostgreSQLParserISOLATION)
		}
		{
			p.SetState(4123)
			p.Match(PostgreSQLParserLEVEL)
		}
		p.SetState(4131)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 459, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(4124)
				p.Match(PostgreSQLParserSERIALIZABLE)
			}

		case 2:
			{
				p.SetState(4125)
				p.Match(PostgreSQLParserREPEATABLE)
			}
			{
				p.SetState(4126)
				p.Match(PostgreSQLParserREAD)
			}

		case 3:
			{
				p.SetState(4127)
				p.Match(PostgreSQLParserREAD)
			}
			{
				p.SetState(4128)
				p.Match(PostgreSQLParserCOMMITTED)
			}

		case 4:
			{
				p.SetState(4129)
				p.Match(PostgreSQLParserREAD)
			}
			{
				p.SetState(4130)
				p.Match(PostgreSQLParserUNCOMMITTED)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4133)
			p.Match(PostgreSQLParserREAD)
		}
		{
			p.SetState(4134)
			p.Match(PostgreSQLParserWRITE)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4135)
			p.Match(PostgreSQLParserREAD)
		}
		{
			p.SetState(4136)
			p.Match(PostgreSQLParserONLY)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(4138)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserNOT {
			{
				p.SetState(4137)
				p.Match(PostgreSQLParserNOT)
			}

		}
		{
			p.SetState(4140)
			p.Match(PostgreSQLParserDEFERRABLE)
		}

	}

	return localctx
}

// ITransaction_mode_listContext is an interface to support dynamic dispatch.
type ITransaction_mode_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransaction_mode_listContext differentiates from other interfaces.
	IsTransaction_mode_listContext()
}

type Transaction_mode_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransaction_mode_listContext() *Transaction_mode_listContext {
	var p = new(Transaction_mode_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_transaction_mode_list
	return p
}

func (*Transaction_mode_listContext) IsTransaction_mode_listContext() {}

func NewTransaction_mode_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transaction_mode_listContext {
	var p = new(Transaction_mode_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_transaction_mode_list

	return p
}

func (s *Transaction_mode_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Transaction_mode_listContext) AllTransaction_mode() []ITransaction_modeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITransaction_modeContext)(nil)).Elem())
	var tst = make([]ITransaction_modeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITransaction_modeContext)
		}
	}

	return tst
}

func (s *Transaction_mode_listContext) Transaction_mode(i int) ITransaction_modeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransaction_modeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITransaction_modeContext)
}

func (s *Transaction_mode_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Transaction_mode_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Transaction_mode_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transaction_mode_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Transaction_mode_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterTransaction_mode_list(s)
	}
}

func (s *Transaction_mode_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitTransaction_mode_list(s)
	}
}

func (p *PostgreSQLParser) Transaction_mode_list() (localctx ITransaction_mode_listContext) {
	localctx = NewTransaction_mode_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, PostgreSQLParserRULE_transaction_mode_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4143)
		p.Transaction_mode()
	}
	p.SetState(4148)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(4144)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(4145)
			p.Transaction_mode()
		}

		p.SetState(4150)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISet_transaction_stmtContext is an interface to support dynamic dispatch.
type ISet_transaction_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSnapshot_id returns the snapshot_id token.
	GetSnapshot_id() antlr.Token

	// SetSnapshot_id sets the snapshot_id token.
	SetSnapshot_id(antlr.Token)

	// IsSet_transaction_stmtContext differentiates from other interfaces.
	IsSet_transaction_stmtContext()
}

type Set_transaction_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	snapshot_id antlr.Token
}

func NewEmptySet_transaction_stmtContext() *Set_transaction_stmtContext {
	var p = new(Set_transaction_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_set_transaction_stmt
	return p
}

func (*Set_transaction_stmtContext) IsSet_transaction_stmtContext() {}

func NewSet_transaction_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_transaction_stmtContext {
	var p = new(Set_transaction_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_set_transaction_stmt

	return p
}

func (s *Set_transaction_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_transaction_stmtContext) GetSnapshot_id() antlr.Token { return s.snapshot_id }

func (s *Set_transaction_stmtContext) SetSnapshot_id(v antlr.Token) { s.snapshot_id = v }

func (s *Set_transaction_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Set_transaction_stmtContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRANSACTION, 0)
}

func (s *Set_transaction_stmtContext) Transaction_mode_list() ITransaction_mode_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransaction_mode_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransaction_mode_listContext)
}

func (s *Set_transaction_stmtContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSNAPSHOT, 0)
}

func (s *Set_transaction_stmtContext) SINGLEQ_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSINGLEQ_STRING_LITERAL, 0)
}

func (s *Set_transaction_stmtContext) SESSION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSESSION, 0)
}

func (s *Set_transaction_stmtContext) CHARACTERISTICS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHARACTERISTICS, 0)
}

func (s *Set_transaction_stmtContext) AS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAS, 0)
}

func (s *Set_transaction_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_transaction_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_transaction_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterSet_transaction_stmt(s)
	}
}

func (s *Set_transaction_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitSet_transaction_stmt(s)
	}
}

func (p *PostgreSQLParser) Set_transaction_stmt() (localctx ISet_transaction_stmtContext) {
	localctx = NewSet_transaction_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, PostgreSQLParserRULE_set_transaction_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4164)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 463, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4151)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(4152)
			p.Match(PostgreSQLParserTRANSACTION)
		}
		{
			p.SetState(4153)
			p.Transaction_mode_list()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4154)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(4155)
			p.Match(PostgreSQLParserTRANSACTION)
		}
		{
			p.SetState(4156)
			p.Match(PostgreSQLParserSNAPSHOT)
		}
		{
			p.SetState(4157)

			var _m = p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)

			localctx.(*Set_transaction_stmtContext).snapshot_id = _m
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4158)
			p.Match(PostgreSQLParserSET)
		}
		{
			p.SetState(4159)
			p.Match(PostgreSQLParserSESSION)
		}
		{
			p.SetState(4160)
			p.Match(PostgreSQLParserCHARACTERISTICS)
		}
		{
			p.SetState(4161)
			p.Match(PostgreSQLParserAS)
		}
		{
			p.SetState(4162)
			p.Match(PostgreSQLParserTRANSACTION)
		}
		{
			p.SetState(4163)
			p.Transaction_mode_list()
		}

	}

	return localctx
}

// IShow_stmtContext is an interface to support dynamic dispatch.
type IShow_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsShow_stmtContext differentiates from other interfaces.
	IsShow_stmtContext()
}

type Show_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyShow_stmtContext() *Show_stmtContext {
	var p = new(Show_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_show_stmt
	return p
}

func (*Show_stmtContext) IsShow_stmtContext() {}

func NewShow_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_stmtContext {
	var p = new(Show_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_show_stmt

	return p
}

func (s *Show_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_stmtContext) GetName() IIdentifierContext { return s.name }

func (s *Show_stmtContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Show_stmtContext) SHOW() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSHOW, 0)
}

func (s *Show_stmtContext) TIME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIME, 0)
}

func (s *Show_stmtContext) ZONE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserZONE, 0)
}

func (s *Show_stmtContext) ALL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALL, 0)
}

func (s *Show_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Show_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Show_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterShow_stmt(s)
	}
}

func (s *Show_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitShow_stmt(s)
	}
}

func (p *PostgreSQLParser) Show_stmt() (localctx IShow_stmtContext) {
	localctx = NewShow_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, PostgreSQLParserRULE_show_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4166)
		p.Match(PostgreSQLParserSHOW)
	}
	p.SetState(4171)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 464, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4167)

			var _x = p.identifier(0)

			localctx.(*Show_stmtContext).name = _x
		}

	case 2:
		{
			p.SetState(4168)
			p.Match(PostgreSQLParserTIME)
		}
		{
			p.SetState(4169)
			p.Match(PostgreSQLParserZONE)
		}

	case 3:
		{
			p.SetState(4170)
			p.Match(PostgreSQLParserALL)
		}

	}

	return localctx
}

// ITruncate_stmtContext is an interface to support dynamic dispatch.
type ITruncate_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTruncate_stmtContext differentiates from other interfaces.
	IsTruncate_stmtContext()
}

type Truncate_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTruncate_stmtContext() *Truncate_stmtContext {
	var p = new(Truncate_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_truncate_stmt
	return p
}

func (*Truncate_stmtContext) IsTruncate_stmtContext() {}

func NewTruncate_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Truncate_stmtContext {
	var p = new(Truncate_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_truncate_stmt

	return p
}

func (s *Truncate_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Truncate_stmtContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRUNCATE, 0)
}

func (s *Truncate_stmtContext) Table_name_() ITable_name_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_Context)
}

func (s *Truncate_stmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLE, 0)
}

func (s *Truncate_stmtContext) AllONLY() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserONLY)
}

func (s *Truncate_stmtContext) ONLY(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserONLY, i)
}

func (s *Truncate_stmtContext) STAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTAR, 0)
}

func (s *Truncate_stmtContext) COMMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, 0)
}

func (s *Truncate_stmtContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Truncate_stmtContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIDENTITY, 0)
}

func (s *Truncate_stmtContext) RESTART() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTART, 0)
}

func (s *Truncate_stmtContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONTINUE, 0)
}

func (s *Truncate_stmtContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Truncate_stmtContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Truncate_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Truncate_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Truncate_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterTruncate_stmt(s)
	}
}

func (s *Truncate_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitTruncate_stmt(s)
	}
}

func (p *PostgreSQLParser) Truncate_stmt() (localctx ITruncate_stmtContext) {
	localctx = NewTruncate_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, PostgreSQLParserRULE_truncate_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4173)
		p.Match(PostgreSQLParserTRUNCATE)
	}
	p.SetState(4175)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserTABLE {
		{
			p.SetState(4174)
			p.Match(PostgreSQLParserTABLE)
		}

	}
	p.SetState(4178)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserONLY {
		{
			p.SetState(4177)
			p.Match(PostgreSQLParserONLY)
		}

	}
	{
		p.SetState(4180)
		p.Table_name_()
	}
	p.SetState(4182)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserSTAR {
		{
			p.SetState(4181)
			p.Match(PostgreSQLParserSTAR)
		}

	}
	p.SetState(4189)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCOMMA {
		{
			p.SetState(4184)
			p.Match(PostgreSQLParserCOMMA)
		}
		p.SetState(4186)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserONLY {
			{
				p.SetState(4185)
				p.Match(PostgreSQLParserONLY)
			}

		}
		{
			p.SetState(4188)
			p.Identifier_list()
		}

	}
	p.SetState(4193)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCONTINUE || _la == PostgreSQLParserRESTART {
		{
			p.SetState(4191)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCONTINUE || _la == PostgreSQLParserRESTART) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4192)
			p.Match(PostgreSQLParserIDENTITY)
		}

	}
	p.SetState(4196)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT {
		{
			p.SetState(4195)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCASCADE || _la == PostgreSQLParserRESTRICT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IUnlisten_stmtContext is an interface to support dynamic dispatch.
type IUnlisten_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetChannel returns the channel rule contexts.
	GetChannel() IIdentifierContext

	// SetChannel sets the channel rule contexts.
	SetChannel(IIdentifierContext)

	// IsUnlisten_stmtContext differentiates from other interfaces.
	IsUnlisten_stmtContext()
}

type Unlisten_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	channel IIdentifierContext
}

func NewEmptyUnlisten_stmtContext() *Unlisten_stmtContext {
	var p = new(Unlisten_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_unlisten_stmt
	return p
}

func (*Unlisten_stmtContext) IsUnlisten_stmtContext() {}

func NewUnlisten_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unlisten_stmtContext {
	var p = new(Unlisten_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_unlisten_stmt

	return p
}

func (s *Unlisten_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Unlisten_stmtContext) GetChannel() IIdentifierContext { return s.channel }

func (s *Unlisten_stmtContext) SetChannel(v IIdentifierContext) { s.channel = v }

func (s *Unlisten_stmtContext) UNLISTEN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNLISTEN, 0)
}

func (s *Unlisten_stmtContext) STAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTAR, 0)
}

func (s *Unlisten_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Unlisten_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unlisten_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unlisten_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterUnlisten_stmt(s)
	}
}

func (s *Unlisten_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitUnlisten_stmt(s)
	}
}

func (p *PostgreSQLParser) Unlisten_stmt() (localctx IUnlisten_stmtContext) {
	localctx = NewUnlisten_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, PostgreSQLParserRULE_unlisten_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4198)
		p.Match(PostgreSQLParserUNLISTEN)
	}
	p.SetState(4201)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
		{
			p.SetState(4199)

			var _x = p.identifier(0)

			localctx.(*Unlisten_stmtContext).channel = _x
		}

	case PostgreSQLParserSTAR:
		{
			p.SetState(4200)
			p.Match(PostgreSQLParserSTAR)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUpdate_stmtContext is an interface to support dynamic dispatch.
type IUpdate_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlias_ returns the alias_ rule contexts.
	GetAlias_() IIdentifierContext

	// GetCursor_name_ returns the cursor_name_ rule contexts.
	GetCursor_name_() IIdentifierContext

	// SetAlias_ sets the alias_ rule contexts.
	SetAlias_(IIdentifierContext)

	// SetCursor_name_ sets the cursor_name_ rule contexts.
	SetCursor_name_(IIdentifierContext)

	// IsUpdate_stmtContext differentiates from other interfaces.
	IsUpdate_stmtContext()
}

type Update_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	alias_       IIdentifierContext
	cursor_name_ IIdentifierContext
}

func NewEmptyUpdate_stmtContext() *Update_stmtContext {
	var p = new(Update_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_update_stmt
	return p
}

func (*Update_stmtContext) IsUpdate_stmtContext() {}

func NewUpdate_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_stmtContext {
	var p = new(Update_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_update_stmt

	return p
}

func (s *Update_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_stmtContext) GetAlias_() IIdentifierContext { return s.alias_ }

func (s *Update_stmtContext) GetCursor_name_() IIdentifierContext { return s.cursor_name_ }

func (s *Update_stmtContext) SetAlias_(v IIdentifierContext) { s.alias_ = v }

func (s *Update_stmtContext) SetCursor_name_(v IIdentifierContext) { s.cursor_name_ = v }

func (s *Update_stmtContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUPDATE, 0)
}

func (s *Update_stmtContext) Table_name_() ITable_name_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_Context)
}

func (s *Update_stmtContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Update_stmtContext) Updater_clause() IUpdater_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdater_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdater_clauseContext)
}

func (s *Update_stmtContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Update_stmtContext) ONLY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserONLY, 0)
}

func (s *Update_stmtContext) STAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTAR, 0)
}

func (s *Update_stmtContext) From_clause() IFrom_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrom_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrom_clauseContext)
}

func (s *Update_stmtContext) Where_clause() IWhere_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhere_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhere_clauseContext)
}

func (s *Update_stmtContext) Returning_clause() IReturning_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturning_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturning_clauseContext)
}

func (s *Update_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Update_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Update_stmtContext) WHERE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWHERE, 0)
}

func (s *Update_stmtContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT, 0)
}

func (s *Update_stmtContext) OF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOF, 0)
}

func (s *Update_stmtContext) AS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAS, 0)
}

func (s *Update_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterUpdate_stmt(s)
	}
}

func (s *Update_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitUpdate_stmt(s)
	}
}

func (p *PostgreSQLParser) Update_stmt() (localctx IUpdate_stmtContext) {
	localctx = NewUpdate_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 376, PostgreSQLParserRULE_update_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4204)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserWITH {
		{
			p.SetState(4203)
			p.With_clause()
		}

	}
	{
		p.SetState(4206)
		p.Match(PostgreSQLParserUPDATE)
	}
	p.SetState(4208)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserONLY {
		{
			p.SetState(4207)
			p.Match(PostgreSQLParserONLY)
		}

	}
	{
		p.SetState(4210)
		p.Table_name_()
	}
	p.SetState(4212)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserSTAR {
		{
			p.SetState(4211)
			p.Match(PostgreSQLParserSTAR)
		}

	}
	p.SetState(4218)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 477, p.GetParserRuleContext()) == 1 {
		p.SetState(4215)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserAS {
			{
				p.SetState(4214)
				p.Match(PostgreSQLParserAS)
			}

		}
		{
			p.SetState(4217)

			var _x = p.identifier(0)

			localctx.(*Update_stmtContext).alias_ = _x
		}

	}
	{
		p.SetState(4220)
		p.Match(PostgreSQLParserSET)
	}
	{
		p.SetState(4221)
		p.Updater_clause()
	}
	p.SetState(4223)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserFROM {
		{
			p.SetState(4222)
			p.From_clause()
		}

	}
	p.SetState(4230)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 479, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4225)
			p.Where_clause()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 479, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(4226)
			p.Match(PostgreSQLParserWHERE)
		}
		{
			p.SetState(4227)
			p.Match(PostgreSQLParserCURRENT)
		}
		{
			p.SetState(4228)
			p.Match(PostgreSQLParserOF)
		}
		{
			p.SetState(4229)

			var _x = p.identifier(0)

			localctx.(*Update_stmtContext).cursor_name_ = _x
		}

	}
	p.SetState(4233)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserRETURNING {
		{
			p.SetState(4232)
			p.Returning_clause()
		}

	}

	return localctx
}

// IVacuum_optContext is an interface to support dynamic dispatch.
type IVacuum_optContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVacuum_optContext differentiates from other interfaces.
	IsVacuum_optContext()
}

type Vacuum_optContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVacuum_optContext() *Vacuum_optContext {
	var p = new(Vacuum_optContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_vacuum_opt
	return p
}

func (*Vacuum_optContext) IsVacuum_optContext() {}

func NewVacuum_optContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Vacuum_optContext {
	var p = new(Vacuum_optContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_vacuum_opt

	return p
}

func (s *Vacuum_optContext) GetParser() antlr.Parser { return s.parser }

func (s *Vacuum_optContext) FULL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFULL, 0)
}

func (s *Vacuum_optContext) FREEZE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFREEZE, 0)
}

func (s *Vacuum_optContext) VERBOSE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVERBOSE, 0)
}

func (s *Vacuum_optContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserANALYZE, 0)
}

func (s *Vacuum_optContext) DISABLE_PAGE_SKIPPING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDISABLE_PAGE_SKIPPING, 0)
}

func (s *Vacuum_optContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Vacuum_optContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Vacuum_optContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterVacuum_opt(s)
	}
}

func (s *Vacuum_optContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitVacuum_opt(s)
	}
}

func (p *PostgreSQLParser) Vacuum_opt() (localctx IVacuum_optContext) {
	localctx = NewVacuum_optContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 378, PostgreSQLParserRULE_vacuum_opt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4235)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PostgreSQLParserANALYZE || _la == PostgreSQLParserDISABLE_PAGE_SKIPPING || _la == PostgreSQLParserFREEZE || _la == PostgreSQLParserFULL || _la == PostgreSQLParserVERBOSE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IVacuum_opt_listContext is an interface to support dynamic dispatch.
type IVacuum_opt_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVacuum_opt_listContext differentiates from other interfaces.
	IsVacuum_opt_listContext()
}

type Vacuum_opt_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVacuum_opt_listContext() *Vacuum_opt_listContext {
	var p = new(Vacuum_opt_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_vacuum_opt_list
	return p
}

func (*Vacuum_opt_listContext) IsVacuum_opt_listContext() {}

func NewVacuum_opt_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Vacuum_opt_listContext {
	var p = new(Vacuum_opt_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_vacuum_opt_list

	return p
}

func (s *Vacuum_opt_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Vacuum_opt_listContext) AllVacuum_opt() []IVacuum_optContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVacuum_optContext)(nil)).Elem())
	var tst = make([]IVacuum_optContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVacuum_optContext)
		}
	}

	return tst
}

func (s *Vacuum_opt_listContext) Vacuum_opt(i int) IVacuum_optContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVacuum_optContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVacuum_optContext)
}

func (s *Vacuum_opt_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Vacuum_opt_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Vacuum_opt_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Vacuum_opt_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Vacuum_opt_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterVacuum_opt_list(s)
	}
}

func (s *Vacuum_opt_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitVacuum_opt_list(s)
	}
}

func (p *PostgreSQLParser) Vacuum_opt_list() (localctx IVacuum_opt_listContext) {
	localctx = NewVacuum_opt_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 380, PostgreSQLParserRULE_vacuum_opt_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4237)
		p.Vacuum_opt()
	}
	p.SetState(4242)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(4238)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(4239)
			p.Vacuum_opt()
		}

		p.SetState(4244)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IVacuum_stmtContext is an interface to support dynamic dispatch.
type IVacuum_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() ITable_name_Context

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(ITable_name_Context)

	// IsVacuum_stmtContext differentiates from other interfaces.
	IsVacuum_stmtContext()
}

type Vacuum_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	table_name ITable_name_Context
}

func NewEmptyVacuum_stmtContext() *Vacuum_stmtContext {
	var p = new(Vacuum_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_vacuum_stmt
	return p
}

func (*Vacuum_stmtContext) IsVacuum_stmtContext() {}

func NewVacuum_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Vacuum_stmtContext {
	var p = new(Vacuum_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_vacuum_stmt

	return p
}

func (s *Vacuum_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Vacuum_stmtContext) GetTable_name() ITable_name_Context { return s.table_name }

func (s *Vacuum_stmtContext) SetTable_name(v ITable_name_Context) { s.table_name = v }

func (s *Vacuum_stmtContext) VACUUM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVACUUM, 0)
}

func (s *Vacuum_stmtContext) AllOPEN_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPEN_PAREN)
}

func (s *Vacuum_stmtContext) OPEN_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, i)
}

func (s *Vacuum_stmtContext) Vacuum_opt_list() IVacuum_opt_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVacuum_opt_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVacuum_opt_listContext)
}

func (s *Vacuum_stmtContext) AllCLOSE_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCLOSE_PAREN)
}

func (s *Vacuum_stmtContext) CLOSE_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, i)
}

func (s *Vacuum_stmtContext) Table_name_() ITable_name_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_Context)
}

func (s *Vacuum_stmtContext) Column_list() IColumn_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Vacuum_stmtContext) FULL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFULL, 0)
}

func (s *Vacuum_stmtContext) FREEZE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFREEZE, 0)
}

func (s *Vacuum_stmtContext) VERBOSE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVERBOSE, 0)
}

func (s *Vacuum_stmtContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserANALYZE, 0)
}

func (s *Vacuum_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Vacuum_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Vacuum_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterVacuum_stmt(s)
	}
}

func (s *Vacuum_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitVacuum_stmt(s)
	}
}

func (p *PostgreSQLParser) Vacuum_stmt() (localctx IVacuum_stmtContext) {
	localctx = NewVacuum_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 382, PostgreSQLParserRULE_vacuum_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4292)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 493, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4245)
			p.Match(PostgreSQLParserVACUUM)
		}
		p.SetState(4250)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserOPEN_PAREN {
			{
				p.SetState(4246)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(4247)
				p.Vacuum_opt_list()
			}
			{
				p.SetState(4248)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

		{
			p.SetState(4252)

			var _x = p.Table_name_()

			localctx.(*Vacuum_stmtContext).table_name = _x
		}
		p.SetState(4257)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserOPEN_PAREN {
			{
				p.SetState(4253)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(4254)
				p.Column_list()
			}
			{
				p.SetState(4255)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4259)
			p.Match(PostgreSQLParserVACUUM)
		}
		p.SetState(4261)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserFULL {
			{
				p.SetState(4260)
				p.Match(PostgreSQLParserFULL)
			}

		}
		p.SetState(4264)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserFREEZE {
			{
				p.SetState(4263)
				p.Match(PostgreSQLParserFREEZE)
			}

		}
		p.SetState(4267)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserVERBOSE {
			{
				p.SetState(4266)
				p.Match(PostgreSQLParserVERBOSE)
			}

		}
		p.SetState(4270)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PostgreSQLParserWHITESPACE)|(1<<PostgreSQLParserA_)|(1<<PostgreSQLParserABORT)|(1<<PostgreSQLParserABS)|(1<<PostgreSQLParserABSOLUTE)|(1<<PostgreSQLParserACCESS)|(1<<PostgreSQLParserACTION)|(1<<PostgreSQLParserADA)|(1<<PostgreSQLParserADD)|(1<<PostgreSQLParserADMIN)|(1<<PostgreSQLParserAFTER)|(1<<PostgreSQLParserAGGREGATE)|(1<<PostgreSQLParserALLOCATE)|(1<<PostgreSQLParserALSO)|(1<<PostgreSQLParserALTER)|(1<<PostgreSQLParserALWAYS)|(1<<PostgreSQLParserANY)|(1<<PostgreSQLParserARE)|(1<<PostgreSQLParserASENSITIVE)|(1<<PostgreSQLParserASSERTION)|(1<<PostgreSQLParserASSIGNMENT))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(PostgreSQLParserAT-33))|(1<<(PostgreSQLParserATOMIC-33))|(1<<(PostgreSQLParserATTRIBUTE-33))|(1<<(PostgreSQLParserATTRIBUTES-33))|(1<<(PostgreSQLParserAVG-33))|(1<<(PostgreSQLParserBACKWARD-33))|(1<<(PostgreSQLParserBEFORE-33))|(1<<(PostgreSQLParserBEGIN-33))|(1<<(PostgreSQLParserBERNOULLI-33))|(1<<(PostgreSQLParserBETWEEN-33))|(1<<(PostgreSQLParserBIGINT-33))|(1<<(PostgreSQLParserBIT-33))|(1<<(PostgreSQLParserBIT_LENGTH-33))|(1<<(PostgreSQLParserBLOB-33))|(1<<(PostgreSQLParserBOOLEAN-33))|(1<<(PostgreSQLParserBREADTH-33))|(1<<(PostgreSQLParserBY-33))|(1<<(PostgreSQLParserC_-33))|(1<<(PostgreSQLParserCACHE-33))|(1<<(PostgreSQLParserCALL-33))|(1<<(PostgreSQLParserCALLED-33))|(1<<(PostgreSQLParserCARDINALITY-33))|(1<<(PostgreSQLParserCASCADE-33))|(1<<(PostgreSQLParserCASCADED-33))|(1<<(PostgreSQLParserCATALOG-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PostgreSQLParserCATALOG_NAME-65))|(1<<(PostgreSQLParserCEIL-65))|(1<<(PostgreSQLParserCEILING-65))|(1<<(PostgreSQLParserCHAIN-65))|(1<<(PostgreSQLParserCHAR-65))|(1<<(PostgreSQLParserCHAR_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER-65))|(1<<(PostgreSQLParserCHARACTER_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER_SET_CATALOG-65))|(1<<(PostgreSQLParserCHARACTER_SET_NAME-65))|(1<<(PostgreSQLParserCHARACTER_SET_SCHEMA-65))|(1<<(PostgreSQLParserCHARACTERISTICS-65))|(1<<(PostgreSQLParserCHARACTERS-65))|(1<<(PostgreSQLParserCHECKPOINT-65))|(1<<(PostgreSQLParserCLASS-65))|(1<<(PostgreSQLParserCLASS_ORIGIN-65))|(1<<(PostgreSQLParserCLOB-65))|(1<<(PostgreSQLParserCLOSE-65))|(1<<(PostgreSQLParserCLUSTER-65))|(1<<(PostgreSQLParserCOALESCE-65))|(1<<(PostgreSQLParserCOBOL-65))|(1<<(PostgreSQLParserCOLLATION_CATALOG-65))|(1<<(PostgreSQLParserCOLLATION_NAME-65))|(1<<(PostgreSQLParserCOLLATION_SCHEMA-65))|(1<<(PostgreSQLParserCOLLECT-65))|(1<<(PostgreSQLParserCOLUMN_NAME-65))|(1<<(PostgreSQLParserCOMMAND_FUNCTION-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(PostgreSQLParserCOMMAND_FUNCTION_CODE-97))|(1<<(PostgreSQLParserCOMMENT-97))|(1<<(PostgreSQLParserCOMMIT-97))|(1<<(PostgreSQLParserCOMMITTED-97))|(1<<(PostgreSQLParserCONDITION-97))|(1<<(PostgreSQLParserCONDITION_NUMBER-97))|(1<<(PostgreSQLParserCONNECT-97))|(1<<(PostgreSQLParserCONNECTION-97))|(1<<(PostgreSQLParserCONNECTION_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_CATALOG-97))|(1<<(PostgreSQLParserCONSTRAINT_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_SCHEMA-97))|(1<<(PostgreSQLParserCONSTRAINTS-97))|(1<<(PostgreSQLParserCONSTRUCTOR-97))|(1<<(PostgreSQLParserCONTAINS-97))|(1<<(PostgreSQLParserCONTINUE-97))|(1<<(PostgreSQLParserCONVERSION-97))|(1<<(PostgreSQLParserCONVERT-97))|(1<<(PostgreSQLParserCOPY-97))|(1<<(PostgreSQLParserCORR-97))|(1<<(PostgreSQLParserCORRESPONDING-97))|(1<<(PostgreSQLParserCOUNT-97))|(1<<(PostgreSQLParserCOVAR_POP-97))|(1<<(PostgreSQLParserCOVAR_SAMP-97)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(PostgreSQLParserCSV-131))|(1<<(PostgreSQLParserCUBE-131))|(1<<(PostgreSQLParserCUME_DIST-131))|(1<<(PostgreSQLParserCURRENT-131))|(1<<(PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP-131))|(1<<(PostgreSQLParserCURRENT_PATH-131))|(1<<(PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE-131))|(1<<(PostgreSQLParserCURSOR-131))|(1<<(PostgreSQLParserCURSOR_NAME-131))|(1<<(PostgreSQLParserCYCLE-131))|(1<<(PostgreSQLParserDATA-131))|(1<<(PostgreSQLParserDATABASE-131))|(1<<(PostgreSQLParserDATE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_CODE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_PRECISION-131))|(1<<(PostgreSQLParserDAY-131))|(1<<(PostgreSQLParserDEALLOCATE-131))|(1<<(PostgreSQLParserDEC-131))|(1<<(PostgreSQLParserDECIMAL-131))|(1<<(PostgreSQLParserDECLARE-131))|(1<<(PostgreSQLParserDEFAULTS-131))|(1<<(PostgreSQLParserDEFERRED-131))|(1<<(PostgreSQLParserDEFINED-131))|(1<<(PostgreSQLParserDEFINER-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(PostgreSQLParserDEGREE-163))|(1<<(PostgreSQLParserDELETE-163))|(1<<(PostgreSQLParserDELIMITER-163))|(1<<(PostgreSQLParserDELIMITERS-163))|(1<<(PostgreSQLParserDENSE_RANK-163))|(1<<(PostgreSQLParserDEPTH-163))|(1<<(PostgreSQLParserDEREF-163))|(1<<(PostgreSQLParserDERIVED-163))|(1<<(PostgreSQLParserDESCRIBE-163))|(1<<(PostgreSQLParserDESCRIPTOR-163))|(1<<(PostgreSQLParserDETERMINISTIC-163))|(1<<(PostgreSQLParserDIAGNOSTICS-163))|(1<<(PostgreSQLParserDICTIONARY-163))|(1<<(PostgreSQLParserDISCONNECT-163))|(1<<(PostgreSQLParserDISPATCH-163))|(1<<(PostgreSQLParserDOMAIN-163))|(1<<(PostgreSQLParserDOUBLE-163))|(1<<(PostgreSQLParserDYNAMIC-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION_CODE-163))|(1<<(PostgreSQLParserEACH-163))|(1<<(PostgreSQLParserELEMENT-163)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(PostgreSQLParserENCODING-197))|(1<<(PostgreSQLParserENCRYPTED-197))|(1<<(PostgreSQLParserEND-197))|(1<<(PostgreSQLParserEQUALS-197))|(1<<(PostgreSQLParserESCAPE-197))|(1<<(PostgreSQLParserEVERY-197))|(1<<(PostgreSQLParserEXCEPTION-197))|(1<<(PostgreSQLParserEXCLUDE-197))|(1<<(PostgreSQLParserEXCLUDING-197))|(1<<(PostgreSQLParserEXCLUSIVE-197))|(1<<(PostgreSQLParserEXEC-197))|(1<<(PostgreSQLParserEXECUTE-197))|(1<<(PostgreSQLParserEXISTS-197))|(1<<(PostgreSQLParserEXP-197))|(1<<(PostgreSQLParserEXPLAIN-197))|(1<<(PostgreSQLParserEXTENSION-197))|(1<<(PostgreSQLParserEXTERNAL-197))|(1<<(PostgreSQLParserEXTRACT-197))|(1<<(PostgreSQLParserFILTER-197))|(1<<(PostgreSQLParserFINAL-197))|(1<<(PostgreSQLParserFIRST-197))|(1<<(PostgreSQLParserFLOAT-197))|(1<<(PostgreSQLParserFLOOR-197))|(1<<(PostgreSQLParserFOLLOWING-197)))) != 0) || (((_la-229)&-(0x1f+1)) == 0 && ((1<<uint((_la-229)))&((1<<(PostgreSQLParserFORCE-229))|(1<<(PostgreSQLParserFORMAT-229))|(1<<(PostgreSQLParserFORTRAN-229))|(1<<(PostgreSQLParserFORWARD-229))|(1<<(PostgreSQLParserFOUND-229))|(1<<(PostgreSQLParserFREE-229))|(1<<(PostgreSQLParserFUNCTION-229))|(1<<(PostgreSQLParserFUSION-229))|(1<<(PostgreSQLParserG_-229))|(1<<(PostgreSQLParserGENERAL-229))|(1<<(PostgreSQLParserGENERATED-229))|(1<<(PostgreSQLParserGET-229))|(1<<(PostgreSQLParserGLOBAL-229))|(1<<(PostgreSQLParserGO-229))|(1<<(PostgreSQLParserGOTO-229))|(1<<(PostgreSQLParserGRANTED-229))|(1<<(PostgreSQLParserGREATEST-229))|(1<<(PostgreSQLParserGROUPING-229))|(1<<(PostgreSQLParserHANDLER-229))|(1<<(PostgreSQLParserHIERARCHY-229))|(1<<(PostgreSQLParserHOLD-229))|(1<<(PostgreSQLParserHOST-229))|(1<<(PostgreSQLParserHOUR-229))|(1<<(PostgreSQLParserIDENTITY-229))|(1<<(PostgreSQLParserIGNORE-229)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(PostgreSQLParserIMMEDIATE-262))|(1<<(PostgreSQLParserIMMUTABLE-262))|(1<<(PostgreSQLParserIMPLEMENTATION-262))|(1<<(PostgreSQLParserIMPLICIT-262))|(1<<(PostgreSQLParserINCLUDING-262))|(1<<(PostgreSQLParserINCREMENT-262))|(1<<(PostgreSQLParserINDEX-262))|(1<<(PostgreSQLParserINDICATOR-262))|(1<<(PostgreSQLParserINHERITS-262))|(1<<(PostgreSQLParserINOUT-262))|(1<<(PostgreSQLParserINPUT-262))|(1<<(PostgreSQLParserINSENSITIVE-262))|(1<<(PostgreSQLParserINSERT-262))|(1<<(PostgreSQLParserINSTANCE-262))|(1<<(PostgreSQLParserINSTANTIABLE-262))|(1<<(PostgreSQLParserINSTEAD-262))|(1<<(PostgreSQLParserINT-262))|(1<<(PostgreSQLParserINTEGER-262))|(1<<(PostgreSQLParserINTERSECTION-262))|(1<<(PostgreSQLParserINTERVAL-262))|(1<<(PostgreSQLParserINVOKER-262))|(1<<(PostgreSQLParserISOLATION-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(PostgreSQLParserK_-294))|(1<<(PostgreSQLParserKEY-294))|(1<<(PostgreSQLParserKEY_MEMBER-294))|(1<<(PostgreSQLParserKEY_TYPE-294))|(1<<(PostgreSQLParserLANGUAGE-294))|(1<<(PostgreSQLParserLARGE-294))|(1<<(PostgreSQLParserLAST-294))|(1<<(PostgreSQLParserLEAST-294))|(1<<(PostgreSQLParserLEFT-294))|(1<<(PostgreSQLParserLENGTH-294))|(1<<(PostgreSQLParserLEVEL-294))|(1<<(PostgreSQLParserLISTEN-294))|(1<<(PostgreSQLParserLN-294))|(1<<(PostgreSQLParserLOAD-294))|(1<<(PostgreSQLParserLOCAL-294))|(1<<(PostgreSQLParserLOCATION-294))|(1<<(PostgreSQLParserLOCATOR-294))|(1<<(PostgreSQLParserLOCK-294))|(1<<(PostgreSQLParserLOCKED-294))|(1<<(PostgreSQLParserLOWER-294))|(1<<(PostgreSQLParserM_-294))|(1<<(PostgreSQLParserMAP-294)))) != 0) || (((_la-327)&-(0x1f+1)) == 0 && ((1<<uint((_la-327)))&((1<<(PostgreSQLParserMATCH-327))|(1<<(PostgreSQLParserMATCHED-327))|(1<<(PostgreSQLParserMAX-327))|(1<<(PostgreSQLParserMAXVALUE-327))|(1<<(PostgreSQLParserMEMBER-327))|(1<<(PostgreSQLParserMERGE-327))|(1<<(PostgreSQLParserMESSAGE_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_OCTET_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_TEXT-327))|(1<<(PostgreSQLParserMETHOD-327))|(1<<(PostgreSQLParserMIN-327))|(1<<(PostgreSQLParserMINUTE-327))|(1<<(PostgreSQLParserMINVALUE-327))|(1<<(PostgreSQLParserMOD-327))|(1<<(PostgreSQLParserMODE-327))|(1<<(PostgreSQLParserMODIFIES-327))|(1<<(PostgreSQLParserMODULE-327))|(1<<(PostgreSQLParserMONTH-327))|(1<<(PostgreSQLParserMORE_-327))|(1<<(PostgreSQLParserMOVE-327))|(1<<(PostgreSQLParserMULTISET-327))|(1<<(PostgreSQLParserMUMPS-327))|(1<<(PostgreSQLParserNAME-327))|(1<<(PostgreSQLParserNAMES-327))|(1<<(PostgreSQLParserNATIONAL-327))|(1<<(PostgreSQLParserNCHAR-327))|(1<<(PostgreSQLParserNCLOB-327))|(1<<(PostgreSQLParserNESTING-327))|(1<<(PostgreSQLParserNEW-327)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(PostgreSQLParserNEXT-359))|(1<<(PostgreSQLParserNO-359))|(1<<(PostgreSQLParserNONE-359))|(1<<(PostgreSQLParserNORMALIZE-359))|(1<<(PostgreSQLParserNORMALIZED-359))|(1<<(PostgreSQLParserNOTHING-359))|(1<<(PostgreSQLParserNOTIFY-359))|(1<<(PostgreSQLParserNOWAIT-359))|(1<<(PostgreSQLParserNULLABLE-359))|(1<<(PostgreSQLParserNULLIF-359))|(1<<(PostgreSQLParserNULLS-359))|(1<<(PostgreSQLParserNUMBER-359))|(1<<(PostgreSQLParserNUMERIC-359))|(1<<(PostgreSQLParserOBJECT-359))|(1<<(PostgreSQLParserOCTET_LENGTH-359))|(1<<(PostgreSQLParserOCTETS-359))|(1<<(PostgreSQLParserOF-359))|(1<<(PostgreSQLParserOFF-359))|(1<<(PostgreSQLParserOIDS-359))|(1<<(PostgreSQLParserOLD-359))|(1<<(PostgreSQLParserOPEN-359))|(1<<(PostgreSQLParserOPERATOR-359))|(1<<(PostgreSQLParserOPTION-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(PostgreSQLParserOPTIONS-391))|(1<<(PostgreSQLParserORDERING-391))|(1<<(PostgreSQLParserORDINALITY-391))|(1<<(PostgreSQLParserOTHERS-391))|(1<<(PostgreSQLParserOUT-391))|(1<<(PostgreSQLParserOUTPUT-391))|(1<<(PostgreSQLParserOVER-391))|(1<<(PostgreSQLParserOVERLAY-391))|(1<<(PostgreSQLParserOVERRIDING-391))|(1<<(PostgreSQLParserOWNER-391))|(1<<(PostgreSQLParserPAD-391))|(1<<(PostgreSQLParserPARAMETER-391))|(1<<(PostgreSQLParserPARAMETER_MODE-391))|(1<<(PostgreSQLParserPARAMETER_NAME-391))|(1<<(PostgreSQLParserPARAMETER_ORDINAL_POSITION-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_CATALOG-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_NAME-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA-391))|(1<<(PostgreSQLParserPARTIAL-391))|(1<<(PostgreSQLParserPARTITION-391))|(1<<(PostgreSQLParserPASCAL-391))|(1<<(PostgreSQLParserPASSWORD-391))|(1<<(PostgreSQLParserPATH-391))|(1<<(PostgreSQLParserPERCENT_RANK-391))|(1<<(PostgreSQLParserPERCENTILE_CONT-391))|(1<<(PostgreSQLParserPERCENTILE_DISC-391)))) != 0) || (((_la-424)&-(0x1f+1)) == 0 && ((1<<uint((_la-424)))&((1<<(PostgreSQLParserPLAIN-424))|(1<<(PostgreSQLParserPLI-424))|(1<<(PostgreSQLParserPOSITION-424))|(1<<(PostgreSQLParserPOWER-424))|(1<<(PostgreSQLParserPRECEDING-424))|(1<<(PostgreSQLParserPRECISION-424))|(1<<(PostgreSQLParserPREPARE-424))|(1<<(PostgreSQLParserPRESERVE-424))|(1<<(PostgreSQLParserPRIOR-424))|(1<<(PostgreSQLParserPRIVILEGES-424))|(1<<(PostgreSQLParserPROCEDURAL-424))|(1<<(PostgreSQLParserPROCEDURE-424))|(1<<(PostgreSQLParserPUBLIC-424))|(1<<(PostgreSQLParserQUOTE-424))|(1<<(PostgreSQLParserRANGE-424))|(1<<(PostgreSQLParserRANK-424))|(1<<(PostgreSQLParserREAD-424))|(1<<(PostgreSQLParserREADS-424))|(1<<(PostgreSQLParserREAL-424))|(1<<(PostgreSQLParserRECHECK-424))|(1<<(PostgreSQLParserRECURSIVE-424))|(1<<(PostgreSQLParserREF-424))|(1<<(PostgreSQLParserREFERENCING-424)))) != 0) || (((_la-456)&-(0x1f+1)) == 0 && ((1<<uint((_la-456)))&((1<<(PostgreSQLParserREFRESH-456))|(1<<(PostgreSQLParserREGR_AVGX-456))|(1<<(PostgreSQLParserREGR_AVGY-456))|(1<<(PostgreSQLParserREGR_COUNT-456))|(1<<(PostgreSQLParserREGR_INTERCEPT-456))|(1<<(PostgreSQLParserREGR_SLOPE-456))|(1<<(PostgreSQLParserREGR_SXX-456))|(1<<(PostgreSQLParserREGR_SXY-456))|(1<<(PostgreSQLParserREGR_SYY-456))|(1<<(PostgreSQLParserREINDEX-456))|(1<<(PostgreSQLParserRELATIVE-456))|(1<<(PostgreSQLParserRELEASE-456))|(1<<(PostgreSQLParserRENAME-456))|(1<<(PostgreSQLParserREPEATABLE-456))|(1<<(PostgreSQLParserREPLACE-456))|(1<<(PostgreSQLParserRESET-456))|(1<<(PostgreSQLParserRESTART-456))|(1<<(PostgreSQLParserRESTRICT-456))|(1<<(PostgreSQLParserRESULT-456))|(1<<(PostgreSQLParserRETURN-456))|(1<<(PostgreSQLParserRETURNED_CARDINALITY-456))|(1<<(PostgreSQLParserRETURNED_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_OCTET_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_SQLSTATE-456))|(1<<(PostgreSQLParserRETURNS-456))|(1<<(PostgreSQLParserREVOKE-456))|(1<<(PostgreSQLParserRIGHT-456))|(1<<(PostgreSQLParserROLE-456))|(1<<(PostgreSQLParserROLLBACK-456)))) != 0) || (((_la-488)&-(0x1f+1)) == 0 && ((1<<uint((_la-488)))&((1<<(PostgreSQLParserROLLUP-488))|(1<<(PostgreSQLParserROUTINE-488))|(1<<(PostgreSQLParserROUTINE_CATALOG-488))|(1<<(PostgreSQLParserROUTINE_NAME-488))|(1<<(PostgreSQLParserROUTINE_SCHEMA-488))|(1<<(PostgreSQLParserROW-488))|(1<<(PostgreSQLParserROW_COUNT-488))|(1<<(PostgreSQLParserROW_NUMBER-488))|(1<<(PostgreSQLParserROWS-488))|(1<<(PostgreSQLParserRULE-488))|(1<<(PostgreSQLParserSAVEPOINT-488))|(1<<(PostgreSQLParserSCALE-488))|(1<<(PostgreSQLParserSCHEMA-488))|(1<<(PostgreSQLParserSCHEMA_NAME-488))|(1<<(PostgreSQLParserSCOPE-488))|(1<<(PostgreSQLParserSCOPE_CATALOG-488))|(1<<(PostgreSQLParserSCOPE_NAME-488))|(1<<(PostgreSQLParserSCOPE_SCHEMA-488))|(1<<(PostgreSQLParserSCROLL-488))|(1<<(PostgreSQLParserSEARCH-488))|(1<<(PostgreSQLParserSECOND-488))|(1<<(PostgreSQLParserSECTION-488))|(1<<(PostgreSQLParserSECURITY-488))|(1<<(PostgreSQLParserSELF-488))|(1<<(PostgreSQLParserSENSITIVE-488))|(1<<(PostgreSQLParserSEQUENCE-488))|(1<<(PostgreSQLParserSEQUENCES-488))|(1<<(PostgreSQLParserSERIALIZABLE-488))|(1<<(PostgreSQLParserSERVER_NAME-488))|(1<<(PostgreSQLParserSESSION-488)))) != 0) || (((_la-520)&-(0x1f+1)) == 0 && ((1<<uint((_la-520)))&((1<<(PostgreSQLParserSET-520))|(1<<(PostgreSQLParserSETOF-520))|(1<<(PostgreSQLParserSETS-520))|(1<<(PostgreSQLParserSHARE-520))|(1<<(PostgreSQLParserSHOW-520))|(1<<(PostgreSQLParserSIMPLE-520))|(1<<(PostgreSQLParserSIZE-520))|(1<<(PostgreSQLParserSMALLINT-520))|(1<<(PostgreSQLParserSOME-520))|(1<<(PostgreSQLParserSOURCE-520))|(1<<(PostgreSQLParserSPACE-520))|(1<<(PostgreSQLParserSPECIFIC-520))|(1<<(PostgreSQLParserSPECIFIC_NAME-520))|(1<<(PostgreSQLParserSPECIFICTYPE-520))|(1<<(PostgreSQLParserSQL-520))|(1<<(PostgreSQLParserSQLCODE-520))|(1<<(PostgreSQLParserSQLERROR-520))|(1<<(PostgreSQLParserSQLEXCEPTION-520))|(1<<(PostgreSQLParserSQLSTATE-520))|(1<<(PostgreSQLParserSQLWARNING-520))|(1<<(PostgreSQLParserSQRT-520))|(1<<(PostgreSQLParserSTABLE-520))|(1<<(PostgreSQLParserSTART-520))|(1<<(PostgreSQLParserSTATE-520))|(1<<(PostgreSQLParserSTATEMENT-520))|(1<<(PostgreSQLParserSTATIC-520))|(1<<(PostgreSQLParserSTATISTICS-520))|(1<<(PostgreSQLParserSTDDEV_POP-520))|(1<<(PostgreSQLParserSTDDEV_SAMP-520)))) != 0) || (((_la-552)&-(0x1f+1)) == 0 && ((1<<uint((_la-552)))&((1<<(PostgreSQLParserSTDIN-552))|(1<<(PostgreSQLParserSTDOUT-552))|(1<<(PostgreSQLParserSTORAGE-552))|(1<<(PostgreSQLParserSTRICT-552))|(1<<(PostgreSQLParserSTRUCTURE-552))|(1<<(PostgreSQLParserSTYLE-552))|(1<<(PostgreSQLParserSUBCLASS_ORIGIN-552))|(1<<(PostgreSQLParserSUBMULTISET-552))|(1<<(PostgreSQLParserSUBSTRING-552))|(1<<(PostgreSQLParserSUM-552))|(1<<(PostgreSQLParserSYSID-552))|(1<<(PostgreSQLParserSYSTEM-552))|(1<<(PostgreSQLParserSYSTEM_USER-552))|(1<<(PostgreSQLParserTABLE_NAME-552))|(1<<(PostgreSQLParserTABLESPACE-552))|(1<<(PostgreSQLParserTEMP-552))|(1<<(PostgreSQLParserTEMPLATE-552))|(1<<(PostgreSQLParserTEMPORARY-552))|(1<<(PostgreSQLParserTIES-552))|(1<<(PostgreSQLParserTIME-552))|(1<<(PostgreSQLParserTIMESTAMP-552))|(1<<(PostgreSQLParserTIMEZONE_HOUR-552))|(1<<(PostgreSQLParserTIMEZONE_MINUTE-552)))) != 0) || (((_la-586)&-(0x1f+1)) == 0 && ((1<<uint((_la-586)))&((1<<(PostgreSQLParserTOP_LEVEL_COUNT-586))|(1<<(PostgreSQLParserTRANSACTION-586))|(1<<(PostgreSQLParserTRANSACTION_ACTIVE-586))|(1<<(PostgreSQLParserTRANSACTIONS_COMMITTED-586))|(1<<(PostgreSQLParserTRANSACTIONS_ROLLED_BACK-586))|(1<<(PostgreSQLParserTRANSFORM-586))|(1<<(PostgreSQLParserTRANSFORMS-586))|(1<<(PostgreSQLParserTRANSLATE-586))|(1<<(PostgreSQLParserTRANSLATION-586))|(1<<(PostgreSQLParserTREAT-586))|(1<<(PostgreSQLParserTRIGGER-586))|(1<<(PostgreSQLParserTRIGGER_CATALOG-586))|(1<<(PostgreSQLParserTRIGGER_NAME-586))|(1<<(PostgreSQLParserTRIGGER_SCHEMA-586))|(1<<(PostgreSQLParserTRIM-586))|(1<<(PostgreSQLParserTRUE-586))|(1<<(PostgreSQLParserTRUNCATE-586))|(1<<(PostgreSQLParserTRUSTED-586))|(1<<(PostgreSQLParserTYPE-586))|(1<<(PostgreSQLParserUESCAPE-586))|(1<<(PostgreSQLParserUNBOUNDED-586))|(1<<(PostgreSQLParserUNCOMMITTED-586))|(1<<(PostgreSQLParserUNDER-586))|(1<<(PostgreSQLParserUNENCRYPTED-586))|(1<<(PostgreSQLParserUNKNOWN-586))|(1<<(PostgreSQLParserUNLISTEN-586))|(1<<(PostgreSQLParserUNNAMED-586))|(1<<(PostgreSQLParserUNNEST-586))|(1<<(PostgreSQLParserUNTIL-586)))) != 0) || (((_la-618)&-(0x1f+1)) == 0 && ((1<<uint((_la-618)))&((1<<(PostgreSQLParserUPDATE-618))|(1<<(PostgreSQLParserUPPER-618))|(1<<(PostgreSQLParserUSAGE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CATALOG-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CODE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_NAME-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA-618))|(1<<(PostgreSQLParserVACUUM-618))|(1<<(PostgreSQLParserVALID-618))|(1<<(PostgreSQLParserVALIDATOR-618))|(1<<(PostgreSQLParserVALUE-618))|(1<<(PostgreSQLParserVALUES-618))|(1<<(PostgreSQLParserVAR_POP-618))|(1<<(PostgreSQLParserVAR_SAMP-618))|(1<<(PostgreSQLParserVARCHAR-618))|(1<<(PostgreSQLParserVARYING-618))|(1<<(PostgreSQLParserVIEW-618))|(1<<(PostgreSQLParserVOLATILE-618))|(1<<(PostgreSQLParserWHENEVER-618))|(1<<(PostgreSQLParserWIDTH_BUCKET-618))|(1<<(PostgreSQLParserWITHIN-618))|(1<<(PostgreSQLParserWITHOUT-618)))) != 0) || (((_la-650)&-(0x1f+1)) == 0 && ((1<<uint((_la-650)))&((1<<(PostgreSQLParserWORK-650))|(1<<(PostgreSQLParserWRITE-650))|(1<<(PostgreSQLParserYEAR-650))|(1<<(PostgreSQLParserZONE-650)))) != 0) || (((_la-720)&-(0x1f+1)) == 0 && ((1<<uint((_la-720)))&((1<<(PostgreSQLParserABSTIME-720))|(1<<(PostgreSQLParserBIGSERIAL-720))|(1<<(PostgreSQLParserBIT_VARYING-720))|(1<<(PostgreSQLParserBOOL-720))|(1<<(PostgreSQLParserBOX-720))|(1<<(PostgreSQLParserBYTEA-720))|(1<<(PostgreSQLParserCHARACTER_VARYING-720))|(1<<(PostgreSQLParserCIDR-720))|(1<<(PostgreSQLParserCIRCLE-720))|(1<<(PostgreSQLParserFLOAT4-720))|(1<<(PostgreSQLParserFLOAT8-720))|(1<<(PostgreSQLParserINET-720))|(1<<(PostgreSQLParserINT2-720))|(1<<(PostgreSQLParserINT4-720))|(1<<(PostgreSQLParserINT8-720))|(1<<(PostgreSQLParserJSON-720))|(1<<(PostgreSQLParserJSONB-720))|(1<<(PostgreSQLParserLINE-720))|(1<<(PostgreSQLParserLSEG-720))|(1<<(PostgreSQLParserMACADDR-720))|(1<<(PostgreSQLParserMACADDR8-720))|(1<<(PostgreSQLParserMONEY-720))|(1<<(PostgreSQLParserPG_LSN-720))|(1<<(PostgreSQLParserPOINT-720))|(1<<(PostgreSQLParserPOLYGON-720))|(1<<(PostgreSQLParserRELTIME-720))|(1<<(PostgreSQLParserSERIAL-720))|(1<<(PostgreSQLParserSERIAL2-720))|(1<<(PostgreSQLParserSERIAL4-720))|(1<<(PostgreSQLParserSERIAL8-720))|(1<<(PostgreSQLParserSMALLSERIAL-720)))) != 0) || (((_la-752)&-(0x1f+1)) == 0 && ((1<<uint((_la-752)))&((1<<(PostgreSQLParserTEXT-752))|(1<<(PostgreSQLParserTIMESTAMPTZ-752))|(1<<(PostgreSQLParserTIMETZ-752))|(1<<(PostgreSQLParserTSQUERY-752))|(1<<(PostgreSQLParserTSVECTOR-752))|(1<<(PostgreSQLParserTXID_SNAPSHOT-752))|(1<<(PostgreSQLParserUUID-752))|(1<<(PostgreSQLParserVARBIT-752))|(1<<(PostgreSQLParserXML-752))|(1<<(PostgreSQLParserDOUBLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserIDENTIFIER-752))|(1<<(PostgreSQLParserIDENTIFIER_UNICODE-752)))) != 0) {
			{
				p.SetState(4269)

				var _x = p.Table_name_()

				localctx.(*Vacuum_stmtContext).table_name = _x
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4272)
			p.Match(PostgreSQLParserVACUUM)
		}
		p.SetState(4274)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserFULL {
			{
				p.SetState(4273)
				p.Match(PostgreSQLParserFULL)
			}

		}
		p.SetState(4277)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserFREEZE {
			{
				p.SetState(4276)
				p.Match(PostgreSQLParserFREEZE)
			}

		}
		p.SetState(4280)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserVERBOSE {
			{
				p.SetState(4279)
				p.Match(PostgreSQLParserVERBOSE)
			}

		}
		{
			p.SetState(4282)
			p.Match(PostgreSQLParserANALYZE)
		}
		p.SetState(4290)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PostgreSQLParserWHITESPACE)|(1<<PostgreSQLParserA_)|(1<<PostgreSQLParserABORT)|(1<<PostgreSQLParserABS)|(1<<PostgreSQLParserABSOLUTE)|(1<<PostgreSQLParserACCESS)|(1<<PostgreSQLParserACTION)|(1<<PostgreSQLParserADA)|(1<<PostgreSQLParserADD)|(1<<PostgreSQLParserADMIN)|(1<<PostgreSQLParserAFTER)|(1<<PostgreSQLParserAGGREGATE)|(1<<PostgreSQLParserALLOCATE)|(1<<PostgreSQLParserALSO)|(1<<PostgreSQLParserALTER)|(1<<PostgreSQLParserALWAYS)|(1<<PostgreSQLParserANY)|(1<<PostgreSQLParserARE)|(1<<PostgreSQLParserASENSITIVE)|(1<<PostgreSQLParserASSERTION)|(1<<PostgreSQLParserASSIGNMENT))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(PostgreSQLParserAT-33))|(1<<(PostgreSQLParserATOMIC-33))|(1<<(PostgreSQLParserATTRIBUTE-33))|(1<<(PostgreSQLParserATTRIBUTES-33))|(1<<(PostgreSQLParserAVG-33))|(1<<(PostgreSQLParserBACKWARD-33))|(1<<(PostgreSQLParserBEFORE-33))|(1<<(PostgreSQLParserBEGIN-33))|(1<<(PostgreSQLParserBERNOULLI-33))|(1<<(PostgreSQLParserBETWEEN-33))|(1<<(PostgreSQLParserBIGINT-33))|(1<<(PostgreSQLParserBIT-33))|(1<<(PostgreSQLParserBIT_LENGTH-33))|(1<<(PostgreSQLParserBLOB-33))|(1<<(PostgreSQLParserBOOLEAN-33))|(1<<(PostgreSQLParserBREADTH-33))|(1<<(PostgreSQLParserBY-33))|(1<<(PostgreSQLParserC_-33))|(1<<(PostgreSQLParserCACHE-33))|(1<<(PostgreSQLParserCALL-33))|(1<<(PostgreSQLParserCALLED-33))|(1<<(PostgreSQLParserCARDINALITY-33))|(1<<(PostgreSQLParserCASCADE-33))|(1<<(PostgreSQLParserCASCADED-33))|(1<<(PostgreSQLParserCATALOG-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PostgreSQLParserCATALOG_NAME-65))|(1<<(PostgreSQLParserCEIL-65))|(1<<(PostgreSQLParserCEILING-65))|(1<<(PostgreSQLParserCHAIN-65))|(1<<(PostgreSQLParserCHAR-65))|(1<<(PostgreSQLParserCHAR_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER-65))|(1<<(PostgreSQLParserCHARACTER_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER_SET_CATALOG-65))|(1<<(PostgreSQLParserCHARACTER_SET_NAME-65))|(1<<(PostgreSQLParserCHARACTER_SET_SCHEMA-65))|(1<<(PostgreSQLParserCHARACTERISTICS-65))|(1<<(PostgreSQLParserCHARACTERS-65))|(1<<(PostgreSQLParserCHECKPOINT-65))|(1<<(PostgreSQLParserCLASS-65))|(1<<(PostgreSQLParserCLASS_ORIGIN-65))|(1<<(PostgreSQLParserCLOB-65))|(1<<(PostgreSQLParserCLOSE-65))|(1<<(PostgreSQLParserCLUSTER-65))|(1<<(PostgreSQLParserCOALESCE-65))|(1<<(PostgreSQLParserCOBOL-65))|(1<<(PostgreSQLParserCOLLATION_CATALOG-65))|(1<<(PostgreSQLParserCOLLATION_NAME-65))|(1<<(PostgreSQLParserCOLLATION_SCHEMA-65))|(1<<(PostgreSQLParserCOLLECT-65))|(1<<(PostgreSQLParserCOLUMN_NAME-65))|(1<<(PostgreSQLParserCOMMAND_FUNCTION-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(PostgreSQLParserCOMMAND_FUNCTION_CODE-97))|(1<<(PostgreSQLParserCOMMENT-97))|(1<<(PostgreSQLParserCOMMIT-97))|(1<<(PostgreSQLParserCOMMITTED-97))|(1<<(PostgreSQLParserCONDITION-97))|(1<<(PostgreSQLParserCONDITION_NUMBER-97))|(1<<(PostgreSQLParserCONNECT-97))|(1<<(PostgreSQLParserCONNECTION-97))|(1<<(PostgreSQLParserCONNECTION_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_CATALOG-97))|(1<<(PostgreSQLParserCONSTRAINT_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_SCHEMA-97))|(1<<(PostgreSQLParserCONSTRAINTS-97))|(1<<(PostgreSQLParserCONSTRUCTOR-97))|(1<<(PostgreSQLParserCONTAINS-97))|(1<<(PostgreSQLParserCONTINUE-97))|(1<<(PostgreSQLParserCONVERSION-97))|(1<<(PostgreSQLParserCONVERT-97))|(1<<(PostgreSQLParserCOPY-97))|(1<<(PostgreSQLParserCORR-97))|(1<<(PostgreSQLParserCORRESPONDING-97))|(1<<(PostgreSQLParserCOUNT-97))|(1<<(PostgreSQLParserCOVAR_POP-97))|(1<<(PostgreSQLParserCOVAR_SAMP-97)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(PostgreSQLParserCSV-131))|(1<<(PostgreSQLParserCUBE-131))|(1<<(PostgreSQLParserCUME_DIST-131))|(1<<(PostgreSQLParserCURRENT-131))|(1<<(PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP-131))|(1<<(PostgreSQLParserCURRENT_PATH-131))|(1<<(PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE-131))|(1<<(PostgreSQLParserCURSOR-131))|(1<<(PostgreSQLParserCURSOR_NAME-131))|(1<<(PostgreSQLParserCYCLE-131))|(1<<(PostgreSQLParserDATA-131))|(1<<(PostgreSQLParserDATABASE-131))|(1<<(PostgreSQLParserDATE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_CODE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_PRECISION-131))|(1<<(PostgreSQLParserDAY-131))|(1<<(PostgreSQLParserDEALLOCATE-131))|(1<<(PostgreSQLParserDEC-131))|(1<<(PostgreSQLParserDECIMAL-131))|(1<<(PostgreSQLParserDECLARE-131))|(1<<(PostgreSQLParserDEFAULTS-131))|(1<<(PostgreSQLParserDEFERRED-131))|(1<<(PostgreSQLParserDEFINED-131))|(1<<(PostgreSQLParserDEFINER-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(PostgreSQLParserDEGREE-163))|(1<<(PostgreSQLParserDELETE-163))|(1<<(PostgreSQLParserDELIMITER-163))|(1<<(PostgreSQLParserDELIMITERS-163))|(1<<(PostgreSQLParserDENSE_RANK-163))|(1<<(PostgreSQLParserDEPTH-163))|(1<<(PostgreSQLParserDEREF-163))|(1<<(PostgreSQLParserDERIVED-163))|(1<<(PostgreSQLParserDESCRIBE-163))|(1<<(PostgreSQLParserDESCRIPTOR-163))|(1<<(PostgreSQLParserDETERMINISTIC-163))|(1<<(PostgreSQLParserDIAGNOSTICS-163))|(1<<(PostgreSQLParserDICTIONARY-163))|(1<<(PostgreSQLParserDISCONNECT-163))|(1<<(PostgreSQLParserDISPATCH-163))|(1<<(PostgreSQLParserDOMAIN-163))|(1<<(PostgreSQLParserDOUBLE-163))|(1<<(PostgreSQLParserDYNAMIC-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION_CODE-163))|(1<<(PostgreSQLParserEACH-163))|(1<<(PostgreSQLParserELEMENT-163)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(PostgreSQLParserENCODING-197))|(1<<(PostgreSQLParserENCRYPTED-197))|(1<<(PostgreSQLParserEND-197))|(1<<(PostgreSQLParserEQUALS-197))|(1<<(PostgreSQLParserESCAPE-197))|(1<<(PostgreSQLParserEVERY-197))|(1<<(PostgreSQLParserEXCEPTION-197))|(1<<(PostgreSQLParserEXCLUDE-197))|(1<<(PostgreSQLParserEXCLUDING-197))|(1<<(PostgreSQLParserEXCLUSIVE-197))|(1<<(PostgreSQLParserEXEC-197))|(1<<(PostgreSQLParserEXECUTE-197))|(1<<(PostgreSQLParserEXISTS-197))|(1<<(PostgreSQLParserEXP-197))|(1<<(PostgreSQLParserEXPLAIN-197))|(1<<(PostgreSQLParserEXTENSION-197))|(1<<(PostgreSQLParserEXTERNAL-197))|(1<<(PostgreSQLParserEXTRACT-197))|(1<<(PostgreSQLParserFILTER-197))|(1<<(PostgreSQLParserFINAL-197))|(1<<(PostgreSQLParserFIRST-197))|(1<<(PostgreSQLParserFLOAT-197))|(1<<(PostgreSQLParserFLOOR-197))|(1<<(PostgreSQLParserFOLLOWING-197)))) != 0) || (((_la-229)&-(0x1f+1)) == 0 && ((1<<uint((_la-229)))&((1<<(PostgreSQLParserFORCE-229))|(1<<(PostgreSQLParserFORMAT-229))|(1<<(PostgreSQLParserFORTRAN-229))|(1<<(PostgreSQLParserFORWARD-229))|(1<<(PostgreSQLParserFOUND-229))|(1<<(PostgreSQLParserFREE-229))|(1<<(PostgreSQLParserFUNCTION-229))|(1<<(PostgreSQLParserFUSION-229))|(1<<(PostgreSQLParserG_-229))|(1<<(PostgreSQLParserGENERAL-229))|(1<<(PostgreSQLParserGENERATED-229))|(1<<(PostgreSQLParserGET-229))|(1<<(PostgreSQLParserGLOBAL-229))|(1<<(PostgreSQLParserGO-229))|(1<<(PostgreSQLParserGOTO-229))|(1<<(PostgreSQLParserGRANTED-229))|(1<<(PostgreSQLParserGREATEST-229))|(1<<(PostgreSQLParserGROUPING-229))|(1<<(PostgreSQLParserHANDLER-229))|(1<<(PostgreSQLParserHIERARCHY-229))|(1<<(PostgreSQLParserHOLD-229))|(1<<(PostgreSQLParserHOST-229))|(1<<(PostgreSQLParserHOUR-229))|(1<<(PostgreSQLParserIDENTITY-229))|(1<<(PostgreSQLParserIGNORE-229)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(PostgreSQLParserIMMEDIATE-262))|(1<<(PostgreSQLParserIMMUTABLE-262))|(1<<(PostgreSQLParserIMPLEMENTATION-262))|(1<<(PostgreSQLParserIMPLICIT-262))|(1<<(PostgreSQLParserINCLUDING-262))|(1<<(PostgreSQLParserINCREMENT-262))|(1<<(PostgreSQLParserINDEX-262))|(1<<(PostgreSQLParserINDICATOR-262))|(1<<(PostgreSQLParserINHERITS-262))|(1<<(PostgreSQLParserINOUT-262))|(1<<(PostgreSQLParserINPUT-262))|(1<<(PostgreSQLParserINSENSITIVE-262))|(1<<(PostgreSQLParserINSERT-262))|(1<<(PostgreSQLParserINSTANCE-262))|(1<<(PostgreSQLParserINSTANTIABLE-262))|(1<<(PostgreSQLParserINSTEAD-262))|(1<<(PostgreSQLParserINT-262))|(1<<(PostgreSQLParserINTEGER-262))|(1<<(PostgreSQLParserINTERSECTION-262))|(1<<(PostgreSQLParserINTERVAL-262))|(1<<(PostgreSQLParserINVOKER-262))|(1<<(PostgreSQLParserISOLATION-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(PostgreSQLParserK_-294))|(1<<(PostgreSQLParserKEY-294))|(1<<(PostgreSQLParserKEY_MEMBER-294))|(1<<(PostgreSQLParserKEY_TYPE-294))|(1<<(PostgreSQLParserLANGUAGE-294))|(1<<(PostgreSQLParserLARGE-294))|(1<<(PostgreSQLParserLAST-294))|(1<<(PostgreSQLParserLEAST-294))|(1<<(PostgreSQLParserLEFT-294))|(1<<(PostgreSQLParserLENGTH-294))|(1<<(PostgreSQLParserLEVEL-294))|(1<<(PostgreSQLParserLISTEN-294))|(1<<(PostgreSQLParserLN-294))|(1<<(PostgreSQLParserLOAD-294))|(1<<(PostgreSQLParserLOCAL-294))|(1<<(PostgreSQLParserLOCATION-294))|(1<<(PostgreSQLParserLOCATOR-294))|(1<<(PostgreSQLParserLOCK-294))|(1<<(PostgreSQLParserLOCKED-294))|(1<<(PostgreSQLParserLOWER-294))|(1<<(PostgreSQLParserM_-294))|(1<<(PostgreSQLParserMAP-294)))) != 0) || (((_la-327)&-(0x1f+1)) == 0 && ((1<<uint((_la-327)))&((1<<(PostgreSQLParserMATCH-327))|(1<<(PostgreSQLParserMATCHED-327))|(1<<(PostgreSQLParserMAX-327))|(1<<(PostgreSQLParserMAXVALUE-327))|(1<<(PostgreSQLParserMEMBER-327))|(1<<(PostgreSQLParserMERGE-327))|(1<<(PostgreSQLParserMESSAGE_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_OCTET_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_TEXT-327))|(1<<(PostgreSQLParserMETHOD-327))|(1<<(PostgreSQLParserMIN-327))|(1<<(PostgreSQLParserMINUTE-327))|(1<<(PostgreSQLParserMINVALUE-327))|(1<<(PostgreSQLParserMOD-327))|(1<<(PostgreSQLParserMODE-327))|(1<<(PostgreSQLParserMODIFIES-327))|(1<<(PostgreSQLParserMODULE-327))|(1<<(PostgreSQLParserMONTH-327))|(1<<(PostgreSQLParserMORE_-327))|(1<<(PostgreSQLParserMOVE-327))|(1<<(PostgreSQLParserMULTISET-327))|(1<<(PostgreSQLParserMUMPS-327))|(1<<(PostgreSQLParserNAME-327))|(1<<(PostgreSQLParserNAMES-327))|(1<<(PostgreSQLParserNATIONAL-327))|(1<<(PostgreSQLParserNCHAR-327))|(1<<(PostgreSQLParserNCLOB-327))|(1<<(PostgreSQLParserNESTING-327))|(1<<(PostgreSQLParserNEW-327)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(PostgreSQLParserNEXT-359))|(1<<(PostgreSQLParserNO-359))|(1<<(PostgreSQLParserNONE-359))|(1<<(PostgreSQLParserNORMALIZE-359))|(1<<(PostgreSQLParserNORMALIZED-359))|(1<<(PostgreSQLParserNOTHING-359))|(1<<(PostgreSQLParserNOTIFY-359))|(1<<(PostgreSQLParserNOWAIT-359))|(1<<(PostgreSQLParserNULLABLE-359))|(1<<(PostgreSQLParserNULLIF-359))|(1<<(PostgreSQLParserNULLS-359))|(1<<(PostgreSQLParserNUMBER-359))|(1<<(PostgreSQLParserNUMERIC-359))|(1<<(PostgreSQLParserOBJECT-359))|(1<<(PostgreSQLParserOCTET_LENGTH-359))|(1<<(PostgreSQLParserOCTETS-359))|(1<<(PostgreSQLParserOF-359))|(1<<(PostgreSQLParserOFF-359))|(1<<(PostgreSQLParserOIDS-359))|(1<<(PostgreSQLParserOLD-359))|(1<<(PostgreSQLParserOPEN-359))|(1<<(PostgreSQLParserOPERATOR-359))|(1<<(PostgreSQLParserOPTION-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(PostgreSQLParserOPTIONS-391))|(1<<(PostgreSQLParserORDERING-391))|(1<<(PostgreSQLParserORDINALITY-391))|(1<<(PostgreSQLParserOTHERS-391))|(1<<(PostgreSQLParserOUT-391))|(1<<(PostgreSQLParserOUTPUT-391))|(1<<(PostgreSQLParserOVER-391))|(1<<(PostgreSQLParserOVERLAY-391))|(1<<(PostgreSQLParserOVERRIDING-391))|(1<<(PostgreSQLParserOWNER-391))|(1<<(PostgreSQLParserPAD-391))|(1<<(PostgreSQLParserPARAMETER-391))|(1<<(PostgreSQLParserPARAMETER_MODE-391))|(1<<(PostgreSQLParserPARAMETER_NAME-391))|(1<<(PostgreSQLParserPARAMETER_ORDINAL_POSITION-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_CATALOG-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_NAME-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA-391))|(1<<(PostgreSQLParserPARTIAL-391))|(1<<(PostgreSQLParserPARTITION-391))|(1<<(PostgreSQLParserPASCAL-391))|(1<<(PostgreSQLParserPASSWORD-391))|(1<<(PostgreSQLParserPATH-391))|(1<<(PostgreSQLParserPERCENT_RANK-391))|(1<<(PostgreSQLParserPERCENTILE_CONT-391))|(1<<(PostgreSQLParserPERCENTILE_DISC-391)))) != 0) || (((_la-424)&-(0x1f+1)) == 0 && ((1<<uint((_la-424)))&((1<<(PostgreSQLParserPLAIN-424))|(1<<(PostgreSQLParserPLI-424))|(1<<(PostgreSQLParserPOSITION-424))|(1<<(PostgreSQLParserPOWER-424))|(1<<(PostgreSQLParserPRECEDING-424))|(1<<(PostgreSQLParserPRECISION-424))|(1<<(PostgreSQLParserPREPARE-424))|(1<<(PostgreSQLParserPRESERVE-424))|(1<<(PostgreSQLParserPRIOR-424))|(1<<(PostgreSQLParserPRIVILEGES-424))|(1<<(PostgreSQLParserPROCEDURAL-424))|(1<<(PostgreSQLParserPROCEDURE-424))|(1<<(PostgreSQLParserPUBLIC-424))|(1<<(PostgreSQLParserQUOTE-424))|(1<<(PostgreSQLParserRANGE-424))|(1<<(PostgreSQLParserRANK-424))|(1<<(PostgreSQLParserREAD-424))|(1<<(PostgreSQLParserREADS-424))|(1<<(PostgreSQLParserREAL-424))|(1<<(PostgreSQLParserRECHECK-424))|(1<<(PostgreSQLParserRECURSIVE-424))|(1<<(PostgreSQLParserREF-424))|(1<<(PostgreSQLParserREFERENCING-424)))) != 0) || (((_la-456)&-(0x1f+1)) == 0 && ((1<<uint((_la-456)))&((1<<(PostgreSQLParserREFRESH-456))|(1<<(PostgreSQLParserREGR_AVGX-456))|(1<<(PostgreSQLParserREGR_AVGY-456))|(1<<(PostgreSQLParserREGR_COUNT-456))|(1<<(PostgreSQLParserREGR_INTERCEPT-456))|(1<<(PostgreSQLParserREGR_SLOPE-456))|(1<<(PostgreSQLParserREGR_SXX-456))|(1<<(PostgreSQLParserREGR_SXY-456))|(1<<(PostgreSQLParserREGR_SYY-456))|(1<<(PostgreSQLParserREINDEX-456))|(1<<(PostgreSQLParserRELATIVE-456))|(1<<(PostgreSQLParserRELEASE-456))|(1<<(PostgreSQLParserRENAME-456))|(1<<(PostgreSQLParserREPEATABLE-456))|(1<<(PostgreSQLParserREPLACE-456))|(1<<(PostgreSQLParserRESET-456))|(1<<(PostgreSQLParserRESTART-456))|(1<<(PostgreSQLParserRESTRICT-456))|(1<<(PostgreSQLParserRESULT-456))|(1<<(PostgreSQLParserRETURN-456))|(1<<(PostgreSQLParserRETURNED_CARDINALITY-456))|(1<<(PostgreSQLParserRETURNED_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_OCTET_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_SQLSTATE-456))|(1<<(PostgreSQLParserRETURNS-456))|(1<<(PostgreSQLParserREVOKE-456))|(1<<(PostgreSQLParserRIGHT-456))|(1<<(PostgreSQLParserROLE-456))|(1<<(PostgreSQLParserROLLBACK-456)))) != 0) || (((_la-488)&-(0x1f+1)) == 0 && ((1<<uint((_la-488)))&((1<<(PostgreSQLParserROLLUP-488))|(1<<(PostgreSQLParserROUTINE-488))|(1<<(PostgreSQLParserROUTINE_CATALOG-488))|(1<<(PostgreSQLParserROUTINE_NAME-488))|(1<<(PostgreSQLParserROUTINE_SCHEMA-488))|(1<<(PostgreSQLParserROW-488))|(1<<(PostgreSQLParserROW_COUNT-488))|(1<<(PostgreSQLParserROW_NUMBER-488))|(1<<(PostgreSQLParserROWS-488))|(1<<(PostgreSQLParserRULE-488))|(1<<(PostgreSQLParserSAVEPOINT-488))|(1<<(PostgreSQLParserSCALE-488))|(1<<(PostgreSQLParserSCHEMA-488))|(1<<(PostgreSQLParserSCHEMA_NAME-488))|(1<<(PostgreSQLParserSCOPE-488))|(1<<(PostgreSQLParserSCOPE_CATALOG-488))|(1<<(PostgreSQLParserSCOPE_NAME-488))|(1<<(PostgreSQLParserSCOPE_SCHEMA-488))|(1<<(PostgreSQLParserSCROLL-488))|(1<<(PostgreSQLParserSEARCH-488))|(1<<(PostgreSQLParserSECOND-488))|(1<<(PostgreSQLParserSECTION-488))|(1<<(PostgreSQLParserSECURITY-488))|(1<<(PostgreSQLParserSELF-488))|(1<<(PostgreSQLParserSENSITIVE-488))|(1<<(PostgreSQLParserSEQUENCE-488))|(1<<(PostgreSQLParserSEQUENCES-488))|(1<<(PostgreSQLParserSERIALIZABLE-488))|(1<<(PostgreSQLParserSERVER_NAME-488))|(1<<(PostgreSQLParserSESSION-488)))) != 0) || (((_la-520)&-(0x1f+1)) == 0 && ((1<<uint((_la-520)))&((1<<(PostgreSQLParserSET-520))|(1<<(PostgreSQLParserSETOF-520))|(1<<(PostgreSQLParserSETS-520))|(1<<(PostgreSQLParserSHARE-520))|(1<<(PostgreSQLParserSHOW-520))|(1<<(PostgreSQLParserSIMPLE-520))|(1<<(PostgreSQLParserSIZE-520))|(1<<(PostgreSQLParserSMALLINT-520))|(1<<(PostgreSQLParserSOME-520))|(1<<(PostgreSQLParserSOURCE-520))|(1<<(PostgreSQLParserSPACE-520))|(1<<(PostgreSQLParserSPECIFIC-520))|(1<<(PostgreSQLParserSPECIFIC_NAME-520))|(1<<(PostgreSQLParserSPECIFICTYPE-520))|(1<<(PostgreSQLParserSQL-520))|(1<<(PostgreSQLParserSQLCODE-520))|(1<<(PostgreSQLParserSQLERROR-520))|(1<<(PostgreSQLParserSQLEXCEPTION-520))|(1<<(PostgreSQLParserSQLSTATE-520))|(1<<(PostgreSQLParserSQLWARNING-520))|(1<<(PostgreSQLParserSQRT-520))|(1<<(PostgreSQLParserSTABLE-520))|(1<<(PostgreSQLParserSTART-520))|(1<<(PostgreSQLParserSTATE-520))|(1<<(PostgreSQLParserSTATEMENT-520))|(1<<(PostgreSQLParserSTATIC-520))|(1<<(PostgreSQLParserSTATISTICS-520))|(1<<(PostgreSQLParserSTDDEV_POP-520))|(1<<(PostgreSQLParserSTDDEV_SAMP-520)))) != 0) || (((_la-552)&-(0x1f+1)) == 0 && ((1<<uint((_la-552)))&((1<<(PostgreSQLParserSTDIN-552))|(1<<(PostgreSQLParserSTDOUT-552))|(1<<(PostgreSQLParserSTORAGE-552))|(1<<(PostgreSQLParserSTRICT-552))|(1<<(PostgreSQLParserSTRUCTURE-552))|(1<<(PostgreSQLParserSTYLE-552))|(1<<(PostgreSQLParserSUBCLASS_ORIGIN-552))|(1<<(PostgreSQLParserSUBMULTISET-552))|(1<<(PostgreSQLParserSUBSTRING-552))|(1<<(PostgreSQLParserSUM-552))|(1<<(PostgreSQLParserSYSID-552))|(1<<(PostgreSQLParserSYSTEM-552))|(1<<(PostgreSQLParserSYSTEM_USER-552))|(1<<(PostgreSQLParserTABLE_NAME-552))|(1<<(PostgreSQLParserTABLESPACE-552))|(1<<(PostgreSQLParserTEMP-552))|(1<<(PostgreSQLParserTEMPLATE-552))|(1<<(PostgreSQLParserTEMPORARY-552))|(1<<(PostgreSQLParserTIES-552))|(1<<(PostgreSQLParserTIME-552))|(1<<(PostgreSQLParserTIMESTAMP-552))|(1<<(PostgreSQLParserTIMEZONE_HOUR-552))|(1<<(PostgreSQLParserTIMEZONE_MINUTE-552)))) != 0) || (((_la-586)&-(0x1f+1)) == 0 && ((1<<uint((_la-586)))&((1<<(PostgreSQLParserTOP_LEVEL_COUNT-586))|(1<<(PostgreSQLParserTRANSACTION-586))|(1<<(PostgreSQLParserTRANSACTION_ACTIVE-586))|(1<<(PostgreSQLParserTRANSACTIONS_COMMITTED-586))|(1<<(PostgreSQLParserTRANSACTIONS_ROLLED_BACK-586))|(1<<(PostgreSQLParserTRANSFORM-586))|(1<<(PostgreSQLParserTRANSFORMS-586))|(1<<(PostgreSQLParserTRANSLATE-586))|(1<<(PostgreSQLParserTRANSLATION-586))|(1<<(PostgreSQLParserTREAT-586))|(1<<(PostgreSQLParserTRIGGER-586))|(1<<(PostgreSQLParserTRIGGER_CATALOG-586))|(1<<(PostgreSQLParserTRIGGER_NAME-586))|(1<<(PostgreSQLParserTRIGGER_SCHEMA-586))|(1<<(PostgreSQLParserTRIM-586))|(1<<(PostgreSQLParserTRUE-586))|(1<<(PostgreSQLParserTRUNCATE-586))|(1<<(PostgreSQLParserTRUSTED-586))|(1<<(PostgreSQLParserTYPE-586))|(1<<(PostgreSQLParserUESCAPE-586))|(1<<(PostgreSQLParserUNBOUNDED-586))|(1<<(PostgreSQLParserUNCOMMITTED-586))|(1<<(PostgreSQLParserUNDER-586))|(1<<(PostgreSQLParserUNENCRYPTED-586))|(1<<(PostgreSQLParserUNKNOWN-586))|(1<<(PostgreSQLParserUNLISTEN-586))|(1<<(PostgreSQLParserUNNAMED-586))|(1<<(PostgreSQLParserUNNEST-586))|(1<<(PostgreSQLParserUNTIL-586)))) != 0) || (((_la-618)&-(0x1f+1)) == 0 && ((1<<uint((_la-618)))&((1<<(PostgreSQLParserUPDATE-618))|(1<<(PostgreSQLParserUPPER-618))|(1<<(PostgreSQLParserUSAGE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CATALOG-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CODE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_NAME-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA-618))|(1<<(PostgreSQLParserVACUUM-618))|(1<<(PostgreSQLParserVALID-618))|(1<<(PostgreSQLParserVALIDATOR-618))|(1<<(PostgreSQLParserVALUE-618))|(1<<(PostgreSQLParserVALUES-618))|(1<<(PostgreSQLParserVAR_POP-618))|(1<<(PostgreSQLParserVAR_SAMP-618))|(1<<(PostgreSQLParserVARCHAR-618))|(1<<(PostgreSQLParserVARYING-618))|(1<<(PostgreSQLParserVIEW-618))|(1<<(PostgreSQLParserVOLATILE-618))|(1<<(PostgreSQLParserWHENEVER-618))|(1<<(PostgreSQLParserWIDTH_BUCKET-618))|(1<<(PostgreSQLParserWITHIN-618))|(1<<(PostgreSQLParserWITHOUT-618)))) != 0) || (((_la-650)&-(0x1f+1)) == 0 && ((1<<uint((_la-650)))&((1<<(PostgreSQLParserWORK-650))|(1<<(PostgreSQLParserWRITE-650))|(1<<(PostgreSQLParserYEAR-650))|(1<<(PostgreSQLParserZONE-650)))) != 0) || (((_la-720)&-(0x1f+1)) == 0 && ((1<<uint((_la-720)))&((1<<(PostgreSQLParserABSTIME-720))|(1<<(PostgreSQLParserBIGSERIAL-720))|(1<<(PostgreSQLParserBIT_VARYING-720))|(1<<(PostgreSQLParserBOOL-720))|(1<<(PostgreSQLParserBOX-720))|(1<<(PostgreSQLParserBYTEA-720))|(1<<(PostgreSQLParserCHARACTER_VARYING-720))|(1<<(PostgreSQLParserCIDR-720))|(1<<(PostgreSQLParserCIRCLE-720))|(1<<(PostgreSQLParserFLOAT4-720))|(1<<(PostgreSQLParserFLOAT8-720))|(1<<(PostgreSQLParserINET-720))|(1<<(PostgreSQLParserINT2-720))|(1<<(PostgreSQLParserINT4-720))|(1<<(PostgreSQLParserINT8-720))|(1<<(PostgreSQLParserJSON-720))|(1<<(PostgreSQLParserJSONB-720))|(1<<(PostgreSQLParserLINE-720))|(1<<(PostgreSQLParserLSEG-720))|(1<<(PostgreSQLParserMACADDR-720))|(1<<(PostgreSQLParserMACADDR8-720))|(1<<(PostgreSQLParserMONEY-720))|(1<<(PostgreSQLParserPG_LSN-720))|(1<<(PostgreSQLParserPOINT-720))|(1<<(PostgreSQLParserPOLYGON-720))|(1<<(PostgreSQLParserRELTIME-720))|(1<<(PostgreSQLParserSERIAL-720))|(1<<(PostgreSQLParserSERIAL2-720))|(1<<(PostgreSQLParserSERIAL4-720))|(1<<(PostgreSQLParserSERIAL8-720))|(1<<(PostgreSQLParserSMALLSERIAL-720)))) != 0) || (((_la-752)&-(0x1f+1)) == 0 && ((1<<uint((_la-752)))&((1<<(PostgreSQLParserTEXT-752))|(1<<(PostgreSQLParserTIMESTAMPTZ-752))|(1<<(PostgreSQLParserTIMETZ-752))|(1<<(PostgreSQLParserTSQUERY-752))|(1<<(PostgreSQLParserTSVECTOR-752))|(1<<(PostgreSQLParserTXID_SNAPSHOT-752))|(1<<(PostgreSQLParserUUID-752))|(1<<(PostgreSQLParserVARBIT-752))|(1<<(PostgreSQLParserXML-752))|(1<<(PostgreSQLParserDOUBLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserIDENTIFIER-752))|(1<<(PostgreSQLParserIDENTIFIER_UNICODE-752)))) != 0) {
			{
				p.SetState(4283)

				var _x = p.Table_name_()

				localctx.(*Vacuum_stmtContext).table_name = _x
			}
			p.SetState(4288)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PostgreSQLParserOPEN_PAREN {
				{
					p.SetState(4284)
					p.Match(PostgreSQLParserOPEN_PAREN)
				}
				{
					p.SetState(4285)
					p.Column_list()
				}
				{
					p.SetState(4286)
					p.Match(PostgreSQLParserCLOSE_PAREN)
				}

			}

		}

	}

	return localctx
}

// IValues_stmtContext is an interface to support dynamic dispatch.
type IValues_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValues_stmtContext differentiates from other interfaces.
	IsValues_stmtContext()
}

type Values_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValues_stmtContext() *Values_stmtContext {
	var p = new(Values_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_values_stmt
	return p
}

func (*Values_stmtContext) IsValues_stmtContext() {}

func NewValues_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Values_stmtContext {
	var p = new(Values_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_values_stmt

	return p
}

func (s *Values_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Values_stmtContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Values_stmtContext) Order_by_clause() IOrder_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Values_stmtContext) AllCombine_clause() []ICombine_clauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICombine_clauseContext)(nil)).Elem())
	var tst = make([]ICombine_clauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICombine_clauseContext)
		}
	}

	return tst
}

func (s *Values_stmtContext) Combine_clause(i int) ICombine_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICombine_clauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICombine_clauseContext)
}

func (s *Values_stmtContext) Limit_clause() ILimit_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimit_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimit_clauseContext)
}

func (s *Values_stmtContext) Offset_clause() IOffset_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOffset_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOffset_clauseContext)
}

func (s *Values_stmtContext) Fetch_clause() IFetch_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFetch_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFetch_clauseContext)
}

func (s *Values_stmtContext) VALUES() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVALUES, 0)
}

func (s *Values_stmtContext) Expr_list_list() IExpr_list_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_list_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_list_listContext)
}

func (s *Values_stmtContext) Values_stmt() IValues_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValues_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValues_stmtContext)
}

func (s *Values_stmtContext) AllOPEN_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPEN_PAREN)
}

func (s *Values_stmtContext) OPEN_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, i)
}

func (s *Values_stmtContext) AllCLOSE_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCLOSE_PAREN)
}

func (s *Values_stmtContext) CLOSE_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, i)
}

func (s *Values_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Values_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Values_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterValues_stmt(s)
	}
}

func (s *Values_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitValues_stmt(s)
	}
}

func (p *PostgreSQLParser) Values_stmt() (localctx IValues_stmtContext) {
	localctx = NewValues_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 384, PostgreSQLParserRULE_values_stmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4295)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserWITH {
		{
			p.SetState(4294)
			p.With_clause()
		}

	}
	p.SetState(4312)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserVALUES:
		{
			p.SetState(4297)
			p.Match(PostgreSQLParserVALUES)
		}
		{
			p.SetState(4298)
			p.Expr_list_list()
		}

	case PostgreSQLParserOPEN_PAREN:
		p.SetState(4300)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(4299)
					p.Match(PostgreSQLParserOPEN_PAREN)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(4302)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 495, p.GetParserRuleContext())
		}
		{
			p.SetState(4304)
			p.Values_stmt()
		}
		p.SetState(4306)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == PostgreSQLParserCLOSE_PAREN {
			{
				p.SetState(4305)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

			p.SetState(4308)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4310)
			p.Combine_clause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(4315)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 498, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4314)
			p.Order_by_clause()
		}

	}
	p.SetState(4318)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 499, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4317)
			p.Combine_clause()
		}

	}
	p.SetState(4321)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 500, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4320)
			p.Limit_clause()
		}

	}
	p.SetState(4324)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 501, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4323)
			p.Offset_clause()
		}

	}
	p.SetState(4327)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 502, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4326)
			p.Fetch_clause()
		}

	}

	return localctx
}

// ISelector_clauseContext is an interface to support dynamic dispatch.
type ISelector_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelector_clauseContext differentiates from other interfaces.
	IsSelector_clauseContext()
}

type Selector_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelector_clauseContext() *Selector_clauseContext {
	var p = new(Selector_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_selector_clause
	return p
}

func (*Selector_clauseContext) IsSelector_clauseContext() {}

func NewSelector_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Selector_clauseContext {
	var p = new(Selector_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_selector_clause

	return p
}

func (s *Selector_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Selector_clauseContext) Column_list() IColumn_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Selector_clauseContext) ALL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALL, 0)
}

func (s *Selector_clauseContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDISTINCT, 0)
}

func (s *Selector_clauseContext) ON() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserON, 0)
}

func (s *Selector_clauseContext) Expr_list() IExpr_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_listContext)
}

func (s *Selector_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Selector_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Selector_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterSelector_clause(s)
	}
}

func (s *Selector_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitSelector_clause(s)
	}
}

func (p *PostgreSQLParser) Selector_clause() (localctx ISelector_clauseContext) {
	localctx = NewSelector_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 386, PostgreSQLParserRULE_selector_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4335)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 504, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4329)
			p.Match(PostgreSQLParserALL)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 504, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(4330)
			p.Match(PostgreSQLParserDISTINCT)
		}
		p.SetState(4333)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserON {
			{
				p.SetState(4331)
				p.Match(PostgreSQLParserON)
			}
			{
				p.SetState(4332)
				p.Expr_list()
			}

		}

	}
	{
		p.SetState(4337)
		p.Column_list()
	}

	return localctx
}

// IFrom_clauseContext is an interface to support dynamic dispatch.
type IFrom_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrom_clauseContext differentiates from other interfaces.
	IsFrom_clauseContext()
}

type From_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_clauseContext() *From_clauseContext {
	var p = new(From_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_from_clause
	return p
}

func (*From_clauseContext) IsFrom_clauseContext() {}

func NewFrom_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_clauseContext {
	var p = new(From_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_from_clause

	return p
}

func (s *From_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *From_clauseContext) FROM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFROM, 0)
}

func (s *From_clauseContext) AllFrom_item() []IFrom_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFrom_itemContext)(nil)).Elem())
	var tst = make([]IFrom_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFrom_itemContext)
		}
	}

	return tst
}

func (s *From_clauseContext) From_item(i int) IFrom_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrom_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFrom_itemContext)
}

func (s *From_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *From_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *From_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *From_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterFrom_clause(s)
	}
}

func (s *From_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitFrom_clause(s)
	}
}

func (p *PostgreSQLParser) From_clause() (localctx IFrom_clauseContext) {
	localctx = NewFrom_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 388, PostgreSQLParserRULE_from_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4339)
		p.Match(PostgreSQLParserFROM)
	}
	{
		p.SetState(4340)
		p.from_item(0)
	}
	p.SetState(4345)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 505, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(4341)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(4342)
				p.from_item(0)
			}

		}
		p.SetState(4347)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 505, p.GetParserRuleContext())
	}

	return localctx
}

// IWhere_clauseContext is an interface to support dynamic dispatch.
type IWhere_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhere_clauseContext differentiates from other interfaces.
	IsWhere_clauseContext()
}

type Where_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhere_clauseContext() *Where_clauseContext {
	var p = new(Where_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_where_clause
	return p
}

func (*Where_clauseContext) IsWhere_clauseContext() {}

func NewWhere_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Where_clauseContext {
	var p = new(Where_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_where_clause

	return p
}

func (s *Where_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Where_clauseContext) WHERE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWHERE, 0)
}

func (s *Where_clauseContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *Where_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Where_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Where_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterWhere_clause(s)
	}
}

func (s *Where_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitWhere_clause(s)
	}
}

func (p *PostgreSQLParser) Where_clause() (localctx IWhere_clauseContext) {
	localctx = NewWhere_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 390, PostgreSQLParserRULE_where_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4348)
		p.Match(PostgreSQLParserWHERE)
	}
	{
		p.SetState(4349)
		p.predicate(0)
	}

	return localctx
}

// IGroup_by_clauseContext is an interface to support dynamic dispatch.
type IGroup_by_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroup_by_clauseContext differentiates from other interfaces.
	IsGroup_by_clauseContext()
}

type Group_by_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroup_by_clauseContext() *Group_by_clauseContext {
	var p = new(Group_by_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_group_by_clause
	return p
}

func (*Group_by_clauseContext) IsGroup_by_clauseContext() {}

func NewGroup_by_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Group_by_clauseContext {
	var p = new(Group_by_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_group_by_clause

	return p
}

func (s *Group_by_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Group_by_clauseContext) GROUP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGROUP, 0)
}

func (s *Group_by_clauseContext) BY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBY, 0)
}

func (s *Group_by_clauseContext) AllGrouping_elem() []IGrouping_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGrouping_elemContext)(nil)).Elem())
	var tst = make([]IGrouping_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGrouping_elemContext)
		}
	}

	return tst
}

func (s *Group_by_clauseContext) Grouping_elem(i int) IGrouping_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrouping_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGrouping_elemContext)
}

func (s *Group_by_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Group_by_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Group_by_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Group_by_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Group_by_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterGroup_by_clause(s)
	}
}

func (s *Group_by_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitGroup_by_clause(s)
	}
}

func (p *PostgreSQLParser) Group_by_clause() (localctx IGroup_by_clauseContext) {
	localctx = NewGroup_by_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 392, PostgreSQLParserRULE_group_by_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4351)
		p.Match(PostgreSQLParserGROUP)
	}
	{
		p.SetState(4352)
		p.Match(PostgreSQLParserBY)
	}
	{
		p.SetState(4353)
		p.Grouping_elem()
	}
	p.SetState(4358)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 506, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(4354)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(4355)
				p.Grouping_elem()
			}

		}
		p.SetState(4360)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 506, p.GetParserRuleContext())
	}

	return localctx
}

// IGrouping_elemContext is an interface to support dynamic dispatch.
type IGrouping_elemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrouping_elemContext differentiates from other interfaces.
	IsGrouping_elemContext()
}

type Grouping_elemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrouping_elemContext() *Grouping_elemContext {
	var p = new(Grouping_elemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_grouping_elem
	return p
}

func (*Grouping_elemContext) IsGrouping_elemContext() {}

func NewGrouping_elemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grouping_elemContext {
	var p = new(Grouping_elemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_grouping_elem

	return p
}

func (s *Grouping_elemContext) GetParser() antlr.Parser { return s.parser }

func (s *Grouping_elemContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Grouping_elemContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Grouping_elemContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Grouping_elemContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Grouping_elemContext) AllExpr_list() []IExpr_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpr_listContext)(nil)).Elem())
	var tst = make([]IExpr_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpr_listContext)
		}
	}

	return tst
}

func (s *Grouping_elemContext) Expr_list(i int) IExpr_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpr_listContext)
}

func (s *Grouping_elemContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROLLUP, 0)
}

func (s *Grouping_elemContext) CUBE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCUBE, 0)
}

func (s *Grouping_elemContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Grouping_elemContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Grouping_elemContext) GROUPING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGROUPING, 0)
}

func (s *Grouping_elemContext) SETS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSETS, 0)
}

func (s *Grouping_elemContext) Grouping_elem_list() IGrouping_elem_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrouping_elem_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrouping_elem_listContext)
}

func (s *Grouping_elemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grouping_elemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grouping_elemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterGrouping_elem(s)
	}
}

func (s *Grouping_elemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitGrouping_elem(s)
	}
}

func (p *PostgreSQLParser) Grouping_elem() (localctx IGrouping_elemContext) {
	localctx = NewGrouping_elemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 394, PostgreSQLParserRULE_grouping_elem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4386)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 510, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4361)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(4362)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4363)
			p.expr(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4364)
			p.Expr_list()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4365)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserCUBE || _la == PostgreSQLParserROLLUP) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4366)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		p.SetState(4369)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 507, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(4367)
				p.expr(0)
			}

		case 2:
			{
				p.SetState(4368)
				p.Expr_list()
			}

		}
		p.SetState(4378)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PostgreSQLParserCOMMA {
			{
				p.SetState(4371)
				p.Match(PostgreSQLParserCOMMA)
			}
			p.SetState(4374)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 508, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(4372)
					p.expr(0)
				}

			case 2:
				{
					p.SetState(4373)
					p.Expr_list()
				}

			}

			p.SetState(4380)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4381)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4383)
			p.Match(PostgreSQLParserGROUPING)
		}
		{
			p.SetState(4384)
			p.Match(PostgreSQLParserSETS)
		}
		{
			p.SetState(4385)
			p.Grouping_elem_list()
		}

	}

	return localctx
}

// IGrouping_elem_listContext is an interface to support dynamic dispatch.
type IGrouping_elem_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrouping_elem_listContext differentiates from other interfaces.
	IsGrouping_elem_listContext()
}

type Grouping_elem_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrouping_elem_listContext() *Grouping_elem_listContext {
	var p = new(Grouping_elem_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_grouping_elem_list
	return p
}

func (*Grouping_elem_listContext) IsGrouping_elem_listContext() {}

func NewGrouping_elem_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grouping_elem_listContext {
	var p = new(Grouping_elem_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_grouping_elem_list

	return p
}

func (s *Grouping_elem_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Grouping_elem_listContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Grouping_elem_listContext) AllGrouping_elem() []IGrouping_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGrouping_elemContext)(nil)).Elem())
	var tst = make([]IGrouping_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGrouping_elemContext)
		}
	}

	return tst
}

func (s *Grouping_elem_listContext) Grouping_elem(i int) IGrouping_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrouping_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGrouping_elemContext)
}

func (s *Grouping_elem_listContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Grouping_elem_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Grouping_elem_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Grouping_elem_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grouping_elem_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grouping_elem_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterGrouping_elem_list(s)
	}
}

func (s *Grouping_elem_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitGrouping_elem_list(s)
	}
}

func (p *PostgreSQLParser) Grouping_elem_list() (localctx IGrouping_elem_listContext) {
	localctx = NewGrouping_elem_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 396, PostgreSQLParserRULE_grouping_elem_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4388)
		p.Match(PostgreSQLParserOPEN_PAREN)
	}
	{
		p.SetState(4389)
		p.Grouping_elem()
	}
	p.SetState(4394)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(4390)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(4391)
			p.Grouping_elem()
		}

		p.SetState(4396)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4397)
		p.Match(PostgreSQLParserCLOSE_PAREN)
	}

	return localctx
}

// IHaving_clauseContext is an interface to support dynamic dispatch.
type IHaving_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHaving_clauseContext differentiates from other interfaces.
	IsHaving_clauseContext()
}

type Having_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHaving_clauseContext() *Having_clauseContext {
	var p = new(Having_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_having_clause
	return p
}

func (*Having_clauseContext) IsHaving_clauseContext() {}

func NewHaving_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Having_clauseContext {
	var p = new(Having_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_having_clause

	return p
}

func (s *Having_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Having_clauseContext) HAVING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHAVING, 0)
}

func (s *Having_clauseContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *Having_clauseContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *Having_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Having_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Having_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Having_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Having_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterHaving_clause(s)
	}
}

func (s *Having_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitHaving_clause(s)
	}
}

func (p *PostgreSQLParser) Having_clause() (localctx IHaving_clauseContext) {
	localctx = NewHaving_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 398, PostgreSQLParserRULE_having_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4399)
		p.Match(PostgreSQLParserHAVING)
	}
	{
		p.SetState(4400)
		p.predicate(0)
	}
	p.SetState(4405)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 512, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(4401)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(4402)
				p.predicate(0)
			}

		}
		p.SetState(4407)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 512, p.GetParserRuleContext())
	}

	return localctx
}

// IColumn_listContext is an interface to support dynamic dispatch.
type IColumn_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetColumn_name_ returns the column_name_ rule contexts.
	GetColumn_name_() IExprContext

	// GetOutput_name returns the output_name rule contexts.
	GetOutput_name() IName_Context

	// SetColumn_name_ sets the column_name_ rule contexts.
	SetColumn_name_(IExprContext)

	// SetOutput_name sets the output_name rule contexts.
	SetOutput_name(IName_Context)

	// IsColumn_listContext differentiates from other interfaces.
	IsColumn_listContext()
}

type Column_listContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	column_name_ IExprContext
	output_name  IName_Context
}

func NewEmptyColumn_listContext() *Column_listContext {
	var p = new(Column_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_column_list
	return p
}

func (*Column_listContext) IsColumn_listContext() {}

func NewColumn_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_listContext {
	var p = new(Column_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_column_list

	return p
}

func (s *Column_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_listContext) GetColumn_name_() IExprContext { return s.column_name_ }

func (s *Column_listContext) GetOutput_name() IName_Context { return s.output_name }

func (s *Column_listContext) SetColumn_name_(v IExprContext) { s.column_name_ = v }

func (s *Column_listContext) SetOutput_name(v IName_Context) { s.output_name = v }

func (s *Column_listContext) AllSTAR() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserSTAR)
}

func (s *Column_listContext) STAR(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTAR, i)
}

func (s *Column_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Column_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Column_listContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Column_listContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Column_listContext) AllName_() []IName_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IName_Context)(nil)).Elem())
	var tst = make([]IName_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IName_Context)
		}
	}

	return tst
}

func (s *Column_listContext) Name_(i int) IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Column_listContext) AllAS() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserAS)
}

func (s *Column_listContext) AS(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAS, i)
}

func (s *Column_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterColumn_list(s)
	}
}

func (s *Column_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitColumn_list(s)
	}
}

func (p *PostgreSQLParser) Column_list() (localctx IColumn_listContext) {
	localctx = NewColumn_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 400, PostgreSQLParserRULE_column_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4416)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALL, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserARRAY, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCASE, PostgreSQLParserCAST, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DATE, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_ROLE, PostgreSQLParserCURRENT_TIME, PostgreSQLParserCURRENT_TIMESTAMP, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURRENT_USER, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULT, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFALSE, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOT, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULL, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITH, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOLLAR, PostgreSQLParserDOLLAR_DOLLAR, PostgreSQLParserOPEN_PAREN, PostgreSQLParserBIT_STRING, PostgreSQLParserREGEX_STRING, PostgreSQLParserNUMERIC_LITERAL, PostgreSQLParserINTEGER_LITERAL, PostgreSQLParserHEX_INTEGER_LITERAL, PostgreSQLParserSINGLEQ_STRING_LITERAL, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserDOLLAR_DEC, PostgreSQLParserIDENTIFIER_UNICODE, PostgreSQLParserAT_SIGN, PostgreSQLParserBANG_BANG, PostgreSQLParserMINUS, PostgreSQLParserPLUS, PostgreSQLParserQMARK_HYPHEN, PostgreSQLParserTIL:
		{
			p.SetState(4408)

			var _x = p.expr(0)

			localctx.(*Column_listContext).column_name_ = _x
		}
		p.SetState(4413)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 514, p.GetParserRuleContext()) == 1 {
			p.SetState(4410)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PostgreSQLParserAS {
				{
					p.SetState(4409)
					p.Match(PostgreSQLParserAS)
				}

			}
			{
				p.SetState(4412)

				var _x = p.Name_()

				localctx.(*Column_listContext).output_name = _x
			}

		}

	case PostgreSQLParserSTAR:
		{
			p.SetState(4415)
			p.Match(PostgreSQLParserSTAR)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(4431)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 519, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(4418)
				p.Match(PostgreSQLParserCOMMA)
			}
			p.SetState(4427)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALL, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserARRAY, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCASE, PostgreSQLParserCAST, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DATE, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_ROLE, PostgreSQLParserCURRENT_TIME, PostgreSQLParserCURRENT_TIMESTAMP, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURRENT_USER, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULT, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFALSE, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOT, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULL, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITH, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOLLAR, PostgreSQLParserDOLLAR_DOLLAR, PostgreSQLParserOPEN_PAREN, PostgreSQLParserBIT_STRING, PostgreSQLParserREGEX_STRING, PostgreSQLParserNUMERIC_LITERAL, PostgreSQLParserINTEGER_LITERAL, PostgreSQLParserHEX_INTEGER_LITERAL, PostgreSQLParserSINGLEQ_STRING_LITERAL, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserDOLLAR_DEC, PostgreSQLParserIDENTIFIER_UNICODE, PostgreSQLParserAT_SIGN, PostgreSQLParserBANG_BANG, PostgreSQLParserMINUS, PostgreSQLParserPLUS, PostgreSQLParserQMARK_HYPHEN, PostgreSQLParserTIL:
				{
					p.SetState(4419)

					var _x = p.expr(0)

					localctx.(*Column_listContext).column_name_ = _x
				}
				p.SetState(4424)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 517, p.GetParserRuleContext()) == 1 {
					p.SetState(4421)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == PostgreSQLParserAS {
						{
							p.SetState(4420)
							p.Match(PostgreSQLParserAS)
						}

					}
					{
						p.SetState(4423)

						var _x = p.Name_()

						localctx.(*Column_listContext).output_name = _x
					}

				}

			case PostgreSQLParserSTAR:
				{
					p.SetState(4426)
					p.Match(PostgreSQLParserSTAR)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(4433)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 519, p.GetParserRuleContext())
	}

	return localctx
}

// IExplain_parameterContext is an interface to support dynamic dispatch.
type IExplain_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplain_parameterContext differentiates from other interfaces.
	IsExplain_parameterContext()
}

type Explain_parameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplain_parameterContext() *Explain_parameterContext {
	var p = new(Explain_parameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_explain_parameter
	return p
}

func (*Explain_parameterContext) IsExplain_parameterContext() {}

func NewExplain_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Explain_parameterContext {
	var p = new(Explain_parameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_explain_parameter

	return p
}

func (s *Explain_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *Explain_parameterContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserANALYZE, 0)
}

func (s *Explain_parameterContext) VERBOSE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVERBOSE, 0)
}

func (s *Explain_parameterContext) COSTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOSTS, 0)
}

func (s *Explain_parameterContext) BUFFERS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBUFFERS, 0)
}

func (s *Explain_parameterContext) TIMING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIMING, 0)
}

func (s *Explain_parameterContext) Param_value() IParam_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParam_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParam_valueContext)
}

func (s *Explain_parameterContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFORMAT, 0)
}

func (s *Explain_parameterContext) TEXT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEXT, 0)
}

func (s *Explain_parameterContext) XML() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserXML, 0)
}

func (s *Explain_parameterContext) JSON() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserJSON, 0)
}

func (s *Explain_parameterContext) YAML() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserYAML, 0)
}

func (s *Explain_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Explain_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Explain_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterExplain_parameter(s)
	}
}

func (s *Explain_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitExplain_parameter(s)
	}
}

func (p *PostgreSQLParser) Explain_parameter() (localctx IExplain_parameterContext) {
	localctx = NewExplain_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 402, PostgreSQLParserRULE_explain_parameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4440)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserANALYZE, PostgreSQLParserBUFFERS, PostgreSQLParserCOSTS, PostgreSQLParserTIMING, PostgreSQLParserVERBOSE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4434)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserANALYZE || _la == PostgreSQLParserBUFFERS || _la == PostgreSQLParserCOSTS || _la == PostgreSQLParserTIMING || _la == PostgreSQLParserVERBOSE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(4436)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PostgreSQLParserWHITESPACE)|(1<<PostgreSQLParserA_)|(1<<PostgreSQLParserABORT)|(1<<PostgreSQLParserABS)|(1<<PostgreSQLParserABSOLUTE)|(1<<PostgreSQLParserACCESS)|(1<<PostgreSQLParserACTION)|(1<<PostgreSQLParserADA)|(1<<PostgreSQLParserADD)|(1<<PostgreSQLParserADMIN)|(1<<PostgreSQLParserAFTER)|(1<<PostgreSQLParserAGGREGATE)|(1<<PostgreSQLParserALLOCATE)|(1<<PostgreSQLParserALSO)|(1<<PostgreSQLParserALTER)|(1<<PostgreSQLParserALWAYS)|(1<<PostgreSQLParserANY)|(1<<PostgreSQLParserARE)|(1<<PostgreSQLParserASENSITIVE)|(1<<PostgreSQLParserASSERTION)|(1<<PostgreSQLParserASSIGNMENT))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(PostgreSQLParserAT-33))|(1<<(PostgreSQLParserATOMIC-33))|(1<<(PostgreSQLParserATTRIBUTE-33))|(1<<(PostgreSQLParserATTRIBUTES-33))|(1<<(PostgreSQLParserAVG-33))|(1<<(PostgreSQLParserBACKWARD-33))|(1<<(PostgreSQLParserBEFORE-33))|(1<<(PostgreSQLParserBEGIN-33))|(1<<(PostgreSQLParserBERNOULLI-33))|(1<<(PostgreSQLParserBETWEEN-33))|(1<<(PostgreSQLParserBIGINT-33))|(1<<(PostgreSQLParserBIT-33))|(1<<(PostgreSQLParserBIT_LENGTH-33))|(1<<(PostgreSQLParserBLOB-33))|(1<<(PostgreSQLParserBOOLEAN-33))|(1<<(PostgreSQLParserBREADTH-33))|(1<<(PostgreSQLParserBY-33))|(1<<(PostgreSQLParserC_-33))|(1<<(PostgreSQLParserCACHE-33))|(1<<(PostgreSQLParserCALL-33))|(1<<(PostgreSQLParserCALLED-33))|(1<<(PostgreSQLParserCARDINALITY-33))|(1<<(PostgreSQLParserCASCADE-33))|(1<<(PostgreSQLParserCASCADED-33))|(1<<(PostgreSQLParserCATALOG-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PostgreSQLParserCATALOG_NAME-65))|(1<<(PostgreSQLParserCEIL-65))|(1<<(PostgreSQLParserCEILING-65))|(1<<(PostgreSQLParserCHAIN-65))|(1<<(PostgreSQLParserCHAR-65))|(1<<(PostgreSQLParserCHAR_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER-65))|(1<<(PostgreSQLParserCHARACTER_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER_SET_CATALOG-65))|(1<<(PostgreSQLParserCHARACTER_SET_NAME-65))|(1<<(PostgreSQLParserCHARACTER_SET_SCHEMA-65))|(1<<(PostgreSQLParserCHARACTERISTICS-65))|(1<<(PostgreSQLParserCHARACTERS-65))|(1<<(PostgreSQLParserCHECKPOINT-65))|(1<<(PostgreSQLParserCLASS-65))|(1<<(PostgreSQLParserCLASS_ORIGIN-65))|(1<<(PostgreSQLParserCLOB-65))|(1<<(PostgreSQLParserCLOSE-65))|(1<<(PostgreSQLParserCLUSTER-65))|(1<<(PostgreSQLParserCOALESCE-65))|(1<<(PostgreSQLParserCOBOL-65))|(1<<(PostgreSQLParserCOLLATION_CATALOG-65))|(1<<(PostgreSQLParserCOLLATION_NAME-65))|(1<<(PostgreSQLParserCOLLATION_SCHEMA-65))|(1<<(PostgreSQLParserCOLLECT-65))|(1<<(PostgreSQLParserCOLUMN_NAME-65))|(1<<(PostgreSQLParserCOMMAND_FUNCTION-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(PostgreSQLParserCOMMAND_FUNCTION_CODE-97))|(1<<(PostgreSQLParserCOMMENT-97))|(1<<(PostgreSQLParserCOMMIT-97))|(1<<(PostgreSQLParserCOMMITTED-97))|(1<<(PostgreSQLParserCONDITION-97))|(1<<(PostgreSQLParserCONDITION_NUMBER-97))|(1<<(PostgreSQLParserCONNECT-97))|(1<<(PostgreSQLParserCONNECTION-97))|(1<<(PostgreSQLParserCONNECTION_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_CATALOG-97))|(1<<(PostgreSQLParserCONSTRAINT_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_SCHEMA-97))|(1<<(PostgreSQLParserCONSTRAINTS-97))|(1<<(PostgreSQLParserCONSTRUCTOR-97))|(1<<(PostgreSQLParserCONTAINS-97))|(1<<(PostgreSQLParserCONTINUE-97))|(1<<(PostgreSQLParserCONVERSION-97))|(1<<(PostgreSQLParserCONVERT-97))|(1<<(PostgreSQLParserCOPY-97))|(1<<(PostgreSQLParserCORR-97))|(1<<(PostgreSQLParserCORRESPONDING-97))|(1<<(PostgreSQLParserCOUNT-97))|(1<<(PostgreSQLParserCOVAR_POP-97))|(1<<(PostgreSQLParserCOVAR_SAMP-97)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(PostgreSQLParserCSV-131))|(1<<(PostgreSQLParserCUBE-131))|(1<<(PostgreSQLParserCUME_DIST-131))|(1<<(PostgreSQLParserCURRENT-131))|(1<<(PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP-131))|(1<<(PostgreSQLParserCURRENT_PATH-131))|(1<<(PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE-131))|(1<<(PostgreSQLParserCURSOR-131))|(1<<(PostgreSQLParserCURSOR_NAME-131))|(1<<(PostgreSQLParserCYCLE-131))|(1<<(PostgreSQLParserDATA-131))|(1<<(PostgreSQLParserDATABASE-131))|(1<<(PostgreSQLParserDATE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_CODE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_PRECISION-131))|(1<<(PostgreSQLParserDAY-131))|(1<<(PostgreSQLParserDEALLOCATE-131))|(1<<(PostgreSQLParserDEC-131))|(1<<(PostgreSQLParserDECIMAL-131))|(1<<(PostgreSQLParserDECLARE-131))|(1<<(PostgreSQLParserDEFAULTS-131))|(1<<(PostgreSQLParserDEFERRED-131))|(1<<(PostgreSQLParserDEFINED-131))|(1<<(PostgreSQLParserDEFINER-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(PostgreSQLParserDEGREE-163))|(1<<(PostgreSQLParserDELETE-163))|(1<<(PostgreSQLParserDELIMITER-163))|(1<<(PostgreSQLParserDELIMITERS-163))|(1<<(PostgreSQLParserDENSE_RANK-163))|(1<<(PostgreSQLParserDEPTH-163))|(1<<(PostgreSQLParserDEREF-163))|(1<<(PostgreSQLParserDERIVED-163))|(1<<(PostgreSQLParserDESCRIBE-163))|(1<<(PostgreSQLParserDESCRIPTOR-163))|(1<<(PostgreSQLParserDETERMINISTIC-163))|(1<<(PostgreSQLParserDIAGNOSTICS-163))|(1<<(PostgreSQLParserDICTIONARY-163))|(1<<(PostgreSQLParserDISCONNECT-163))|(1<<(PostgreSQLParserDISPATCH-163))|(1<<(PostgreSQLParserDOMAIN-163))|(1<<(PostgreSQLParserDOUBLE-163))|(1<<(PostgreSQLParserDYNAMIC-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION_CODE-163))|(1<<(PostgreSQLParserEACH-163))|(1<<(PostgreSQLParserELEMENT-163)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(PostgreSQLParserENCODING-197))|(1<<(PostgreSQLParserENCRYPTED-197))|(1<<(PostgreSQLParserEND-197))|(1<<(PostgreSQLParserEQUALS-197))|(1<<(PostgreSQLParserESCAPE-197))|(1<<(PostgreSQLParserEVERY-197))|(1<<(PostgreSQLParserEXCEPTION-197))|(1<<(PostgreSQLParserEXCLUDE-197))|(1<<(PostgreSQLParserEXCLUDING-197))|(1<<(PostgreSQLParserEXCLUSIVE-197))|(1<<(PostgreSQLParserEXEC-197))|(1<<(PostgreSQLParserEXECUTE-197))|(1<<(PostgreSQLParserEXISTS-197))|(1<<(PostgreSQLParserEXP-197))|(1<<(PostgreSQLParserEXPLAIN-197))|(1<<(PostgreSQLParserEXTENSION-197))|(1<<(PostgreSQLParserEXTERNAL-197))|(1<<(PostgreSQLParserEXTRACT-197))|(1<<(PostgreSQLParserFALSE-197))|(1<<(PostgreSQLParserFILTER-197))|(1<<(PostgreSQLParserFINAL-197))|(1<<(PostgreSQLParserFIRST-197))|(1<<(PostgreSQLParserFLOAT-197))|(1<<(PostgreSQLParserFLOOR-197))|(1<<(PostgreSQLParserFOLLOWING-197)))) != 0) || (((_la-229)&-(0x1f+1)) == 0 && ((1<<uint((_la-229)))&((1<<(PostgreSQLParserFORCE-229))|(1<<(PostgreSQLParserFORMAT-229))|(1<<(PostgreSQLParserFORTRAN-229))|(1<<(PostgreSQLParserFORWARD-229))|(1<<(PostgreSQLParserFOUND-229))|(1<<(PostgreSQLParserFREE-229))|(1<<(PostgreSQLParserFUNCTION-229))|(1<<(PostgreSQLParserFUSION-229))|(1<<(PostgreSQLParserG_-229))|(1<<(PostgreSQLParserGENERAL-229))|(1<<(PostgreSQLParserGENERATED-229))|(1<<(PostgreSQLParserGET-229))|(1<<(PostgreSQLParserGLOBAL-229))|(1<<(PostgreSQLParserGO-229))|(1<<(PostgreSQLParserGOTO-229))|(1<<(PostgreSQLParserGRANTED-229))|(1<<(PostgreSQLParserGREATEST-229))|(1<<(PostgreSQLParserGROUPING-229))|(1<<(PostgreSQLParserHANDLER-229))|(1<<(PostgreSQLParserHIERARCHY-229))|(1<<(PostgreSQLParserHOLD-229))|(1<<(PostgreSQLParserHOST-229))|(1<<(PostgreSQLParserHOUR-229))|(1<<(PostgreSQLParserIDENTITY-229))|(1<<(PostgreSQLParserIGNORE-229)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(PostgreSQLParserIMMEDIATE-262))|(1<<(PostgreSQLParserIMMUTABLE-262))|(1<<(PostgreSQLParserIMPLEMENTATION-262))|(1<<(PostgreSQLParserIMPLICIT-262))|(1<<(PostgreSQLParserINCLUDING-262))|(1<<(PostgreSQLParserINCREMENT-262))|(1<<(PostgreSQLParserINDEX-262))|(1<<(PostgreSQLParserINDICATOR-262))|(1<<(PostgreSQLParserINHERITS-262))|(1<<(PostgreSQLParserINOUT-262))|(1<<(PostgreSQLParserINPUT-262))|(1<<(PostgreSQLParserINSENSITIVE-262))|(1<<(PostgreSQLParserINSERT-262))|(1<<(PostgreSQLParserINSTANCE-262))|(1<<(PostgreSQLParserINSTANTIABLE-262))|(1<<(PostgreSQLParserINSTEAD-262))|(1<<(PostgreSQLParserINT-262))|(1<<(PostgreSQLParserINTEGER-262))|(1<<(PostgreSQLParserINTERSECTION-262))|(1<<(PostgreSQLParserINTERVAL-262))|(1<<(PostgreSQLParserINVOKER-262))|(1<<(PostgreSQLParserISOLATION-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(PostgreSQLParserK_-294))|(1<<(PostgreSQLParserKEY-294))|(1<<(PostgreSQLParserKEY_MEMBER-294))|(1<<(PostgreSQLParserKEY_TYPE-294))|(1<<(PostgreSQLParserLANGUAGE-294))|(1<<(PostgreSQLParserLARGE-294))|(1<<(PostgreSQLParserLAST-294))|(1<<(PostgreSQLParserLEAST-294))|(1<<(PostgreSQLParserLEFT-294))|(1<<(PostgreSQLParserLENGTH-294))|(1<<(PostgreSQLParserLEVEL-294))|(1<<(PostgreSQLParserLISTEN-294))|(1<<(PostgreSQLParserLN-294))|(1<<(PostgreSQLParserLOAD-294))|(1<<(PostgreSQLParserLOCAL-294))|(1<<(PostgreSQLParserLOCATION-294))|(1<<(PostgreSQLParserLOCATOR-294))|(1<<(PostgreSQLParserLOCK-294))|(1<<(PostgreSQLParserLOCKED-294))|(1<<(PostgreSQLParserLOWER-294))|(1<<(PostgreSQLParserM_-294))|(1<<(PostgreSQLParserMAP-294)))) != 0) || (((_la-327)&-(0x1f+1)) == 0 && ((1<<uint((_la-327)))&((1<<(PostgreSQLParserMATCH-327))|(1<<(PostgreSQLParserMATCHED-327))|(1<<(PostgreSQLParserMAX-327))|(1<<(PostgreSQLParserMAXVALUE-327))|(1<<(PostgreSQLParserMEMBER-327))|(1<<(PostgreSQLParserMERGE-327))|(1<<(PostgreSQLParserMESSAGE_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_OCTET_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_TEXT-327))|(1<<(PostgreSQLParserMETHOD-327))|(1<<(PostgreSQLParserMIN-327))|(1<<(PostgreSQLParserMINUTE-327))|(1<<(PostgreSQLParserMINVALUE-327))|(1<<(PostgreSQLParserMOD-327))|(1<<(PostgreSQLParserMODE-327))|(1<<(PostgreSQLParserMODIFIES-327))|(1<<(PostgreSQLParserMODULE-327))|(1<<(PostgreSQLParserMONTH-327))|(1<<(PostgreSQLParserMORE_-327))|(1<<(PostgreSQLParserMOVE-327))|(1<<(PostgreSQLParserMULTISET-327))|(1<<(PostgreSQLParserMUMPS-327))|(1<<(PostgreSQLParserNAME-327))|(1<<(PostgreSQLParserNAMES-327))|(1<<(PostgreSQLParserNATIONAL-327))|(1<<(PostgreSQLParserNCHAR-327))|(1<<(PostgreSQLParserNCLOB-327))|(1<<(PostgreSQLParserNESTING-327))|(1<<(PostgreSQLParserNEW-327)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(PostgreSQLParserNEXT-359))|(1<<(PostgreSQLParserNO-359))|(1<<(PostgreSQLParserNONE-359))|(1<<(PostgreSQLParserNORMALIZE-359))|(1<<(PostgreSQLParserNORMALIZED-359))|(1<<(PostgreSQLParserNOTHING-359))|(1<<(PostgreSQLParserNOTIFY-359))|(1<<(PostgreSQLParserNOWAIT-359))|(1<<(PostgreSQLParserNULLABLE-359))|(1<<(PostgreSQLParserNULLIF-359))|(1<<(PostgreSQLParserNULLS-359))|(1<<(PostgreSQLParserNUMBER-359))|(1<<(PostgreSQLParserNUMERIC-359))|(1<<(PostgreSQLParserOBJECT-359))|(1<<(PostgreSQLParserOCTET_LENGTH-359))|(1<<(PostgreSQLParserOCTETS-359))|(1<<(PostgreSQLParserOF-359))|(1<<(PostgreSQLParserOFF-359))|(1<<(PostgreSQLParserOIDS-359))|(1<<(PostgreSQLParserOLD-359))|(1<<(PostgreSQLParserON-359))|(1<<(PostgreSQLParserOPEN-359))|(1<<(PostgreSQLParserOPERATOR-359))|(1<<(PostgreSQLParserOPTION-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(PostgreSQLParserOPTIONS-391))|(1<<(PostgreSQLParserORDERING-391))|(1<<(PostgreSQLParserORDINALITY-391))|(1<<(PostgreSQLParserOTHERS-391))|(1<<(PostgreSQLParserOUT-391))|(1<<(PostgreSQLParserOUTPUT-391))|(1<<(PostgreSQLParserOVER-391))|(1<<(PostgreSQLParserOVERLAY-391))|(1<<(PostgreSQLParserOVERRIDING-391))|(1<<(PostgreSQLParserOWNER-391))|(1<<(PostgreSQLParserPAD-391))|(1<<(PostgreSQLParserPARAMETER-391))|(1<<(PostgreSQLParserPARAMETER_MODE-391))|(1<<(PostgreSQLParserPARAMETER_NAME-391))|(1<<(PostgreSQLParserPARAMETER_ORDINAL_POSITION-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_CATALOG-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_NAME-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA-391))|(1<<(PostgreSQLParserPARTIAL-391))|(1<<(PostgreSQLParserPARTITION-391))|(1<<(PostgreSQLParserPASCAL-391))|(1<<(PostgreSQLParserPASSWORD-391))|(1<<(PostgreSQLParserPATH-391))|(1<<(PostgreSQLParserPERCENT_RANK-391))|(1<<(PostgreSQLParserPERCENTILE_CONT-391))|(1<<(PostgreSQLParserPERCENTILE_DISC-391)))) != 0) || (((_la-424)&-(0x1f+1)) == 0 && ((1<<uint((_la-424)))&((1<<(PostgreSQLParserPLAIN-424))|(1<<(PostgreSQLParserPLI-424))|(1<<(PostgreSQLParserPOSITION-424))|(1<<(PostgreSQLParserPOWER-424))|(1<<(PostgreSQLParserPRECEDING-424))|(1<<(PostgreSQLParserPRECISION-424))|(1<<(PostgreSQLParserPREPARE-424))|(1<<(PostgreSQLParserPRESERVE-424))|(1<<(PostgreSQLParserPRIOR-424))|(1<<(PostgreSQLParserPRIVILEGES-424))|(1<<(PostgreSQLParserPROCEDURAL-424))|(1<<(PostgreSQLParserPROCEDURE-424))|(1<<(PostgreSQLParserPUBLIC-424))|(1<<(PostgreSQLParserQUOTE-424))|(1<<(PostgreSQLParserRANGE-424))|(1<<(PostgreSQLParserRANK-424))|(1<<(PostgreSQLParserREAD-424))|(1<<(PostgreSQLParserREADS-424))|(1<<(PostgreSQLParserREAL-424))|(1<<(PostgreSQLParserRECHECK-424))|(1<<(PostgreSQLParserRECURSIVE-424))|(1<<(PostgreSQLParserREF-424))|(1<<(PostgreSQLParserREFERENCING-424)))) != 0) || (((_la-456)&-(0x1f+1)) == 0 && ((1<<uint((_la-456)))&((1<<(PostgreSQLParserREFRESH-456))|(1<<(PostgreSQLParserREGR_AVGX-456))|(1<<(PostgreSQLParserREGR_AVGY-456))|(1<<(PostgreSQLParserREGR_COUNT-456))|(1<<(PostgreSQLParserREGR_INTERCEPT-456))|(1<<(PostgreSQLParserREGR_SLOPE-456))|(1<<(PostgreSQLParserREGR_SXX-456))|(1<<(PostgreSQLParserREGR_SXY-456))|(1<<(PostgreSQLParserREGR_SYY-456))|(1<<(PostgreSQLParserREINDEX-456))|(1<<(PostgreSQLParserRELATIVE-456))|(1<<(PostgreSQLParserRELEASE-456))|(1<<(PostgreSQLParserRENAME-456))|(1<<(PostgreSQLParserREPEATABLE-456))|(1<<(PostgreSQLParserREPLACE-456))|(1<<(PostgreSQLParserRESET-456))|(1<<(PostgreSQLParserRESTART-456))|(1<<(PostgreSQLParserRESTRICT-456))|(1<<(PostgreSQLParserRESULT-456))|(1<<(PostgreSQLParserRETURN-456))|(1<<(PostgreSQLParserRETURNED_CARDINALITY-456))|(1<<(PostgreSQLParserRETURNED_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_OCTET_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_SQLSTATE-456))|(1<<(PostgreSQLParserRETURNS-456))|(1<<(PostgreSQLParserREVOKE-456))|(1<<(PostgreSQLParserRIGHT-456))|(1<<(PostgreSQLParserROLE-456))|(1<<(PostgreSQLParserROLLBACK-456)))) != 0) || (((_la-488)&-(0x1f+1)) == 0 && ((1<<uint((_la-488)))&((1<<(PostgreSQLParserROLLUP-488))|(1<<(PostgreSQLParserROUTINE-488))|(1<<(PostgreSQLParserROUTINE_CATALOG-488))|(1<<(PostgreSQLParserROUTINE_NAME-488))|(1<<(PostgreSQLParserROUTINE_SCHEMA-488))|(1<<(PostgreSQLParserROW-488))|(1<<(PostgreSQLParserROW_COUNT-488))|(1<<(PostgreSQLParserROW_NUMBER-488))|(1<<(PostgreSQLParserROWS-488))|(1<<(PostgreSQLParserRULE-488))|(1<<(PostgreSQLParserSAVEPOINT-488))|(1<<(PostgreSQLParserSCALE-488))|(1<<(PostgreSQLParserSCHEMA-488))|(1<<(PostgreSQLParserSCHEMA_NAME-488))|(1<<(PostgreSQLParserSCOPE-488))|(1<<(PostgreSQLParserSCOPE_CATALOG-488))|(1<<(PostgreSQLParserSCOPE_NAME-488))|(1<<(PostgreSQLParserSCOPE_SCHEMA-488))|(1<<(PostgreSQLParserSCROLL-488))|(1<<(PostgreSQLParserSEARCH-488))|(1<<(PostgreSQLParserSECOND-488))|(1<<(PostgreSQLParserSECTION-488))|(1<<(PostgreSQLParserSECURITY-488))|(1<<(PostgreSQLParserSELF-488))|(1<<(PostgreSQLParserSENSITIVE-488))|(1<<(PostgreSQLParserSEQUENCE-488))|(1<<(PostgreSQLParserSEQUENCES-488))|(1<<(PostgreSQLParserSERIALIZABLE-488))|(1<<(PostgreSQLParserSERVER_NAME-488))|(1<<(PostgreSQLParserSESSION-488)))) != 0) || (((_la-520)&-(0x1f+1)) == 0 && ((1<<uint((_la-520)))&((1<<(PostgreSQLParserSET-520))|(1<<(PostgreSQLParserSETOF-520))|(1<<(PostgreSQLParserSETS-520))|(1<<(PostgreSQLParserSHARE-520))|(1<<(PostgreSQLParserSHOW-520))|(1<<(PostgreSQLParserSIMPLE-520))|(1<<(PostgreSQLParserSIZE-520))|(1<<(PostgreSQLParserSMALLINT-520))|(1<<(PostgreSQLParserSOME-520))|(1<<(PostgreSQLParserSOURCE-520))|(1<<(PostgreSQLParserSPACE-520))|(1<<(PostgreSQLParserSPECIFIC-520))|(1<<(PostgreSQLParserSPECIFIC_NAME-520))|(1<<(PostgreSQLParserSPECIFICTYPE-520))|(1<<(PostgreSQLParserSQL-520))|(1<<(PostgreSQLParserSQLCODE-520))|(1<<(PostgreSQLParserSQLERROR-520))|(1<<(PostgreSQLParserSQLEXCEPTION-520))|(1<<(PostgreSQLParserSQLSTATE-520))|(1<<(PostgreSQLParserSQLWARNING-520))|(1<<(PostgreSQLParserSQRT-520))|(1<<(PostgreSQLParserSTABLE-520))|(1<<(PostgreSQLParserSTART-520))|(1<<(PostgreSQLParserSTATE-520))|(1<<(PostgreSQLParserSTATEMENT-520))|(1<<(PostgreSQLParserSTATIC-520))|(1<<(PostgreSQLParserSTATISTICS-520))|(1<<(PostgreSQLParserSTDDEV_POP-520))|(1<<(PostgreSQLParserSTDDEV_SAMP-520)))) != 0) || (((_la-552)&-(0x1f+1)) == 0 && ((1<<uint((_la-552)))&((1<<(PostgreSQLParserSTDIN-552))|(1<<(PostgreSQLParserSTDOUT-552))|(1<<(PostgreSQLParserSTORAGE-552))|(1<<(PostgreSQLParserSTRICT-552))|(1<<(PostgreSQLParserSTRUCTURE-552))|(1<<(PostgreSQLParserSTYLE-552))|(1<<(PostgreSQLParserSUBCLASS_ORIGIN-552))|(1<<(PostgreSQLParserSUBMULTISET-552))|(1<<(PostgreSQLParserSUBSTRING-552))|(1<<(PostgreSQLParserSUM-552))|(1<<(PostgreSQLParserSYSID-552))|(1<<(PostgreSQLParserSYSTEM-552))|(1<<(PostgreSQLParserSYSTEM_USER-552))|(1<<(PostgreSQLParserTABLE_NAME-552))|(1<<(PostgreSQLParserTABLESPACE-552))|(1<<(PostgreSQLParserTEMP-552))|(1<<(PostgreSQLParserTEMPLATE-552))|(1<<(PostgreSQLParserTEMPORARY-552))|(1<<(PostgreSQLParserTIES-552))|(1<<(PostgreSQLParserTIME-552))|(1<<(PostgreSQLParserTIMESTAMP-552))|(1<<(PostgreSQLParserTIMEZONE_HOUR-552))|(1<<(PostgreSQLParserTIMEZONE_MINUTE-552)))) != 0) || (((_la-586)&-(0x1f+1)) == 0 && ((1<<uint((_la-586)))&((1<<(PostgreSQLParserTOP_LEVEL_COUNT-586))|(1<<(PostgreSQLParserTRANSACTION-586))|(1<<(PostgreSQLParserTRANSACTION_ACTIVE-586))|(1<<(PostgreSQLParserTRANSACTIONS_COMMITTED-586))|(1<<(PostgreSQLParserTRANSACTIONS_ROLLED_BACK-586))|(1<<(PostgreSQLParserTRANSFORM-586))|(1<<(PostgreSQLParserTRANSFORMS-586))|(1<<(PostgreSQLParserTRANSLATE-586))|(1<<(PostgreSQLParserTRANSLATION-586))|(1<<(PostgreSQLParserTREAT-586))|(1<<(PostgreSQLParserTRIGGER-586))|(1<<(PostgreSQLParserTRIGGER_CATALOG-586))|(1<<(PostgreSQLParserTRIGGER_NAME-586))|(1<<(PostgreSQLParserTRIGGER_SCHEMA-586))|(1<<(PostgreSQLParserTRIM-586))|(1<<(PostgreSQLParserTRUE-586))|(1<<(PostgreSQLParserTRUNCATE-586))|(1<<(PostgreSQLParserTRUSTED-586))|(1<<(PostgreSQLParserTYPE-586))|(1<<(PostgreSQLParserUESCAPE-586))|(1<<(PostgreSQLParserUNBOUNDED-586))|(1<<(PostgreSQLParserUNCOMMITTED-586))|(1<<(PostgreSQLParserUNDER-586))|(1<<(PostgreSQLParserUNENCRYPTED-586))|(1<<(PostgreSQLParserUNKNOWN-586))|(1<<(PostgreSQLParserUNLISTEN-586))|(1<<(PostgreSQLParserUNNAMED-586))|(1<<(PostgreSQLParserUNNEST-586))|(1<<(PostgreSQLParserUNTIL-586)))) != 0) || (((_la-618)&-(0x1f+1)) == 0 && ((1<<uint((_la-618)))&((1<<(PostgreSQLParserUPDATE-618))|(1<<(PostgreSQLParserUPPER-618))|(1<<(PostgreSQLParserUSAGE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CATALOG-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CODE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_NAME-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA-618))|(1<<(PostgreSQLParserVACUUM-618))|(1<<(PostgreSQLParserVALID-618))|(1<<(PostgreSQLParserVALIDATOR-618))|(1<<(PostgreSQLParserVALUE-618))|(1<<(PostgreSQLParserVALUES-618))|(1<<(PostgreSQLParserVAR_POP-618))|(1<<(PostgreSQLParserVAR_SAMP-618))|(1<<(PostgreSQLParserVARCHAR-618))|(1<<(PostgreSQLParserVARYING-618))|(1<<(PostgreSQLParserVIEW-618))|(1<<(PostgreSQLParserVOLATILE-618))|(1<<(PostgreSQLParserWHENEVER-618))|(1<<(PostgreSQLParserWIDTH_BUCKET-618))|(1<<(PostgreSQLParserWITHIN-618))|(1<<(PostgreSQLParserWITHOUT-618)))) != 0) || (((_la-650)&-(0x1f+1)) == 0 && ((1<<uint((_la-650)))&((1<<(PostgreSQLParserWORK-650))|(1<<(PostgreSQLParserWRITE-650))|(1<<(PostgreSQLParserYEAR-650))|(1<<(PostgreSQLParserYES-650))|(1<<(PostgreSQLParserZONE-650)))) != 0) || (((_la-720)&-(0x1f+1)) == 0 && ((1<<uint((_la-720)))&((1<<(PostgreSQLParserABSTIME-720))|(1<<(PostgreSQLParserBIGSERIAL-720))|(1<<(PostgreSQLParserBIT_VARYING-720))|(1<<(PostgreSQLParserBOOL-720))|(1<<(PostgreSQLParserBOX-720))|(1<<(PostgreSQLParserBYTEA-720))|(1<<(PostgreSQLParserCHARACTER_VARYING-720))|(1<<(PostgreSQLParserCIDR-720))|(1<<(PostgreSQLParserCIRCLE-720))|(1<<(PostgreSQLParserFLOAT4-720))|(1<<(PostgreSQLParserFLOAT8-720))|(1<<(PostgreSQLParserINET-720))|(1<<(PostgreSQLParserINT2-720))|(1<<(PostgreSQLParserINT4-720))|(1<<(PostgreSQLParserINT8-720))|(1<<(PostgreSQLParserJSON-720))|(1<<(PostgreSQLParserJSONB-720))|(1<<(PostgreSQLParserLINE-720))|(1<<(PostgreSQLParserLSEG-720))|(1<<(PostgreSQLParserMACADDR-720))|(1<<(PostgreSQLParserMACADDR8-720))|(1<<(PostgreSQLParserMONEY-720))|(1<<(PostgreSQLParserPG_LSN-720))|(1<<(PostgreSQLParserPOINT-720))|(1<<(PostgreSQLParserPOLYGON-720))|(1<<(PostgreSQLParserRELTIME-720))|(1<<(PostgreSQLParserSERIAL-720))|(1<<(PostgreSQLParserSERIAL2-720))|(1<<(PostgreSQLParserSERIAL4-720))|(1<<(PostgreSQLParserSERIAL8-720))|(1<<(PostgreSQLParserSMALLSERIAL-720)))) != 0) || (((_la-752)&-(0x1f+1)) == 0 && ((1<<uint((_la-752)))&((1<<(PostgreSQLParserTEXT-752))|(1<<(PostgreSQLParserTIMESTAMPTZ-752))|(1<<(PostgreSQLParserTIMETZ-752))|(1<<(PostgreSQLParserTSQUERY-752))|(1<<(PostgreSQLParserTSVECTOR-752))|(1<<(PostgreSQLParserTXID_SNAPSHOT-752))|(1<<(PostgreSQLParserUUID-752))|(1<<(PostgreSQLParserVARBIT-752))|(1<<(PostgreSQLParserXML-752))|(1<<(PostgreSQLParserNUMERIC_LITERAL-752))|(1<<(PostgreSQLParserINTEGER_LITERAL-752))|(1<<(PostgreSQLParserSINGLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserDOUBLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserIDENTIFIER-752))|(1<<(PostgreSQLParserIDENTIFIER_UNICODE-752)))) != 0) {
			{
				p.SetState(4435)
				p.Param_value()
			}

		}

	case PostgreSQLParserFORMAT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4438)
			p.Match(PostgreSQLParserFORMAT)
		}
		{
			p.SetState(4439)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserYAML || (((_la-735)&-(0x1f+1)) == 0 && ((1<<uint((_la-735)))&((1<<(PostgreSQLParserJSON-735))|(1<<(PostgreSQLParserTEXT-735))|(1<<(PostgreSQLParserXML-735)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFrameContext is an interface to support dynamic dispatch.
type IFrameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrameContext differentiates from other interfaces.
	IsFrameContext()
}

type FrameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrameContext() *FrameContext {
	var p = new(FrameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_frame
	return p
}

func (*FrameContext) IsFrameContext() {}

func NewFrameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FrameContext {
	var p = new(FrameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_frame

	return p
}

func (s *FrameContext) GetParser() antlr.Parser { return s.parser }

func (s *FrameContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNBOUNDED, 0)
}

func (s *FrameContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPRECEDING, 0)
}

func (s *FrameContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, 0)
}

func (s *FrameContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT, 0)
}

func (s *FrameContext) ROW() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROW, 0)
}

func (s *FrameContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOLLOWING, 0)
}

func (s *FrameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FrameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterFrame(s)
	}
}

func (s *FrameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitFrame(s)
	}
}

func (p *PostgreSQLParser) Frame() (localctx IFrameContext) {
	localctx = NewFrameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 404, PostgreSQLParserRULE_frame)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4452)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 522, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4442)
			p.Match(PostgreSQLParserUNBOUNDED)
		}
		{
			p.SetState(4443)
			p.Match(PostgreSQLParserPRECEDING)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4444)
			p.Match(PostgreSQLParserINTEGER_LITERAL)
		}
		{
			p.SetState(4445)
			p.Match(PostgreSQLParserPRECEDING)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4446)
			p.Match(PostgreSQLParserCURRENT)
		}
		{
			p.SetState(4447)
			p.Match(PostgreSQLParserROW)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4448)
			p.Match(PostgreSQLParserINTEGER_LITERAL)
		}
		{
			p.SetState(4449)
			p.Match(PostgreSQLParserFOLLOWING)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4450)
			p.Match(PostgreSQLParserUNBOUNDED)
		}
		{
			p.SetState(4451)
			p.Match(PostgreSQLParserFOLLOWING)
		}

	}

	return localctx
}

// IFrame_startContext is an interface to support dynamic dispatch.
type IFrame_startContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrame_startContext differentiates from other interfaces.
	IsFrame_startContext()
}

type Frame_startContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrame_startContext() *Frame_startContext {
	var p = new(Frame_startContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_frame_start
	return p
}

func (*Frame_startContext) IsFrame_startContext() {}

func NewFrame_startContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Frame_startContext {
	var p = new(Frame_startContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_frame_start

	return p
}

func (s *Frame_startContext) GetParser() antlr.Parser { return s.parser }

func (s *Frame_startContext) Frame() IFrameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrameContext)
}

func (s *Frame_startContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Frame_startContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Frame_startContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterFrame_start(s)
	}
}

func (s *Frame_startContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitFrame_start(s)
	}
}

func (p *PostgreSQLParser) Frame_start() (localctx IFrame_startContext) {
	localctx = NewFrame_startContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 406, PostgreSQLParserRULE_frame_start)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4454)
		p.Frame()
	}

	return localctx
}

// IFrame_endContext is an interface to support dynamic dispatch.
type IFrame_endContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrame_endContext differentiates from other interfaces.
	IsFrame_endContext()
}

type Frame_endContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrame_endContext() *Frame_endContext {
	var p = new(Frame_endContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_frame_end
	return p
}

func (*Frame_endContext) IsFrame_endContext() {}

func NewFrame_endContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Frame_endContext {
	var p = new(Frame_endContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_frame_end

	return p
}

func (s *Frame_endContext) GetParser() antlr.Parser { return s.parser }

func (s *Frame_endContext) Frame() IFrameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrameContext)
}

func (s *Frame_endContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Frame_endContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Frame_endContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterFrame_end(s)
	}
}

func (s *Frame_endContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitFrame_end(s)
	}
}

func (p *PostgreSQLParser) Frame_end() (localctx IFrame_endContext) {
	localctx = NewFrame_endContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 408, PostgreSQLParserRULE_frame_end)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4456)
		p.Frame()
	}

	return localctx
}

// IFrame_clauseContext is an interface to support dynamic dispatch.
type IFrame_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrame_clauseContext differentiates from other interfaces.
	IsFrame_clauseContext()
}

type Frame_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrame_clauseContext() *Frame_clauseContext {
	var p = new(Frame_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_frame_clause
	return p
}

func (*Frame_clauseContext) IsFrame_clauseContext() {}

func NewFrame_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Frame_clauseContext {
	var p = new(Frame_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_frame_clause

	return p
}

func (s *Frame_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Frame_clauseContext) Frame_start() IFrame_startContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrame_startContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrame_startContext)
}

func (s *Frame_clauseContext) RANGE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRANGE, 0)
}

func (s *Frame_clauseContext) ROWS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROWS, 0)
}

func (s *Frame_clauseContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBETWEEN, 0)
}

func (s *Frame_clauseContext) AND() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAND, 0)
}

func (s *Frame_clauseContext) Frame_end() IFrame_endContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrame_endContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrame_endContext)
}

func (s *Frame_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Frame_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Frame_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterFrame_clause(s)
	}
}

func (s *Frame_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitFrame_clause(s)
	}
}

func (p *PostgreSQLParser) Frame_clause() (localctx IFrame_clauseContext) {
	localctx = NewFrame_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 410, PostgreSQLParserRULE_frame_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4466)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 523, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4458)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserRANGE || _la == PostgreSQLParserROWS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4459)
			p.Frame_start()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4460)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserRANGE || _la == PostgreSQLParserROWS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4461)
			p.Match(PostgreSQLParserBETWEEN)
		}
		{
			p.SetState(4462)
			p.Frame_start()
		}
		{
			p.SetState(4463)
			p.Match(PostgreSQLParserAND)
		}
		{
			p.SetState(4464)
			p.Frame_end()
		}

	}

	return localctx
}

// IWindow_definitionContext is an interface to support dynamic dispatch.
type IWindow_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_definitionContext differentiates from other interfaces.
	IsWindow_definitionContext()
}

type Window_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_definitionContext() *Window_definitionContext {
	var p = new(Window_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_window_definition
	return p
}

func (*Window_definitionContext) IsWindow_definitionContext() {}

func NewWindow_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_definitionContext {
	var p = new(Window_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_window_definition

	return p
}

func (s *Window_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_definitionContext) Window_name() IWindow_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_nameContext)
}

func (s *Window_definitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPARTITION, 0)
}

func (s *Window_definitionContext) BY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBY, 0)
}

func (s *Window_definitionContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Window_definitionContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Window_definitionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Window_definitionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Window_definitionContext) Order_by_clause() IOrder_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Window_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterWindow_definition(s)
	}
}

func (s *Window_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitWindow_definition(s)
	}
}

func (p *PostgreSQLParser) Window_definition() (localctx IWindow_definitionContext) {
	localctx = NewWindow_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 412, PostgreSQLParserRULE_window_definition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4480)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 525, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4468)
			p.Window_name()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4469)
			p.Match(PostgreSQLParserPARTITION)
		}
		{
			p.SetState(4470)
			p.Match(PostgreSQLParserBY)
		}
		{
			p.SetState(4471)
			p.expr(0)
		}
		p.SetState(4476)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PostgreSQLParserCOMMA {
			{
				p.SetState(4472)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(4473)
				p.expr(0)
			}

			p.SetState(4478)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4479)
			p.Order_by_clause()
		}

	}

	return localctx
}

// IWindow_clauseContext is an interface to support dynamic dispatch.
type IWindow_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_clauseContext differentiates from other interfaces.
	IsWindow_clauseContext()
}

type Window_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_clauseContext() *Window_clauseContext {
	var p = new(Window_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_window_clause
	return p
}

func (*Window_clauseContext) IsWindow_clauseContext() {}

func NewWindow_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_clauseContext {
	var p = new(Window_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_window_clause

	return p
}

func (s *Window_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_clauseContext) WINDOW() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWINDOW, 0)
}

func (s *Window_clauseContext) Window_name() IWindow_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_nameContext)
}

func (s *Window_clauseContext) AS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAS, 0)
}

func (s *Window_clauseContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Window_clauseContext) Window_definition() IWindow_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_definitionContext)
}

func (s *Window_clauseContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Window_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterWindow_clause(s)
	}
}

func (s *Window_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitWindow_clause(s)
	}
}

func (p *PostgreSQLParser) Window_clause() (localctx IWindow_clauseContext) {
	localctx = NewWindow_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 414, PostgreSQLParserRULE_window_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4482)
		p.Match(PostgreSQLParserWINDOW)
	}
	{
		p.SetState(4483)
		p.Window_name()
	}
	{
		p.SetState(4484)
		p.Match(PostgreSQLParserAS)
	}
	{
		p.SetState(4485)
		p.Match(PostgreSQLParserOPEN_PAREN)
	}
	{
		p.SetState(4486)
		p.Window_definition()
	}
	{
		p.SetState(4487)
		p.Match(PostgreSQLParserCLOSE_PAREN)
	}

	return localctx
}

// ICombine_clauseContext is an interface to support dynamic dispatch.
type ICombine_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCombine_clauseContext differentiates from other interfaces.
	IsCombine_clauseContext()
}

type Combine_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCombine_clauseContext() *Combine_clauseContext {
	var p = new(Combine_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_combine_clause
	return p
}

func (*Combine_clauseContext) IsCombine_clauseContext() {}

func NewCombine_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Combine_clauseContext {
	var p = new(Combine_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_combine_clause

	return p
}

func (s *Combine_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Combine_clauseContext) UNION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNION, 0)
}

func (s *Combine_clauseContext) INTERSECT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTERSECT, 0)
}

func (s *Combine_clauseContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXCEPT, 0)
}

func (s *Combine_clauseContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Combine_clauseContext) Values_stmt() IValues_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValues_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValues_stmtContext)
}

func (s *Combine_clauseContext) AllOPEN_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPEN_PAREN)
}

func (s *Combine_clauseContext) OPEN_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, i)
}

func (s *Combine_clauseContext) AllCLOSE_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCLOSE_PAREN)
}

func (s *Combine_clauseContext) CLOSE_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, i)
}

func (s *Combine_clauseContext) Combine_clause() ICombine_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICombine_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICombine_clauseContext)
}

func (s *Combine_clauseContext) ALL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALL, 0)
}

func (s *Combine_clauseContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDISTINCT, 0)
}

func (s *Combine_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Combine_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Combine_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCombine_clause(s)
	}
}

func (s *Combine_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCombine_clause(s)
	}
}

func (p *PostgreSQLParser) Combine_clause() (localctx ICombine_clauseContext) {
	localctx = NewCombine_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 416, PostgreSQLParserRULE_combine_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4489)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PostgreSQLParserEXCEPT || _la == PostgreSQLParserINTERSECT || _la == PostgreSQLParserUNION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(4491)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserALL || _la == PostgreSQLParserDISTINCT {
		{
			p.SetState(4490)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserALL || _la == PostgreSQLParserDISTINCT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(4496)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 527, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(4493)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}

		}
		p.SetState(4498)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 527, p.GetParserRuleContext())
	}
	p.SetState(4501)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 528, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4499)
			p.Select_stmt()
		}

	case 2:
		{
			p.SetState(4500)
			p.Values_stmt()
		}

	}
	p.SetState(4506)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 529, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(4503)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}
		p.SetState(4508)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 529, p.GetParserRuleContext())
	}
	p.SetState(4510)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 530, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4509)
			p.Combine_clause()
		}

	}

	return localctx
}

// IOrder_by_clauseContext is an interface to support dynamic dispatch.
type IOrder_by_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrder_by_clauseContext differentiates from other interfaces.
	IsOrder_by_clauseContext()
}

type Order_by_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_clauseContext() *Order_by_clauseContext {
	var p = new(Order_by_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_order_by_clause
	return p
}

func (*Order_by_clauseContext) IsOrder_by_clauseContext() {}

func NewOrder_by_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_clauseContext {
	var p = new(Order_by_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_order_by_clause

	return p
}

func (s *Order_by_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_clauseContext) ORDER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserORDER, 0)
}

func (s *Order_by_clauseContext) BY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBY, 0)
}

func (s *Order_by_clauseContext) AllOrder_by_item() []IOrder_by_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrder_by_itemContext)(nil)).Elem())
	var tst = make([]IOrder_by_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrder_by_itemContext)
		}
	}

	return tst
}

func (s *Order_by_clauseContext) Order_by_item(i int) IOrder_by_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_itemContext)
}

func (s *Order_by_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Order_by_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Order_by_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterOrder_by_clause(s)
	}
}

func (s *Order_by_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitOrder_by_clause(s)
	}
}

func (p *PostgreSQLParser) Order_by_clause() (localctx IOrder_by_clauseContext) {
	localctx = NewOrder_by_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 418, PostgreSQLParserRULE_order_by_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4512)
		p.Match(PostgreSQLParserORDER)
	}
	{
		p.SetState(4513)
		p.Match(PostgreSQLParserBY)
	}
	{
		p.SetState(4514)
		p.Order_by_item()
	}
	p.SetState(4519)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 531, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(4515)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(4516)
				p.Order_by_item()
			}

		}
		p.SetState(4521)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 531, p.GetParserRuleContext())
	}

	return localctx
}

// IOrder_by_itemContext is an interface to support dynamic dispatch.
type IOrder_by_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrder_by_itemContext differentiates from other interfaces.
	IsOrder_by_itemContext()
}

type Order_by_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_itemContext() *Order_by_itemContext {
	var p = new(Order_by_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_order_by_item
	return p
}

func (*Order_by_itemContext) IsOrder_by_itemContext() {}

func NewOrder_by_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_itemContext {
	var p = new(Order_by_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_order_by_item

	return p
}

func (s *Order_by_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_itemContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Order_by_itemContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Order_by_itemContext) DOUBLEQ_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDOUBLEQ_STRING_LITERAL, 0)
}

func (s *Order_by_itemContext) ASC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserASC, 0)
}

func (s *Order_by_itemContext) DESC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDESC, 0)
}

func (s *Order_by_itemContext) USING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSING, 0)
}

func (s *Order_by_itemContext) AllNULLS() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNULLS)
}

func (s *Order_by_itemContext) NULLS(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNULLS, i)
}

func (s *Order_by_itemContext) AllFIRST() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserFIRST)
}

func (s *Order_by_itemContext) FIRST(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFIRST, i)
}

func (s *Order_by_itemContext) AllLAST() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserLAST)
}

func (s *Order_by_itemContext) LAST(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLAST, i)
}

func (s *Order_by_itemContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Order_by_itemContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Order_by_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterOrder_by_item(s)
	}
}

func (s *Order_by_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitOrder_by_item(s)
	}
}

func (p *PostgreSQLParser) Order_by_item() (localctx IOrder_by_itemContext) {
	localctx = NewOrder_by_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 420, PostgreSQLParserRULE_order_by_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4524)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 532, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4522)
			p.expr(0)
		}

	case 2:
		{
			p.SetState(4523)
			p.Match(PostgreSQLParserDOUBLEQ_STRING_LITERAL)
		}

	}
	p.SetState(4530)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 533, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4526)
			p.Match(PostgreSQLParserASC)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 533, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(4527)
			p.Match(PostgreSQLParserDESC)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 533, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(4528)
			p.Match(PostgreSQLParserUSING)
		}
		{
			p.SetState(4529)
			p.expr(0)
		}

	}
	p.SetState(4543)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 535, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4532)
			p.Match(PostgreSQLParserNULLS)
		}
		{
			p.SetState(4533)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserFIRST || _la == PostgreSQLParserLAST) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

		p.SetState(4540)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 534, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4535)
					p.Match(PostgreSQLParserCOMMA)
				}

				{
					p.SetState(4536)
					p.Match(PostgreSQLParserNULLS)
				}
				{
					p.SetState(4537)
					_la = p.GetTokenStream().LA(1)

					if !(_la == PostgreSQLParserFIRST || _la == PostgreSQLParserLAST) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			p.SetState(4542)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 534, p.GetParserRuleContext())
		}

	}

	return localctx
}

// ILimit_clauseContext is an interface to support dynamic dispatch.
type ILimit_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLimit_clauseContext differentiates from other interfaces.
	IsLimit_clauseContext()
}

type Limit_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimit_clauseContext() *Limit_clauseContext {
	var p = new(Limit_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_limit_clause
	return p
}

func (*Limit_clauseContext) IsLimit_clauseContext() {}

func NewLimit_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Limit_clauseContext {
	var p = new(Limit_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_limit_clause

	return p
}

func (s *Limit_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Limit_clauseContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLIMIT, 0)
}

func (s *Limit_clauseContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, 0)
}

func (s *Limit_clauseContext) ALL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALL, 0)
}

func (s *Limit_clauseContext) Func_call() IFunc_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_callContext)
}

func (s *Limit_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Limit_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Limit_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterLimit_clause(s)
	}
}

func (s *Limit_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitLimit_clause(s)
	}
}

func (p *PostgreSQLParser) Limit_clause() (localctx ILimit_clauseContext) {
	localctx = NewLimit_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 422, PostgreSQLParserRULE_limit_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4545)
		p.Match(PostgreSQLParserLIMIT)
	}
	p.SetState(4549)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserINTEGER_LITERAL:
		{
			p.SetState(4546)
			p.Match(PostgreSQLParserINTEGER_LITERAL)
		}

	case PostgreSQLParserALL:
		{
			p.SetState(4547)
			p.Match(PostgreSQLParserALL)
		}

	case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
		{
			p.SetState(4548)
			p.Func_call()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOffset_clauseContext is an interface to support dynamic dispatch.
type IOffset_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOffset_clauseContext differentiates from other interfaces.
	IsOffset_clauseContext()
}

type Offset_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOffset_clauseContext() *Offset_clauseContext {
	var p = new(Offset_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_offset_clause
	return p
}

func (*Offset_clauseContext) IsOffset_clauseContext() {}

func NewOffset_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Offset_clauseContext {
	var p = new(Offset_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_offset_clause

	return p
}

func (s *Offset_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Offset_clauseContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOFFSET, 0)
}

func (s *Offset_clauseContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, 0)
}

func (s *Offset_clauseContext) ROW() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROW, 0)
}

func (s *Offset_clauseContext) ROWS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROWS, 0)
}

func (s *Offset_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Offset_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Offset_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterOffset_clause(s)
	}
}

func (s *Offset_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitOffset_clause(s)
	}
}

func (p *PostgreSQLParser) Offset_clause() (localctx IOffset_clauseContext) {
	localctx = NewOffset_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 424, PostgreSQLParserRULE_offset_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4551)
		p.Match(PostgreSQLParserOFFSET)
	}
	{
		p.SetState(4552)
		p.Match(PostgreSQLParserINTEGER_LITERAL)
	}
	p.SetState(4554)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 537, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4553)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserROW || _la == PostgreSQLParserROWS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IFetch_clauseContext is an interface to support dynamic dispatch.
type IFetch_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFetch_clauseContext differentiates from other interfaces.
	IsFetch_clauseContext()
}

type Fetch_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFetch_clauseContext() *Fetch_clauseContext {
	var p = new(Fetch_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_fetch_clause
	return p
}

func (*Fetch_clauseContext) IsFetch_clauseContext() {}

func NewFetch_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fetch_clauseContext {
	var p = new(Fetch_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_fetch_clause

	return p
}

func (s *Fetch_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Fetch_clauseContext) FETCH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFETCH, 0)
}

func (s *Fetch_clauseContext) ONLY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserONLY, 0)
}

func (s *Fetch_clauseContext) FIRST() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFIRST, 0)
}

func (s *Fetch_clauseContext) NEXT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNEXT, 0)
}

func (s *Fetch_clauseContext) ROW() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROW, 0)
}

func (s *Fetch_clauseContext) ROWS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROWS, 0)
}

func (s *Fetch_clauseContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, 0)
}

func (s *Fetch_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fetch_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Fetch_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterFetch_clause(s)
	}
}

func (s *Fetch_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitFetch_clause(s)
	}
}

func (p *PostgreSQLParser) Fetch_clause() (localctx IFetch_clauseContext) {
	localctx = NewFetch_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 426, PostgreSQLParserRULE_fetch_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4556)
		p.Match(PostgreSQLParserFETCH)
	}
	{
		p.SetState(4557)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PostgreSQLParserFIRST || _la == PostgreSQLParserNEXT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(4559)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserINTEGER_LITERAL {
		{
			p.SetState(4558)
			p.Match(PostgreSQLParserINTEGER_LITERAL)
		}

	}
	{
		p.SetState(4561)
		_la = p.GetTokenStream().LA(1)

		if !(_la == PostgreSQLParserROW || _la == PostgreSQLParserROWS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4562)
		p.Match(PostgreSQLParserONLY)
	}

	return localctx
}

// IFor_clauseContext is an interface to support dynamic dispatch.
type IFor_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFor_clauseContext differentiates from other interfaces.
	IsFor_clauseContext()
}

type For_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFor_clauseContext() *For_clauseContext {
	var p = new(For_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_for_clause
	return p
}

func (*For_clauseContext) IsFor_clauseContext() {}

func NewFor_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_clauseContext {
	var p = new(For_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_for_clause

	return p
}

func (s *For_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *For_clauseContext) FOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOR, 0)
}

func (s *For_clauseContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUPDATE, 0)
}

func (s *For_clauseContext) NO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNO, 0)
}

func (s *For_clauseContext) KEY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserKEY, 0)
}

func (s *For_clauseContext) SHARE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSHARE, 0)
}

func (s *For_clauseContext) OF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOF, 0)
}

func (s *For_clauseContext) AllTable_name_() []ITable_name_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_name_Context)(nil)).Elem())
	var tst = make([]ITable_name_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_name_Context)
		}
	}

	return tst
}

func (s *For_clauseContext) Table_name_(i int) ITable_name_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_name_Context)
}

func (s *For_clauseContext) AllNOWAIT() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserNOWAIT)
}

func (s *For_clauseContext) NOWAIT(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOWAIT, i)
}

func (s *For_clauseContext) AllSKIP_() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserSKIP_)
}

func (s *For_clauseContext) SKIP_(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSKIP_, i)
}

func (s *For_clauseContext) AllLOCKED() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserLOCKED)
}

func (s *For_clauseContext) LOCKED(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLOCKED, i)
}

func (s *For_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *For_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *For_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *For_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterFor_clause(s)
	}
}

func (s *For_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitFor_clause(s)
	}
}

func (p *PostgreSQLParser) For_clause() (localctx IFor_clauseContext) {
	localctx = NewFor_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 428, PostgreSQLParserRULE_for_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4564)
		p.Match(PostgreSQLParserFOR)
	}
	p.SetState(4572)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserUPDATE:
		{
			p.SetState(4565)
			p.Match(PostgreSQLParserUPDATE)
		}

	case PostgreSQLParserNO:
		{
			p.SetState(4566)
			p.Match(PostgreSQLParserNO)
		}
		{
			p.SetState(4567)
			p.Match(PostgreSQLParserKEY)
		}
		{
			p.SetState(4568)
			p.Match(PostgreSQLParserUPDATE)
		}

	case PostgreSQLParserSHARE:
		{
			p.SetState(4569)
			p.Match(PostgreSQLParserSHARE)
		}

	case PostgreSQLParserKEY:
		{
			p.SetState(4570)
			p.Match(PostgreSQLParserKEY)
		}
		{
			p.SetState(4571)
			p.Match(PostgreSQLParserSHARE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(4583)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 541, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4574)
			p.Match(PostgreSQLParserOF)
		}
		{
			p.SetState(4575)
			p.Table_name_()
		}
		p.SetState(4580)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 540, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4576)
					p.Match(PostgreSQLParserCOMMA)
				}
				{
					p.SetState(4577)
					p.Table_name_()
				}

			}
			p.SetState(4582)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 540, p.GetParserRuleContext())
		}

	}
	p.SetState(4590)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 543, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(4588)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case PostgreSQLParserNOWAIT:
				{
					p.SetState(4585)
					p.Match(PostgreSQLParserNOWAIT)
				}

			case PostgreSQLParserSKIP_:
				{
					p.SetState(4586)
					p.Match(PostgreSQLParserSKIP_)
				}
				{
					p.SetState(4587)
					p.Match(PostgreSQLParserLOCKED)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(4592)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 543, p.GetParserRuleContext())
	}

	return localctx
}

// IUpdater_clauseContext is an interface to support dynamic dispatch.
type IUpdater_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdater_clauseContext differentiates from other interfaces.
	IsUpdater_clauseContext()
}

type Updater_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdater_clauseContext() *Updater_clauseContext {
	var p = new(Updater_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_updater_clause
	return p
}

func (*Updater_clauseContext) IsUpdater_clauseContext() {}

func NewUpdater_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Updater_clauseContext {
	var p = new(Updater_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_updater_clause

	return p
}

func (s *Updater_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Updater_clauseContext) AllUpdater_expr() []IUpdater_exprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdater_exprContext)(nil)).Elem())
	var tst = make([]IUpdater_exprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdater_exprContext)
		}
	}

	return tst
}

func (s *Updater_clauseContext) Updater_expr(i int) IUpdater_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdater_exprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdater_exprContext)
}

func (s *Updater_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Updater_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Updater_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Updater_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Updater_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterUpdater_clause(s)
	}
}

func (s *Updater_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitUpdater_clause(s)
	}
}

func (p *PostgreSQLParser) Updater_clause() (localctx IUpdater_clauseContext) {
	localctx = NewUpdater_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 430, PostgreSQLParserRULE_updater_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4593)
		p.Updater_expr()
	}
	p.SetState(4598)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(4594)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(4595)
			p.Updater_expr()
		}

		p.SetState(4600)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IUpdater_exprContext is an interface to support dynamic dispatch.
type IUpdater_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdater_exprContext differentiates from other interfaces.
	IsUpdater_exprContext()
}

type Updater_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdater_exprContext() *Updater_exprContext {
	var p = new(Updater_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_updater_expr
	return p
}

func (*Updater_exprContext) IsUpdater_exprContext() {}

func NewUpdater_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Updater_exprContext {
	var p = new(Updater_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_updater_expr

	return p
}

func (s *Updater_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Updater_exprContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Updater_exprContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Updater_exprContext) Name_list() IName_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_listContext)
}

func (s *Updater_exprContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Updater_exprContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEQUAL, 0)
}

func (s *Updater_exprContext) Expr_list() IExpr_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_listContext)
}

func (s *Updater_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Updater_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Updater_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterUpdater_expr(s)
	}
}

func (s *Updater_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitUpdater_expr(s)
	}
}

func (p *PostgreSQLParser) Updater_expr() (localctx IUpdater_exprContext) {
	localctx = NewUpdater_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 432, PostgreSQLParserRULE_updater_expr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4610)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 546, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4601)
			p.expr(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4602)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(4603)
			p.Name_list()
		}
		{
			p.SetState(4604)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}
		{
			p.SetState(4605)
			p.Match(PostgreSQLParserEQUAL)
		}
		p.SetState(4608)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 545, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(4606)
				p.expr(0)
			}

		case 2:
			{
				p.SetState(4607)
				p.Expr_list()
			}

		}

	}

	return localctx
}

// IReturning_clauseContext is an interface to support dynamic dispatch.
type IReturning_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturning_clauseContext differentiates from other interfaces.
	IsReturning_clauseContext()
}

type Returning_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturning_clauseContext() *Returning_clauseContext {
	var p = new(Returning_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_returning_clause
	return p
}

func (*Returning_clauseContext) IsReturning_clauseContext() {}

func NewReturning_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Returning_clauseContext {
	var p = new(Returning_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_returning_clause

	return p
}

func (s *Returning_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Returning_clauseContext) RETURNING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRETURNING, 0)
}

func (s *Returning_clauseContext) Column_list() IColumn_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Returning_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Returning_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Returning_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterReturning_clause(s)
	}
}

func (s *Returning_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitReturning_clause(s)
	}
}

func (p *PostgreSQLParser) Returning_clause() (localctx IReturning_clauseContext) {
	localctx = NewReturning_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 434, PostgreSQLParserRULE_returning_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4612)
		p.Match(PostgreSQLParserRETURNING)
	}
	{
		p.SetState(4613)
		p.Column_list()
	}

	return localctx
}

// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_expr
	return p
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) GetOp() antlr.Token { return s.op }

func (s *ExprContext) SetOp(v antlr.Token) { s.op = v }

func (s *ExprContext) NULL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNULL, 0)
}

func (s *ExprContext) CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT_DATE, 0)
}

func (s *ExprContext) CURRENT_ROLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT_ROLE, 0)
}

func (s *ExprContext) CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT_TIME, 0)
}

func (s *ExprContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT_TIMESTAMP, 0)
}

func (s *ExprContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT_USER, 0)
}

func (s *ExprContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEFAULT, 0)
}

func (s *ExprContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, 0)
}

func (s *ExprContext) HEX_INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHEX_INTEGER_LITERAL, 0)
}

func (s *ExprContext) NUMERIC_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNUMERIC_LITERAL, 0)
}

func (s *ExprContext) SINGLEQ_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSINGLEQ_STRING_LITERAL, 0)
}

func (s *ExprContext) BIT_STRING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBIT_STRING, 0)
}

func (s *ExprContext) REGEX_STRING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREGEX_STRING, 0)
}

func (s *ExprContext) AllDOLLAR_DOLLAR() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserDOLLAR_DOLLAR)
}

func (s *ExprContext) DOLLAR_DOLLAR(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDOLLAR_DOLLAR, i)
}

func (s *ExprContext) AllDOLLAR() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserDOLLAR)
}

func (s *ExprContext) DOLLAR(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDOLLAR, i)
}

func (s *ExprContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ExprContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ExprContext) Bool_expr() IBool_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBool_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBool_exprContext)
}

func (s *ExprContext) Values_stmt() IValues_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValues_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValues_stmtContext)
}

func (s *ExprContext) Expr_list() IExpr_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_listContext)
}

func (s *ExprContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *ExprContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *ExprContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *ExprContext) Type_name() IType_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *ExprContext) BANG_BANG() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBANG_BANG, 0)
}

func (s *ExprContext) AT_SIGN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAT_SIGN, 0)
}

func (s *ExprContext) PLUS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPLUS, 0)
}

func (s *ExprContext) MINUS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMINUS, 0)
}

func (s *ExprContext) TIL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIL, 0)
}

func (s *ExprContext) QMARK_HYPHEN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserQMARK_HYPHEN, 0)
}

func (s *ExprContext) NOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOT, 0)
}

func (s *ExprContext) ALL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALL, 0)
}

func (s *ExprContext) Func_call() IFunc_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_callContext)
}

func (s *ExprContext) CAST() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCAST, 0)
}

func (s *ExprContext) AS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAS, 0)
}

func (s *ExprContext) AllData_type() []IData_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_typeContext)(nil)).Elem())
	var tst = make([]IData_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_typeContext)
		}
	}

	return tst
}

func (s *ExprContext) Data_type(i int) IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *ExprContext) Correlation_name() ICorrelation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICorrelation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICorrelation_nameContext)
}

func (s *ExprContext) DOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDOT, 0)
}

func (s *ExprContext) Column_name() IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *ExprContext) Case_expr() ICase_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_exprContext)
}

func (s *ExprContext) Aggregate() IAggregateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAggregateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAggregateContext)
}

func (s *ExprContext) Array_cons_expr() IArray_cons_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_cons_exprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_cons_exprContext)
}

func (s *ExprContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *ExprContext) DOLLAR_DEC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDOLLAR_DEC, 0)
}

func (s *ExprContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *ExprContext) CARET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCARET, 0)
}

func (s *ExprContext) PIPE_SLASH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPIPE_SLASH, 0)
}

func (s *ExprContext) PIPE_PIPE_SLASH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPIPE_PIPE_SLASH, 0)
}

func (s *ExprContext) STAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTAR, 0)
}

func (s *ExprContext) SLASH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSLASH, 0)
}

func (s *ExprContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPERCENT, 0)
}

func (s *ExprContext) AMP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAMP, 0)
}

func (s *ExprContext) PIPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPIPE, 0)
}

func (s *ExprContext) HASH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHASH, 0)
}

func (s *ExprContext) LT_LT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLT_LT, 0)
}

func (s *ExprContext) LT_LT_EQ() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLT_LT_EQ, 0)
}

func (s *ExprContext) GT_GT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGT_GT, 0)
}

func (s *ExprContext) AT_AT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAT_AT, 0)
}

func (s *ExprContext) LT_HYPHEN_GT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLT_HYPHEN_GT, 0)
}

func (s *ExprContext) AT_GT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAT_GT, 0)
}

func (s *ExprContext) LT_AT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLT_AT, 0)
}

func (s *ExprContext) TIL_EQ() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIL_EQ, 0)
}

func (s *ExprContext) TIL_STAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIL_STAR, 0)
}

func (s *ExprContext) TIL_TIL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIL_TIL, 0)
}

func (s *ExprContext) TIL_LT_TIL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIL_LT_TIL, 0)
}

func (s *ExprContext) TIL_GT_TIL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIL_GT_TIL, 0)
}

func (s *ExprContext) TIL_LTE_TIL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIL_LTE_TIL, 0)
}

func (s *ExprContext) TIL_GTE_TIL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIL_GTE_TIL, 0)
}

func (s *ExprContext) LT_QMARK_GT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLT_QMARK_GT, 0)
}

func (s *ExprContext) HYPHEN_GT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHYPHEN_GT, 0)
}

func (s *ExprContext) HYPHEN_GT_GT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHYPHEN_GT_GT, 0)
}

func (s *ExprContext) HASH_HASH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHASH_HASH, 0)
}

func (s *ExprContext) HASH_GT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHASH_GT, 0)
}

func (s *ExprContext) HASH_GT_GT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHASH_GT_GT, 0)
}

func (s *ExprContext) QMARK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserQMARK, 0)
}

func (s *ExprContext) QMARK_PIPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserQMARK_PIPE, 0)
}

func (s *ExprContext) QMARK_AMP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserQMARK_AMP, 0)
}

func (s *ExprContext) QMARK_HASH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserQMARK_HASH, 0)
}

func (s *ExprContext) LT_CARET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLT_CARET, 0)
}

func (s *ExprContext) AMP_LT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAMP_LT, 0)
}

func (s *ExprContext) HYPHEN_PIPE_HYPHEN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHYPHEN_PIPE_HYPHEN, 0)
}

func (s *ExprContext) HASH_EQ() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHASH_EQ, 0)
}

func (s *ExprContext) AMP_AMP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAMP_AMP, 0)
}

func (s *ExprContext) PIPE_PIPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPIPE_PIPE, 0)
}

func (s *ExprContext) EQUAL_GT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEQUAL_GT, 0)
}

func (s *ExprContext) AND() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAND, 0)
}

func (s *ExprContext) OR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOR, 0)
}

func (s *ExprContext) LIKE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLIKE, 0)
}

func (s *ExprContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBETWEEN, 0)
}

func (s *ExprContext) IN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIN, 0)
}

func (s *ExprContext) LT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLT, 0)
}

func (s *ExprContext) GT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGT, 0)
}

func (s *ExprContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEQUAL, 0)
}

func (s *ExprContext) LTE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLTE, 0)
}

func (s *ExprContext) GTE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGTE, 0)
}

func (s *ExprContext) LT_GT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLT_GT, 0)
}

func (s *ExprContext) BANG_EQUAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBANG_EQUAL, 0)
}

func (s *ExprContext) IS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIS, 0)
}

func (s *ExprContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDISTINCT, 0)
}

func (s *ExprContext) FROM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFROM, 0)
}

func (s *ExprContext) AllOPEN_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPEN_BRACKET)
}

func (s *ExprContext) OPEN_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_BRACKET, i)
}

func (s *ExprContext) AllCLOSE_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCLOSE_BRACKET)
}

func (s *ExprContext) CLOSE_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_BRACKET, i)
}

func (s *ExprContext) BANG() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBANG, 0)
}

func (s *ExprContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOLON)
}

func (s *ExprContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOLON, i)
}

func (s *ExprContext) AllCOLON_COLON() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOLON_COLON)
}

func (s *ExprContext) COLON_COLON(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOLON_COLON, i)
}

func (s *ExprContext) OF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOF, 0)
}

func (s *ExprContext) AT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAT, 0)
}

func (s *ExprContext) TIME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIME, 0)
}

func (s *ExprContext) ZONE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserZONE, 0)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterExpr(s)
	}
}

func (s *ExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitExpr(s)
	}
}

func (p *PostgreSQLParser) Expr() (localctx IExprContext) {
	return p.expr(0)
}

func (p *PostgreSQLParser) expr(_p int) (localctx IExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 436
	p.EnterRecursionRule(localctx, 436, PostgreSQLParserRULE_expr, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4689)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 549, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4616)
			p.Match(PostgreSQLParserNULL)
		}

	case 2:
		{
			p.SetState(4617)
			p.Match(PostgreSQLParserCURRENT_DATE)
		}

	case 3:
		{
			p.SetState(4618)
			p.Match(PostgreSQLParserCURRENT_ROLE)
		}

	case 4:
		{
			p.SetState(4619)
			p.Match(PostgreSQLParserCURRENT_TIME)
		}

	case 5:
		{
			p.SetState(4620)
			p.Match(PostgreSQLParserCURRENT_TIMESTAMP)
		}

	case 6:
		{
			p.SetState(4621)
			p.Match(PostgreSQLParserCURRENT_USER)
		}

	case 7:
		{
			p.SetState(4622)
			p.Match(PostgreSQLParserDEFAULT)
		}

	case 8:
		{
			p.SetState(4623)
			p.Match(PostgreSQLParserINTEGER_LITERAL)
		}

	case 9:
		{
			p.SetState(4624)
			p.Match(PostgreSQLParserHEX_INTEGER_LITERAL)
		}

	case 10:
		{
			p.SetState(4625)
			p.Match(PostgreSQLParserNUMERIC_LITERAL)
		}

	case 11:
		{
			p.SetState(4626)
			p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)
		}

	case 12:
		{
			p.SetState(4627)
			p.Match(PostgreSQLParserBIT_STRING)
		}

	case 13:
		{
			p.SetState(4628)
			p.Match(PostgreSQLParserREGEX_STRING)
		}

	case 14:
		{
			p.SetState(4629)
			p.Match(PostgreSQLParserDOLLAR_DOLLAR)
		}
		p.SetState(4631)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(4630)
					_la = p.GetTokenStream().LA(1)

					if _la <= 0 || _la == PostgreSQLParserDOLLAR {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(4633)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 547, p.GetParserRuleContext())
		}
		{
			p.SetState(4635)
			p.Match(PostgreSQLParserDOLLAR_DOLLAR)
		}

	case 15:
		{
			p.SetState(4636)
			p.Match(PostgreSQLParserDOLLAR)
		}
		{
			p.SetState(4637)
			p.identifier(0)
		}
		p.SetState(4639)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PostgreSQLParserWHITESPACE)|(1<<PostgreSQLParserBLOCK_COMMENT)|(1<<PostgreSQLParserLINE_COMMENT)|(1<<PostgreSQLParserA_)|(1<<PostgreSQLParserABORT)|(1<<PostgreSQLParserABS)|(1<<PostgreSQLParserABSOLUTE)|(1<<PostgreSQLParserACCESS)|(1<<PostgreSQLParserACTION)|(1<<PostgreSQLParserADA)|(1<<PostgreSQLParserADD)|(1<<PostgreSQLParserADMIN)|(1<<PostgreSQLParserAFTER)|(1<<PostgreSQLParserAGGREGATE)|(1<<PostgreSQLParserALIAS)|(1<<PostgreSQLParserALL)|(1<<PostgreSQLParserALLOCATE)|(1<<PostgreSQLParserALSO)|(1<<PostgreSQLParserALTER)|(1<<PostgreSQLParserALWAYS)|(1<<PostgreSQLParserANALYSE)|(1<<PostgreSQLParserANALYZE)|(1<<PostgreSQLParserAND)|(1<<PostgreSQLParserANY)|(1<<PostgreSQLParserARE)|(1<<PostgreSQLParserARRAY)|(1<<PostgreSQLParserAS)|(1<<PostgreSQLParserASC)|(1<<PostgreSQLParserASENSITIVE)|(1<<PostgreSQLParserASSERTION)|(1<<PostgreSQLParserASSIGNMENT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(PostgreSQLParserASYMMETRIC-32))|(1<<(PostgreSQLParserAT-32))|(1<<(PostgreSQLParserATOMIC-32))|(1<<(PostgreSQLParserATTRIBUTE-32))|(1<<(PostgreSQLParserATTRIBUTES-32))|(1<<(PostgreSQLParserAUTHORIZATION-32))|(1<<(PostgreSQLParserAVG-32))|(1<<(PostgreSQLParserBACKWARD-32))|(1<<(PostgreSQLParserBEFORE-32))|(1<<(PostgreSQLParserBEGIN-32))|(1<<(PostgreSQLParserBERNOULLI-32))|(1<<(PostgreSQLParserBETWEEN-32))|(1<<(PostgreSQLParserBIGINT-32))|(1<<(PostgreSQLParserBINARY-32))|(1<<(PostgreSQLParserBIT-32))|(1<<(PostgreSQLParserBIT_LENGTH-32))|(1<<(PostgreSQLParserBITVAR-32))|(1<<(PostgreSQLParserBLOB-32))|(1<<(PostgreSQLParserBOOLEAN-32))|(1<<(PostgreSQLParserBOTH-32))|(1<<(PostgreSQLParserBREADTH-32))|(1<<(PostgreSQLParserBUFFERS-32))|(1<<(PostgreSQLParserBY-32))|(1<<(PostgreSQLParserC_-32))|(1<<(PostgreSQLParserCACHE-32))|(1<<(PostgreSQLParserCALL-32))|(1<<(PostgreSQLParserCALLED-32))|(1<<(PostgreSQLParserCARDINALITY-32))|(1<<(PostgreSQLParserCASCADE-32))|(1<<(PostgreSQLParserCASCADED-32))|(1<<(PostgreSQLParserCASE-32))|(1<<(PostgreSQLParserCAST-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(PostgreSQLParserCATALOG-64))|(1<<(PostgreSQLParserCATALOG_NAME-64))|(1<<(PostgreSQLParserCEIL-64))|(1<<(PostgreSQLParserCEILING-64))|(1<<(PostgreSQLParserCHAIN-64))|(1<<(PostgreSQLParserCHAR-64))|(1<<(PostgreSQLParserCHAR_LENGTH-64))|(1<<(PostgreSQLParserCHARACTER-64))|(1<<(PostgreSQLParserCHARACTER_LENGTH-64))|(1<<(PostgreSQLParserCHARACTER_SET_CATALOG-64))|(1<<(PostgreSQLParserCHARACTER_SET_NAME-64))|(1<<(PostgreSQLParserCHARACTER_SET_SCHEMA-64))|(1<<(PostgreSQLParserCHARACTERISTICS-64))|(1<<(PostgreSQLParserCHARACTERS-64))|(1<<(PostgreSQLParserCHECK-64))|(1<<(PostgreSQLParserCHECKED-64))|(1<<(PostgreSQLParserCHECKPOINT-64))|(1<<(PostgreSQLParserCLASS-64))|(1<<(PostgreSQLParserCLASS_ORIGIN-64))|(1<<(PostgreSQLParserCLOB-64))|(1<<(PostgreSQLParserCLOSE-64))|(1<<(PostgreSQLParserCLUSTER-64))|(1<<(PostgreSQLParserCOALESCE-64))|(1<<(PostgreSQLParserCOBOL-64))|(1<<(PostgreSQLParserCOLLATE-64))|(1<<(PostgreSQLParserCOLLATION-64))|(1<<(PostgreSQLParserCOLLATION_CATALOG-64))|(1<<(PostgreSQLParserCOLLATION_NAME-64))|(1<<(PostgreSQLParserCOLLATION_SCHEMA-64))|(1<<(PostgreSQLParserCOLLECT-64))|(1<<(PostgreSQLParserCOLUMN-64))|(1<<(PostgreSQLParserCOLUMN_NAME-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(PostgreSQLParserCOMMAND_FUNCTION-96))|(1<<(PostgreSQLParserCOMMAND_FUNCTION_CODE-96))|(1<<(PostgreSQLParserCOMMENT-96))|(1<<(PostgreSQLParserCOMMIT-96))|(1<<(PostgreSQLParserCOMMITTED-96))|(1<<(PostgreSQLParserCOMPLETION-96))|(1<<(PostgreSQLParserCONDITION-96))|(1<<(PostgreSQLParserCONDITION_NUMBER-96))|(1<<(PostgreSQLParserCONFIGURATION-96))|(1<<(PostgreSQLParserCONFLICT-96))|(1<<(PostgreSQLParserCONNECT-96))|(1<<(PostgreSQLParserCONNECTION-96))|(1<<(PostgreSQLParserCONNECTION_NAME-96))|(1<<(PostgreSQLParserCONSTRAINT-96))|(1<<(PostgreSQLParserCONSTRAINT_CATALOG-96))|(1<<(PostgreSQLParserCONSTRAINT_NAME-96))|(1<<(PostgreSQLParserCONSTRAINT_SCHEMA-96))|(1<<(PostgreSQLParserCONSTRAINTS-96))|(1<<(PostgreSQLParserCONSTRUCTOR-96))|(1<<(PostgreSQLParserCONTAINS-96))|(1<<(PostgreSQLParserCONTINUE-96))|(1<<(PostgreSQLParserCONVERSION-96))|(1<<(PostgreSQLParserCONVERT-96))|(1<<(PostgreSQLParserCOPY-96))|(1<<(PostgreSQLParserCORR-96))|(1<<(PostgreSQLParserCORRESPONDING-96))|(1<<(PostgreSQLParserCOSTS-96))|(1<<(PostgreSQLParserCOUNT-96))|(1<<(PostgreSQLParserCOVAR_POP-96))|(1<<(PostgreSQLParserCOVAR_SAMP-96))|(1<<(PostgreSQLParserCREATE-96))|(1<<(PostgreSQLParserCREATETABLE-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(PostgreSQLParserCREATEDB-128))|(1<<(PostgreSQLParserCREATEUSER-128))|(1<<(PostgreSQLParserCROSS-128))|(1<<(PostgreSQLParserCSV-128))|(1<<(PostgreSQLParserCUBE-128))|(1<<(PostgreSQLParserCUME_DIST-128))|(1<<(PostgreSQLParserCURRENT-128))|(1<<(PostgreSQLParserCURRENT_DATE-128))|(1<<(PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP-128))|(1<<(PostgreSQLParserCURRENT_PATH-128))|(1<<(PostgreSQLParserCURRENT_ROLE-128))|(1<<(PostgreSQLParserCURRENT_TIME-128))|(1<<(PostgreSQLParserCURRENT_TIMESTAMP-128))|(1<<(PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE-128))|(1<<(PostgreSQLParserCURRENT_USER-128))|(1<<(PostgreSQLParserCURSOR-128))|(1<<(PostgreSQLParserCURSOR_NAME-128))|(1<<(PostgreSQLParserCYCLE-128))|(1<<(PostgreSQLParserDATA-128))|(1<<(PostgreSQLParserDATABASE-128))|(1<<(PostgreSQLParserDATE-128))|(1<<(PostgreSQLParserDATETIME_INTERVAL_CODE-128))|(1<<(PostgreSQLParserDATETIME_INTERVAL_PRECISION-128))|(1<<(PostgreSQLParserDAY-128))|(1<<(PostgreSQLParserDEALLOCATE-128))|(1<<(PostgreSQLParserDEC-128))|(1<<(PostgreSQLParserDECIMAL-128))|(1<<(PostgreSQLParserDECLARE-128))|(1<<(PostgreSQLParserDEFAULT-128))|(1<<(PostgreSQLParserDEFAULTS-128))|(1<<(PostgreSQLParserDEFERABLE-128))|(1<<(PostgreSQLParserDEFERRABLE-128)))) != 0) || (((_la-160)&-(0x1f+1)) == 0 && ((1<<uint((_la-160)))&((1<<(PostgreSQLParserDEFERRED-160))|(1<<(PostgreSQLParserDEFINED-160))|(1<<(PostgreSQLParserDEFINER-160))|(1<<(PostgreSQLParserDEGREE-160))|(1<<(PostgreSQLParserDELETE-160))|(1<<(PostgreSQLParserDELIMITER-160))|(1<<(PostgreSQLParserDELIMITERS-160))|(1<<(PostgreSQLParserDENSE_RANK-160))|(1<<(PostgreSQLParserDEPENDS-160))|(1<<(PostgreSQLParserDEPTH-160))|(1<<(PostgreSQLParserDEREF-160))|(1<<(PostgreSQLParserDERIVED-160))|(1<<(PostgreSQLParserDESC-160))|(1<<(PostgreSQLParserDESCRIBE-160))|(1<<(PostgreSQLParserDESCRIPTOR-160))|(1<<(PostgreSQLParserDESTROY-160))|(1<<(PostgreSQLParserDESTRUCTOR-160))|(1<<(PostgreSQLParserDETERMINISTIC-160))|(1<<(PostgreSQLParserDIAGNOSTICS-160))|(1<<(PostgreSQLParserDICTIONARY-160))|(1<<(PostgreSQLParserDISABLE-160))|(1<<(PostgreSQLParserDISABLE_PAGE_SKIPPING-160))|(1<<(PostgreSQLParserDISCARD-160))|(1<<(PostgreSQLParserDISCONNECT-160))|(1<<(PostgreSQLParserDISPATCH-160))|(1<<(PostgreSQLParserDISTINCT-160))|(1<<(PostgreSQLParserDO-160))|(1<<(PostgreSQLParserDOMAIN-160))|(1<<(PostgreSQLParserDOUBLE-160))|(1<<(PostgreSQLParserDROP-160))|(1<<(PostgreSQLParserDYNAMIC-160))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION-160)))) != 0) || (((_la-192)&-(0x1f+1)) == 0 && ((1<<uint((_la-192)))&((1<<(PostgreSQLParserDYNAMIC_FUNCTION_CODE-192))|(1<<(PostgreSQLParserEACH-192))|(1<<(PostgreSQLParserELEMENT-192))|(1<<(PostgreSQLParserELSE-192))|(1<<(PostgreSQLParserENABLE-192))|(1<<(PostgreSQLParserENCODING-192))|(1<<(PostgreSQLParserENCRYPTED-192))|(1<<(PostgreSQLParserEND-192))|(1<<(PostgreSQLParserEND_EXEC-192))|(1<<(PostgreSQLParserEQUALS-192))|(1<<(PostgreSQLParserESCAPE-192))|(1<<(PostgreSQLParserEVERY-192))|(1<<(PostgreSQLParserEXCEPT-192))|(1<<(PostgreSQLParserEXCEPTION-192))|(1<<(PostgreSQLParserEXCLUDE-192))|(1<<(PostgreSQLParserEXCLUDING-192))|(1<<(PostgreSQLParserEXCLUSIVE-192))|(1<<(PostgreSQLParserEXEC-192))|(1<<(PostgreSQLParserEXECUTE-192))|(1<<(PostgreSQLParserEXISTING-192))|(1<<(PostgreSQLParserEXISTS-192))|(1<<(PostgreSQLParserEXP-192))|(1<<(PostgreSQLParserEXPLAIN-192))|(1<<(PostgreSQLParserEXTENDED-192))|(1<<(PostgreSQLParserEXTENSION-192))|(1<<(PostgreSQLParserEXTERNAL-192))|(1<<(PostgreSQLParserEXTRACT-192))|(1<<(PostgreSQLParserFALSE-192))|(1<<(PostgreSQLParserFETCH-192))|(1<<(PostgreSQLParserFIELDS-192))|(1<<(PostgreSQLParserFILTER-192))|(1<<(PostgreSQLParserFINAL-192)))) != 0) || (((_la-224)&-(0x1f+1)) == 0 && ((1<<uint((_la-224)))&((1<<(PostgreSQLParserFIRST-224))|(1<<(PostgreSQLParserFLOAT-224))|(1<<(PostgreSQLParserFLOOR-224))|(1<<(PostgreSQLParserFOLLOWING-224))|(1<<(PostgreSQLParserFOR-224))|(1<<(PostgreSQLParserFORCE-224))|(1<<(PostgreSQLParserFOREIGN-224))|(1<<(PostgreSQLParserFORMAT-224))|(1<<(PostgreSQLParserFORTRAN-224))|(1<<(PostgreSQLParserFORWARD-224))|(1<<(PostgreSQLParserFOUND-224))|(1<<(PostgreSQLParserFREE-224))|(1<<(PostgreSQLParserFREEZE-224))|(1<<(PostgreSQLParserFROM-224))|(1<<(PostgreSQLParserFULL-224))|(1<<(PostgreSQLParserFUNCTION-224))|(1<<(PostgreSQLParserFUSION-224))|(1<<(PostgreSQLParserG_-224))|(1<<(PostgreSQLParserGENERAL-224))|(1<<(PostgreSQLParserGENERATED-224))|(1<<(PostgreSQLParserGET-224))|(1<<(PostgreSQLParserGLOBAL-224))|(1<<(PostgreSQLParserGO-224))|(1<<(PostgreSQLParserGOTO-224))|(1<<(PostgreSQLParserGRANT-224))|(1<<(PostgreSQLParserGRANTED-224))|(1<<(PostgreSQLParserGREATEST-224))|(1<<(PostgreSQLParserGROUP-224))|(1<<(PostgreSQLParserGROUPING-224))|(1<<(PostgreSQLParserHANDLER-224))|(1<<(PostgreSQLParserHAVING-224))|(1<<(PostgreSQLParserHIERARCHY-224)))) != 0) || (((_la-256)&-(0x1f+1)) == 0 && ((1<<uint((_la-256)))&((1<<(PostgreSQLParserHOLD-256))|(1<<(PostgreSQLParserHOST-256))|(1<<(PostgreSQLParserHOUR-256))|(1<<(PostgreSQLParserIDENTITY-256))|(1<<(PostgreSQLParserIGNORE-256))|(1<<(PostgreSQLParserILIKE-256))|(1<<(PostgreSQLParserIMMEDIATE-256))|(1<<(PostgreSQLParserIMMUTABLE-256))|(1<<(PostgreSQLParserIMPLEMENTATION-256))|(1<<(PostgreSQLParserIMPLICIT-256))|(1<<(PostgreSQLParserIN-256))|(1<<(PostgreSQLParserINCLUDING-256))|(1<<(PostgreSQLParserINCREMENT-256))|(1<<(PostgreSQLParserINDEX-256))|(1<<(PostgreSQLParserINDICATOR-256))|(1<<(PostgreSQLParserINFIX-256))|(1<<(PostgreSQLParserINHERITS-256))|(1<<(PostgreSQLParserINITIALIZE-256))|(1<<(PostgreSQLParserINITIALLY-256))|(1<<(PostgreSQLParserINNER-256))|(1<<(PostgreSQLParserINOUT-256))|(1<<(PostgreSQLParserINPUT-256))|(1<<(PostgreSQLParserINSENSITIVE-256))|(1<<(PostgreSQLParserINSERT-256))|(1<<(PostgreSQLParserINSTANCE-256))|(1<<(PostgreSQLParserINSTANTIABLE-256))|(1<<(PostgreSQLParserINSTEAD-256))|(1<<(PostgreSQLParserINT-256))|(1<<(PostgreSQLParserINTEGER-256))|(1<<(PostgreSQLParserINTERSECT-256))|(1<<(PostgreSQLParserINTERSECTION-256))|(1<<(PostgreSQLParserINTERVAL-256)))) != 0) || (((_la-288)&-(0x1f+1)) == 0 && ((1<<uint((_la-288)))&((1<<(PostgreSQLParserINTO-288))|(1<<(PostgreSQLParserINVOKER-288))|(1<<(PostgreSQLParserIS-288))|(1<<(PostgreSQLParserISOLATION-288))|(1<<(PostgreSQLParserITERATE-288))|(1<<(PostgreSQLParserJOIN-288))|(1<<(PostgreSQLParserK_-288))|(1<<(PostgreSQLParserKEY-288))|(1<<(PostgreSQLParserKEY_MEMBER-288))|(1<<(PostgreSQLParserKEY_TYPE-288))|(1<<(PostgreSQLParserLABEL-288))|(1<<(PostgreSQLParserLANCOMPILER-288))|(1<<(PostgreSQLParserLANGUAGE-288))|(1<<(PostgreSQLParserLARGE-288))|(1<<(PostgreSQLParserLAST-288))|(1<<(PostgreSQLParserLATERAL-288))|(1<<(PostgreSQLParserLEADING-288))|(1<<(PostgreSQLParserLEAST-288))|(1<<(PostgreSQLParserLEFT-288))|(1<<(PostgreSQLParserLENGTH-288))|(1<<(PostgreSQLParserLESS-288))|(1<<(PostgreSQLParserLEVEL-288))|(1<<(PostgreSQLParserLIKE-288))|(1<<(PostgreSQLParserLIMIT-288))|(1<<(PostgreSQLParserLISTEN-288))|(1<<(PostgreSQLParserLN-288))|(1<<(PostgreSQLParserLOAD-288))|(1<<(PostgreSQLParserLOCAL-288))|(1<<(PostgreSQLParserLOCALTIME-288))|(1<<(PostgreSQLParserLOCALTIMESTAMP-288))|(1<<(PostgreSQLParserLOCATION-288))|(1<<(PostgreSQLParserLOCATOR-288)))) != 0) || (((_la-320)&-(0x1f+1)) == 0 && ((1<<uint((_la-320)))&((1<<(PostgreSQLParserLOCK-320))|(1<<(PostgreSQLParserLOCKED-320))|(1<<(PostgreSQLParserLOWER-320))|(1<<(PostgreSQLParserM_-320))|(1<<(PostgreSQLParserMAIN-320))|(1<<(PostgreSQLParserMAP-320))|(1<<(PostgreSQLParserMAPPING-320))|(1<<(PostgreSQLParserMATCH-320))|(1<<(PostgreSQLParserMATCH_SIMPLE-320))|(1<<(PostgreSQLParserMATCHED-320))|(1<<(PostgreSQLParserMAX-320))|(1<<(PostgreSQLParserMAXVALUE-320))|(1<<(PostgreSQLParserMEMBER-320))|(1<<(PostgreSQLParserMERGE-320))|(1<<(PostgreSQLParserMESSAGE_LENGTH-320))|(1<<(PostgreSQLParserMESSAGE_OCTET_LENGTH-320))|(1<<(PostgreSQLParserMESSAGE_TEXT-320))|(1<<(PostgreSQLParserMETHOD-320))|(1<<(PostgreSQLParserMIN-320))|(1<<(PostgreSQLParserMINUTE-320))|(1<<(PostgreSQLParserMINVALUE-320))|(1<<(PostgreSQLParserMOD-320))|(1<<(PostgreSQLParserMODE-320))|(1<<(PostgreSQLParserMODIFIES-320))|(1<<(PostgreSQLParserMODIFY-320))|(1<<(PostgreSQLParserMODULE-320))|(1<<(PostgreSQLParserMONTH-320))|(1<<(PostgreSQLParserMORE_-320))|(1<<(PostgreSQLParserMOVE-320))|(1<<(PostgreSQLParserMULTISET-320))|(1<<(PostgreSQLParserMUMPS-320))|(1<<(PostgreSQLParserNAME-320)))) != 0) || (((_la-352)&-(0x1f+1)) == 0 && ((1<<uint((_la-352)))&((1<<(PostgreSQLParserNAMES-352))|(1<<(PostgreSQLParserNATIONAL-352))|(1<<(PostgreSQLParserNATURAL-352))|(1<<(PostgreSQLParserNCHAR-352))|(1<<(PostgreSQLParserNCLOB-352))|(1<<(PostgreSQLParserNESTING-352))|(1<<(PostgreSQLParserNEW-352))|(1<<(PostgreSQLParserNEXT-352))|(1<<(PostgreSQLParserNO-352))|(1<<(PostgreSQLParserNOCREATEDB-352))|(1<<(PostgreSQLParserNOCREATEUSER-352))|(1<<(PostgreSQLParserNONE-352))|(1<<(PostgreSQLParserNORMALIZE-352))|(1<<(PostgreSQLParserNORMALIZED-352))|(1<<(PostgreSQLParserNOT-352))|(1<<(PostgreSQLParserNOTHING-352))|(1<<(PostgreSQLParserNOTIFY-352))|(1<<(PostgreSQLParserNOTNULL-352))|(1<<(PostgreSQLParserNOWAIT-352))|(1<<(PostgreSQLParserNULL-352))|(1<<(PostgreSQLParserNULLABLE-352))|(1<<(PostgreSQLParserNULLIF-352))|(1<<(PostgreSQLParserNULLS-352))|(1<<(PostgreSQLParserNUMBER-352))|(1<<(PostgreSQLParserNUMERIC-352))|(1<<(PostgreSQLParserOBJECT-352))|(1<<(PostgreSQLParserOCTET_LENGTH-352))|(1<<(PostgreSQLParserOCTETS-352))|(1<<(PostgreSQLParserOF-352))|(1<<(PostgreSQLParserOFF-352))|(1<<(PostgreSQLParserOFFSET-352))|(1<<(PostgreSQLParserOIDS-352)))) != 0) || (((_la-384)&-(0x1f+1)) == 0 && ((1<<uint((_la-384)))&((1<<(PostgreSQLParserOLD-384))|(1<<(PostgreSQLParserON-384))|(1<<(PostgreSQLParserONLY-384))|(1<<(PostgreSQLParserOPEN-384))|(1<<(PostgreSQLParserOPERATION-384))|(1<<(PostgreSQLParserOPERATOR-384))|(1<<(PostgreSQLParserOPTION-384))|(1<<(PostgreSQLParserOPTIONS-384))|(1<<(PostgreSQLParserOR-384))|(1<<(PostgreSQLParserORDER-384))|(1<<(PostgreSQLParserORDERING-384))|(1<<(PostgreSQLParserORDINALITY-384))|(1<<(PostgreSQLParserOTHERS-384))|(1<<(PostgreSQLParserOUT-384))|(1<<(PostgreSQLParserOUTER-384))|(1<<(PostgreSQLParserOUTPUT-384))|(1<<(PostgreSQLParserOVER-384))|(1<<(PostgreSQLParserOVERLAPS-384))|(1<<(PostgreSQLParserOVERLAY-384))|(1<<(PostgreSQLParserOVERRIDING-384))|(1<<(PostgreSQLParserOWNER-384))|(1<<(PostgreSQLParserPAD-384))|(1<<(PostgreSQLParserPARAMETER-384))|(1<<(PostgreSQLParserPARAMETER_MODE-384))|(1<<(PostgreSQLParserPARAMETER_NAME-384))|(1<<(PostgreSQLParserPARAMETER_ORDINAL_POSITION-384))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_CATALOG-384))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_NAME-384))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA-384))|(1<<(PostgreSQLParserPARAMETERS-384))|(1<<(PostgreSQLParserPARSER-384))|(1<<(PostgreSQLParserPARTIAL-384)))) != 0) || (((_la-416)&-(0x1f+1)) == 0 && ((1<<uint((_la-416)))&((1<<(PostgreSQLParserPARTITION-416))|(1<<(PostgreSQLParserPASCAL-416))|(1<<(PostgreSQLParserPASSWORD-416))|(1<<(PostgreSQLParserPATH-416))|(1<<(PostgreSQLParserPERCENT_RANK-416))|(1<<(PostgreSQLParserPERCENTILE_CONT-416))|(1<<(PostgreSQLParserPERCENTILE_DISC-416))|(1<<(PostgreSQLParserPLACING-416))|(1<<(PostgreSQLParserPLAIN-416))|(1<<(PostgreSQLParserPLANS-416))|(1<<(PostgreSQLParserPLI-416))|(1<<(PostgreSQLParserPOSITION-416))|(1<<(PostgreSQLParserPOSTFIX-416))|(1<<(PostgreSQLParserPOWER-416))|(1<<(PostgreSQLParserPRECEDING-416))|(1<<(PostgreSQLParserPRECISION-416))|(1<<(PostgreSQLParserPREFIX-416))|(1<<(PostgreSQLParserPREORDER-416))|(1<<(PostgreSQLParserPREPARE-416))|(1<<(PostgreSQLParserPREPARED-416))|(1<<(PostgreSQLParserPRESERVE-416))|(1<<(PostgreSQLParserPRIMARY-416))|(1<<(PostgreSQLParserPRIOR-416))|(1<<(PostgreSQLParserPRIVILEGES-416))|(1<<(PostgreSQLParserPROCEDURAL-416))|(1<<(PostgreSQLParserPROCEDURE-416))|(1<<(PostgreSQLParserPUBLIC-416))|(1<<(PostgreSQLParserPUBLICATION-416))|(1<<(PostgreSQLParserQUOTE-416))|(1<<(PostgreSQLParserRANGE-416))|(1<<(PostgreSQLParserRANK-416))|(1<<(PostgreSQLParserREAD-416)))) != 0) || (((_la-448)&-(0x1f+1)) == 0 && ((1<<uint((_la-448)))&((1<<(PostgreSQLParserREADS-448))|(1<<(PostgreSQLParserREAL-448))|(1<<(PostgreSQLParserREASSIGN-448))|(1<<(PostgreSQLParserRECHECK-448))|(1<<(PostgreSQLParserRECURSIVE-448))|(1<<(PostgreSQLParserREF-448))|(1<<(PostgreSQLParserREFERENCES-448))|(1<<(PostgreSQLParserREFERENCING-448))|(1<<(PostgreSQLParserREFRESH-448))|(1<<(PostgreSQLParserREGR_AVGX-448))|(1<<(PostgreSQLParserREGR_AVGY-448))|(1<<(PostgreSQLParserREGR_COUNT-448))|(1<<(PostgreSQLParserREGR_INTERCEPT-448))|(1<<(PostgreSQLParserREGR_R2-448))|(1<<(PostgreSQLParserREGR_SLOPE-448))|(1<<(PostgreSQLParserREGR_SXX-448))|(1<<(PostgreSQLParserREGR_SXY-448))|(1<<(PostgreSQLParserREGR_SYY-448))|(1<<(PostgreSQLParserREINDEX-448))|(1<<(PostgreSQLParserRELATIVE-448))|(1<<(PostgreSQLParserRELEASE-448))|(1<<(PostgreSQLParserRENAME-448))|(1<<(PostgreSQLParserREPEATABLE-448))|(1<<(PostgreSQLParserREPLACE-448))|(1<<(PostgreSQLParserREPLICA-448))|(1<<(PostgreSQLParserRESET-448))|(1<<(PostgreSQLParserRESTART-448))|(1<<(PostgreSQLParserRESTRICT-448))|(1<<(PostgreSQLParserRESULT-448))|(1<<(PostgreSQLParserRETURN-448))|(1<<(PostgreSQLParserRETURNED_CARDINALITY-448))|(1<<(PostgreSQLParserRETURNED_LENGTH-448)))) != 0) || (((_la-480)&-(0x1f+1)) == 0 && ((1<<uint((_la-480)))&((1<<(PostgreSQLParserRETURNED_OCTET_LENGTH-480))|(1<<(PostgreSQLParserRETURNED_SQLSTATE-480))|(1<<(PostgreSQLParserRETURNING-480))|(1<<(PostgreSQLParserRETURNS-480))|(1<<(PostgreSQLParserREVOKE-480))|(1<<(PostgreSQLParserRIGHT-480))|(1<<(PostgreSQLParserROLE-480))|(1<<(PostgreSQLParserROLLBACK-480))|(1<<(PostgreSQLParserROLLUP-480))|(1<<(PostgreSQLParserROUTINE-480))|(1<<(PostgreSQLParserROUTINE_CATALOG-480))|(1<<(PostgreSQLParserROUTINE_NAME-480))|(1<<(PostgreSQLParserROUTINE_SCHEMA-480))|(1<<(PostgreSQLParserROW-480))|(1<<(PostgreSQLParserROW_COUNT-480))|(1<<(PostgreSQLParserROW_NUMBER-480))|(1<<(PostgreSQLParserROWS-480))|(1<<(PostgreSQLParserRULE-480))|(1<<(PostgreSQLParserSAVEPOINT-480))|(1<<(PostgreSQLParserSCALE-480))|(1<<(PostgreSQLParserSCHEMA-480))|(1<<(PostgreSQLParserSCHEMA_NAME-480))|(1<<(PostgreSQLParserSCOPE-480))|(1<<(PostgreSQLParserSCOPE_CATALOG-480))|(1<<(PostgreSQLParserSCOPE_NAME-480))|(1<<(PostgreSQLParserSCOPE_SCHEMA-480))|(1<<(PostgreSQLParserSCROLL-480))|(1<<(PostgreSQLParserSEARCH-480))|(1<<(PostgreSQLParserSECOND-480))|(1<<(PostgreSQLParserSECTION-480))|(1<<(PostgreSQLParserSECURITY-480))|(1<<(PostgreSQLParserSELECT-480)))) != 0) || (((_la-512)&-(0x1f+1)) == 0 && ((1<<uint((_la-512)))&((1<<(PostgreSQLParserSELF-512))|(1<<(PostgreSQLParserSENSITIVE-512))|(1<<(PostgreSQLParserSEQUENCE-512))|(1<<(PostgreSQLParserSEQUENCES-512))|(1<<(PostgreSQLParserSERIALIZABLE-512))|(1<<(PostgreSQLParserSERVER_NAME-512))|(1<<(PostgreSQLParserSESSION-512))|(1<<(PostgreSQLParserSESSION_USER-512))|(1<<(PostgreSQLParserSET-512))|(1<<(PostgreSQLParserSETOF-512))|(1<<(PostgreSQLParserSETS-512))|(1<<(PostgreSQLParserSHARE-512))|(1<<(PostgreSQLParserSHOW-512))|(1<<(PostgreSQLParserSIMILAR-512))|(1<<(PostgreSQLParserSIMPLE-512))|(1<<(PostgreSQLParserSIZE-512))|(1<<(PostgreSQLParserSKIP_-512))|(1<<(PostgreSQLParserSMALLINT-512))|(1<<(PostgreSQLParserSNAPSHOT-512))|(1<<(PostgreSQLParserSOME-512))|(1<<(PostgreSQLParserSOURCE-512))|(1<<(PostgreSQLParserSPACE-512))|(1<<(PostgreSQLParserSPECIFIC-512))|(1<<(PostgreSQLParserSPECIFIC_NAME-512))|(1<<(PostgreSQLParserSPECIFICTYPE-512))|(1<<(PostgreSQLParserSQL-512))|(1<<(PostgreSQLParserSQLCODE-512))|(1<<(PostgreSQLParserSQLERROR-512))|(1<<(PostgreSQLParserSQLEXCEPTION-512))|(1<<(PostgreSQLParserSQLSTATE-512))|(1<<(PostgreSQLParserSQLWARNING-512))|(1<<(PostgreSQLParserSQRT-512)))) != 0) || (((_la-544)&-(0x1f+1)) == 0 && ((1<<uint((_la-544)))&((1<<(PostgreSQLParserSTABLE-544))|(1<<(PostgreSQLParserSTART-544))|(1<<(PostgreSQLParserSTATE-544))|(1<<(PostgreSQLParserSTATEMENT-544))|(1<<(PostgreSQLParserSTATIC-544))|(1<<(PostgreSQLParserSTATISTICS-544))|(1<<(PostgreSQLParserSTDDEV_POP-544))|(1<<(PostgreSQLParserSTDDEV_SAMP-544))|(1<<(PostgreSQLParserSTDIN-544))|(1<<(PostgreSQLParserSTDOUT-544))|(1<<(PostgreSQLParserSTORAGE-544))|(1<<(PostgreSQLParserSTRICT-544))|(1<<(PostgreSQLParserSTRUCTURE-544))|(1<<(PostgreSQLParserSTYLE-544))|(1<<(PostgreSQLParserSUBCLASS_ORIGIN-544))|(1<<(PostgreSQLParserSUBLIST-544))|(1<<(PostgreSQLParserSUBMULTISET-544))|(1<<(PostgreSQLParserSUBSCRIPTION-544))|(1<<(PostgreSQLParserSUBSTRING-544))|(1<<(PostgreSQLParserSUM-544))|(1<<(PostgreSQLParserSYMMETRIC-544))|(1<<(PostgreSQLParserSYSID-544))|(1<<(PostgreSQLParserSYSTEM-544))|(1<<(PostgreSQLParserSYSTEM_USER-544))|(1<<(PostgreSQLParserTABLE-544))|(1<<(PostgreSQLParserTABLE_NAME-544))|(1<<(PostgreSQLParserTABLESAMPLE-544))|(1<<(PostgreSQLParserTABLESPACE-544))|(1<<(PostgreSQLParserTEMP-544))|(1<<(PostgreSQLParserTEMPLATE-544))|(1<<(PostgreSQLParserTEMPORARY-544))|(1<<(PostgreSQLParserTERMINATE-544)))) != 0) || (((_la-576)&-(0x1f+1)) == 0 && ((1<<uint((_la-576)))&((1<<(PostgreSQLParserTHAN-576))|(1<<(PostgreSQLParserTHEN-576))|(1<<(PostgreSQLParserTIES-576))|(1<<(PostgreSQLParserTIME-576))|(1<<(PostgreSQLParserTIMESTAMP-576))|(1<<(PostgreSQLParserTIMEZONE_HOUR-576))|(1<<(PostgreSQLParserTIMEZONE_MINUTE-576))|(1<<(PostgreSQLParserTIMING-576))|(1<<(PostgreSQLParserTO-576))|(1<<(PostgreSQLParserTOAST-576))|(1<<(PostgreSQLParserTOP_LEVEL_COUNT-576))|(1<<(PostgreSQLParserTRAILING-576))|(1<<(PostgreSQLParserTRANSACTION-576))|(1<<(PostgreSQLParserTRANSACTION_ACTIVE-576))|(1<<(PostgreSQLParserTRANSACTIONS_COMMITTED-576))|(1<<(PostgreSQLParserTRANSACTIONS_ROLLED_BACK-576))|(1<<(PostgreSQLParserTRANSFORM-576))|(1<<(PostgreSQLParserTRANSFORMS-576))|(1<<(PostgreSQLParserTRANSLATE-576))|(1<<(PostgreSQLParserTRANSLATION-576))|(1<<(PostgreSQLParserTREAT-576))|(1<<(PostgreSQLParserTRIGGER-576))|(1<<(PostgreSQLParserTRIGGER_CATALOG-576))|(1<<(PostgreSQLParserTRIGGER_NAME-576))|(1<<(PostgreSQLParserTRIGGER_SCHEMA-576))|(1<<(PostgreSQLParserTRIM-576))|(1<<(PostgreSQLParserTRUE-576))|(1<<(PostgreSQLParserTRUNCATE-576))|(1<<(PostgreSQLParserTRUSTED-576))|(1<<(PostgreSQLParserTYPE-576))|(1<<(PostgreSQLParserUESCAPE-576))|(1<<(PostgreSQLParserUNBOUNDED-576)))) != 0) || (((_la-608)&-(0x1f+1)) == 0 && ((1<<uint((_la-608)))&((1<<(PostgreSQLParserUNCOMMITTED-608))|(1<<(PostgreSQLParserUNDER-608))|(1<<(PostgreSQLParserUNENCRYPTED-608))|(1<<(PostgreSQLParserUNION-608))|(1<<(PostgreSQLParserUNIQUE-608))|(1<<(PostgreSQLParserUNKNOWN-608))|(1<<(PostgreSQLParserUNLISTEN-608))|(1<<(PostgreSQLParserUNNAMED-608))|(1<<(PostgreSQLParserUNNEST-608))|(1<<(PostgreSQLParserUNTIL-608))|(1<<(PostgreSQLParserUPDATE-608))|(1<<(PostgreSQLParserUPPER-608))|(1<<(PostgreSQLParserUSAGE-608))|(1<<(PostgreSQLParserUSER-608))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CATALOG-608))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CODE-608))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_NAME-608))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA-608))|(1<<(PostgreSQLParserUSING-608))|(1<<(PostgreSQLParserVACUUM-608))|(1<<(PostgreSQLParserVALID-608))|(1<<(PostgreSQLParserVALIDATE-608))|(1<<(PostgreSQLParserVALIDATOR-608))|(1<<(PostgreSQLParserVALUE-608))|(1<<(PostgreSQLParserVALUES-608))|(1<<(PostgreSQLParserVAR_POP-608))|(1<<(PostgreSQLParserVAR_SAMP-608))|(1<<(PostgreSQLParserVARCHAR-608))|(1<<(PostgreSQLParserVARIABLE-608))|(1<<(PostgreSQLParserVARIADIC-608))|(1<<(PostgreSQLParserVARYING-608))|(1<<(PostgreSQLParserVERBOSE-608)))) != 0) || (((_la-640)&-(0x1f+1)) == 0 && ((1<<uint((_la-640)))&((1<<(PostgreSQLParserVIEW-640))|(1<<(PostgreSQLParserVOLATILE-640))|(1<<(PostgreSQLParserWHEN-640))|(1<<(PostgreSQLParserWHENEVER-640))|(1<<(PostgreSQLParserWHERE-640))|(1<<(PostgreSQLParserWIDTH_BUCKET-640))|(1<<(PostgreSQLParserWINDOW-640))|(1<<(PostgreSQLParserWITH-640))|(1<<(PostgreSQLParserWITHIN-640))|(1<<(PostgreSQLParserWITHOUT-640))|(1<<(PostgreSQLParserWORK-640))|(1<<(PostgreSQLParserWRITE-640))|(1<<(PostgreSQLParserYAML-640))|(1<<(PostgreSQLParserYEAR-640))|(1<<(PostgreSQLParserYES-640))|(1<<(PostgreSQLParserZONE-640))|(1<<(PostgreSQLParserSUPERUSER-640))|(1<<(PostgreSQLParserNOSUPERUSER-640))|(1<<(PostgreSQLParserCREATEROLE-640))|(1<<(PostgreSQLParserNOCREATEROLE-640))|(1<<(PostgreSQLParserINHERIT-640))|(1<<(PostgreSQLParserNOINHERIT-640))|(1<<(PostgreSQLParserLOGIN-640))|(1<<(PostgreSQLParserNOLOGIN-640))|(1<<(PostgreSQLParserREPLICATION-640))|(1<<(PostgreSQLParserNOREPLICATION-640))|(1<<(PostgreSQLParserBYPASSRLS-640))|(1<<(PostgreSQLParserNOBYPASSRLS-640))|(1<<(PostgreSQLParserSFUNC-640))|(1<<(PostgreSQLParserSTYPE-640))|(1<<(PostgreSQLParserSSPACE-640))|(1<<(PostgreSQLParserFINALFUNC-640)))) != 0) || (((_la-672)&-(0x1f+1)) == 0 && ((1<<uint((_la-672)))&((1<<(PostgreSQLParserFINALFUNC_EXTRA-672))|(1<<(PostgreSQLParserCOMBINEFUNC-672))|(1<<(PostgreSQLParserSERIALFUNC-672))|(1<<(PostgreSQLParserDESERIALFUNC-672))|(1<<(PostgreSQLParserINITCOND-672))|(1<<(PostgreSQLParserMSFUNC-672))|(1<<(PostgreSQLParserMINVFUNC-672))|(1<<(PostgreSQLParserMSTYPE-672))|(1<<(PostgreSQLParserMSSPACE-672))|(1<<(PostgreSQLParserMFINALFUNC-672))|(1<<(PostgreSQLParserMFINALFUNC_EXTRA-672))|(1<<(PostgreSQLParserMINITCOND-672))|(1<<(PostgreSQLParserSORTOP-672))|(1<<(PostgreSQLParserPARALLEL-672))|(1<<(PostgreSQLParserHYPOTHETICAL-672))|(1<<(PostgreSQLParserSAFE-672))|(1<<(PostgreSQLParserRESTRICTED-672))|(1<<(PostgreSQLParserUNSAFE-672))|(1<<(PostgreSQLParserBASETYPE-672))|(1<<(PostgreSQLParserIF-672))|(1<<(PostgreSQLParserLOCALE-672))|(1<<(PostgreSQLParserLC_COLLATE-672))|(1<<(PostgreSQLParserLC_CTYPE-672))|(1<<(PostgreSQLParserPROVIDER-672))|(1<<(PostgreSQLParserVERSION-672))|(1<<(PostgreSQLParserALLOW_CONNECTIONS-672))|(1<<(PostgreSQLParserIS_TEMPLATE-672))|(1<<(PostgreSQLParserEVENT-672))|(1<<(PostgreSQLParserWRAPPER-672))|(1<<(PostgreSQLParserSERVER-672))|(1<<(PostgreSQLParserBTREE-672))|(1<<(PostgreSQLParserHASH_-672)))) != 0) || (((_la-704)&-(0x1f+1)) == 0 && ((1<<uint((_la-704)))&((1<<(PostgreSQLParserGIST-704))|(1<<(PostgreSQLParserSPGIST-704))|(1<<(PostgreSQLParserGIN-704))|(1<<(PostgreSQLParserBRIN-704))|(1<<(PostgreSQLParserCONCURRENTLY-704))|(1<<(PostgreSQLParserINLINE-704))|(1<<(PostgreSQLParserMATERIALIZED-704))|(1<<(PostgreSQLParserLEFTARG-704))|(1<<(PostgreSQLParserRIGHTARG-704))|(1<<(PostgreSQLParserCOMMUTATOR-704))|(1<<(PostgreSQLParserNEGATOR-704))|(1<<(PostgreSQLParserHASHES-704))|(1<<(PostgreSQLParserMERGES-704))|(1<<(PostgreSQLParserFAMILY-704))|(1<<(PostgreSQLParserPOLICY-704))|(1<<(PostgreSQLParserOWNED-704))|(1<<(PostgreSQLParserABSTIME-704))|(1<<(PostgreSQLParserBIGSERIAL-704))|(1<<(PostgreSQLParserBIT_VARYING-704))|(1<<(PostgreSQLParserBOOL-704))|(1<<(PostgreSQLParserBOX-704))|(1<<(PostgreSQLParserBYTEA-704))|(1<<(PostgreSQLParserCHARACTER_VARYING-704))|(1<<(PostgreSQLParserCIDR-704))|(1<<(PostgreSQLParserCIRCLE-704))|(1<<(PostgreSQLParserFLOAT4-704))|(1<<(PostgreSQLParserFLOAT8-704))|(1<<(PostgreSQLParserINET-704))|(1<<(PostgreSQLParserINT2-704))|(1<<(PostgreSQLParserINT4-704))|(1<<(PostgreSQLParserINT8-704))|(1<<(PostgreSQLParserJSON-704)))) != 0) || (((_la-736)&-(0x1f+1)) == 0 && ((1<<uint((_la-736)))&((1<<(PostgreSQLParserJSONB-736))|(1<<(PostgreSQLParserLINE-736))|(1<<(PostgreSQLParserLSEG-736))|(1<<(PostgreSQLParserMACADDR-736))|(1<<(PostgreSQLParserMACADDR8-736))|(1<<(PostgreSQLParserMONEY-736))|(1<<(PostgreSQLParserPG_LSN-736))|(1<<(PostgreSQLParserPOINT-736))|(1<<(PostgreSQLParserPOLYGON-736))|(1<<(PostgreSQLParserRELTIME-736))|(1<<(PostgreSQLParserSERIAL-736))|(1<<(PostgreSQLParserSERIAL2-736))|(1<<(PostgreSQLParserSERIAL4-736))|(1<<(PostgreSQLParserSERIAL8-736))|(1<<(PostgreSQLParserSMALLSERIAL-736))|(1<<(PostgreSQLParserSTSTEM-736))|(1<<(PostgreSQLParserTEXT-736))|(1<<(PostgreSQLParserTIMESTAMPTZ-736))|(1<<(PostgreSQLParserTIMETZ-736))|(1<<(PostgreSQLParserTSQUERY-736))|(1<<(PostgreSQLParserTSVECTOR-736))|(1<<(PostgreSQLParserTXID_SNAPSHOT-736))|(1<<(PostgreSQLParserUUID-736))|(1<<(PostgreSQLParserVARBIT-736))|(1<<(PostgreSQLParserXML-736))|(1<<(PostgreSQLParserCOMMA-736))|(1<<(PostgreSQLParserCOLON-736))|(1<<(PostgreSQLParserCOLON_COLON-736))|(1<<(PostgreSQLParserDOLLAR_DOLLAR-736))|(1<<(PostgreSQLParserSTAR-736))|(1<<(PostgreSQLParserOPEN_PAREN-736)))) != 0) || (((_la-768)&-(0x1f+1)) == 0 && ((1<<uint((_la-768)))&((1<<(PostgreSQLParserCLOSE_PAREN-768))|(1<<(PostgreSQLParserOPEN_BRACKET-768))|(1<<(PostgreSQLParserCLOSE_BRACKET-768))|(1<<(PostgreSQLParserBIT_STRING-768))|(1<<(PostgreSQLParserREGEX_STRING-768))|(1<<(PostgreSQLParserNUMERIC_LITERAL-768))|(1<<(PostgreSQLParserINTEGER_LITERAL-768))|(1<<(PostgreSQLParserHEX_INTEGER_LITERAL-768))|(1<<(PostgreSQLParserDOT-768))|(1<<(PostgreSQLParserSINGLEQ_STRING_LITERAL-768))|(1<<(PostgreSQLParserDOUBLEQ_STRING_LITERAL-768))|(1<<(PostgreSQLParserIDENTIFIER-768))|(1<<(PostgreSQLParserDOLLAR_DEC-768))|(1<<(PostgreSQLParserIDENTIFIER_UNICODE-768))|(1<<(PostgreSQLParserAMP-768))|(1<<(PostgreSQLParserAMP_AMP-768))|(1<<(PostgreSQLParserAMP_LT-768))|(1<<(PostgreSQLParserAT_AT-768))|(1<<(PostgreSQLParserAT_GT-768))|(1<<(PostgreSQLParserAT_SIGN-768))|(1<<(PostgreSQLParserBANG-768))|(1<<(PostgreSQLParserBANG_BANG-768))|(1<<(PostgreSQLParserBANG_EQUAL-768))|(1<<(PostgreSQLParserCARET-768))|(1<<(PostgreSQLParserEQUAL-768))|(1<<(PostgreSQLParserEQUAL_GT-768))|(1<<(PostgreSQLParserGT-768))|(1<<(PostgreSQLParserGTE-768))|(1<<(PostgreSQLParserGT_GT-768))|(1<<(PostgreSQLParserHASH-768))|(1<<(PostgreSQLParserHASH_EQ-768))|(1<<(PostgreSQLParserHASH_GT-768)))) != 0) || (((_la-800)&-(0x1f+1)) == 0 && ((1<<uint((_la-800)))&((1<<(PostgreSQLParserHASH_GT_GT-800))|(1<<(PostgreSQLParserHASH_HASH-800))|(1<<(PostgreSQLParserHYPHEN_GT-800))|(1<<(PostgreSQLParserHYPHEN_GT_GT-800))|(1<<(PostgreSQLParserHYPHEN_PIPE_HYPHEN-800))|(1<<(PostgreSQLParserLT-800))|(1<<(PostgreSQLParserLTE-800))|(1<<(PostgreSQLParserLT_AT-800))|(1<<(PostgreSQLParserLT_CARET-800))|(1<<(PostgreSQLParserLT_GT-800))|(1<<(PostgreSQLParserLT_HYPHEN_GT-800))|(1<<(PostgreSQLParserLT_LT-800))|(1<<(PostgreSQLParserLT_LT_EQ-800))|(1<<(PostgreSQLParserLT_QMARK_GT-800))|(1<<(PostgreSQLParserMINUS-800))|(1<<(PostgreSQLParserPERCENT-800))|(1<<(PostgreSQLParserPIPE-800))|(1<<(PostgreSQLParserPIPE_PIPE-800))|(1<<(PostgreSQLParserPIPE_PIPE_SLASH-800))|(1<<(PostgreSQLParserPIPE_SLASH-800))|(1<<(PostgreSQLParserPLUS-800))|(1<<(PostgreSQLParserQMARK-800))|(1<<(PostgreSQLParserQMARK_AMP-800))|(1<<(PostgreSQLParserQMARK_HASH-800))|(1<<(PostgreSQLParserQMARK_HYPHEN-800))|(1<<(PostgreSQLParserQMARK_PIPE-800))|(1<<(PostgreSQLParserSLASH-800))|(1<<(PostgreSQLParserTIL-800))|(1<<(PostgreSQLParserTIL_EQ-800))|(1<<(PostgreSQLParserTIL_GTE_TIL-800))|(1<<(PostgreSQLParserTIL_GT_TIL-800))|(1<<(PostgreSQLParserTIL_LTE_TIL-800)))) != 0) || (((_la-832)&-(0x1f+1)) == 0 && ((1<<uint((_la-832)))&((1<<(PostgreSQLParserTIL_LT_TIL-832))|(1<<(PostgreSQLParserTIL_STAR-832))|(1<<(PostgreSQLParserTIL_TIL-832))|(1<<(PostgreSQLParserSEMI-832))|(1<<(PostgreSQLParserUNLOGGED-832)))) != 0) {
			{
				p.SetState(4638)
				_la = p.GetTokenStream().LA(1)

				if _la <= 0 || _la == PostgreSQLParserDOLLAR {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

			p.SetState(4641)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4643)
			p.Match(PostgreSQLParserDOLLAR)
		}
		{
			p.SetState(4644)
			p.identifier(0)
		}
		{
			p.SetState(4645)
			p.Match(PostgreSQLParserDOLLAR)
		}

	case 16:
		{
			p.SetState(4647)
			p.bool_expr(0)
		}

	case 17:
		{
			p.SetState(4648)
			p.Values_stmt()
		}

	case 18:
		{
			p.SetState(4649)
			p.Expr_list()
		}

	case 19:
		{
			p.SetState(4650)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(4651)
			p.expr(0)
		}
		{
			p.SetState(4652)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case 20:
		{
			p.SetState(4654)
			p.Type_name()
		}
		{
			p.SetState(4655)
			p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)
		}

	case 21:
		{
			p.SetState(4657)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ExprContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !((((_la-787)&-(0x1f+1)) == 0 && ((1<<uint((_la-787)))&((1<<(PostgreSQLParserAT_SIGN-787))|(1<<(PostgreSQLParserBANG_BANG-787))|(1<<(PostgreSQLParserMINUS-787)))) != 0) || _la == PostgreSQLParserPLUS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ExprContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4658)
			p.expr(31)
		}

	case 22:
		{
			p.SetState(4659)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ExprContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserQMARK_HYPHEN || _la == PostgreSQLParserTIL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ExprContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4660)
			p.expr(30)
		}

	case 23:
		{
			p.SetState(4661)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ExprContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserALL || _la == PostgreSQLParserNOT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ExprContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4662)
			p.expr(17)
		}

	case 24:
		{
			p.SetState(4663)
			p.Func_call()
		}

	case 25:
		{
			p.SetState(4664)
			p.identifier(0)
		}

	case 26:
		{
			p.SetState(4665)
			p.Match(PostgreSQLParserCAST)
		}
		{
			p.SetState(4666)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(4667)
			p.expr(0)
		}
		{
			p.SetState(4668)
			p.Match(PostgreSQLParserAS)
		}
		{
			p.SetState(4669)
			p.Data_type()
		}
		{
			p.SetState(4670)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case 27:
		{
			p.SetState(4672)
			p.Correlation_name()
		}
		{
			p.SetState(4673)
			p.Match(PostgreSQLParserDOT)
		}
		{
			p.SetState(4674)
			p.Column_name()
		}

	case 28:
		{
			p.SetState(4676)
			p.Case_expr()
		}

	case 29:
		{
			p.SetState(4677)
			p.Data_type()
		}
		{
			p.SetState(4678)
			p.expr(9)
		}

	case 30:
		{
			p.SetState(4680)
			p.Aggregate()
		}

	case 31:
		{
			p.SetState(4681)
			p.Array_cons_expr()
		}

	case 32:
		{
			p.SetState(4682)
			p.Match(PostgreSQLParserEXISTS)
		}
		{
			p.SetState(4683)
			p.expr(3)
		}

	case 33:
		{
			p.SetState(4684)
			p.Match(PostgreSQLParserDOLLAR_DEC)
		}

	case 34:
		{
			p.SetState(4685)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(4686)
			p.Select_stmt()
		}
		{
			p.SetState(4687)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4794)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 560, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(4792)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 559, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_expr)
				p.SetState(4691)

				if !(p.Precpred(p.GetParserRuleContext(), 28)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 28)", ""))
				}
				{
					p.SetState(4692)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExprContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-791)&-(0x1f+1)) == 0 && ((1<<uint((_la-791)))&((1<<(PostgreSQLParserCARET-791))|(1<<(PostgreSQLParserPIPE_PIPE_SLASH-791))|(1<<(PostgreSQLParserPIPE_SLASH-791)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExprContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(4693)
					p.expr(29)
				}

			case 2:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_expr)
				p.SetState(4694)

				if !(p.Precpred(p.GetParserRuleContext(), 27)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 27)", ""))
				}
				{
					p.SetState(4695)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExprContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == PostgreSQLParserSTAR || _la == PostgreSQLParserPERCENT || _la == PostgreSQLParserSLASH) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExprContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(4696)
					p.expr(28)
				}

			case 3:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_expr)
				p.SetState(4697)

				if !(p.Precpred(p.GetParserRuleContext(), 26)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 26)", ""))
				}
				{
					p.SetState(4698)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExprContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == PostgreSQLParserMINUS || _la == PostgreSQLParserPLUS) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExprContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(4699)
					p.expr(27)
				}

			case 4:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_expr)
				p.SetState(4700)

				if !(p.Precpred(p.GetParserRuleContext(), 25)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 25)", ""))
				}
				{
					p.SetState(4701)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExprContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == PostgreSQLParserAND || _la == PostgreSQLParserNOT || _la == PostgreSQLParserOR || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(PostgreSQLParserAMP-782))|(1<<(PostgreSQLParserAMP_AMP-782))|(1<<(PostgreSQLParserAMP_LT-782))|(1<<(PostgreSQLParserAT_AT-782))|(1<<(PostgreSQLParserAT_GT-782))|(1<<(PostgreSQLParserEQUAL_GT-782))|(1<<(PostgreSQLParserGT_GT-782))|(1<<(PostgreSQLParserHASH-782))|(1<<(PostgreSQLParserHASH_EQ-782))|(1<<(PostgreSQLParserHASH_GT-782))|(1<<(PostgreSQLParserHASH_GT_GT-782))|(1<<(PostgreSQLParserHASH_HASH-782))|(1<<(PostgreSQLParserHYPHEN_GT-782))|(1<<(PostgreSQLParserHYPHEN_GT_GT-782))|(1<<(PostgreSQLParserHYPHEN_PIPE_HYPHEN-782))|(1<<(PostgreSQLParserLT_AT-782))|(1<<(PostgreSQLParserLT_CARET-782))|(1<<(PostgreSQLParserLT_HYPHEN_GT-782))|(1<<(PostgreSQLParserLT_LT-782))|(1<<(PostgreSQLParserLT_LT_EQ-782))|(1<<(PostgreSQLParserLT_QMARK_GT-782)))) != 0) || (((_la-816)&-(0x1f+1)) == 0 && ((1<<uint((_la-816)))&((1<<(PostgreSQLParserPIPE-816))|(1<<(PostgreSQLParserPIPE_PIPE-816))|(1<<(PostgreSQLParserQMARK-816))|(1<<(PostgreSQLParserQMARK_AMP-816))|(1<<(PostgreSQLParserQMARK_HASH-816))|(1<<(PostgreSQLParserQMARK_PIPE-816))|(1<<(PostgreSQLParserTIL-816))|(1<<(PostgreSQLParserTIL_EQ-816))|(1<<(PostgreSQLParserTIL_GTE_TIL-816))|(1<<(PostgreSQLParserTIL_GT_TIL-816))|(1<<(PostgreSQLParserTIL_LTE_TIL-816))|(1<<(PostgreSQLParserTIL_LT_TIL-816))|(1<<(PostgreSQLParserTIL_STAR-816))|(1<<(PostgreSQLParserTIL_TIL-816)))) != 0)) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExprContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(4702)
					p.expr(26)
				}

			case 5:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_expr)
				p.SetState(4703)

				if !(p.Precpred(p.GetParserRuleContext(), 24)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 24)", ""))
				}
				p.SetState(4707)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case PostgreSQLParserNOT:
					{
						p.SetState(4704)
						p.Match(PostgreSQLParserNOT)
					}
					{
						p.SetState(4705)
						p.Match(PostgreSQLParserLIKE)
					}

				case PostgreSQLParserLIKE:
					{
						p.SetState(4706)
						p.Match(PostgreSQLParserLIKE)
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}
				{
					p.SetState(4709)
					p.expr(25)
				}

			case 6:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_expr)
				p.SetState(4710)

				if !(p.Precpred(p.GetParserRuleContext(), 23)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 23)", ""))
				}
				p.SetState(4712)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == PostgreSQLParserNOT {
					{
						p.SetState(4711)
						p.Match(PostgreSQLParserNOT)
					}

				}
				{
					p.SetState(4714)
					p.Match(PostgreSQLParserBETWEEN)
				}
				{
					p.SetState(4715)
					p.expr(0)
				}
				{
					p.SetState(4716)
					p.Match(PostgreSQLParserAND)
				}
				{
					p.SetState(4717)
					p.expr(24)
				}

			case 7:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_expr)
				p.SetState(4719)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
				}
				{
					p.SetState(4720)
					p.Match(PostgreSQLParserIN)
				}
				{
					p.SetState(4721)
					p.expr(23)
				}

			case 8:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_expr)
				p.SetState(4722)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
				}
				{
					p.SetState(4723)
					p.Match(PostgreSQLParserIN)
				}
				{
					p.SetState(4724)
					p.Match(PostgreSQLParserNOT)
				}
				{
					p.SetState(4725)
					p.expr(22)
				}

			case 9:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_expr)
				p.SetState(4726)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
				}
				{
					p.SetState(4727)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExprContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-790)&-(0x1f+1)) == 0 && ((1<<uint((_la-790)))&((1<<(PostgreSQLParserBANG_EQUAL-790))|(1<<(PostgreSQLParserEQUAL-790))|(1<<(PostgreSQLParserGT-790))|(1<<(PostgreSQLParserGTE-790))|(1<<(PostgreSQLParserLT-790))|(1<<(PostgreSQLParserLTE-790))|(1<<(PostgreSQLParserLT_GT-790)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExprContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(4728)
					p.expr(21)
				}

			case 10:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_expr)
				p.SetState(4729)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
				}
				{
					p.SetState(4730)
					p.Match(PostgreSQLParserIS)
				}
				p.SetState(4732)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == PostgreSQLParserNOT {
					{
						p.SetState(4731)
						p.Match(PostgreSQLParserNOT)
					}

				}
				{
					p.SetState(4734)
					p.Match(PostgreSQLParserDISTINCT)
				}
				{
					p.SetState(4735)
					p.Match(PostgreSQLParserFROM)
				}
				{
					p.SetState(4736)
					p.expr(19)
				}

			case 11:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_expr)
				p.SetState(4737)

				if !(p.Precpred(p.GetParserRuleContext(), 34)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 34)", ""))
				}
				{
					p.SetState(4738)
					p.Match(PostgreSQLParserOPEN_BRACKET)
				}
				{
					p.SetState(4739)
					p.expr(0)
				}
				{
					p.SetState(4740)
					p.Match(PostgreSQLParserCLOSE_BRACKET)
				}

			case 12:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_expr)
				p.SetState(4742)

				if !(p.Precpred(p.GetParserRuleContext(), 29)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 29)", ""))
				}
				{
					p.SetState(4743)

					var _m = p.Match(PostgreSQLParserBANG)

					localctx.(*ExprContext).op = _m
				}

			case 13:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_expr)
				p.SetState(4744)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
				}
				{
					p.SetState(4745)

					var _m = p.Match(PostgreSQLParserIS)

					localctx.(*ExprContext).op = _m
				}
				p.SetState(4750)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 553, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(4746)
						p.bool_expr(0)
					}

				case 2:
					{
						p.SetState(4747)
						p.Match(PostgreSQLParserNULL)
					}

				case 3:
					{
						p.SetState(4748)
						p.Match(PostgreSQLParserNOT)
					}
					{
						p.SetState(4749)
						p.Match(PostgreSQLParserNULL)
					}

				}

			case 14:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_expr)
				p.SetState(4752)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				p.SetState(4762)
				p.GetErrorHandler().Sync(p)
				_alt = 1
				for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					switch _alt {
					case 1:
						{
							p.SetState(4753)
							p.Match(PostgreSQLParserOPEN_BRACKET)
						}
						p.SetState(4755)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PostgreSQLParserWHITESPACE)|(1<<PostgreSQLParserA_)|(1<<PostgreSQLParserABORT)|(1<<PostgreSQLParserABS)|(1<<PostgreSQLParserABSOLUTE)|(1<<PostgreSQLParserACCESS)|(1<<PostgreSQLParserACTION)|(1<<PostgreSQLParserADA)|(1<<PostgreSQLParserADD)|(1<<PostgreSQLParserADMIN)|(1<<PostgreSQLParserAFTER)|(1<<PostgreSQLParserAGGREGATE)|(1<<PostgreSQLParserALL)|(1<<PostgreSQLParserALLOCATE)|(1<<PostgreSQLParserALSO)|(1<<PostgreSQLParserALTER)|(1<<PostgreSQLParserALWAYS)|(1<<PostgreSQLParserANY)|(1<<PostgreSQLParserARE)|(1<<PostgreSQLParserARRAY)|(1<<PostgreSQLParserASENSITIVE)|(1<<PostgreSQLParserASSERTION)|(1<<PostgreSQLParserASSIGNMENT))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(PostgreSQLParserAT-33))|(1<<(PostgreSQLParserATOMIC-33))|(1<<(PostgreSQLParserATTRIBUTE-33))|(1<<(PostgreSQLParserATTRIBUTES-33))|(1<<(PostgreSQLParserAVG-33))|(1<<(PostgreSQLParserBACKWARD-33))|(1<<(PostgreSQLParserBEFORE-33))|(1<<(PostgreSQLParserBEGIN-33))|(1<<(PostgreSQLParserBERNOULLI-33))|(1<<(PostgreSQLParserBETWEEN-33))|(1<<(PostgreSQLParserBIGINT-33))|(1<<(PostgreSQLParserBIT-33))|(1<<(PostgreSQLParserBIT_LENGTH-33))|(1<<(PostgreSQLParserBLOB-33))|(1<<(PostgreSQLParserBOOLEAN-33))|(1<<(PostgreSQLParserBREADTH-33))|(1<<(PostgreSQLParserBY-33))|(1<<(PostgreSQLParserC_-33))|(1<<(PostgreSQLParserCACHE-33))|(1<<(PostgreSQLParserCALL-33))|(1<<(PostgreSQLParserCALLED-33))|(1<<(PostgreSQLParserCARDINALITY-33))|(1<<(PostgreSQLParserCASCADE-33))|(1<<(PostgreSQLParserCASCADED-33))|(1<<(PostgreSQLParserCASE-33))|(1<<(PostgreSQLParserCAST-33))|(1<<(PostgreSQLParserCATALOG-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PostgreSQLParserCATALOG_NAME-65))|(1<<(PostgreSQLParserCEIL-65))|(1<<(PostgreSQLParserCEILING-65))|(1<<(PostgreSQLParserCHAIN-65))|(1<<(PostgreSQLParserCHAR-65))|(1<<(PostgreSQLParserCHAR_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER-65))|(1<<(PostgreSQLParserCHARACTER_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER_SET_CATALOG-65))|(1<<(PostgreSQLParserCHARACTER_SET_NAME-65))|(1<<(PostgreSQLParserCHARACTER_SET_SCHEMA-65))|(1<<(PostgreSQLParserCHARACTERISTICS-65))|(1<<(PostgreSQLParserCHARACTERS-65))|(1<<(PostgreSQLParserCHECKPOINT-65))|(1<<(PostgreSQLParserCLASS-65))|(1<<(PostgreSQLParserCLASS_ORIGIN-65))|(1<<(PostgreSQLParserCLOB-65))|(1<<(PostgreSQLParserCLOSE-65))|(1<<(PostgreSQLParserCLUSTER-65))|(1<<(PostgreSQLParserCOALESCE-65))|(1<<(PostgreSQLParserCOBOL-65))|(1<<(PostgreSQLParserCOLLATION_CATALOG-65))|(1<<(PostgreSQLParserCOLLATION_NAME-65))|(1<<(PostgreSQLParserCOLLATION_SCHEMA-65))|(1<<(PostgreSQLParserCOLLECT-65))|(1<<(PostgreSQLParserCOLUMN_NAME-65))|(1<<(PostgreSQLParserCOMMAND_FUNCTION-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(PostgreSQLParserCOMMAND_FUNCTION_CODE-97))|(1<<(PostgreSQLParserCOMMENT-97))|(1<<(PostgreSQLParserCOMMIT-97))|(1<<(PostgreSQLParserCOMMITTED-97))|(1<<(PostgreSQLParserCONDITION-97))|(1<<(PostgreSQLParserCONDITION_NUMBER-97))|(1<<(PostgreSQLParserCONNECT-97))|(1<<(PostgreSQLParserCONNECTION-97))|(1<<(PostgreSQLParserCONNECTION_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_CATALOG-97))|(1<<(PostgreSQLParserCONSTRAINT_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_SCHEMA-97))|(1<<(PostgreSQLParserCONSTRAINTS-97))|(1<<(PostgreSQLParserCONSTRUCTOR-97))|(1<<(PostgreSQLParserCONTAINS-97))|(1<<(PostgreSQLParserCONTINUE-97))|(1<<(PostgreSQLParserCONVERSION-97))|(1<<(PostgreSQLParserCONVERT-97))|(1<<(PostgreSQLParserCOPY-97))|(1<<(PostgreSQLParserCORR-97))|(1<<(PostgreSQLParserCORRESPONDING-97))|(1<<(PostgreSQLParserCOUNT-97))|(1<<(PostgreSQLParserCOVAR_POP-97))|(1<<(PostgreSQLParserCOVAR_SAMP-97)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(PostgreSQLParserCSV-131))|(1<<(PostgreSQLParserCUBE-131))|(1<<(PostgreSQLParserCUME_DIST-131))|(1<<(PostgreSQLParserCURRENT-131))|(1<<(PostgreSQLParserCURRENT_DATE-131))|(1<<(PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP-131))|(1<<(PostgreSQLParserCURRENT_PATH-131))|(1<<(PostgreSQLParserCURRENT_ROLE-131))|(1<<(PostgreSQLParserCURRENT_TIME-131))|(1<<(PostgreSQLParserCURRENT_TIMESTAMP-131))|(1<<(PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE-131))|(1<<(PostgreSQLParserCURRENT_USER-131))|(1<<(PostgreSQLParserCURSOR-131))|(1<<(PostgreSQLParserCURSOR_NAME-131))|(1<<(PostgreSQLParserCYCLE-131))|(1<<(PostgreSQLParserDATA-131))|(1<<(PostgreSQLParserDATABASE-131))|(1<<(PostgreSQLParserDATE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_CODE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_PRECISION-131))|(1<<(PostgreSQLParserDAY-131))|(1<<(PostgreSQLParserDEALLOCATE-131))|(1<<(PostgreSQLParserDEC-131))|(1<<(PostgreSQLParserDECIMAL-131))|(1<<(PostgreSQLParserDECLARE-131))|(1<<(PostgreSQLParserDEFAULT-131))|(1<<(PostgreSQLParserDEFAULTS-131))|(1<<(PostgreSQLParserDEFERRED-131))|(1<<(PostgreSQLParserDEFINED-131))|(1<<(PostgreSQLParserDEFINER-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(PostgreSQLParserDEGREE-163))|(1<<(PostgreSQLParserDELETE-163))|(1<<(PostgreSQLParserDELIMITER-163))|(1<<(PostgreSQLParserDELIMITERS-163))|(1<<(PostgreSQLParserDENSE_RANK-163))|(1<<(PostgreSQLParserDEPTH-163))|(1<<(PostgreSQLParserDEREF-163))|(1<<(PostgreSQLParserDERIVED-163))|(1<<(PostgreSQLParserDESCRIBE-163))|(1<<(PostgreSQLParserDESCRIPTOR-163))|(1<<(PostgreSQLParserDETERMINISTIC-163))|(1<<(PostgreSQLParserDIAGNOSTICS-163))|(1<<(PostgreSQLParserDICTIONARY-163))|(1<<(PostgreSQLParserDISCONNECT-163))|(1<<(PostgreSQLParserDISPATCH-163))|(1<<(PostgreSQLParserDOMAIN-163))|(1<<(PostgreSQLParserDOUBLE-163))|(1<<(PostgreSQLParserDYNAMIC-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION_CODE-163))|(1<<(PostgreSQLParserEACH-163))|(1<<(PostgreSQLParserELEMENT-163)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(PostgreSQLParserENCODING-197))|(1<<(PostgreSQLParserENCRYPTED-197))|(1<<(PostgreSQLParserEND-197))|(1<<(PostgreSQLParserEQUALS-197))|(1<<(PostgreSQLParserESCAPE-197))|(1<<(PostgreSQLParserEVERY-197))|(1<<(PostgreSQLParserEXCEPTION-197))|(1<<(PostgreSQLParserEXCLUDE-197))|(1<<(PostgreSQLParserEXCLUDING-197))|(1<<(PostgreSQLParserEXCLUSIVE-197))|(1<<(PostgreSQLParserEXEC-197))|(1<<(PostgreSQLParserEXECUTE-197))|(1<<(PostgreSQLParserEXISTS-197))|(1<<(PostgreSQLParserEXP-197))|(1<<(PostgreSQLParserEXPLAIN-197))|(1<<(PostgreSQLParserEXTENSION-197))|(1<<(PostgreSQLParserEXTERNAL-197))|(1<<(PostgreSQLParserEXTRACT-197))|(1<<(PostgreSQLParserFALSE-197))|(1<<(PostgreSQLParserFILTER-197))|(1<<(PostgreSQLParserFINAL-197))|(1<<(PostgreSQLParserFIRST-197))|(1<<(PostgreSQLParserFLOAT-197))|(1<<(PostgreSQLParserFLOOR-197))|(1<<(PostgreSQLParserFOLLOWING-197)))) != 0) || (((_la-229)&-(0x1f+1)) == 0 && ((1<<uint((_la-229)))&((1<<(PostgreSQLParserFORCE-229))|(1<<(PostgreSQLParserFORMAT-229))|(1<<(PostgreSQLParserFORTRAN-229))|(1<<(PostgreSQLParserFORWARD-229))|(1<<(PostgreSQLParserFOUND-229))|(1<<(PostgreSQLParserFREE-229))|(1<<(PostgreSQLParserFUNCTION-229))|(1<<(PostgreSQLParserFUSION-229))|(1<<(PostgreSQLParserG_-229))|(1<<(PostgreSQLParserGENERAL-229))|(1<<(PostgreSQLParserGENERATED-229))|(1<<(PostgreSQLParserGET-229))|(1<<(PostgreSQLParserGLOBAL-229))|(1<<(PostgreSQLParserGO-229))|(1<<(PostgreSQLParserGOTO-229))|(1<<(PostgreSQLParserGRANTED-229))|(1<<(PostgreSQLParserGREATEST-229))|(1<<(PostgreSQLParserGROUPING-229))|(1<<(PostgreSQLParserHANDLER-229))|(1<<(PostgreSQLParserHIERARCHY-229))|(1<<(PostgreSQLParserHOLD-229))|(1<<(PostgreSQLParserHOST-229))|(1<<(PostgreSQLParserHOUR-229))|(1<<(PostgreSQLParserIDENTITY-229))|(1<<(PostgreSQLParserIGNORE-229)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(PostgreSQLParserIMMEDIATE-262))|(1<<(PostgreSQLParserIMMUTABLE-262))|(1<<(PostgreSQLParserIMPLEMENTATION-262))|(1<<(PostgreSQLParserIMPLICIT-262))|(1<<(PostgreSQLParserINCLUDING-262))|(1<<(PostgreSQLParserINCREMENT-262))|(1<<(PostgreSQLParserINDEX-262))|(1<<(PostgreSQLParserINDICATOR-262))|(1<<(PostgreSQLParserINHERITS-262))|(1<<(PostgreSQLParserINOUT-262))|(1<<(PostgreSQLParserINPUT-262))|(1<<(PostgreSQLParserINSENSITIVE-262))|(1<<(PostgreSQLParserINSERT-262))|(1<<(PostgreSQLParserINSTANCE-262))|(1<<(PostgreSQLParserINSTANTIABLE-262))|(1<<(PostgreSQLParserINSTEAD-262))|(1<<(PostgreSQLParserINT-262))|(1<<(PostgreSQLParserINTEGER-262))|(1<<(PostgreSQLParserINTERSECTION-262))|(1<<(PostgreSQLParserINTERVAL-262))|(1<<(PostgreSQLParserINVOKER-262))|(1<<(PostgreSQLParserISOLATION-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(PostgreSQLParserK_-294))|(1<<(PostgreSQLParserKEY-294))|(1<<(PostgreSQLParserKEY_MEMBER-294))|(1<<(PostgreSQLParserKEY_TYPE-294))|(1<<(PostgreSQLParserLANGUAGE-294))|(1<<(PostgreSQLParserLARGE-294))|(1<<(PostgreSQLParserLAST-294))|(1<<(PostgreSQLParserLEAST-294))|(1<<(PostgreSQLParserLEFT-294))|(1<<(PostgreSQLParserLENGTH-294))|(1<<(PostgreSQLParserLEVEL-294))|(1<<(PostgreSQLParserLISTEN-294))|(1<<(PostgreSQLParserLN-294))|(1<<(PostgreSQLParserLOAD-294))|(1<<(PostgreSQLParserLOCAL-294))|(1<<(PostgreSQLParserLOCATION-294))|(1<<(PostgreSQLParserLOCATOR-294))|(1<<(PostgreSQLParserLOCK-294))|(1<<(PostgreSQLParserLOCKED-294))|(1<<(PostgreSQLParserLOWER-294))|(1<<(PostgreSQLParserM_-294))|(1<<(PostgreSQLParserMAP-294)))) != 0) || (((_la-327)&-(0x1f+1)) == 0 && ((1<<uint((_la-327)))&((1<<(PostgreSQLParserMATCH-327))|(1<<(PostgreSQLParserMATCHED-327))|(1<<(PostgreSQLParserMAX-327))|(1<<(PostgreSQLParserMAXVALUE-327))|(1<<(PostgreSQLParserMEMBER-327))|(1<<(PostgreSQLParserMERGE-327))|(1<<(PostgreSQLParserMESSAGE_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_OCTET_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_TEXT-327))|(1<<(PostgreSQLParserMETHOD-327))|(1<<(PostgreSQLParserMIN-327))|(1<<(PostgreSQLParserMINUTE-327))|(1<<(PostgreSQLParserMINVALUE-327))|(1<<(PostgreSQLParserMOD-327))|(1<<(PostgreSQLParserMODE-327))|(1<<(PostgreSQLParserMODIFIES-327))|(1<<(PostgreSQLParserMODULE-327))|(1<<(PostgreSQLParserMONTH-327))|(1<<(PostgreSQLParserMORE_-327))|(1<<(PostgreSQLParserMOVE-327))|(1<<(PostgreSQLParserMULTISET-327))|(1<<(PostgreSQLParserMUMPS-327))|(1<<(PostgreSQLParserNAME-327))|(1<<(PostgreSQLParserNAMES-327))|(1<<(PostgreSQLParserNATIONAL-327))|(1<<(PostgreSQLParserNCHAR-327))|(1<<(PostgreSQLParserNCLOB-327))|(1<<(PostgreSQLParserNESTING-327))|(1<<(PostgreSQLParserNEW-327)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(PostgreSQLParserNEXT-359))|(1<<(PostgreSQLParserNO-359))|(1<<(PostgreSQLParserNONE-359))|(1<<(PostgreSQLParserNORMALIZE-359))|(1<<(PostgreSQLParserNORMALIZED-359))|(1<<(PostgreSQLParserNOT-359))|(1<<(PostgreSQLParserNOTHING-359))|(1<<(PostgreSQLParserNOTIFY-359))|(1<<(PostgreSQLParserNOWAIT-359))|(1<<(PostgreSQLParserNULL-359))|(1<<(PostgreSQLParserNULLABLE-359))|(1<<(PostgreSQLParserNULLIF-359))|(1<<(PostgreSQLParserNULLS-359))|(1<<(PostgreSQLParserNUMBER-359))|(1<<(PostgreSQLParserNUMERIC-359))|(1<<(PostgreSQLParserOBJECT-359))|(1<<(PostgreSQLParserOCTET_LENGTH-359))|(1<<(PostgreSQLParserOCTETS-359))|(1<<(PostgreSQLParserOF-359))|(1<<(PostgreSQLParserOFF-359))|(1<<(PostgreSQLParserOIDS-359))|(1<<(PostgreSQLParserOLD-359))|(1<<(PostgreSQLParserOPEN-359))|(1<<(PostgreSQLParserOPERATOR-359))|(1<<(PostgreSQLParserOPTION-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(PostgreSQLParserOPTIONS-391))|(1<<(PostgreSQLParserORDERING-391))|(1<<(PostgreSQLParserORDINALITY-391))|(1<<(PostgreSQLParserOTHERS-391))|(1<<(PostgreSQLParserOUT-391))|(1<<(PostgreSQLParserOUTPUT-391))|(1<<(PostgreSQLParserOVER-391))|(1<<(PostgreSQLParserOVERLAY-391))|(1<<(PostgreSQLParserOVERRIDING-391))|(1<<(PostgreSQLParserOWNER-391))|(1<<(PostgreSQLParserPAD-391))|(1<<(PostgreSQLParserPARAMETER-391))|(1<<(PostgreSQLParserPARAMETER_MODE-391))|(1<<(PostgreSQLParserPARAMETER_NAME-391))|(1<<(PostgreSQLParserPARAMETER_ORDINAL_POSITION-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_CATALOG-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_NAME-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA-391))|(1<<(PostgreSQLParserPARTIAL-391))|(1<<(PostgreSQLParserPARTITION-391))|(1<<(PostgreSQLParserPASCAL-391))|(1<<(PostgreSQLParserPASSWORD-391))|(1<<(PostgreSQLParserPATH-391))|(1<<(PostgreSQLParserPERCENT_RANK-391))|(1<<(PostgreSQLParserPERCENTILE_CONT-391))|(1<<(PostgreSQLParserPERCENTILE_DISC-391)))) != 0) || (((_la-424)&-(0x1f+1)) == 0 && ((1<<uint((_la-424)))&((1<<(PostgreSQLParserPLAIN-424))|(1<<(PostgreSQLParserPLI-424))|(1<<(PostgreSQLParserPOSITION-424))|(1<<(PostgreSQLParserPOWER-424))|(1<<(PostgreSQLParserPRECEDING-424))|(1<<(PostgreSQLParserPRECISION-424))|(1<<(PostgreSQLParserPREPARE-424))|(1<<(PostgreSQLParserPRESERVE-424))|(1<<(PostgreSQLParserPRIOR-424))|(1<<(PostgreSQLParserPRIVILEGES-424))|(1<<(PostgreSQLParserPROCEDURAL-424))|(1<<(PostgreSQLParserPROCEDURE-424))|(1<<(PostgreSQLParserPUBLIC-424))|(1<<(PostgreSQLParserQUOTE-424))|(1<<(PostgreSQLParserRANGE-424))|(1<<(PostgreSQLParserRANK-424))|(1<<(PostgreSQLParserREAD-424))|(1<<(PostgreSQLParserREADS-424))|(1<<(PostgreSQLParserREAL-424))|(1<<(PostgreSQLParserRECHECK-424))|(1<<(PostgreSQLParserRECURSIVE-424))|(1<<(PostgreSQLParserREF-424))|(1<<(PostgreSQLParserREFERENCING-424)))) != 0) || (((_la-456)&-(0x1f+1)) == 0 && ((1<<uint((_la-456)))&((1<<(PostgreSQLParserREFRESH-456))|(1<<(PostgreSQLParserREGR_AVGX-456))|(1<<(PostgreSQLParserREGR_AVGY-456))|(1<<(PostgreSQLParserREGR_COUNT-456))|(1<<(PostgreSQLParserREGR_INTERCEPT-456))|(1<<(PostgreSQLParserREGR_SLOPE-456))|(1<<(PostgreSQLParserREGR_SXX-456))|(1<<(PostgreSQLParserREGR_SXY-456))|(1<<(PostgreSQLParserREGR_SYY-456))|(1<<(PostgreSQLParserREINDEX-456))|(1<<(PostgreSQLParserRELATIVE-456))|(1<<(PostgreSQLParserRELEASE-456))|(1<<(PostgreSQLParserRENAME-456))|(1<<(PostgreSQLParserREPEATABLE-456))|(1<<(PostgreSQLParserREPLACE-456))|(1<<(PostgreSQLParserRESET-456))|(1<<(PostgreSQLParserRESTART-456))|(1<<(PostgreSQLParserRESTRICT-456))|(1<<(PostgreSQLParserRESULT-456))|(1<<(PostgreSQLParserRETURN-456))|(1<<(PostgreSQLParserRETURNED_CARDINALITY-456))|(1<<(PostgreSQLParserRETURNED_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_OCTET_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_SQLSTATE-456))|(1<<(PostgreSQLParserRETURNS-456))|(1<<(PostgreSQLParserREVOKE-456))|(1<<(PostgreSQLParserRIGHT-456))|(1<<(PostgreSQLParserROLE-456))|(1<<(PostgreSQLParserROLLBACK-456)))) != 0) || (((_la-488)&-(0x1f+1)) == 0 && ((1<<uint((_la-488)))&((1<<(PostgreSQLParserROLLUP-488))|(1<<(PostgreSQLParserROUTINE-488))|(1<<(PostgreSQLParserROUTINE_CATALOG-488))|(1<<(PostgreSQLParserROUTINE_NAME-488))|(1<<(PostgreSQLParserROUTINE_SCHEMA-488))|(1<<(PostgreSQLParserROW-488))|(1<<(PostgreSQLParserROW_COUNT-488))|(1<<(PostgreSQLParserROW_NUMBER-488))|(1<<(PostgreSQLParserROWS-488))|(1<<(PostgreSQLParserRULE-488))|(1<<(PostgreSQLParserSAVEPOINT-488))|(1<<(PostgreSQLParserSCALE-488))|(1<<(PostgreSQLParserSCHEMA-488))|(1<<(PostgreSQLParserSCHEMA_NAME-488))|(1<<(PostgreSQLParserSCOPE-488))|(1<<(PostgreSQLParserSCOPE_CATALOG-488))|(1<<(PostgreSQLParserSCOPE_NAME-488))|(1<<(PostgreSQLParserSCOPE_SCHEMA-488))|(1<<(PostgreSQLParserSCROLL-488))|(1<<(PostgreSQLParserSEARCH-488))|(1<<(PostgreSQLParserSECOND-488))|(1<<(PostgreSQLParserSECTION-488))|(1<<(PostgreSQLParserSECURITY-488))|(1<<(PostgreSQLParserSELF-488))|(1<<(PostgreSQLParserSENSITIVE-488))|(1<<(PostgreSQLParserSEQUENCE-488))|(1<<(PostgreSQLParserSEQUENCES-488))|(1<<(PostgreSQLParserSERIALIZABLE-488))|(1<<(PostgreSQLParserSERVER_NAME-488))|(1<<(PostgreSQLParserSESSION-488)))) != 0) || (((_la-520)&-(0x1f+1)) == 0 && ((1<<uint((_la-520)))&((1<<(PostgreSQLParserSET-520))|(1<<(PostgreSQLParserSETOF-520))|(1<<(PostgreSQLParserSETS-520))|(1<<(PostgreSQLParserSHARE-520))|(1<<(PostgreSQLParserSHOW-520))|(1<<(PostgreSQLParserSIMPLE-520))|(1<<(PostgreSQLParserSIZE-520))|(1<<(PostgreSQLParserSMALLINT-520))|(1<<(PostgreSQLParserSOME-520))|(1<<(PostgreSQLParserSOURCE-520))|(1<<(PostgreSQLParserSPACE-520))|(1<<(PostgreSQLParserSPECIFIC-520))|(1<<(PostgreSQLParserSPECIFIC_NAME-520))|(1<<(PostgreSQLParserSPECIFICTYPE-520))|(1<<(PostgreSQLParserSQL-520))|(1<<(PostgreSQLParserSQLCODE-520))|(1<<(PostgreSQLParserSQLERROR-520))|(1<<(PostgreSQLParserSQLEXCEPTION-520))|(1<<(PostgreSQLParserSQLSTATE-520))|(1<<(PostgreSQLParserSQLWARNING-520))|(1<<(PostgreSQLParserSQRT-520))|(1<<(PostgreSQLParserSTABLE-520))|(1<<(PostgreSQLParserSTART-520))|(1<<(PostgreSQLParserSTATE-520))|(1<<(PostgreSQLParserSTATEMENT-520))|(1<<(PostgreSQLParserSTATIC-520))|(1<<(PostgreSQLParserSTATISTICS-520))|(1<<(PostgreSQLParserSTDDEV_POP-520))|(1<<(PostgreSQLParserSTDDEV_SAMP-520)))) != 0) || (((_la-552)&-(0x1f+1)) == 0 && ((1<<uint((_la-552)))&((1<<(PostgreSQLParserSTDIN-552))|(1<<(PostgreSQLParserSTDOUT-552))|(1<<(PostgreSQLParserSTORAGE-552))|(1<<(PostgreSQLParserSTRICT-552))|(1<<(PostgreSQLParserSTRUCTURE-552))|(1<<(PostgreSQLParserSTYLE-552))|(1<<(PostgreSQLParserSUBCLASS_ORIGIN-552))|(1<<(PostgreSQLParserSUBMULTISET-552))|(1<<(PostgreSQLParserSUBSTRING-552))|(1<<(PostgreSQLParserSUM-552))|(1<<(PostgreSQLParserSYSID-552))|(1<<(PostgreSQLParserSYSTEM-552))|(1<<(PostgreSQLParserSYSTEM_USER-552))|(1<<(PostgreSQLParserTABLE_NAME-552))|(1<<(PostgreSQLParserTABLESPACE-552))|(1<<(PostgreSQLParserTEMP-552))|(1<<(PostgreSQLParserTEMPLATE-552))|(1<<(PostgreSQLParserTEMPORARY-552))|(1<<(PostgreSQLParserTIES-552))|(1<<(PostgreSQLParserTIME-552))|(1<<(PostgreSQLParserTIMESTAMP-552))|(1<<(PostgreSQLParserTIMEZONE_HOUR-552))|(1<<(PostgreSQLParserTIMEZONE_MINUTE-552)))) != 0) || (((_la-586)&-(0x1f+1)) == 0 && ((1<<uint((_la-586)))&((1<<(PostgreSQLParserTOP_LEVEL_COUNT-586))|(1<<(PostgreSQLParserTRANSACTION-586))|(1<<(PostgreSQLParserTRANSACTION_ACTIVE-586))|(1<<(PostgreSQLParserTRANSACTIONS_COMMITTED-586))|(1<<(PostgreSQLParserTRANSACTIONS_ROLLED_BACK-586))|(1<<(PostgreSQLParserTRANSFORM-586))|(1<<(PostgreSQLParserTRANSFORMS-586))|(1<<(PostgreSQLParserTRANSLATE-586))|(1<<(PostgreSQLParserTRANSLATION-586))|(1<<(PostgreSQLParserTREAT-586))|(1<<(PostgreSQLParserTRIGGER-586))|(1<<(PostgreSQLParserTRIGGER_CATALOG-586))|(1<<(PostgreSQLParserTRIGGER_NAME-586))|(1<<(PostgreSQLParserTRIGGER_SCHEMA-586))|(1<<(PostgreSQLParserTRIM-586))|(1<<(PostgreSQLParserTRUE-586))|(1<<(PostgreSQLParserTRUNCATE-586))|(1<<(PostgreSQLParserTRUSTED-586))|(1<<(PostgreSQLParserTYPE-586))|(1<<(PostgreSQLParserUESCAPE-586))|(1<<(PostgreSQLParserUNBOUNDED-586))|(1<<(PostgreSQLParserUNCOMMITTED-586))|(1<<(PostgreSQLParserUNDER-586))|(1<<(PostgreSQLParserUNENCRYPTED-586))|(1<<(PostgreSQLParserUNKNOWN-586))|(1<<(PostgreSQLParserUNLISTEN-586))|(1<<(PostgreSQLParserUNNAMED-586))|(1<<(PostgreSQLParserUNNEST-586))|(1<<(PostgreSQLParserUNTIL-586)))) != 0) || (((_la-618)&-(0x1f+1)) == 0 && ((1<<uint((_la-618)))&((1<<(PostgreSQLParserUPDATE-618))|(1<<(PostgreSQLParserUPPER-618))|(1<<(PostgreSQLParserUSAGE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CATALOG-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CODE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_NAME-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA-618))|(1<<(PostgreSQLParserVACUUM-618))|(1<<(PostgreSQLParserVALID-618))|(1<<(PostgreSQLParserVALIDATOR-618))|(1<<(PostgreSQLParserVALUE-618))|(1<<(PostgreSQLParserVALUES-618))|(1<<(PostgreSQLParserVAR_POP-618))|(1<<(PostgreSQLParserVAR_SAMP-618))|(1<<(PostgreSQLParserVARCHAR-618))|(1<<(PostgreSQLParserVARYING-618))|(1<<(PostgreSQLParserVIEW-618))|(1<<(PostgreSQLParserVOLATILE-618))|(1<<(PostgreSQLParserWHENEVER-618))|(1<<(PostgreSQLParserWIDTH_BUCKET-618))|(1<<(PostgreSQLParserWITH-618))|(1<<(PostgreSQLParserWITHIN-618))|(1<<(PostgreSQLParserWITHOUT-618)))) != 0) || (((_la-650)&-(0x1f+1)) == 0 && ((1<<uint((_la-650)))&((1<<(PostgreSQLParserWORK-650))|(1<<(PostgreSQLParserWRITE-650))|(1<<(PostgreSQLParserYEAR-650))|(1<<(PostgreSQLParserZONE-650)))) != 0) || (((_la-720)&-(0x1f+1)) == 0 && ((1<<uint((_la-720)))&((1<<(PostgreSQLParserABSTIME-720))|(1<<(PostgreSQLParserBIGSERIAL-720))|(1<<(PostgreSQLParserBIT_VARYING-720))|(1<<(PostgreSQLParserBOOL-720))|(1<<(PostgreSQLParserBOX-720))|(1<<(PostgreSQLParserBYTEA-720))|(1<<(PostgreSQLParserCHARACTER_VARYING-720))|(1<<(PostgreSQLParserCIDR-720))|(1<<(PostgreSQLParserCIRCLE-720))|(1<<(PostgreSQLParserFLOAT4-720))|(1<<(PostgreSQLParserFLOAT8-720))|(1<<(PostgreSQLParserINET-720))|(1<<(PostgreSQLParserINT2-720))|(1<<(PostgreSQLParserINT4-720))|(1<<(PostgreSQLParserINT8-720))|(1<<(PostgreSQLParserJSON-720))|(1<<(PostgreSQLParserJSONB-720))|(1<<(PostgreSQLParserLINE-720))|(1<<(PostgreSQLParserLSEG-720))|(1<<(PostgreSQLParserMACADDR-720))|(1<<(PostgreSQLParserMACADDR8-720))|(1<<(PostgreSQLParserMONEY-720))|(1<<(PostgreSQLParserPG_LSN-720))|(1<<(PostgreSQLParserPOINT-720))|(1<<(PostgreSQLParserPOLYGON-720))|(1<<(PostgreSQLParserRELTIME-720))|(1<<(PostgreSQLParserSERIAL-720))|(1<<(PostgreSQLParserSERIAL2-720))|(1<<(PostgreSQLParserSERIAL4-720))|(1<<(PostgreSQLParserSERIAL8-720))|(1<<(PostgreSQLParserSMALLSERIAL-720)))) != 0) || (((_la-752)&-(0x1f+1)) == 0 && ((1<<uint((_la-752)))&((1<<(PostgreSQLParserTEXT-752))|(1<<(PostgreSQLParserTIMESTAMPTZ-752))|(1<<(PostgreSQLParserTIMETZ-752))|(1<<(PostgreSQLParserTSQUERY-752))|(1<<(PostgreSQLParserTSVECTOR-752))|(1<<(PostgreSQLParserTXID_SNAPSHOT-752))|(1<<(PostgreSQLParserUUID-752))|(1<<(PostgreSQLParserVARBIT-752))|(1<<(PostgreSQLParserXML-752))|(1<<(PostgreSQLParserDOLLAR-752))|(1<<(PostgreSQLParserDOLLAR_DOLLAR-752))|(1<<(PostgreSQLParserOPEN_PAREN-752))|(1<<(PostgreSQLParserBIT_STRING-752))|(1<<(PostgreSQLParserREGEX_STRING-752))|(1<<(PostgreSQLParserNUMERIC_LITERAL-752))|(1<<(PostgreSQLParserINTEGER_LITERAL-752))|(1<<(PostgreSQLParserHEX_INTEGER_LITERAL-752))|(1<<(PostgreSQLParserSINGLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserDOUBLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserIDENTIFIER-752))|(1<<(PostgreSQLParserDOLLAR_DEC-752))|(1<<(PostgreSQLParserIDENTIFIER_UNICODE-752)))) != 0) || (((_la-787)&-(0x1f+1)) == 0 && ((1<<uint((_la-787)))&((1<<(PostgreSQLParserAT_SIGN-787))|(1<<(PostgreSQLParserBANG_BANG-787))|(1<<(PostgreSQLParserMINUS-787)))) != 0) || (((_la-820)&-(0x1f+1)) == 0 && ((1<<uint((_la-820)))&((1<<(PostgreSQLParserPLUS-820))|(1<<(PostgreSQLParserQMARK_HYPHEN-820))|(1<<(PostgreSQLParserTIL-820)))) != 0) {
							{
								p.SetState(4754)
								p.expr(0)
							}

						}
						{
							p.SetState(4757)
							p.Match(PostgreSQLParserCOLON)
						}
						p.SetState(4759)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PostgreSQLParserWHITESPACE)|(1<<PostgreSQLParserA_)|(1<<PostgreSQLParserABORT)|(1<<PostgreSQLParserABS)|(1<<PostgreSQLParserABSOLUTE)|(1<<PostgreSQLParserACCESS)|(1<<PostgreSQLParserACTION)|(1<<PostgreSQLParserADA)|(1<<PostgreSQLParserADD)|(1<<PostgreSQLParserADMIN)|(1<<PostgreSQLParserAFTER)|(1<<PostgreSQLParserAGGREGATE)|(1<<PostgreSQLParserALL)|(1<<PostgreSQLParserALLOCATE)|(1<<PostgreSQLParserALSO)|(1<<PostgreSQLParserALTER)|(1<<PostgreSQLParserALWAYS)|(1<<PostgreSQLParserANY)|(1<<PostgreSQLParserARE)|(1<<PostgreSQLParserARRAY)|(1<<PostgreSQLParserASENSITIVE)|(1<<PostgreSQLParserASSERTION)|(1<<PostgreSQLParserASSIGNMENT))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(PostgreSQLParserAT-33))|(1<<(PostgreSQLParserATOMIC-33))|(1<<(PostgreSQLParserATTRIBUTE-33))|(1<<(PostgreSQLParserATTRIBUTES-33))|(1<<(PostgreSQLParserAVG-33))|(1<<(PostgreSQLParserBACKWARD-33))|(1<<(PostgreSQLParserBEFORE-33))|(1<<(PostgreSQLParserBEGIN-33))|(1<<(PostgreSQLParserBERNOULLI-33))|(1<<(PostgreSQLParserBETWEEN-33))|(1<<(PostgreSQLParserBIGINT-33))|(1<<(PostgreSQLParserBIT-33))|(1<<(PostgreSQLParserBIT_LENGTH-33))|(1<<(PostgreSQLParserBLOB-33))|(1<<(PostgreSQLParserBOOLEAN-33))|(1<<(PostgreSQLParserBREADTH-33))|(1<<(PostgreSQLParserBY-33))|(1<<(PostgreSQLParserC_-33))|(1<<(PostgreSQLParserCACHE-33))|(1<<(PostgreSQLParserCALL-33))|(1<<(PostgreSQLParserCALLED-33))|(1<<(PostgreSQLParserCARDINALITY-33))|(1<<(PostgreSQLParserCASCADE-33))|(1<<(PostgreSQLParserCASCADED-33))|(1<<(PostgreSQLParserCASE-33))|(1<<(PostgreSQLParserCAST-33))|(1<<(PostgreSQLParserCATALOG-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PostgreSQLParserCATALOG_NAME-65))|(1<<(PostgreSQLParserCEIL-65))|(1<<(PostgreSQLParserCEILING-65))|(1<<(PostgreSQLParserCHAIN-65))|(1<<(PostgreSQLParserCHAR-65))|(1<<(PostgreSQLParserCHAR_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER-65))|(1<<(PostgreSQLParserCHARACTER_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER_SET_CATALOG-65))|(1<<(PostgreSQLParserCHARACTER_SET_NAME-65))|(1<<(PostgreSQLParserCHARACTER_SET_SCHEMA-65))|(1<<(PostgreSQLParserCHARACTERISTICS-65))|(1<<(PostgreSQLParserCHARACTERS-65))|(1<<(PostgreSQLParserCHECKPOINT-65))|(1<<(PostgreSQLParserCLASS-65))|(1<<(PostgreSQLParserCLASS_ORIGIN-65))|(1<<(PostgreSQLParserCLOB-65))|(1<<(PostgreSQLParserCLOSE-65))|(1<<(PostgreSQLParserCLUSTER-65))|(1<<(PostgreSQLParserCOALESCE-65))|(1<<(PostgreSQLParserCOBOL-65))|(1<<(PostgreSQLParserCOLLATION_CATALOG-65))|(1<<(PostgreSQLParserCOLLATION_NAME-65))|(1<<(PostgreSQLParserCOLLATION_SCHEMA-65))|(1<<(PostgreSQLParserCOLLECT-65))|(1<<(PostgreSQLParserCOLUMN_NAME-65))|(1<<(PostgreSQLParserCOMMAND_FUNCTION-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(PostgreSQLParserCOMMAND_FUNCTION_CODE-97))|(1<<(PostgreSQLParserCOMMENT-97))|(1<<(PostgreSQLParserCOMMIT-97))|(1<<(PostgreSQLParserCOMMITTED-97))|(1<<(PostgreSQLParserCONDITION-97))|(1<<(PostgreSQLParserCONDITION_NUMBER-97))|(1<<(PostgreSQLParserCONNECT-97))|(1<<(PostgreSQLParserCONNECTION-97))|(1<<(PostgreSQLParserCONNECTION_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_CATALOG-97))|(1<<(PostgreSQLParserCONSTRAINT_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_SCHEMA-97))|(1<<(PostgreSQLParserCONSTRAINTS-97))|(1<<(PostgreSQLParserCONSTRUCTOR-97))|(1<<(PostgreSQLParserCONTAINS-97))|(1<<(PostgreSQLParserCONTINUE-97))|(1<<(PostgreSQLParserCONVERSION-97))|(1<<(PostgreSQLParserCONVERT-97))|(1<<(PostgreSQLParserCOPY-97))|(1<<(PostgreSQLParserCORR-97))|(1<<(PostgreSQLParserCORRESPONDING-97))|(1<<(PostgreSQLParserCOUNT-97))|(1<<(PostgreSQLParserCOVAR_POP-97))|(1<<(PostgreSQLParserCOVAR_SAMP-97)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(PostgreSQLParserCSV-131))|(1<<(PostgreSQLParserCUBE-131))|(1<<(PostgreSQLParserCUME_DIST-131))|(1<<(PostgreSQLParserCURRENT-131))|(1<<(PostgreSQLParserCURRENT_DATE-131))|(1<<(PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP-131))|(1<<(PostgreSQLParserCURRENT_PATH-131))|(1<<(PostgreSQLParserCURRENT_ROLE-131))|(1<<(PostgreSQLParserCURRENT_TIME-131))|(1<<(PostgreSQLParserCURRENT_TIMESTAMP-131))|(1<<(PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE-131))|(1<<(PostgreSQLParserCURRENT_USER-131))|(1<<(PostgreSQLParserCURSOR-131))|(1<<(PostgreSQLParserCURSOR_NAME-131))|(1<<(PostgreSQLParserCYCLE-131))|(1<<(PostgreSQLParserDATA-131))|(1<<(PostgreSQLParserDATABASE-131))|(1<<(PostgreSQLParserDATE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_CODE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_PRECISION-131))|(1<<(PostgreSQLParserDAY-131))|(1<<(PostgreSQLParserDEALLOCATE-131))|(1<<(PostgreSQLParserDEC-131))|(1<<(PostgreSQLParserDECIMAL-131))|(1<<(PostgreSQLParserDECLARE-131))|(1<<(PostgreSQLParserDEFAULT-131))|(1<<(PostgreSQLParserDEFAULTS-131))|(1<<(PostgreSQLParserDEFERRED-131))|(1<<(PostgreSQLParserDEFINED-131))|(1<<(PostgreSQLParserDEFINER-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(PostgreSQLParserDEGREE-163))|(1<<(PostgreSQLParserDELETE-163))|(1<<(PostgreSQLParserDELIMITER-163))|(1<<(PostgreSQLParserDELIMITERS-163))|(1<<(PostgreSQLParserDENSE_RANK-163))|(1<<(PostgreSQLParserDEPTH-163))|(1<<(PostgreSQLParserDEREF-163))|(1<<(PostgreSQLParserDERIVED-163))|(1<<(PostgreSQLParserDESCRIBE-163))|(1<<(PostgreSQLParserDESCRIPTOR-163))|(1<<(PostgreSQLParserDETERMINISTIC-163))|(1<<(PostgreSQLParserDIAGNOSTICS-163))|(1<<(PostgreSQLParserDICTIONARY-163))|(1<<(PostgreSQLParserDISCONNECT-163))|(1<<(PostgreSQLParserDISPATCH-163))|(1<<(PostgreSQLParserDOMAIN-163))|(1<<(PostgreSQLParserDOUBLE-163))|(1<<(PostgreSQLParserDYNAMIC-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION_CODE-163))|(1<<(PostgreSQLParserEACH-163))|(1<<(PostgreSQLParserELEMENT-163)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(PostgreSQLParserENCODING-197))|(1<<(PostgreSQLParserENCRYPTED-197))|(1<<(PostgreSQLParserEND-197))|(1<<(PostgreSQLParserEQUALS-197))|(1<<(PostgreSQLParserESCAPE-197))|(1<<(PostgreSQLParserEVERY-197))|(1<<(PostgreSQLParserEXCEPTION-197))|(1<<(PostgreSQLParserEXCLUDE-197))|(1<<(PostgreSQLParserEXCLUDING-197))|(1<<(PostgreSQLParserEXCLUSIVE-197))|(1<<(PostgreSQLParserEXEC-197))|(1<<(PostgreSQLParserEXECUTE-197))|(1<<(PostgreSQLParserEXISTS-197))|(1<<(PostgreSQLParserEXP-197))|(1<<(PostgreSQLParserEXPLAIN-197))|(1<<(PostgreSQLParserEXTENSION-197))|(1<<(PostgreSQLParserEXTERNAL-197))|(1<<(PostgreSQLParserEXTRACT-197))|(1<<(PostgreSQLParserFALSE-197))|(1<<(PostgreSQLParserFILTER-197))|(1<<(PostgreSQLParserFINAL-197))|(1<<(PostgreSQLParserFIRST-197))|(1<<(PostgreSQLParserFLOAT-197))|(1<<(PostgreSQLParserFLOOR-197))|(1<<(PostgreSQLParserFOLLOWING-197)))) != 0) || (((_la-229)&-(0x1f+1)) == 0 && ((1<<uint((_la-229)))&((1<<(PostgreSQLParserFORCE-229))|(1<<(PostgreSQLParserFORMAT-229))|(1<<(PostgreSQLParserFORTRAN-229))|(1<<(PostgreSQLParserFORWARD-229))|(1<<(PostgreSQLParserFOUND-229))|(1<<(PostgreSQLParserFREE-229))|(1<<(PostgreSQLParserFUNCTION-229))|(1<<(PostgreSQLParserFUSION-229))|(1<<(PostgreSQLParserG_-229))|(1<<(PostgreSQLParserGENERAL-229))|(1<<(PostgreSQLParserGENERATED-229))|(1<<(PostgreSQLParserGET-229))|(1<<(PostgreSQLParserGLOBAL-229))|(1<<(PostgreSQLParserGO-229))|(1<<(PostgreSQLParserGOTO-229))|(1<<(PostgreSQLParserGRANTED-229))|(1<<(PostgreSQLParserGREATEST-229))|(1<<(PostgreSQLParserGROUPING-229))|(1<<(PostgreSQLParserHANDLER-229))|(1<<(PostgreSQLParserHIERARCHY-229))|(1<<(PostgreSQLParserHOLD-229))|(1<<(PostgreSQLParserHOST-229))|(1<<(PostgreSQLParserHOUR-229))|(1<<(PostgreSQLParserIDENTITY-229))|(1<<(PostgreSQLParserIGNORE-229)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(PostgreSQLParserIMMEDIATE-262))|(1<<(PostgreSQLParserIMMUTABLE-262))|(1<<(PostgreSQLParserIMPLEMENTATION-262))|(1<<(PostgreSQLParserIMPLICIT-262))|(1<<(PostgreSQLParserINCLUDING-262))|(1<<(PostgreSQLParserINCREMENT-262))|(1<<(PostgreSQLParserINDEX-262))|(1<<(PostgreSQLParserINDICATOR-262))|(1<<(PostgreSQLParserINHERITS-262))|(1<<(PostgreSQLParserINOUT-262))|(1<<(PostgreSQLParserINPUT-262))|(1<<(PostgreSQLParserINSENSITIVE-262))|(1<<(PostgreSQLParserINSERT-262))|(1<<(PostgreSQLParserINSTANCE-262))|(1<<(PostgreSQLParserINSTANTIABLE-262))|(1<<(PostgreSQLParserINSTEAD-262))|(1<<(PostgreSQLParserINT-262))|(1<<(PostgreSQLParserINTEGER-262))|(1<<(PostgreSQLParserINTERSECTION-262))|(1<<(PostgreSQLParserINTERVAL-262))|(1<<(PostgreSQLParserINVOKER-262))|(1<<(PostgreSQLParserISOLATION-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(PostgreSQLParserK_-294))|(1<<(PostgreSQLParserKEY-294))|(1<<(PostgreSQLParserKEY_MEMBER-294))|(1<<(PostgreSQLParserKEY_TYPE-294))|(1<<(PostgreSQLParserLANGUAGE-294))|(1<<(PostgreSQLParserLARGE-294))|(1<<(PostgreSQLParserLAST-294))|(1<<(PostgreSQLParserLEAST-294))|(1<<(PostgreSQLParserLEFT-294))|(1<<(PostgreSQLParserLENGTH-294))|(1<<(PostgreSQLParserLEVEL-294))|(1<<(PostgreSQLParserLISTEN-294))|(1<<(PostgreSQLParserLN-294))|(1<<(PostgreSQLParserLOAD-294))|(1<<(PostgreSQLParserLOCAL-294))|(1<<(PostgreSQLParserLOCATION-294))|(1<<(PostgreSQLParserLOCATOR-294))|(1<<(PostgreSQLParserLOCK-294))|(1<<(PostgreSQLParserLOCKED-294))|(1<<(PostgreSQLParserLOWER-294))|(1<<(PostgreSQLParserM_-294))|(1<<(PostgreSQLParserMAP-294)))) != 0) || (((_la-327)&-(0x1f+1)) == 0 && ((1<<uint((_la-327)))&((1<<(PostgreSQLParserMATCH-327))|(1<<(PostgreSQLParserMATCHED-327))|(1<<(PostgreSQLParserMAX-327))|(1<<(PostgreSQLParserMAXVALUE-327))|(1<<(PostgreSQLParserMEMBER-327))|(1<<(PostgreSQLParserMERGE-327))|(1<<(PostgreSQLParserMESSAGE_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_OCTET_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_TEXT-327))|(1<<(PostgreSQLParserMETHOD-327))|(1<<(PostgreSQLParserMIN-327))|(1<<(PostgreSQLParserMINUTE-327))|(1<<(PostgreSQLParserMINVALUE-327))|(1<<(PostgreSQLParserMOD-327))|(1<<(PostgreSQLParserMODE-327))|(1<<(PostgreSQLParserMODIFIES-327))|(1<<(PostgreSQLParserMODULE-327))|(1<<(PostgreSQLParserMONTH-327))|(1<<(PostgreSQLParserMORE_-327))|(1<<(PostgreSQLParserMOVE-327))|(1<<(PostgreSQLParserMULTISET-327))|(1<<(PostgreSQLParserMUMPS-327))|(1<<(PostgreSQLParserNAME-327))|(1<<(PostgreSQLParserNAMES-327))|(1<<(PostgreSQLParserNATIONAL-327))|(1<<(PostgreSQLParserNCHAR-327))|(1<<(PostgreSQLParserNCLOB-327))|(1<<(PostgreSQLParserNESTING-327))|(1<<(PostgreSQLParserNEW-327)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(PostgreSQLParserNEXT-359))|(1<<(PostgreSQLParserNO-359))|(1<<(PostgreSQLParserNONE-359))|(1<<(PostgreSQLParserNORMALIZE-359))|(1<<(PostgreSQLParserNORMALIZED-359))|(1<<(PostgreSQLParserNOT-359))|(1<<(PostgreSQLParserNOTHING-359))|(1<<(PostgreSQLParserNOTIFY-359))|(1<<(PostgreSQLParserNOWAIT-359))|(1<<(PostgreSQLParserNULL-359))|(1<<(PostgreSQLParserNULLABLE-359))|(1<<(PostgreSQLParserNULLIF-359))|(1<<(PostgreSQLParserNULLS-359))|(1<<(PostgreSQLParserNUMBER-359))|(1<<(PostgreSQLParserNUMERIC-359))|(1<<(PostgreSQLParserOBJECT-359))|(1<<(PostgreSQLParserOCTET_LENGTH-359))|(1<<(PostgreSQLParserOCTETS-359))|(1<<(PostgreSQLParserOF-359))|(1<<(PostgreSQLParserOFF-359))|(1<<(PostgreSQLParserOIDS-359))|(1<<(PostgreSQLParserOLD-359))|(1<<(PostgreSQLParserOPEN-359))|(1<<(PostgreSQLParserOPERATOR-359))|(1<<(PostgreSQLParserOPTION-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(PostgreSQLParserOPTIONS-391))|(1<<(PostgreSQLParserORDERING-391))|(1<<(PostgreSQLParserORDINALITY-391))|(1<<(PostgreSQLParserOTHERS-391))|(1<<(PostgreSQLParserOUT-391))|(1<<(PostgreSQLParserOUTPUT-391))|(1<<(PostgreSQLParserOVER-391))|(1<<(PostgreSQLParserOVERLAY-391))|(1<<(PostgreSQLParserOVERRIDING-391))|(1<<(PostgreSQLParserOWNER-391))|(1<<(PostgreSQLParserPAD-391))|(1<<(PostgreSQLParserPARAMETER-391))|(1<<(PostgreSQLParserPARAMETER_MODE-391))|(1<<(PostgreSQLParserPARAMETER_NAME-391))|(1<<(PostgreSQLParserPARAMETER_ORDINAL_POSITION-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_CATALOG-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_NAME-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA-391))|(1<<(PostgreSQLParserPARTIAL-391))|(1<<(PostgreSQLParserPARTITION-391))|(1<<(PostgreSQLParserPASCAL-391))|(1<<(PostgreSQLParserPASSWORD-391))|(1<<(PostgreSQLParserPATH-391))|(1<<(PostgreSQLParserPERCENT_RANK-391))|(1<<(PostgreSQLParserPERCENTILE_CONT-391))|(1<<(PostgreSQLParserPERCENTILE_DISC-391)))) != 0) || (((_la-424)&-(0x1f+1)) == 0 && ((1<<uint((_la-424)))&((1<<(PostgreSQLParserPLAIN-424))|(1<<(PostgreSQLParserPLI-424))|(1<<(PostgreSQLParserPOSITION-424))|(1<<(PostgreSQLParserPOWER-424))|(1<<(PostgreSQLParserPRECEDING-424))|(1<<(PostgreSQLParserPRECISION-424))|(1<<(PostgreSQLParserPREPARE-424))|(1<<(PostgreSQLParserPRESERVE-424))|(1<<(PostgreSQLParserPRIOR-424))|(1<<(PostgreSQLParserPRIVILEGES-424))|(1<<(PostgreSQLParserPROCEDURAL-424))|(1<<(PostgreSQLParserPROCEDURE-424))|(1<<(PostgreSQLParserPUBLIC-424))|(1<<(PostgreSQLParserQUOTE-424))|(1<<(PostgreSQLParserRANGE-424))|(1<<(PostgreSQLParserRANK-424))|(1<<(PostgreSQLParserREAD-424))|(1<<(PostgreSQLParserREADS-424))|(1<<(PostgreSQLParserREAL-424))|(1<<(PostgreSQLParserRECHECK-424))|(1<<(PostgreSQLParserRECURSIVE-424))|(1<<(PostgreSQLParserREF-424))|(1<<(PostgreSQLParserREFERENCING-424)))) != 0) || (((_la-456)&-(0x1f+1)) == 0 && ((1<<uint((_la-456)))&((1<<(PostgreSQLParserREFRESH-456))|(1<<(PostgreSQLParserREGR_AVGX-456))|(1<<(PostgreSQLParserREGR_AVGY-456))|(1<<(PostgreSQLParserREGR_COUNT-456))|(1<<(PostgreSQLParserREGR_INTERCEPT-456))|(1<<(PostgreSQLParserREGR_SLOPE-456))|(1<<(PostgreSQLParserREGR_SXX-456))|(1<<(PostgreSQLParserREGR_SXY-456))|(1<<(PostgreSQLParserREGR_SYY-456))|(1<<(PostgreSQLParserREINDEX-456))|(1<<(PostgreSQLParserRELATIVE-456))|(1<<(PostgreSQLParserRELEASE-456))|(1<<(PostgreSQLParserRENAME-456))|(1<<(PostgreSQLParserREPEATABLE-456))|(1<<(PostgreSQLParserREPLACE-456))|(1<<(PostgreSQLParserRESET-456))|(1<<(PostgreSQLParserRESTART-456))|(1<<(PostgreSQLParserRESTRICT-456))|(1<<(PostgreSQLParserRESULT-456))|(1<<(PostgreSQLParserRETURN-456))|(1<<(PostgreSQLParserRETURNED_CARDINALITY-456))|(1<<(PostgreSQLParserRETURNED_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_OCTET_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_SQLSTATE-456))|(1<<(PostgreSQLParserRETURNS-456))|(1<<(PostgreSQLParserREVOKE-456))|(1<<(PostgreSQLParserRIGHT-456))|(1<<(PostgreSQLParserROLE-456))|(1<<(PostgreSQLParserROLLBACK-456)))) != 0) || (((_la-488)&-(0x1f+1)) == 0 && ((1<<uint((_la-488)))&((1<<(PostgreSQLParserROLLUP-488))|(1<<(PostgreSQLParserROUTINE-488))|(1<<(PostgreSQLParserROUTINE_CATALOG-488))|(1<<(PostgreSQLParserROUTINE_NAME-488))|(1<<(PostgreSQLParserROUTINE_SCHEMA-488))|(1<<(PostgreSQLParserROW-488))|(1<<(PostgreSQLParserROW_COUNT-488))|(1<<(PostgreSQLParserROW_NUMBER-488))|(1<<(PostgreSQLParserROWS-488))|(1<<(PostgreSQLParserRULE-488))|(1<<(PostgreSQLParserSAVEPOINT-488))|(1<<(PostgreSQLParserSCALE-488))|(1<<(PostgreSQLParserSCHEMA-488))|(1<<(PostgreSQLParserSCHEMA_NAME-488))|(1<<(PostgreSQLParserSCOPE-488))|(1<<(PostgreSQLParserSCOPE_CATALOG-488))|(1<<(PostgreSQLParserSCOPE_NAME-488))|(1<<(PostgreSQLParserSCOPE_SCHEMA-488))|(1<<(PostgreSQLParserSCROLL-488))|(1<<(PostgreSQLParserSEARCH-488))|(1<<(PostgreSQLParserSECOND-488))|(1<<(PostgreSQLParserSECTION-488))|(1<<(PostgreSQLParserSECURITY-488))|(1<<(PostgreSQLParserSELF-488))|(1<<(PostgreSQLParserSENSITIVE-488))|(1<<(PostgreSQLParserSEQUENCE-488))|(1<<(PostgreSQLParserSEQUENCES-488))|(1<<(PostgreSQLParserSERIALIZABLE-488))|(1<<(PostgreSQLParserSERVER_NAME-488))|(1<<(PostgreSQLParserSESSION-488)))) != 0) || (((_la-520)&-(0x1f+1)) == 0 && ((1<<uint((_la-520)))&((1<<(PostgreSQLParserSET-520))|(1<<(PostgreSQLParserSETOF-520))|(1<<(PostgreSQLParserSETS-520))|(1<<(PostgreSQLParserSHARE-520))|(1<<(PostgreSQLParserSHOW-520))|(1<<(PostgreSQLParserSIMPLE-520))|(1<<(PostgreSQLParserSIZE-520))|(1<<(PostgreSQLParserSMALLINT-520))|(1<<(PostgreSQLParserSOME-520))|(1<<(PostgreSQLParserSOURCE-520))|(1<<(PostgreSQLParserSPACE-520))|(1<<(PostgreSQLParserSPECIFIC-520))|(1<<(PostgreSQLParserSPECIFIC_NAME-520))|(1<<(PostgreSQLParserSPECIFICTYPE-520))|(1<<(PostgreSQLParserSQL-520))|(1<<(PostgreSQLParserSQLCODE-520))|(1<<(PostgreSQLParserSQLERROR-520))|(1<<(PostgreSQLParserSQLEXCEPTION-520))|(1<<(PostgreSQLParserSQLSTATE-520))|(1<<(PostgreSQLParserSQLWARNING-520))|(1<<(PostgreSQLParserSQRT-520))|(1<<(PostgreSQLParserSTABLE-520))|(1<<(PostgreSQLParserSTART-520))|(1<<(PostgreSQLParserSTATE-520))|(1<<(PostgreSQLParserSTATEMENT-520))|(1<<(PostgreSQLParserSTATIC-520))|(1<<(PostgreSQLParserSTATISTICS-520))|(1<<(PostgreSQLParserSTDDEV_POP-520))|(1<<(PostgreSQLParserSTDDEV_SAMP-520)))) != 0) || (((_la-552)&-(0x1f+1)) == 0 && ((1<<uint((_la-552)))&((1<<(PostgreSQLParserSTDIN-552))|(1<<(PostgreSQLParserSTDOUT-552))|(1<<(PostgreSQLParserSTORAGE-552))|(1<<(PostgreSQLParserSTRICT-552))|(1<<(PostgreSQLParserSTRUCTURE-552))|(1<<(PostgreSQLParserSTYLE-552))|(1<<(PostgreSQLParserSUBCLASS_ORIGIN-552))|(1<<(PostgreSQLParserSUBMULTISET-552))|(1<<(PostgreSQLParserSUBSTRING-552))|(1<<(PostgreSQLParserSUM-552))|(1<<(PostgreSQLParserSYSID-552))|(1<<(PostgreSQLParserSYSTEM-552))|(1<<(PostgreSQLParserSYSTEM_USER-552))|(1<<(PostgreSQLParserTABLE_NAME-552))|(1<<(PostgreSQLParserTABLESPACE-552))|(1<<(PostgreSQLParserTEMP-552))|(1<<(PostgreSQLParserTEMPLATE-552))|(1<<(PostgreSQLParserTEMPORARY-552))|(1<<(PostgreSQLParserTIES-552))|(1<<(PostgreSQLParserTIME-552))|(1<<(PostgreSQLParserTIMESTAMP-552))|(1<<(PostgreSQLParserTIMEZONE_HOUR-552))|(1<<(PostgreSQLParserTIMEZONE_MINUTE-552)))) != 0) || (((_la-586)&-(0x1f+1)) == 0 && ((1<<uint((_la-586)))&((1<<(PostgreSQLParserTOP_LEVEL_COUNT-586))|(1<<(PostgreSQLParserTRANSACTION-586))|(1<<(PostgreSQLParserTRANSACTION_ACTIVE-586))|(1<<(PostgreSQLParserTRANSACTIONS_COMMITTED-586))|(1<<(PostgreSQLParserTRANSACTIONS_ROLLED_BACK-586))|(1<<(PostgreSQLParserTRANSFORM-586))|(1<<(PostgreSQLParserTRANSFORMS-586))|(1<<(PostgreSQLParserTRANSLATE-586))|(1<<(PostgreSQLParserTRANSLATION-586))|(1<<(PostgreSQLParserTREAT-586))|(1<<(PostgreSQLParserTRIGGER-586))|(1<<(PostgreSQLParserTRIGGER_CATALOG-586))|(1<<(PostgreSQLParserTRIGGER_NAME-586))|(1<<(PostgreSQLParserTRIGGER_SCHEMA-586))|(1<<(PostgreSQLParserTRIM-586))|(1<<(PostgreSQLParserTRUE-586))|(1<<(PostgreSQLParserTRUNCATE-586))|(1<<(PostgreSQLParserTRUSTED-586))|(1<<(PostgreSQLParserTYPE-586))|(1<<(PostgreSQLParserUESCAPE-586))|(1<<(PostgreSQLParserUNBOUNDED-586))|(1<<(PostgreSQLParserUNCOMMITTED-586))|(1<<(PostgreSQLParserUNDER-586))|(1<<(PostgreSQLParserUNENCRYPTED-586))|(1<<(PostgreSQLParserUNKNOWN-586))|(1<<(PostgreSQLParserUNLISTEN-586))|(1<<(PostgreSQLParserUNNAMED-586))|(1<<(PostgreSQLParserUNNEST-586))|(1<<(PostgreSQLParserUNTIL-586)))) != 0) || (((_la-618)&-(0x1f+1)) == 0 && ((1<<uint((_la-618)))&((1<<(PostgreSQLParserUPDATE-618))|(1<<(PostgreSQLParserUPPER-618))|(1<<(PostgreSQLParserUSAGE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CATALOG-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CODE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_NAME-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA-618))|(1<<(PostgreSQLParserVACUUM-618))|(1<<(PostgreSQLParserVALID-618))|(1<<(PostgreSQLParserVALIDATOR-618))|(1<<(PostgreSQLParserVALUE-618))|(1<<(PostgreSQLParserVALUES-618))|(1<<(PostgreSQLParserVAR_POP-618))|(1<<(PostgreSQLParserVAR_SAMP-618))|(1<<(PostgreSQLParserVARCHAR-618))|(1<<(PostgreSQLParserVARYING-618))|(1<<(PostgreSQLParserVIEW-618))|(1<<(PostgreSQLParserVOLATILE-618))|(1<<(PostgreSQLParserWHENEVER-618))|(1<<(PostgreSQLParserWIDTH_BUCKET-618))|(1<<(PostgreSQLParserWITH-618))|(1<<(PostgreSQLParserWITHIN-618))|(1<<(PostgreSQLParserWITHOUT-618)))) != 0) || (((_la-650)&-(0x1f+1)) == 0 && ((1<<uint((_la-650)))&((1<<(PostgreSQLParserWORK-650))|(1<<(PostgreSQLParserWRITE-650))|(1<<(PostgreSQLParserYEAR-650))|(1<<(PostgreSQLParserZONE-650)))) != 0) || (((_la-720)&-(0x1f+1)) == 0 && ((1<<uint((_la-720)))&((1<<(PostgreSQLParserABSTIME-720))|(1<<(PostgreSQLParserBIGSERIAL-720))|(1<<(PostgreSQLParserBIT_VARYING-720))|(1<<(PostgreSQLParserBOOL-720))|(1<<(PostgreSQLParserBOX-720))|(1<<(PostgreSQLParserBYTEA-720))|(1<<(PostgreSQLParserCHARACTER_VARYING-720))|(1<<(PostgreSQLParserCIDR-720))|(1<<(PostgreSQLParserCIRCLE-720))|(1<<(PostgreSQLParserFLOAT4-720))|(1<<(PostgreSQLParserFLOAT8-720))|(1<<(PostgreSQLParserINET-720))|(1<<(PostgreSQLParserINT2-720))|(1<<(PostgreSQLParserINT4-720))|(1<<(PostgreSQLParserINT8-720))|(1<<(PostgreSQLParserJSON-720))|(1<<(PostgreSQLParserJSONB-720))|(1<<(PostgreSQLParserLINE-720))|(1<<(PostgreSQLParserLSEG-720))|(1<<(PostgreSQLParserMACADDR-720))|(1<<(PostgreSQLParserMACADDR8-720))|(1<<(PostgreSQLParserMONEY-720))|(1<<(PostgreSQLParserPG_LSN-720))|(1<<(PostgreSQLParserPOINT-720))|(1<<(PostgreSQLParserPOLYGON-720))|(1<<(PostgreSQLParserRELTIME-720))|(1<<(PostgreSQLParserSERIAL-720))|(1<<(PostgreSQLParserSERIAL2-720))|(1<<(PostgreSQLParserSERIAL4-720))|(1<<(PostgreSQLParserSERIAL8-720))|(1<<(PostgreSQLParserSMALLSERIAL-720)))) != 0) || (((_la-752)&-(0x1f+1)) == 0 && ((1<<uint((_la-752)))&((1<<(PostgreSQLParserTEXT-752))|(1<<(PostgreSQLParserTIMESTAMPTZ-752))|(1<<(PostgreSQLParserTIMETZ-752))|(1<<(PostgreSQLParserTSQUERY-752))|(1<<(PostgreSQLParserTSVECTOR-752))|(1<<(PostgreSQLParserTXID_SNAPSHOT-752))|(1<<(PostgreSQLParserUUID-752))|(1<<(PostgreSQLParserVARBIT-752))|(1<<(PostgreSQLParserXML-752))|(1<<(PostgreSQLParserDOLLAR-752))|(1<<(PostgreSQLParserDOLLAR_DOLLAR-752))|(1<<(PostgreSQLParserOPEN_PAREN-752))|(1<<(PostgreSQLParserBIT_STRING-752))|(1<<(PostgreSQLParserREGEX_STRING-752))|(1<<(PostgreSQLParserNUMERIC_LITERAL-752))|(1<<(PostgreSQLParserINTEGER_LITERAL-752))|(1<<(PostgreSQLParserHEX_INTEGER_LITERAL-752))|(1<<(PostgreSQLParserSINGLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserDOUBLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserIDENTIFIER-752))|(1<<(PostgreSQLParserDOLLAR_DEC-752))|(1<<(PostgreSQLParserIDENTIFIER_UNICODE-752)))) != 0) || (((_la-787)&-(0x1f+1)) == 0 && ((1<<uint((_la-787)))&((1<<(PostgreSQLParserAT_SIGN-787))|(1<<(PostgreSQLParserBANG_BANG-787))|(1<<(PostgreSQLParserMINUS-787)))) != 0) || (((_la-820)&-(0x1f+1)) == 0 && ((1<<uint((_la-820)))&((1<<(PostgreSQLParserPLUS-820))|(1<<(PostgreSQLParserQMARK_HYPHEN-820))|(1<<(PostgreSQLParserTIL-820)))) != 0) {
							{
								p.SetState(4758)
								p.expr(0)
							}

						}
						{
							p.SetState(4761)
							p.Match(PostgreSQLParserCLOSE_BRACKET)
						}

					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

					p.SetState(4764)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 556, p.GetParserRuleContext())
				}

			case 15:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_expr)
				p.SetState(4766)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				p.SetState(4769)
				p.GetErrorHandler().Sync(p)
				_alt = 1
				for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					switch _alt {
					case 1:
						{
							p.SetState(4767)
							p.Match(PostgreSQLParserCOLON_COLON)
						}
						{
							p.SetState(4768)
							p.Data_type()
						}

					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

					p.SetState(4771)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 557, p.GetParserRuleContext())
				}

			case 16:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_expr)
				p.SetState(4773)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(4774)
					p.Match(PostgreSQLParserIS)
				}
				{
					p.SetState(4775)
					p.Match(PostgreSQLParserOF)
				}
				{
					p.SetState(4776)
					p.Match(PostgreSQLParserOPEN_PAREN)
				}
				{
					p.SetState(4777)
					p.Data_type()
				}
				{
					p.SetState(4778)
					p.Match(PostgreSQLParserCLOSE_PAREN)
				}

			case 17:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_expr)
				p.SetState(4780)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(4781)
					p.Match(PostgreSQLParserDOT)
				}
				p.SetState(4784)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
					{
						p.SetState(4782)
						p.identifier(0)
					}

				case PostgreSQLParserSTAR:
					{
						p.SetState(4783)
						p.Match(PostgreSQLParserSTAR)
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			case 18:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_expr)
				p.SetState(4786)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}

				{
					p.SetState(4787)
					p.Match(PostgreSQLParserAT)
				}
				{
					p.SetState(4788)
					p.Match(PostgreSQLParserTIME)
				}
				{
					p.SetState(4789)
					p.Match(PostgreSQLParserZONE)
				}

				{
					p.SetState(4791)
					p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)
				}

			}

		}
		p.SetState(4796)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 560, p.GetParserRuleContext())
	}

	return localctx
}

// IBool_exprContext is an interface to support dynamic dispatch.
type IBool_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBool_exprContext differentiates from other interfaces.
	IsBool_exprContext()
}

type Bool_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBool_exprContext() *Bool_exprContext {
	var p = new(Bool_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_bool_expr
	return p
}

func (*Bool_exprContext) IsBool_exprContext() {}

func NewBool_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bool_exprContext {
	var p = new(Bool_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_bool_expr

	return p
}

func (s *Bool_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Bool_exprContext) TRUE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRUE, 0)
}

func (s *Bool_exprContext) FALSE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFALSE, 0)
}

func (s *Bool_exprContext) NOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOT, 0)
}

func (s *Bool_exprContext) AllBool_expr() []IBool_exprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBool_exprContext)(nil)).Elem())
	var tst = make([]IBool_exprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBool_exprContext)
		}
	}

	return tst
}

func (s *Bool_exprContext) Bool_expr(i int) IBool_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBool_exprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBool_exprContext)
}

func (s *Bool_exprContext) AND() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAND, 0)
}

func (s *Bool_exprContext) OR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOR, 0)
}

func (s *Bool_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bool_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bool_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterBool_expr(s)
	}
}

func (s *Bool_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitBool_expr(s)
	}
}

func (p *PostgreSQLParser) Bool_expr() (localctx IBool_exprContext) {
	return p.bool_expr(0)
}

func (p *PostgreSQLParser) bool_expr(_p int) (localctx IBool_exprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBool_exprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBool_exprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 438
	p.EnterRecursionRule(localctx, 438, PostgreSQLParserRULE_bool_expr, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4802)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserTRUE:
		{
			p.SetState(4798)
			p.Match(PostgreSQLParserTRUE)
		}

	case PostgreSQLParserFALSE:
		{
			p.SetState(4799)
			p.Match(PostgreSQLParserFALSE)
		}

	case PostgreSQLParserNOT:
		{
			p.SetState(4800)
			p.Match(PostgreSQLParserNOT)
		}
		{
			p.SetState(4801)
			p.bool_expr(3)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4812)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 563, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(4810)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 562, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBool_exprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_bool_expr)
				p.SetState(4804)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(4805)
					p.Match(PostgreSQLParserAND)
				}
				{
					p.SetState(4806)
					p.bool_expr(3)
				}

			case 2:
				localctx = NewBool_exprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_bool_expr)
				p.SetState(4807)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(4808)
					p.Match(PostgreSQLParserOR)
				}
				{
					p.SetState(4809)
					p.bool_expr(2)
				}

			}

		}
		p.SetState(4814)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 563, p.GetParserRuleContext())
	}

	return localctx
}

// ICase_exprContext is an interface to support dynamic dispatch.
type ICase_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCase_exprContext differentiates from other interfaces.
	IsCase_exprContext()
}

type Case_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_exprContext() *Case_exprContext {
	var p = new(Case_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_case_expr
	return p
}

func (*Case_exprContext) IsCase_exprContext() {}

func NewCase_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_exprContext {
	var p = new(Case_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_case_expr

	return p
}

func (s *Case_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_exprContext) CASE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASE, 0)
}

func (s *Case_exprContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Case_exprContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Case_exprContext) END() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEND, 0)
}

func (s *Case_exprContext) AllWHEN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserWHEN)
}

func (s *Case_exprContext) WHEN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWHEN, i)
}

func (s *Case_exprContext) AllTHEN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserTHEN)
}

func (s *Case_exprContext) THEN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTHEN, i)
}

func (s *Case_exprContext) ELSE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserELSE, 0)
}

func (s *Case_exprContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *Case_exprContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *Case_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCase_expr(s)
	}
}

func (s *Case_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCase_expr(s)
	}
}

func (p *PostgreSQLParser) Case_expr() (localctx ICase_exprContext) {
	localctx = NewCase_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 440, PostgreSQLParserRULE_case_expr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4848)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 568, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4815)
			p.Match(PostgreSQLParserCASE)
		}
		{
			p.SetState(4816)
			p.expr(0)
		}
		p.SetState(4822)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == PostgreSQLParserWHEN {
			{
				p.SetState(4817)
				p.Match(PostgreSQLParserWHEN)
			}
			{
				p.SetState(4818)
				p.expr(0)
			}
			{
				p.SetState(4819)
				p.Match(PostgreSQLParserTHEN)
			}
			{
				p.SetState(4820)
				p.expr(0)
			}

			p.SetState(4824)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(4828)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserELSE {
			{
				p.SetState(4826)
				p.Match(PostgreSQLParserELSE)
			}
			{
				p.SetState(4827)
				p.expr(0)
			}

		}
		{
			p.SetState(4830)
			p.Match(PostgreSQLParserEND)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4832)
			p.Match(PostgreSQLParserCASE)
		}
		p.SetState(4838)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == PostgreSQLParserWHEN {
			{
				p.SetState(4833)
				p.Match(PostgreSQLParserWHEN)
			}
			{
				p.SetState(4834)
				p.predicate(0)
			}
			{
				p.SetState(4835)
				p.Match(PostgreSQLParserTHEN)
			}
			{
				p.SetState(4836)
				p.expr(0)
			}

			p.SetState(4840)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(4844)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserELSE {
			{
				p.SetState(4842)
				p.Match(PostgreSQLParserELSE)
			}
			{
				p.SetState(4843)
				p.expr(0)
			}

		}
		{
			p.SetState(4846)
			p.Match(PostgreSQLParserEND)
		}

	}

	return localctx
}

// IExpr_listContext is an interface to support dynamic dispatch.
type IExpr_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_listContext differentiates from other interfaces.
	IsExpr_listContext()
}

type Expr_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_listContext() *Expr_listContext {
	var p = new(Expr_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_expr_list
	return p
}

func (*Expr_listContext) IsExpr_listContext() {}

func NewExpr_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_listContext {
	var p = new(Expr_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_expr_list

	return p
}

func (s *Expr_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Expr_listContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Expr_listContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Expr_listContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_listContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Expr_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Expr_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Expr_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expr_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterExpr_list(s)
	}
}

func (s *Expr_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitExpr_list(s)
	}
}

func (p *PostgreSQLParser) Expr_list() (localctx IExpr_listContext) {
	localctx = NewExpr_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 442, PostgreSQLParserRULE_expr_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4850)
		p.Match(PostgreSQLParserOPEN_PAREN)
	}
	{
		p.SetState(4851)
		p.expr(0)
	}
	p.SetState(4856)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(4852)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(4853)
			p.expr(0)
		}

		p.SetState(4858)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4859)
		p.Match(PostgreSQLParserCLOSE_PAREN)
	}

	return localctx
}

// IExpr_list_listContext is an interface to support dynamic dispatch.
type IExpr_list_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_list_listContext differentiates from other interfaces.
	IsExpr_list_listContext()
}

type Expr_list_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_list_listContext() *Expr_list_listContext {
	var p = new(Expr_list_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_expr_list_list
	return p
}

func (*Expr_list_listContext) IsExpr_list_listContext() {}

func NewExpr_list_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_list_listContext {
	var p = new(Expr_list_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_expr_list_list

	return p
}

func (s *Expr_list_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Expr_list_listContext) AllExpr_list() []IExpr_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpr_listContext)(nil)).Elem())
	var tst = make([]IExpr_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpr_listContext)
		}
	}

	return tst
}

func (s *Expr_list_listContext) Expr_list(i int) IExpr_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpr_listContext)
}

func (s *Expr_list_listContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Expr_list_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Expr_list_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Expr_list_listContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Expr_list_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_list_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expr_list_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterExpr_list_list(s)
	}
}

func (s *Expr_list_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitExpr_list_list(s)
	}
}

func (p *PostgreSQLParser) Expr_list_list() (localctx IExpr_list_listContext) {
	localctx = NewExpr_list_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 444, PostgreSQLParserRULE_expr_list_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4862)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 570, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4861)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}

	}
	{
		p.SetState(4864)
		p.Expr_list()
	}
	p.SetState(4869)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 571, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(4865)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(4866)
				p.Expr_list()
			}

		}
		p.SetState(4871)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 571, p.GetParserRuleContext())
	}
	p.SetState(4873)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 572, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4872)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}

	return localctx
}

// IFunc_sig_argContext is an interface to support dynamic dispatch.
type IFunc_sig_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetArgmode returns the argmode token.
	GetArgmode() antlr.Token

	// SetArgmode sets the argmode token.
	SetArgmode(antlr.Token)

	// GetArgname returns the argname rule contexts.
	GetArgname() IIdentifierContext

	// GetArgtype returns the argtype rule contexts.
	GetArgtype() IData_typeContext

	// SetArgname sets the argname rule contexts.
	SetArgname(IIdentifierContext)

	// SetArgtype sets the argtype rule contexts.
	SetArgtype(IData_typeContext)

	// IsFunc_sig_argContext differentiates from other interfaces.
	IsFunc_sig_argContext()
}

type Func_sig_argContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	argmode antlr.Token
	argname IIdentifierContext
	argtype IData_typeContext
}

func NewEmptyFunc_sig_argContext() *Func_sig_argContext {
	var p = new(Func_sig_argContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_func_sig_arg
	return p
}

func (*Func_sig_argContext) IsFunc_sig_argContext() {}

func NewFunc_sig_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Func_sig_argContext {
	var p = new(Func_sig_argContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_func_sig_arg

	return p
}

func (s *Func_sig_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Func_sig_argContext) GetArgmode() antlr.Token { return s.argmode }

func (s *Func_sig_argContext) SetArgmode(v antlr.Token) { s.argmode = v }

func (s *Func_sig_argContext) GetArgname() IIdentifierContext { return s.argname }

func (s *Func_sig_argContext) GetArgtype() IData_typeContext { return s.argtype }

func (s *Func_sig_argContext) SetArgname(v IIdentifierContext) { s.argname = v }

func (s *Func_sig_argContext) SetArgtype(v IData_typeContext) { s.argtype = v }

func (s *Func_sig_argContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Func_sig_argContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Func_sig_argContext) IN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIN, 0)
}

func (s *Func_sig_argContext) OUT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOUT, 0)
}

func (s *Func_sig_argContext) INOUT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINOUT, 0)
}

func (s *Func_sig_argContext) VARIADIC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVARIADIC, 0)
}

func (s *Func_sig_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Func_sig_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Func_sig_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterFunc_sig_arg(s)
	}
}

func (s *Func_sig_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitFunc_sig_arg(s)
	}
}

func (p *PostgreSQLParser) Func_sig_arg() (localctx IFunc_sig_argContext) {
	localctx = NewFunc_sig_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 446, PostgreSQLParserRULE_func_sig_arg)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4882)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PostgreSQLParserWHITESPACE)|(1<<PostgreSQLParserA_)|(1<<PostgreSQLParserABORT)|(1<<PostgreSQLParserABS)|(1<<PostgreSQLParserABSOLUTE)|(1<<PostgreSQLParserACCESS)|(1<<PostgreSQLParserACTION)|(1<<PostgreSQLParserADA)|(1<<PostgreSQLParserADD)|(1<<PostgreSQLParserADMIN)|(1<<PostgreSQLParserAFTER)|(1<<PostgreSQLParserAGGREGATE)|(1<<PostgreSQLParserALLOCATE)|(1<<PostgreSQLParserALSO)|(1<<PostgreSQLParserALTER)|(1<<PostgreSQLParserALWAYS)|(1<<PostgreSQLParserANY)|(1<<PostgreSQLParserARE)|(1<<PostgreSQLParserASENSITIVE)|(1<<PostgreSQLParserASSERTION)|(1<<PostgreSQLParserASSIGNMENT))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(PostgreSQLParserAT-33))|(1<<(PostgreSQLParserATOMIC-33))|(1<<(PostgreSQLParserATTRIBUTE-33))|(1<<(PostgreSQLParserATTRIBUTES-33))|(1<<(PostgreSQLParserAVG-33))|(1<<(PostgreSQLParserBACKWARD-33))|(1<<(PostgreSQLParserBEFORE-33))|(1<<(PostgreSQLParserBEGIN-33))|(1<<(PostgreSQLParserBERNOULLI-33))|(1<<(PostgreSQLParserBETWEEN-33))|(1<<(PostgreSQLParserBIGINT-33))|(1<<(PostgreSQLParserBIT-33))|(1<<(PostgreSQLParserBIT_LENGTH-33))|(1<<(PostgreSQLParserBLOB-33))|(1<<(PostgreSQLParserBOOLEAN-33))|(1<<(PostgreSQLParserBREADTH-33))|(1<<(PostgreSQLParserBY-33))|(1<<(PostgreSQLParserC_-33))|(1<<(PostgreSQLParserCACHE-33))|(1<<(PostgreSQLParserCALL-33))|(1<<(PostgreSQLParserCALLED-33))|(1<<(PostgreSQLParserCARDINALITY-33))|(1<<(PostgreSQLParserCASCADE-33))|(1<<(PostgreSQLParserCASCADED-33))|(1<<(PostgreSQLParserCATALOG-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PostgreSQLParserCATALOG_NAME-65))|(1<<(PostgreSQLParserCEIL-65))|(1<<(PostgreSQLParserCEILING-65))|(1<<(PostgreSQLParserCHAIN-65))|(1<<(PostgreSQLParserCHAR-65))|(1<<(PostgreSQLParserCHAR_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER-65))|(1<<(PostgreSQLParserCHARACTER_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER_SET_CATALOG-65))|(1<<(PostgreSQLParserCHARACTER_SET_NAME-65))|(1<<(PostgreSQLParserCHARACTER_SET_SCHEMA-65))|(1<<(PostgreSQLParserCHARACTERISTICS-65))|(1<<(PostgreSQLParserCHARACTERS-65))|(1<<(PostgreSQLParserCHECKPOINT-65))|(1<<(PostgreSQLParserCLASS-65))|(1<<(PostgreSQLParserCLASS_ORIGIN-65))|(1<<(PostgreSQLParserCLOB-65))|(1<<(PostgreSQLParserCLOSE-65))|(1<<(PostgreSQLParserCLUSTER-65))|(1<<(PostgreSQLParserCOALESCE-65))|(1<<(PostgreSQLParserCOBOL-65))|(1<<(PostgreSQLParserCOLLATION_CATALOG-65))|(1<<(PostgreSQLParserCOLLATION_NAME-65))|(1<<(PostgreSQLParserCOLLATION_SCHEMA-65))|(1<<(PostgreSQLParserCOLLECT-65))|(1<<(PostgreSQLParserCOLUMN_NAME-65))|(1<<(PostgreSQLParserCOMMAND_FUNCTION-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(PostgreSQLParserCOMMAND_FUNCTION_CODE-97))|(1<<(PostgreSQLParserCOMMENT-97))|(1<<(PostgreSQLParserCOMMIT-97))|(1<<(PostgreSQLParserCOMMITTED-97))|(1<<(PostgreSQLParserCONDITION-97))|(1<<(PostgreSQLParserCONDITION_NUMBER-97))|(1<<(PostgreSQLParserCONNECT-97))|(1<<(PostgreSQLParserCONNECTION-97))|(1<<(PostgreSQLParserCONNECTION_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_CATALOG-97))|(1<<(PostgreSQLParserCONSTRAINT_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_SCHEMA-97))|(1<<(PostgreSQLParserCONSTRAINTS-97))|(1<<(PostgreSQLParserCONSTRUCTOR-97))|(1<<(PostgreSQLParserCONTAINS-97))|(1<<(PostgreSQLParserCONTINUE-97))|(1<<(PostgreSQLParserCONVERSION-97))|(1<<(PostgreSQLParserCONVERT-97))|(1<<(PostgreSQLParserCOPY-97))|(1<<(PostgreSQLParserCORR-97))|(1<<(PostgreSQLParserCORRESPONDING-97))|(1<<(PostgreSQLParserCOUNT-97))|(1<<(PostgreSQLParserCOVAR_POP-97))|(1<<(PostgreSQLParserCOVAR_SAMP-97)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(PostgreSQLParserCSV-131))|(1<<(PostgreSQLParserCUBE-131))|(1<<(PostgreSQLParserCUME_DIST-131))|(1<<(PostgreSQLParserCURRENT-131))|(1<<(PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP-131))|(1<<(PostgreSQLParserCURRENT_PATH-131))|(1<<(PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE-131))|(1<<(PostgreSQLParserCURSOR-131))|(1<<(PostgreSQLParserCURSOR_NAME-131))|(1<<(PostgreSQLParserCYCLE-131))|(1<<(PostgreSQLParserDATA-131))|(1<<(PostgreSQLParserDATABASE-131))|(1<<(PostgreSQLParserDATE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_CODE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_PRECISION-131))|(1<<(PostgreSQLParserDAY-131))|(1<<(PostgreSQLParserDEALLOCATE-131))|(1<<(PostgreSQLParserDEC-131))|(1<<(PostgreSQLParserDECIMAL-131))|(1<<(PostgreSQLParserDECLARE-131))|(1<<(PostgreSQLParserDEFAULTS-131))|(1<<(PostgreSQLParserDEFERRED-131))|(1<<(PostgreSQLParserDEFINED-131))|(1<<(PostgreSQLParserDEFINER-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(PostgreSQLParserDEGREE-163))|(1<<(PostgreSQLParserDELETE-163))|(1<<(PostgreSQLParserDELIMITER-163))|(1<<(PostgreSQLParserDELIMITERS-163))|(1<<(PostgreSQLParserDENSE_RANK-163))|(1<<(PostgreSQLParserDEPTH-163))|(1<<(PostgreSQLParserDEREF-163))|(1<<(PostgreSQLParserDERIVED-163))|(1<<(PostgreSQLParserDESCRIBE-163))|(1<<(PostgreSQLParserDESCRIPTOR-163))|(1<<(PostgreSQLParserDETERMINISTIC-163))|(1<<(PostgreSQLParserDIAGNOSTICS-163))|(1<<(PostgreSQLParserDICTIONARY-163))|(1<<(PostgreSQLParserDISCONNECT-163))|(1<<(PostgreSQLParserDISPATCH-163))|(1<<(PostgreSQLParserDOMAIN-163))|(1<<(PostgreSQLParserDOUBLE-163))|(1<<(PostgreSQLParserDYNAMIC-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION_CODE-163))|(1<<(PostgreSQLParserEACH-163))|(1<<(PostgreSQLParserELEMENT-163)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(PostgreSQLParserENCODING-197))|(1<<(PostgreSQLParserENCRYPTED-197))|(1<<(PostgreSQLParserEND-197))|(1<<(PostgreSQLParserEQUALS-197))|(1<<(PostgreSQLParserESCAPE-197))|(1<<(PostgreSQLParserEVERY-197))|(1<<(PostgreSQLParserEXCEPTION-197))|(1<<(PostgreSQLParserEXCLUDE-197))|(1<<(PostgreSQLParserEXCLUDING-197))|(1<<(PostgreSQLParserEXCLUSIVE-197))|(1<<(PostgreSQLParserEXEC-197))|(1<<(PostgreSQLParserEXECUTE-197))|(1<<(PostgreSQLParserEXISTS-197))|(1<<(PostgreSQLParserEXP-197))|(1<<(PostgreSQLParserEXPLAIN-197))|(1<<(PostgreSQLParserEXTENSION-197))|(1<<(PostgreSQLParserEXTERNAL-197))|(1<<(PostgreSQLParserEXTRACT-197))|(1<<(PostgreSQLParserFILTER-197))|(1<<(PostgreSQLParserFINAL-197))|(1<<(PostgreSQLParserFIRST-197))|(1<<(PostgreSQLParserFLOAT-197))|(1<<(PostgreSQLParserFLOOR-197))|(1<<(PostgreSQLParserFOLLOWING-197)))) != 0) || (((_la-229)&-(0x1f+1)) == 0 && ((1<<uint((_la-229)))&((1<<(PostgreSQLParserFORCE-229))|(1<<(PostgreSQLParserFORMAT-229))|(1<<(PostgreSQLParserFORTRAN-229))|(1<<(PostgreSQLParserFORWARD-229))|(1<<(PostgreSQLParserFOUND-229))|(1<<(PostgreSQLParserFREE-229))|(1<<(PostgreSQLParserFUNCTION-229))|(1<<(PostgreSQLParserFUSION-229))|(1<<(PostgreSQLParserG_-229))|(1<<(PostgreSQLParserGENERAL-229))|(1<<(PostgreSQLParserGENERATED-229))|(1<<(PostgreSQLParserGET-229))|(1<<(PostgreSQLParserGLOBAL-229))|(1<<(PostgreSQLParserGO-229))|(1<<(PostgreSQLParserGOTO-229))|(1<<(PostgreSQLParserGRANTED-229))|(1<<(PostgreSQLParserGREATEST-229))|(1<<(PostgreSQLParserGROUPING-229))|(1<<(PostgreSQLParserHANDLER-229))|(1<<(PostgreSQLParserHIERARCHY-229))|(1<<(PostgreSQLParserHOLD-229))|(1<<(PostgreSQLParserHOST-229))|(1<<(PostgreSQLParserHOUR-229))|(1<<(PostgreSQLParserIDENTITY-229))|(1<<(PostgreSQLParserIGNORE-229)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(PostgreSQLParserIMMEDIATE-262))|(1<<(PostgreSQLParserIMMUTABLE-262))|(1<<(PostgreSQLParserIMPLEMENTATION-262))|(1<<(PostgreSQLParserIMPLICIT-262))|(1<<(PostgreSQLParserIN-262))|(1<<(PostgreSQLParserINCLUDING-262))|(1<<(PostgreSQLParserINCREMENT-262))|(1<<(PostgreSQLParserINDEX-262))|(1<<(PostgreSQLParserINDICATOR-262))|(1<<(PostgreSQLParserINHERITS-262))|(1<<(PostgreSQLParserINOUT-262))|(1<<(PostgreSQLParserINPUT-262))|(1<<(PostgreSQLParserINSENSITIVE-262))|(1<<(PostgreSQLParserINSERT-262))|(1<<(PostgreSQLParserINSTANCE-262))|(1<<(PostgreSQLParserINSTANTIABLE-262))|(1<<(PostgreSQLParserINSTEAD-262))|(1<<(PostgreSQLParserINT-262))|(1<<(PostgreSQLParserINTEGER-262))|(1<<(PostgreSQLParserINTERSECTION-262))|(1<<(PostgreSQLParserINTERVAL-262))|(1<<(PostgreSQLParserINVOKER-262))|(1<<(PostgreSQLParserISOLATION-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(PostgreSQLParserK_-294))|(1<<(PostgreSQLParserKEY-294))|(1<<(PostgreSQLParserKEY_MEMBER-294))|(1<<(PostgreSQLParserKEY_TYPE-294))|(1<<(PostgreSQLParserLANGUAGE-294))|(1<<(PostgreSQLParserLARGE-294))|(1<<(PostgreSQLParserLAST-294))|(1<<(PostgreSQLParserLEAST-294))|(1<<(PostgreSQLParserLEFT-294))|(1<<(PostgreSQLParserLENGTH-294))|(1<<(PostgreSQLParserLEVEL-294))|(1<<(PostgreSQLParserLISTEN-294))|(1<<(PostgreSQLParserLN-294))|(1<<(PostgreSQLParserLOAD-294))|(1<<(PostgreSQLParserLOCAL-294))|(1<<(PostgreSQLParserLOCATION-294))|(1<<(PostgreSQLParserLOCATOR-294))|(1<<(PostgreSQLParserLOCK-294))|(1<<(PostgreSQLParserLOCKED-294))|(1<<(PostgreSQLParserLOWER-294))|(1<<(PostgreSQLParserM_-294))|(1<<(PostgreSQLParserMAP-294)))) != 0) || (((_la-327)&-(0x1f+1)) == 0 && ((1<<uint((_la-327)))&((1<<(PostgreSQLParserMATCH-327))|(1<<(PostgreSQLParserMATCHED-327))|(1<<(PostgreSQLParserMAX-327))|(1<<(PostgreSQLParserMAXVALUE-327))|(1<<(PostgreSQLParserMEMBER-327))|(1<<(PostgreSQLParserMERGE-327))|(1<<(PostgreSQLParserMESSAGE_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_OCTET_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_TEXT-327))|(1<<(PostgreSQLParserMETHOD-327))|(1<<(PostgreSQLParserMIN-327))|(1<<(PostgreSQLParserMINUTE-327))|(1<<(PostgreSQLParserMINVALUE-327))|(1<<(PostgreSQLParserMOD-327))|(1<<(PostgreSQLParserMODE-327))|(1<<(PostgreSQLParserMODIFIES-327))|(1<<(PostgreSQLParserMODULE-327))|(1<<(PostgreSQLParserMONTH-327))|(1<<(PostgreSQLParserMORE_-327))|(1<<(PostgreSQLParserMOVE-327))|(1<<(PostgreSQLParserMULTISET-327))|(1<<(PostgreSQLParserMUMPS-327))|(1<<(PostgreSQLParserNAME-327))|(1<<(PostgreSQLParserNAMES-327))|(1<<(PostgreSQLParserNATIONAL-327))|(1<<(PostgreSQLParserNCHAR-327))|(1<<(PostgreSQLParserNCLOB-327))|(1<<(PostgreSQLParserNESTING-327))|(1<<(PostgreSQLParserNEW-327)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(PostgreSQLParserNEXT-359))|(1<<(PostgreSQLParserNO-359))|(1<<(PostgreSQLParserNONE-359))|(1<<(PostgreSQLParserNORMALIZE-359))|(1<<(PostgreSQLParserNORMALIZED-359))|(1<<(PostgreSQLParserNOTHING-359))|(1<<(PostgreSQLParserNOTIFY-359))|(1<<(PostgreSQLParserNOWAIT-359))|(1<<(PostgreSQLParserNULLABLE-359))|(1<<(PostgreSQLParserNULLIF-359))|(1<<(PostgreSQLParserNULLS-359))|(1<<(PostgreSQLParserNUMBER-359))|(1<<(PostgreSQLParserNUMERIC-359))|(1<<(PostgreSQLParserOBJECT-359))|(1<<(PostgreSQLParserOCTET_LENGTH-359))|(1<<(PostgreSQLParserOCTETS-359))|(1<<(PostgreSQLParserOF-359))|(1<<(PostgreSQLParserOFF-359))|(1<<(PostgreSQLParserOIDS-359))|(1<<(PostgreSQLParserOLD-359))|(1<<(PostgreSQLParserOPEN-359))|(1<<(PostgreSQLParserOPERATOR-359))|(1<<(PostgreSQLParserOPTION-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(PostgreSQLParserOPTIONS-391))|(1<<(PostgreSQLParserORDERING-391))|(1<<(PostgreSQLParserORDINALITY-391))|(1<<(PostgreSQLParserOTHERS-391))|(1<<(PostgreSQLParserOUT-391))|(1<<(PostgreSQLParserOUTPUT-391))|(1<<(PostgreSQLParserOVER-391))|(1<<(PostgreSQLParserOVERLAY-391))|(1<<(PostgreSQLParserOVERRIDING-391))|(1<<(PostgreSQLParserOWNER-391))|(1<<(PostgreSQLParserPAD-391))|(1<<(PostgreSQLParserPARAMETER-391))|(1<<(PostgreSQLParserPARAMETER_MODE-391))|(1<<(PostgreSQLParserPARAMETER_NAME-391))|(1<<(PostgreSQLParserPARAMETER_ORDINAL_POSITION-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_CATALOG-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_NAME-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA-391))|(1<<(PostgreSQLParserPARTIAL-391))|(1<<(PostgreSQLParserPARTITION-391))|(1<<(PostgreSQLParserPASCAL-391))|(1<<(PostgreSQLParserPASSWORD-391))|(1<<(PostgreSQLParserPATH-391))|(1<<(PostgreSQLParserPERCENT_RANK-391))|(1<<(PostgreSQLParserPERCENTILE_CONT-391))|(1<<(PostgreSQLParserPERCENTILE_DISC-391)))) != 0) || (((_la-424)&-(0x1f+1)) == 0 && ((1<<uint((_la-424)))&((1<<(PostgreSQLParserPLAIN-424))|(1<<(PostgreSQLParserPLI-424))|(1<<(PostgreSQLParserPOSITION-424))|(1<<(PostgreSQLParserPOWER-424))|(1<<(PostgreSQLParserPRECEDING-424))|(1<<(PostgreSQLParserPRECISION-424))|(1<<(PostgreSQLParserPREPARE-424))|(1<<(PostgreSQLParserPRESERVE-424))|(1<<(PostgreSQLParserPRIOR-424))|(1<<(PostgreSQLParserPRIVILEGES-424))|(1<<(PostgreSQLParserPROCEDURAL-424))|(1<<(PostgreSQLParserPROCEDURE-424))|(1<<(PostgreSQLParserPUBLIC-424))|(1<<(PostgreSQLParserQUOTE-424))|(1<<(PostgreSQLParserRANGE-424))|(1<<(PostgreSQLParserRANK-424))|(1<<(PostgreSQLParserREAD-424))|(1<<(PostgreSQLParserREADS-424))|(1<<(PostgreSQLParserREAL-424))|(1<<(PostgreSQLParserRECHECK-424))|(1<<(PostgreSQLParserRECURSIVE-424))|(1<<(PostgreSQLParserREF-424))|(1<<(PostgreSQLParserREFERENCING-424)))) != 0) || (((_la-456)&-(0x1f+1)) == 0 && ((1<<uint((_la-456)))&((1<<(PostgreSQLParserREFRESH-456))|(1<<(PostgreSQLParserREGR_AVGX-456))|(1<<(PostgreSQLParserREGR_AVGY-456))|(1<<(PostgreSQLParserREGR_COUNT-456))|(1<<(PostgreSQLParserREGR_INTERCEPT-456))|(1<<(PostgreSQLParserREGR_SLOPE-456))|(1<<(PostgreSQLParserREGR_SXX-456))|(1<<(PostgreSQLParserREGR_SXY-456))|(1<<(PostgreSQLParserREGR_SYY-456))|(1<<(PostgreSQLParserREINDEX-456))|(1<<(PostgreSQLParserRELATIVE-456))|(1<<(PostgreSQLParserRELEASE-456))|(1<<(PostgreSQLParserRENAME-456))|(1<<(PostgreSQLParserREPEATABLE-456))|(1<<(PostgreSQLParserREPLACE-456))|(1<<(PostgreSQLParserRESET-456))|(1<<(PostgreSQLParserRESTART-456))|(1<<(PostgreSQLParserRESTRICT-456))|(1<<(PostgreSQLParserRESULT-456))|(1<<(PostgreSQLParserRETURN-456))|(1<<(PostgreSQLParserRETURNED_CARDINALITY-456))|(1<<(PostgreSQLParserRETURNED_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_OCTET_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_SQLSTATE-456))|(1<<(PostgreSQLParserRETURNS-456))|(1<<(PostgreSQLParserREVOKE-456))|(1<<(PostgreSQLParserRIGHT-456))|(1<<(PostgreSQLParserROLE-456))|(1<<(PostgreSQLParserROLLBACK-456)))) != 0) || (((_la-488)&-(0x1f+1)) == 0 && ((1<<uint((_la-488)))&((1<<(PostgreSQLParserROLLUP-488))|(1<<(PostgreSQLParserROUTINE-488))|(1<<(PostgreSQLParserROUTINE_CATALOG-488))|(1<<(PostgreSQLParserROUTINE_NAME-488))|(1<<(PostgreSQLParserROUTINE_SCHEMA-488))|(1<<(PostgreSQLParserROW-488))|(1<<(PostgreSQLParserROW_COUNT-488))|(1<<(PostgreSQLParserROW_NUMBER-488))|(1<<(PostgreSQLParserROWS-488))|(1<<(PostgreSQLParserRULE-488))|(1<<(PostgreSQLParserSAVEPOINT-488))|(1<<(PostgreSQLParserSCALE-488))|(1<<(PostgreSQLParserSCHEMA-488))|(1<<(PostgreSQLParserSCHEMA_NAME-488))|(1<<(PostgreSQLParserSCOPE-488))|(1<<(PostgreSQLParserSCOPE_CATALOG-488))|(1<<(PostgreSQLParserSCOPE_NAME-488))|(1<<(PostgreSQLParserSCOPE_SCHEMA-488))|(1<<(PostgreSQLParserSCROLL-488))|(1<<(PostgreSQLParserSEARCH-488))|(1<<(PostgreSQLParserSECOND-488))|(1<<(PostgreSQLParserSECTION-488))|(1<<(PostgreSQLParserSECURITY-488))|(1<<(PostgreSQLParserSELF-488))|(1<<(PostgreSQLParserSENSITIVE-488))|(1<<(PostgreSQLParserSEQUENCE-488))|(1<<(PostgreSQLParserSEQUENCES-488))|(1<<(PostgreSQLParserSERIALIZABLE-488))|(1<<(PostgreSQLParserSERVER_NAME-488))|(1<<(PostgreSQLParserSESSION-488)))) != 0) || (((_la-520)&-(0x1f+1)) == 0 && ((1<<uint((_la-520)))&((1<<(PostgreSQLParserSET-520))|(1<<(PostgreSQLParserSETOF-520))|(1<<(PostgreSQLParserSETS-520))|(1<<(PostgreSQLParserSHARE-520))|(1<<(PostgreSQLParserSHOW-520))|(1<<(PostgreSQLParserSIMPLE-520))|(1<<(PostgreSQLParserSIZE-520))|(1<<(PostgreSQLParserSMALLINT-520))|(1<<(PostgreSQLParserSOME-520))|(1<<(PostgreSQLParserSOURCE-520))|(1<<(PostgreSQLParserSPACE-520))|(1<<(PostgreSQLParserSPECIFIC-520))|(1<<(PostgreSQLParserSPECIFIC_NAME-520))|(1<<(PostgreSQLParserSPECIFICTYPE-520))|(1<<(PostgreSQLParserSQL-520))|(1<<(PostgreSQLParserSQLCODE-520))|(1<<(PostgreSQLParserSQLERROR-520))|(1<<(PostgreSQLParserSQLEXCEPTION-520))|(1<<(PostgreSQLParserSQLSTATE-520))|(1<<(PostgreSQLParserSQLWARNING-520))|(1<<(PostgreSQLParserSQRT-520))|(1<<(PostgreSQLParserSTABLE-520))|(1<<(PostgreSQLParserSTART-520))|(1<<(PostgreSQLParserSTATE-520))|(1<<(PostgreSQLParserSTATEMENT-520))|(1<<(PostgreSQLParserSTATIC-520))|(1<<(PostgreSQLParserSTATISTICS-520))|(1<<(PostgreSQLParserSTDDEV_POP-520))|(1<<(PostgreSQLParserSTDDEV_SAMP-520)))) != 0) || (((_la-552)&-(0x1f+1)) == 0 && ((1<<uint((_la-552)))&((1<<(PostgreSQLParserSTDIN-552))|(1<<(PostgreSQLParserSTDOUT-552))|(1<<(PostgreSQLParserSTORAGE-552))|(1<<(PostgreSQLParserSTRICT-552))|(1<<(PostgreSQLParserSTRUCTURE-552))|(1<<(PostgreSQLParserSTYLE-552))|(1<<(PostgreSQLParserSUBCLASS_ORIGIN-552))|(1<<(PostgreSQLParserSUBMULTISET-552))|(1<<(PostgreSQLParserSUBSTRING-552))|(1<<(PostgreSQLParserSUM-552))|(1<<(PostgreSQLParserSYSID-552))|(1<<(PostgreSQLParserSYSTEM-552))|(1<<(PostgreSQLParserSYSTEM_USER-552))|(1<<(PostgreSQLParserTABLE_NAME-552))|(1<<(PostgreSQLParserTABLESPACE-552))|(1<<(PostgreSQLParserTEMP-552))|(1<<(PostgreSQLParserTEMPLATE-552))|(1<<(PostgreSQLParserTEMPORARY-552))|(1<<(PostgreSQLParserTIES-552))|(1<<(PostgreSQLParserTIME-552))|(1<<(PostgreSQLParserTIMESTAMP-552))|(1<<(PostgreSQLParserTIMEZONE_HOUR-552))|(1<<(PostgreSQLParserTIMEZONE_MINUTE-552)))) != 0) || (((_la-586)&-(0x1f+1)) == 0 && ((1<<uint((_la-586)))&((1<<(PostgreSQLParserTOP_LEVEL_COUNT-586))|(1<<(PostgreSQLParserTRANSACTION-586))|(1<<(PostgreSQLParserTRANSACTION_ACTIVE-586))|(1<<(PostgreSQLParserTRANSACTIONS_COMMITTED-586))|(1<<(PostgreSQLParserTRANSACTIONS_ROLLED_BACK-586))|(1<<(PostgreSQLParserTRANSFORM-586))|(1<<(PostgreSQLParserTRANSFORMS-586))|(1<<(PostgreSQLParserTRANSLATE-586))|(1<<(PostgreSQLParserTRANSLATION-586))|(1<<(PostgreSQLParserTREAT-586))|(1<<(PostgreSQLParserTRIGGER-586))|(1<<(PostgreSQLParserTRIGGER_CATALOG-586))|(1<<(PostgreSQLParserTRIGGER_NAME-586))|(1<<(PostgreSQLParserTRIGGER_SCHEMA-586))|(1<<(PostgreSQLParserTRIM-586))|(1<<(PostgreSQLParserTRUE-586))|(1<<(PostgreSQLParserTRUNCATE-586))|(1<<(PostgreSQLParserTRUSTED-586))|(1<<(PostgreSQLParserTYPE-586))|(1<<(PostgreSQLParserUESCAPE-586))|(1<<(PostgreSQLParserUNBOUNDED-586))|(1<<(PostgreSQLParserUNCOMMITTED-586))|(1<<(PostgreSQLParserUNDER-586))|(1<<(PostgreSQLParserUNENCRYPTED-586))|(1<<(PostgreSQLParserUNKNOWN-586))|(1<<(PostgreSQLParserUNLISTEN-586))|(1<<(PostgreSQLParserUNNAMED-586))|(1<<(PostgreSQLParserUNNEST-586))|(1<<(PostgreSQLParserUNTIL-586)))) != 0) || (((_la-618)&-(0x1f+1)) == 0 && ((1<<uint((_la-618)))&((1<<(PostgreSQLParserUPDATE-618))|(1<<(PostgreSQLParserUPPER-618))|(1<<(PostgreSQLParserUSAGE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CATALOG-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CODE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_NAME-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA-618))|(1<<(PostgreSQLParserVACUUM-618))|(1<<(PostgreSQLParserVALID-618))|(1<<(PostgreSQLParserVALIDATOR-618))|(1<<(PostgreSQLParserVALUE-618))|(1<<(PostgreSQLParserVALUES-618))|(1<<(PostgreSQLParserVAR_POP-618))|(1<<(PostgreSQLParserVAR_SAMP-618))|(1<<(PostgreSQLParserVARCHAR-618))|(1<<(PostgreSQLParserVARIADIC-618))|(1<<(PostgreSQLParserVARYING-618))|(1<<(PostgreSQLParserVIEW-618))|(1<<(PostgreSQLParserVOLATILE-618))|(1<<(PostgreSQLParserWHENEVER-618))|(1<<(PostgreSQLParserWIDTH_BUCKET-618))|(1<<(PostgreSQLParserWITHIN-618))|(1<<(PostgreSQLParserWITHOUT-618)))) != 0) || (((_la-650)&-(0x1f+1)) == 0 && ((1<<uint((_la-650)))&((1<<(PostgreSQLParserWORK-650))|(1<<(PostgreSQLParserWRITE-650))|(1<<(PostgreSQLParserYEAR-650))|(1<<(PostgreSQLParserZONE-650)))) != 0) || (((_la-720)&-(0x1f+1)) == 0 && ((1<<uint((_la-720)))&((1<<(PostgreSQLParserABSTIME-720))|(1<<(PostgreSQLParserBIGSERIAL-720))|(1<<(PostgreSQLParserBIT_VARYING-720))|(1<<(PostgreSQLParserBOOL-720))|(1<<(PostgreSQLParserBOX-720))|(1<<(PostgreSQLParserBYTEA-720))|(1<<(PostgreSQLParserCHARACTER_VARYING-720))|(1<<(PostgreSQLParserCIDR-720))|(1<<(PostgreSQLParserCIRCLE-720))|(1<<(PostgreSQLParserFLOAT4-720))|(1<<(PostgreSQLParserFLOAT8-720))|(1<<(PostgreSQLParserINET-720))|(1<<(PostgreSQLParserINT2-720))|(1<<(PostgreSQLParserINT4-720))|(1<<(PostgreSQLParserINT8-720))|(1<<(PostgreSQLParserJSON-720))|(1<<(PostgreSQLParserJSONB-720))|(1<<(PostgreSQLParserLINE-720))|(1<<(PostgreSQLParserLSEG-720))|(1<<(PostgreSQLParserMACADDR-720))|(1<<(PostgreSQLParserMACADDR8-720))|(1<<(PostgreSQLParserMONEY-720))|(1<<(PostgreSQLParserPG_LSN-720))|(1<<(PostgreSQLParserPOINT-720))|(1<<(PostgreSQLParserPOLYGON-720))|(1<<(PostgreSQLParserRELTIME-720))|(1<<(PostgreSQLParserSERIAL-720))|(1<<(PostgreSQLParserSERIAL2-720))|(1<<(PostgreSQLParserSERIAL4-720))|(1<<(PostgreSQLParserSERIAL8-720))|(1<<(PostgreSQLParserSMALLSERIAL-720)))) != 0) || (((_la-752)&-(0x1f+1)) == 0 && ((1<<uint((_la-752)))&((1<<(PostgreSQLParserTEXT-752))|(1<<(PostgreSQLParserTIMESTAMPTZ-752))|(1<<(PostgreSQLParserTIMETZ-752))|(1<<(PostgreSQLParserTSQUERY-752))|(1<<(PostgreSQLParserTSVECTOR-752))|(1<<(PostgreSQLParserTXID_SNAPSHOT-752))|(1<<(PostgreSQLParserUUID-752))|(1<<(PostgreSQLParserVARBIT-752))|(1<<(PostgreSQLParserXML-752))|(1<<(PostgreSQLParserDOUBLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserIDENTIFIER-752))|(1<<(PostgreSQLParserIDENTIFIER_UNICODE-752)))) != 0) {
		p.SetState(4876)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 573, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4875)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*Func_sig_argContext).argmode = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserIN || _la == PostgreSQLParserINOUT || _la == PostgreSQLParserOUT || _la == PostgreSQLParserVARIADIC) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*Func_sig_argContext).argmode = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(4879)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 574, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4878)

				var _x = p.identifier(0)

				localctx.(*Func_sig_argContext).argname = _x
			}

		}
		{
			p.SetState(4881)

			var _x = p.Data_type()

			localctx.(*Func_sig_argContext).argtype = _x
		}

	}

	return localctx
}

// IFunc_sig_arg_listContext is an interface to support dynamic dispatch.
type IFunc_sig_arg_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunc_sig_arg_listContext differentiates from other interfaces.
	IsFunc_sig_arg_listContext()
}

type Func_sig_arg_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunc_sig_arg_listContext() *Func_sig_arg_listContext {
	var p = new(Func_sig_arg_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_func_sig_arg_list
	return p
}

func (*Func_sig_arg_listContext) IsFunc_sig_arg_listContext() {}

func NewFunc_sig_arg_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Func_sig_arg_listContext {
	var p = new(Func_sig_arg_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_func_sig_arg_list

	return p
}

func (s *Func_sig_arg_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Func_sig_arg_listContext) AllFunc_sig_arg() []IFunc_sig_argContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunc_sig_argContext)(nil)).Elem())
	var tst = make([]IFunc_sig_argContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunc_sig_argContext)
		}
	}

	return tst
}

func (s *Func_sig_arg_listContext) Func_sig_arg(i int) IFunc_sig_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_sig_argContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunc_sig_argContext)
}

func (s *Func_sig_arg_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Func_sig_arg_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Func_sig_arg_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Func_sig_arg_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Func_sig_arg_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterFunc_sig_arg_list(s)
	}
}

func (s *Func_sig_arg_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitFunc_sig_arg_list(s)
	}
}

func (p *PostgreSQLParser) Func_sig_arg_list() (localctx IFunc_sig_arg_listContext) {
	localctx = NewFunc_sig_arg_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 448, PostgreSQLParserRULE_func_sig_arg_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4884)
		p.Func_sig_arg()
	}
	p.SetState(4889)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(4885)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(4886)
			p.Func_sig_arg()
		}

		p.SetState(4891)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFunc_sigContext is an interface to support dynamic dispatch.
type IFunc_sigContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsFunc_sigContext differentiates from other interfaces.
	IsFunc_sigContext()
}

type Func_sigContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyFunc_sigContext() *Func_sigContext {
	var p = new(Func_sigContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_func_sig
	return p
}

func (*Func_sigContext) IsFunc_sigContext() {}

func NewFunc_sigContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Func_sigContext {
	var p = new(Func_sigContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_func_sig

	return p
}

func (s *Func_sigContext) GetParser() antlr.Parser { return s.parser }

func (s *Func_sigContext) GetName() IIdentifierContext { return s.name }

func (s *Func_sigContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Func_sigContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Func_sigContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Func_sigContext) Func_sig_arg_list() IFunc_sig_arg_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_sig_arg_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_sig_arg_listContext)
}

func (s *Func_sigContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Func_sigContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Func_sigContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Func_sigContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterFunc_sig(s)
	}
}

func (s *Func_sigContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitFunc_sig(s)
	}
}

func (p *PostgreSQLParser) Func_sig() (localctx IFunc_sigContext) {
	localctx = NewFunc_sigContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 450, PostgreSQLParserRULE_func_sig)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4892)

		var _x = p.identifier(0)

		localctx.(*Func_sigContext).name = _x
	}
	p.SetState(4897)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserOPEN_PAREN {
		{
			p.SetState(4893)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(4894)
			p.Func_sig_arg_list()
		}
		{
			p.SetState(4895)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}

	return localctx
}

// IFunc_sig_listContext is an interface to support dynamic dispatch.
type IFunc_sig_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunc_sig_listContext differentiates from other interfaces.
	IsFunc_sig_listContext()
}

type Func_sig_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunc_sig_listContext() *Func_sig_listContext {
	var p = new(Func_sig_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_func_sig_list
	return p
}

func (*Func_sig_listContext) IsFunc_sig_listContext() {}

func NewFunc_sig_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Func_sig_listContext {
	var p = new(Func_sig_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_func_sig_list

	return p
}

func (s *Func_sig_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Func_sig_listContext) AllFunc_sig() []IFunc_sigContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunc_sigContext)(nil)).Elem())
	var tst = make([]IFunc_sigContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunc_sigContext)
		}
	}

	return tst
}

func (s *Func_sig_listContext) Func_sig(i int) IFunc_sigContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_sigContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunc_sigContext)
}

func (s *Func_sig_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Func_sig_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Func_sig_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Func_sig_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Func_sig_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterFunc_sig_list(s)
	}
}

func (s *Func_sig_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitFunc_sig_list(s)
	}
}

func (p *PostgreSQLParser) Func_sig_list() (localctx IFunc_sig_listContext) {
	localctx = NewFunc_sig_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 452, PostgreSQLParserRULE_func_sig_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4899)
		p.Func_sig()
	}
	p.SetState(4904)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(4900)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(4901)
			p.Func_sig()
		}

		p.SetState(4906)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IType_nameContext is an interface to support dynamic dispatch.
type IType_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_nameContext differentiates from other interfaces.
	IsType_nameContext()
}

type Type_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_nameContext() *Type_nameContext {
	var p = new(Type_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_type_name
	return p
}

func (*Type_nameContext) IsType_nameContext() {}

func NewType_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_nameContext {
	var p = new(Type_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_type_name

	return p
}

func (s *Type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_nameContext) ABSTIME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserABSTIME, 0)
}

func (s *Type_nameContext) RELTIME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRELTIME, 0)
}

func (s *Type_nameContext) BIGINT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBIGINT, 0)
}

func (s *Type_nameContext) BIGSERIAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBIGSERIAL, 0)
}

func (s *Type_nameContext) BIT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBIT, 0)
}

func (s *Type_nameContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Type_nameContext) AllINTEGER_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserINTEGER_LITERAL)
}

func (s *Type_nameContext) INTEGER_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, i)
}

func (s *Type_nameContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Type_nameContext) BIT_VARYING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBIT_VARYING, 0)
}

func (s *Type_nameContext) BOOL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBOOL, 0)
}

func (s *Type_nameContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBOOLEAN, 0)
}

func (s *Type_nameContext) BOX() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBOX, 0)
}

func (s *Type_nameContext) BYTEA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBYTEA, 0)
}

func (s *Type_nameContext) CHAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHAR, 0)
}

func (s *Type_nameContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHARACTER, 0)
}

func (s *Type_nameContext) CHARACTER_VARYING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHARACTER_VARYING, 0)
}

func (s *Type_nameContext) CIDR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCIDR, 0)
}

func (s *Type_nameContext) CIRCLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCIRCLE, 0)
}

func (s *Type_nameContext) DATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDATE, 0)
}

func (s *Type_nameContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDECIMAL, 0)
}

func (s *Type_nameContext) COMMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, 0)
}

func (s *Type_nameContext) DOUBLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDOUBLE, 0)
}

func (s *Type_nameContext) PRECISION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPRECISION, 0)
}

func (s *Type_nameContext) FLOAT4() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFLOAT4, 0)
}

func (s *Type_nameContext) FLOAT8() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFLOAT8, 0)
}

func (s *Type_nameContext) INET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINET, 0)
}

func (s *Type_nameContext) INT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINT, 0)
}

func (s *Type_nameContext) INT4() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINT4, 0)
}

func (s *Type_nameContext) INT2() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINT2, 0)
}

func (s *Type_nameContext) INT8() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINT8, 0)
}

func (s *Type_nameContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER, 0)
}

func (s *Type_nameContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTERVAL, 0)
}

func (s *Type_nameContext) FIELDS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFIELDS, 0)
}

func (s *Type_nameContext) JSON() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserJSON, 0)
}

func (s *Type_nameContext) JSONB() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserJSONB, 0)
}

func (s *Type_nameContext) LINE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLINE, 0)
}

func (s *Type_nameContext) LSEG() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLSEG, 0)
}

func (s *Type_nameContext) MACADDR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMACADDR, 0)
}

func (s *Type_nameContext) MACADDR8() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMACADDR8, 0)
}

func (s *Type_nameContext) MONEY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMONEY, 0)
}

func (s *Type_nameContext) NUMERIC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNUMERIC, 0)
}

func (s *Type_nameContext) PATH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPATH, 0)
}

func (s *Type_nameContext) PG_LSN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPG_LSN, 0)
}

func (s *Type_nameContext) POINT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPOINT, 0)
}

func (s *Type_nameContext) POLYGON() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPOLYGON, 0)
}

func (s *Type_nameContext) REAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREAL, 0)
}

func (s *Type_nameContext) SERIAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSERIAL, 0)
}

func (s *Type_nameContext) SERIAL2() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSERIAL2, 0)
}

func (s *Type_nameContext) SERIAL4() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSERIAL4, 0)
}

func (s *Type_nameContext) SERIAL8() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSERIAL8, 0)
}

func (s *Type_nameContext) SMALLINT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSMALLINT, 0)
}

func (s *Type_nameContext) SMALLSERIAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSMALLSERIAL, 0)
}

func (s *Type_nameContext) TEXT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEXT, 0)
}

func (s *Type_nameContext) AllTIME() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserTIME)
}

func (s *Type_nameContext) TIME(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIME, i)
}

func (s *Type_nameContext) ZONE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserZONE, 0)
}

func (s *Type_nameContext) WITH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITH, 0)
}

func (s *Type_nameContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITHOUT, 0)
}

func (s *Type_nameContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIMESTAMP, 0)
}

func (s *Type_nameContext) TIMETZ() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIMETZ, 0)
}

func (s *Type_nameContext) TIMESTAMPTZ() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIMESTAMPTZ, 0)
}

func (s *Type_nameContext) TSQUERY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTSQUERY, 0)
}

func (s *Type_nameContext) TSVECTOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTSVECTOR, 0)
}

func (s *Type_nameContext) TXID_SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTXID_SNAPSHOT, 0)
}

func (s *Type_nameContext) UUID() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUUID, 0)
}

func (s *Type_nameContext) VARBIT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVARBIT, 0)
}

func (s *Type_nameContext) VARCHAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVARCHAR, 0)
}

func (s *Type_nameContext) XML() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserXML, 0)
}

func (s *Type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterType_name(s)
	}
}

func (s *Type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitType_name(s)
	}
}

func (p *PostgreSQLParser) Type_name() (localctx IType_nameContext) {
	localctx = NewType_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 454, PostgreSQLParserRULE_type_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5051)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserABSTIME:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4907)
			p.Match(PostgreSQLParserABSTIME)
		}

	case PostgreSQLParserRELTIME:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4908)
			p.Match(PostgreSQLParserRELTIME)
		}

	case PostgreSQLParserBIGINT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4909)
			p.Match(PostgreSQLParserBIGINT)
		}

	case PostgreSQLParserBIGSERIAL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4910)
			p.Match(PostgreSQLParserBIGSERIAL)
		}

	case PostgreSQLParserBIT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4911)
			p.Match(PostgreSQLParserBIT)
		}
		p.SetState(4915)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 579, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4912)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(4913)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}
			{
				p.SetState(4914)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case PostgreSQLParserBIT_VARYING:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4917)
			p.Match(PostgreSQLParserBIT_VARYING)
		}
		p.SetState(4921)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 580, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4918)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(4919)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}
			{
				p.SetState(4920)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case PostgreSQLParserBOOL:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4923)
			p.Match(PostgreSQLParserBOOL)
		}

	case PostgreSQLParserBOOLEAN:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4924)
			p.Match(PostgreSQLParserBOOLEAN)
		}

	case PostgreSQLParserBOX:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4925)
			p.Match(PostgreSQLParserBOX)
		}

	case PostgreSQLParserBYTEA:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4926)
			p.Match(PostgreSQLParserBYTEA)
		}

	case PostgreSQLParserCHAR:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4927)
			p.Match(PostgreSQLParserCHAR)
		}
		p.SetState(4931)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 581, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4928)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(4929)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}
			{
				p.SetState(4930)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case PostgreSQLParserCHARACTER:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(4933)
			p.Match(PostgreSQLParserCHARACTER)
		}
		p.SetState(4937)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 582, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4934)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(4935)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}
			{
				p.SetState(4936)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case PostgreSQLParserCHARACTER_VARYING:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(4939)
			p.Match(PostgreSQLParserCHARACTER_VARYING)
		}
		p.SetState(4943)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 583, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4940)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(4941)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}
			{
				p.SetState(4942)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case PostgreSQLParserCIDR:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(4945)
			p.Match(PostgreSQLParserCIDR)
		}

	case PostgreSQLParserCIRCLE:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(4946)
			p.Match(PostgreSQLParserCIRCLE)
		}

	case PostgreSQLParserDATE:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(4947)
			p.Match(PostgreSQLParserDATE)
		}

	case PostgreSQLParserDECIMAL:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(4948)
			p.Match(PostgreSQLParserDECIMAL)
		}
		p.SetState(4954)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 584, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4949)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(4950)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}
			{
				p.SetState(4951)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(4952)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}
			{
				p.SetState(4953)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case PostgreSQLParserDOUBLE:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(4956)
			p.Match(PostgreSQLParserDOUBLE)
		}
		{
			p.SetState(4957)
			p.Match(PostgreSQLParserPRECISION)
		}

	case PostgreSQLParserFLOAT4:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(4958)
			p.Match(PostgreSQLParserFLOAT4)
		}

	case PostgreSQLParserFLOAT8:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(4959)
			p.Match(PostgreSQLParserFLOAT8)
		}

	case PostgreSQLParserINET:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(4960)
			p.Match(PostgreSQLParserINET)
		}

	case PostgreSQLParserINT:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(4961)
			p.Match(PostgreSQLParserINT)
		}

	case PostgreSQLParserINT4:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(4962)
			p.Match(PostgreSQLParserINT4)
		}

	case PostgreSQLParserINT2:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(4963)
			p.Match(PostgreSQLParserINT2)
		}

	case PostgreSQLParserINT8:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(4964)
			p.Match(PostgreSQLParserINT8)
		}

	case PostgreSQLParserINTEGER:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(4965)
			p.Match(PostgreSQLParserINTEGER)
		}

	case PostgreSQLParserINTERVAL:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(4966)
			p.Match(PostgreSQLParserINTERVAL)
		}
		p.SetState(4968)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 585, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4967)
				p.Match(PostgreSQLParserFIELDS)
			}

		}
		p.SetState(4971)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 586, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4970)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}

		}

	case PostgreSQLParserJSON:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(4973)
			p.Match(PostgreSQLParserJSON)
		}

	case PostgreSQLParserJSONB:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(4974)
			p.Match(PostgreSQLParserJSONB)
		}

	case PostgreSQLParserLINE:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(4975)
			p.Match(PostgreSQLParserLINE)
		}

	case PostgreSQLParserLSEG:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(4976)
			p.Match(PostgreSQLParserLSEG)
		}

	case PostgreSQLParserMACADDR:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(4977)
			p.Match(PostgreSQLParserMACADDR)
		}

	case PostgreSQLParserMACADDR8:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(4978)
			p.Match(PostgreSQLParserMACADDR8)
		}

	case PostgreSQLParserMONEY:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(4979)
			p.Match(PostgreSQLParserMONEY)
		}

	case PostgreSQLParserNUMERIC:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(4980)
			p.Match(PostgreSQLParserNUMERIC)
		}
		p.SetState(4986)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 587, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4981)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(4982)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}
			{
				p.SetState(4983)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(4984)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}
			{
				p.SetState(4985)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case PostgreSQLParserPATH:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(4988)
			p.Match(PostgreSQLParserPATH)
		}

	case PostgreSQLParserPG_LSN:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(4989)
			p.Match(PostgreSQLParserPG_LSN)
		}

	case PostgreSQLParserPOINT:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(4990)
			p.Match(PostgreSQLParserPOINT)
		}

	case PostgreSQLParserPOLYGON:
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(4991)
			p.Match(PostgreSQLParserPOLYGON)
		}

	case PostgreSQLParserREAL:
		p.EnterOuterAlt(localctx, 40)
		{
			p.SetState(4992)
			p.Match(PostgreSQLParserREAL)
		}

	case PostgreSQLParserSERIAL:
		p.EnterOuterAlt(localctx, 41)
		{
			p.SetState(4993)
			p.Match(PostgreSQLParserSERIAL)
		}

	case PostgreSQLParserSERIAL2:
		p.EnterOuterAlt(localctx, 42)
		{
			p.SetState(4994)
			p.Match(PostgreSQLParserSERIAL2)
		}

	case PostgreSQLParserSERIAL4:
		p.EnterOuterAlt(localctx, 43)
		{
			p.SetState(4995)
			p.Match(PostgreSQLParserSERIAL4)
		}

	case PostgreSQLParserSERIAL8:
		p.EnterOuterAlt(localctx, 44)
		{
			p.SetState(4996)
			p.Match(PostgreSQLParserSERIAL8)
		}

	case PostgreSQLParserSMALLINT:
		p.EnterOuterAlt(localctx, 45)
		{
			p.SetState(4997)
			p.Match(PostgreSQLParserSMALLINT)
		}

	case PostgreSQLParserSMALLSERIAL:
		p.EnterOuterAlt(localctx, 46)
		{
			p.SetState(4998)
			p.Match(PostgreSQLParserSMALLSERIAL)
		}

	case PostgreSQLParserTEXT:
		p.EnterOuterAlt(localctx, 47)
		{
			p.SetState(4999)
			p.Match(PostgreSQLParserTEXT)
		}

	case PostgreSQLParserTIME:
		p.EnterOuterAlt(localctx, 48)
		{
			p.SetState(5000)
			p.Match(PostgreSQLParserTIME)
		}
		p.SetState(5004)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 588, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5001)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(5002)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}
			{
				p.SetState(5003)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}
		p.SetState(5009)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 589, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5006)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserWITH || _la == PostgreSQLParserWITHOUT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(5007)
				p.Match(PostgreSQLParserTIME)
			}
			{
				p.SetState(5008)
				p.Match(PostgreSQLParserZONE)
			}

		}

	case PostgreSQLParserTIMESTAMP:
		p.EnterOuterAlt(localctx, 49)
		{
			p.SetState(5011)
			p.Match(PostgreSQLParserTIMESTAMP)
		}
		p.SetState(5015)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 590, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5012)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(5013)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}
			{
				p.SetState(5014)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}
		p.SetState(5020)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 591, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5017)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserWITH || _la == PostgreSQLParserWITHOUT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(5018)
				p.Match(PostgreSQLParserTIME)
			}
			{
				p.SetState(5019)
				p.Match(PostgreSQLParserZONE)
			}

		}

	case PostgreSQLParserTIMETZ:
		p.EnterOuterAlt(localctx, 50)
		{
			p.SetState(5022)
			p.Match(PostgreSQLParserTIMETZ)
		}
		p.SetState(5026)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 592, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5023)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(5024)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}
			{
				p.SetState(5025)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case PostgreSQLParserTIMESTAMPTZ:
		p.EnterOuterAlt(localctx, 51)
		{
			p.SetState(5028)
			p.Match(PostgreSQLParserTIMESTAMPTZ)
		}
		p.SetState(5032)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 593, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5029)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(5030)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}
			{
				p.SetState(5031)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case PostgreSQLParserTSQUERY:
		p.EnterOuterAlt(localctx, 52)
		{
			p.SetState(5034)
			p.Match(PostgreSQLParserTSQUERY)
		}

	case PostgreSQLParserTSVECTOR:
		p.EnterOuterAlt(localctx, 53)
		{
			p.SetState(5035)
			p.Match(PostgreSQLParserTSVECTOR)
		}

	case PostgreSQLParserTXID_SNAPSHOT:
		p.EnterOuterAlt(localctx, 54)
		{
			p.SetState(5036)
			p.Match(PostgreSQLParserTXID_SNAPSHOT)
		}

	case PostgreSQLParserUUID:
		p.EnterOuterAlt(localctx, 55)
		{
			p.SetState(5037)
			p.Match(PostgreSQLParserUUID)
		}

	case PostgreSQLParserVARBIT:
		p.EnterOuterAlt(localctx, 56)
		{
			p.SetState(5038)
			p.Match(PostgreSQLParserVARBIT)
		}
		p.SetState(5042)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 594, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5039)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(5040)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}
			{
				p.SetState(5041)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case PostgreSQLParserVARCHAR:
		p.EnterOuterAlt(localctx, 57)
		{
			p.SetState(5044)
			p.Match(PostgreSQLParserVARCHAR)
		}
		p.SetState(5048)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 595, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5045)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(5046)
				p.Match(PostgreSQLParserINTEGER_LITERAL)
			}
			{
				p.SetState(5047)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case PostgreSQLParserXML:
		p.EnterOuterAlt(localctx, 58)
		{
			p.SetState(5050)
			p.Match(PostgreSQLParserXML)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITimezoneContext is an interface to support dynamic dispatch.
type ITimezoneContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTimezoneContext differentiates from other interfaces.
	IsTimezoneContext()
}

type TimezoneContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimezoneContext() *TimezoneContext {
	var p = new(TimezoneContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_timezone
	return p
}

func (*TimezoneContext) IsTimezoneContext() {}

func NewTimezoneContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TimezoneContext {
	var p = new(TimezoneContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_timezone

	return p
}

func (s *TimezoneContext) GetParser() antlr.Parser { return s.parser }

func (s *TimezoneContext) SINGLEQ_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSINGLEQ_STRING_LITERAL, 0)
}

func (s *TimezoneContext) DOUBLEQ_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDOUBLEQ_STRING_LITERAL, 0)
}

func (s *TimezoneContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, 0)
}

func (s *TimezoneContext) NUMERIC_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNUMERIC_LITERAL, 0)
}

func (s *TimezoneContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimezoneContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TimezoneContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterTimezone(s)
	}
}

func (s *TimezoneContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitTimezone(s)
	}
}

func (p *PostgreSQLParser) Timezone() (localctx ITimezoneContext) {
	localctx = NewTimezoneContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 456, PostgreSQLParserRULE_timezone)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5053)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-773)&-(0x1f+1)) == 0 && ((1<<uint((_la-773)))&((1<<(PostgreSQLParserNUMERIC_LITERAL-773))|(1<<(PostgreSQLParserINTEGER_LITERAL-773))|(1<<(PostgreSQLParserSINGLEQ_STRING_LITERAL-773))|(1<<(PostgreSQLParserDOUBLEQ_STRING_LITERAL-773)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOperContext is an interface to support dynamic dispatch.
type IOperContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperContext differentiates from other interfaces.
	IsOperContext()
}

type OperContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperContext() *OperContext {
	var p = new(OperContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_oper
	return p
}

func (*OperContext) IsOperContext() {}

func NewOperContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperContext {
	var p = new(OperContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_oper

	return p
}

func (s *OperContext) GetParser() antlr.Parser { return s.parser }

func (s *OperContext) IS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIS, 0)
}

func (s *OperContext) OF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOF, 0)
}

func (s *OperContext) ALL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALL, 0)
}

func (s *OperContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterOper(s)
	}
}

func (s *OperContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitOper(s)
	}
}

func (p *PostgreSQLParser) Oper() (localctx IOperContext) {
	localctx = NewOperContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 458, PostgreSQLParserRULE_oper)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5059)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 597, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5056)
			p.Match(PostgreSQLParserIS)
		}
		{
			p.SetState(5057)
			p.Match(PostgreSQLParserOF)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5058)
			p.Match(PostgreSQLParserALL)
		}

	}

	return localctx
}

// IAggregateContext is an interface to support dynamic dispatch.
type IAggregateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAggregateContext differentiates from other interfaces.
	IsAggregateContext()
}

type AggregateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAggregateContext() *AggregateContext {
	var p = new(AggregateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_aggregate
	return p
}

func (*AggregateContext) IsAggregateContext() {}

func NewAggregateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AggregateContext {
	var p = new(AggregateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_aggregate

	return p
}

func (s *AggregateContext) GetParser() antlr.Parser { return s.parser }

func (s *AggregateContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AggregateContext) AllOPEN_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPEN_PAREN)
}

func (s *AggregateContext) OPEN_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, i)
}

func (s *AggregateContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *AggregateContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *AggregateContext) AllCLOSE_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCLOSE_PAREN)
}

func (s *AggregateContext) CLOSE_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, i)
}

func (s *AggregateContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *AggregateContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *AggregateContext) Order_by_clause() IOrder_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *AggregateContext) FILTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFILTER, 0)
}

func (s *AggregateContext) WHERE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWHERE, 0)
}

func (s *AggregateContext) Where_clause() IWhere_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhere_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhere_clauseContext)
}

func (s *AggregateContext) ALL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALL, 0)
}

func (s *AggregateContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDISTINCT, 0)
}

func (s *AggregateContext) STAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTAR, 0)
}

func (s *AggregateContext) WITHIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITHIN, 0)
}

func (s *AggregateContext) GROUP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGROUP, 0)
}

func (s *AggregateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AggregateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AggregateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAggregate(s)
	}
}

func (s *AggregateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAggregate(s)
	}
}

func (p *PostgreSQLParser) Aggregate() (localctx IAggregateContext) {
	localctx = NewAggregateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 460, PostgreSQLParserRULE_aggregate)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5124)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 606, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5061)
			p.identifier(0)
		}
		{
			p.SetState(5062)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		p.SetState(5064)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 598, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5063)
				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserALL || _la == PostgreSQLParserDISTINCT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(5066)
			p.expr(0)
		}
		p.SetState(5071)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PostgreSQLParserCOMMA {
			{
				p.SetState(5067)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(5068)
				p.expr(0)
			}

			p.SetState(5073)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(5075)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserORDER {
			{
				p.SetState(5074)
				p.Order_by_clause()
			}

		}
		{
			p.SetState(5077)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}
		p.SetState(5084)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 601, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5078)
				p.Match(PostgreSQLParserFILTER)
			}
			{
				p.SetState(5079)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(5080)
				p.Match(PostgreSQLParserWHERE)
			}
			{
				p.SetState(5081)
				p.Where_clause()
			}
			{
				p.SetState(5082)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5086)
			p.identifier(0)
		}
		{
			p.SetState(5087)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(5088)
			p.Match(PostgreSQLParserSTAR)
		}
		{
			p.SetState(5089)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}
		p.SetState(5096)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 602, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5090)
				p.Match(PostgreSQLParserFILTER)
			}
			{
				p.SetState(5091)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(5092)
				p.Match(PostgreSQLParserWHERE)
			}
			{
				p.SetState(5093)
				p.Where_clause()
			}
			{
				p.SetState(5094)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5098)
			p.identifier(0)
		}
		{
			p.SetState(5099)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		p.SetState(5108)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PostgreSQLParserWHITESPACE)|(1<<PostgreSQLParserA_)|(1<<PostgreSQLParserABORT)|(1<<PostgreSQLParserABS)|(1<<PostgreSQLParserABSOLUTE)|(1<<PostgreSQLParserACCESS)|(1<<PostgreSQLParserACTION)|(1<<PostgreSQLParserADA)|(1<<PostgreSQLParserADD)|(1<<PostgreSQLParserADMIN)|(1<<PostgreSQLParserAFTER)|(1<<PostgreSQLParserAGGREGATE)|(1<<PostgreSQLParserALL)|(1<<PostgreSQLParserALLOCATE)|(1<<PostgreSQLParserALSO)|(1<<PostgreSQLParserALTER)|(1<<PostgreSQLParserALWAYS)|(1<<PostgreSQLParserANY)|(1<<PostgreSQLParserARE)|(1<<PostgreSQLParserARRAY)|(1<<PostgreSQLParserASENSITIVE)|(1<<PostgreSQLParserASSERTION)|(1<<PostgreSQLParserASSIGNMENT))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(PostgreSQLParserAT-33))|(1<<(PostgreSQLParserATOMIC-33))|(1<<(PostgreSQLParserATTRIBUTE-33))|(1<<(PostgreSQLParserATTRIBUTES-33))|(1<<(PostgreSQLParserAVG-33))|(1<<(PostgreSQLParserBACKWARD-33))|(1<<(PostgreSQLParserBEFORE-33))|(1<<(PostgreSQLParserBEGIN-33))|(1<<(PostgreSQLParserBERNOULLI-33))|(1<<(PostgreSQLParserBETWEEN-33))|(1<<(PostgreSQLParserBIGINT-33))|(1<<(PostgreSQLParserBIT-33))|(1<<(PostgreSQLParserBIT_LENGTH-33))|(1<<(PostgreSQLParserBLOB-33))|(1<<(PostgreSQLParserBOOLEAN-33))|(1<<(PostgreSQLParserBREADTH-33))|(1<<(PostgreSQLParserBY-33))|(1<<(PostgreSQLParserC_-33))|(1<<(PostgreSQLParserCACHE-33))|(1<<(PostgreSQLParserCALL-33))|(1<<(PostgreSQLParserCALLED-33))|(1<<(PostgreSQLParserCARDINALITY-33))|(1<<(PostgreSQLParserCASCADE-33))|(1<<(PostgreSQLParserCASCADED-33))|(1<<(PostgreSQLParserCASE-33))|(1<<(PostgreSQLParserCAST-33))|(1<<(PostgreSQLParserCATALOG-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PostgreSQLParserCATALOG_NAME-65))|(1<<(PostgreSQLParserCEIL-65))|(1<<(PostgreSQLParserCEILING-65))|(1<<(PostgreSQLParserCHAIN-65))|(1<<(PostgreSQLParserCHAR-65))|(1<<(PostgreSQLParserCHAR_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER-65))|(1<<(PostgreSQLParserCHARACTER_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER_SET_CATALOG-65))|(1<<(PostgreSQLParserCHARACTER_SET_NAME-65))|(1<<(PostgreSQLParserCHARACTER_SET_SCHEMA-65))|(1<<(PostgreSQLParserCHARACTERISTICS-65))|(1<<(PostgreSQLParserCHARACTERS-65))|(1<<(PostgreSQLParserCHECKPOINT-65))|(1<<(PostgreSQLParserCLASS-65))|(1<<(PostgreSQLParserCLASS_ORIGIN-65))|(1<<(PostgreSQLParserCLOB-65))|(1<<(PostgreSQLParserCLOSE-65))|(1<<(PostgreSQLParserCLUSTER-65))|(1<<(PostgreSQLParserCOALESCE-65))|(1<<(PostgreSQLParserCOBOL-65))|(1<<(PostgreSQLParserCOLLATION_CATALOG-65))|(1<<(PostgreSQLParserCOLLATION_NAME-65))|(1<<(PostgreSQLParserCOLLATION_SCHEMA-65))|(1<<(PostgreSQLParserCOLLECT-65))|(1<<(PostgreSQLParserCOLUMN_NAME-65))|(1<<(PostgreSQLParserCOMMAND_FUNCTION-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(PostgreSQLParserCOMMAND_FUNCTION_CODE-97))|(1<<(PostgreSQLParserCOMMENT-97))|(1<<(PostgreSQLParserCOMMIT-97))|(1<<(PostgreSQLParserCOMMITTED-97))|(1<<(PostgreSQLParserCONDITION-97))|(1<<(PostgreSQLParserCONDITION_NUMBER-97))|(1<<(PostgreSQLParserCONNECT-97))|(1<<(PostgreSQLParserCONNECTION-97))|(1<<(PostgreSQLParserCONNECTION_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_CATALOG-97))|(1<<(PostgreSQLParserCONSTRAINT_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_SCHEMA-97))|(1<<(PostgreSQLParserCONSTRAINTS-97))|(1<<(PostgreSQLParserCONSTRUCTOR-97))|(1<<(PostgreSQLParserCONTAINS-97))|(1<<(PostgreSQLParserCONTINUE-97))|(1<<(PostgreSQLParserCONVERSION-97))|(1<<(PostgreSQLParserCONVERT-97))|(1<<(PostgreSQLParserCOPY-97))|(1<<(PostgreSQLParserCORR-97))|(1<<(PostgreSQLParserCORRESPONDING-97))|(1<<(PostgreSQLParserCOUNT-97))|(1<<(PostgreSQLParserCOVAR_POP-97))|(1<<(PostgreSQLParserCOVAR_SAMP-97)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(PostgreSQLParserCSV-131))|(1<<(PostgreSQLParserCUBE-131))|(1<<(PostgreSQLParserCUME_DIST-131))|(1<<(PostgreSQLParserCURRENT-131))|(1<<(PostgreSQLParserCURRENT_DATE-131))|(1<<(PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP-131))|(1<<(PostgreSQLParserCURRENT_PATH-131))|(1<<(PostgreSQLParserCURRENT_ROLE-131))|(1<<(PostgreSQLParserCURRENT_TIME-131))|(1<<(PostgreSQLParserCURRENT_TIMESTAMP-131))|(1<<(PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE-131))|(1<<(PostgreSQLParserCURRENT_USER-131))|(1<<(PostgreSQLParserCURSOR-131))|(1<<(PostgreSQLParserCURSOR_NAME-131))|(1<<(PostgreSQLParserCYCLE-131))|(1<<(PostgreSQLParserDATA-131))|(1<<(PostgreSQLParserDATABASE-131))|(1<<(PostgreSQLParserDATE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_CODE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_PRECISION-131))|(1<<(PostgreSQLParserDAY-131))|(1<<(PostgreSQLParserDEALLOCATE-131))|(1<<(PostgreSQLParserDEC-131))|(1<<(PostgreSQLParserDECIMAL-131))|(1<<(PostgreSQLParserDECLARE-131))|(1<<(PostgreSQLParserDEFAULT-131))|(1<<(PostgreSQLParserDEFAULTS-131))|(1<<(PostgreSQLParserDEFERRED-131))|(1<<(PostgreSQLParserDEFINED-131))|(1<<(PostgreSQLParserDEFINER-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(PostgreSQLParserDEGREE-163))|(1<<(PostgreSQLParserDELETE-163))|(1<<(PostgreSQLParserDELIMITER-163))|(1<<(PostgreSQLParserDELIMITERS-163))|(1<<(PostgreSQLParserDENSE_RANK-163))|(1<<(PostgreSQLParserDEPTH-163))|(1<<(PostgreSQLParserDEREF-163))|(1<<(PostgreSQLParserDERIVED-163))|(1<<(PostgreSQLParserDESCRIBE-163))|(1<<(PostgreSQLParserDESCRIPTOR-163))|(1<<(PostgreSQLParserDETERMINISTIC-163))|(1<<(PostgreSQLParserDIAGNOSTICS-163))|(1<<(PostgreSQLParserDICTIONARY-163))|(1<<(PostgreSQLParserDISCONNECT-163))|(1<<(PostgreSQLParserDISPATCH-163))|(1<<(PostgreSQLParserDOMAIN-163))|(1<<(PostgreSQLParserDOUBLE-163))|(1<<(PostgreSQLParserDYNAMIC-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION_CODE-163))|(1<<(PostgreSQLParserEACH-163))|(1<<(PostgreSQLParserELEMENT-163)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(PostgreSQLParserENCODING-197))|(1<<(PostgreSQLParserENCRYPTED-197))|(1<<(PostgreSQLParserEND-197))|(1<<(PostgreSQLParserEQUALS-197))|(1<<(PostgreSQLParserESCAPE-197))|(1<<(PostgreSQLParserEVERY-197))|(1<<(PostgreSQLParserEXCEPTION-197))|(1<<(PostgreSQLParserEXCLUDE-197))|(1<<(PostgreSQLParserEXCLUDING-197))|(1<<(PostgreSQLParserEXCLUSIVE-197))|(1<<(PostgreSQLParserEXEC-197))|(1<<(PostgreSQLParserEXECUTE-197))|(1<<(PostgreSQLParserEXISTS-197))|(1<<(PostgreSQLParserEXP-197))|(1<<(PostgreSQLParserEXPLAIN-197))|(1<<(PostgreSQLParserEXTENSION-197))|(1<<(PostgreSQLParserEXTERNAL-197))|(1<<(PostgreSQLParserEXTRACT-197))|(1<<(PostgreSQLParserFALSE-197))|(1<<(PostgreSQLParserFILTER-197))|(1<<(PostgreSQLParserFINAL-197))|(1<<(PostgreSQLParserFIRST-197))|(1<<(PostgreSQLParserFLOAT-197))|(1<<(PostgreSQLParserFLOOR-197))|(1<<(PostgreSQLParserFOLLOWING-197)))) != 0) || (((_la-229)&-(0x1f+1)) == 0 && ((1<<uint((_la-229)))&((1<<(PostgreSQLParserFORCE-229))|(1<<(PostgreSQLParserFORMAT-229))|(1<<(PostgreSQLParserFORTRAN-229))|(1<<(PostgreSQLParserFORWARD-229))|(1<<(PostgreSQLParserFOUND-229))|(1<<(PostgreSQLParserFREE-229))|(1<<(PostgreSQLParserFUNCTION-229))|(1<<(PostgreSQLParserFUSION-229))|(1<<(PostgreSQLParserG_-229))|(1<<(PostgreSQLParserGENERAL-229))|(1<<(PostgreSQLParserGENERATED-229))|(1<<(PostgreSQLParserGET-229))|(1<<(PostgreSQLParserGLOBAL-229))|(1<<(PostgreSQLParserGO-229))|(1<<(PostgreSQLParserGOTO-229))|(1<<(PostgreSQLParserGRANTED-229))|(1<<(PostgreSQLParserGREATEST-229))|(1<<(PostgreSQLParserGROUPING-229))|(1<<(PostgreSQLParserHANDLER-229))|(1<<(PostgreSQLParserHIERARCHY-229))|(1<<(PostgreSQLParserHOLD-229))|(1<<(PostgreSQLParserHOST-229))|(1<<(PostgreSQLParserHOUR-229))|(1<<(PostgreSQLParserIDENTITY-229))|(1<<(PostgreSQLParserIGNORE-229)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(PostgreSQLParserIMMEDIATE-262))|(1<<(PostgreSQLParserIMMUTABLE-262))|(1<<(PostgreSQLParserIMPLEMENTATION-262))|(1<<(PostgreSQLParserIMPLICIT-262))|(1<<(PostgreSQLParserINCLUDING-262))|(1<<(PostgreSQLParserINCREMENT-262))|(1<<(PostgreSQLParserINDEX-262))|(1<<(PostgreSQLParserINDICATOR-262))|(1<<(PostgreSQLParserINHERITS-262))|(1<<(PostgreSQLParserINOUT-262))|(1<<(PostgreSQLParserINPUT-262))|(1<<(PostgreSQLParserINSENSITIVE-262))|(1<<(PostgreSQLParserINSERT-262))|(1<<(PostgreSQLParserINSTANCE-262))|(1<<(PostgreSQLParserINSTANTIABLE-262))|(1<<(PostgreSQLParserINSTEAD-262))|(1<<(PostgreSQLParserINT-262))|(1<<(PostgreSQLParserINTEGER-262))|(1<<(PostgreSQLParserINTERSECTION-262))|(1<<(PostgreSQLParserINTERVAL-262))|(1<<(PostgreSQLParserINVOKER-262))|(1<<(PostgreSQLParserISOLATION-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(PostgreSQLParserK_-294))|(1<<(PostgreSQLParserKEY-294))|(1<<(PostgreSQLParserKEY_MEMBER-294))|(1<<(PostgreSQLParserKEY_TYPE-294))|(1<<(PostgreSQLParserLANGUAGE-294))|(1<<(PostgreSQLParserLARGE-294))|(1<<(PostgreSQLParserLAST-294))|(1<<(PostgreSQLParserLEAST-294))|(1<<(PostgreSQLParserLEFT-294))|(1<<(PostgreSQLParserLENGTH-294))|(1<<(PostgreSQLParserLEVEL-294))|(1<<(PostgreSQLParserLISTEN-294))|(1<<(PostgreSQLParserLN-294))|(1<<(PostgreSQLParserLOAD-294))|(1<<(PostgreSQLParserLOCAL-294))|(1<<(PostgreSQLParserLOCATION-294))|(1<<(PostgreSQLParserLOCATOR-294))|(1<<(PostgreSQLParserLOCK-294))|(1<<(PostgreSQLParserLOCKED-294))|(1<<(PostgreSQLParserLOWER-294))|(1<<(PostgreSQLParserM_-294))|(1<<(PostgreSQLParserMAP-294)))) != 0) || (((_la-327)&-(0x1f+1)) == 0 && ((1<<uint((_la-327)))&((1<<(PostgreSQLParserMATCH-327))|(1<<(PostgreSQLParserMATCHED-327))|(1<<(PostgreSQLParserMAX-327))|(1<<(PostgreSQLParserMAXVALUE-327))|(1<<(PostgreSQLParserMEMBER-327))|(1<<(PostgreSQLParserMERGE-327))|(1<<(PostgreSQLParserMESSAGE_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_OCTET_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_TEXT-327))|(1<<(PostgreSQLParserMETHOD-327))|(1<<(PostgreSQLParserMIN-327))|(1<<(PostgreSQLParserMINUTE-327))|(1<<(PostgreSQLParserMINVALUE-327))|(1<<(PostgreSQLParserMOD-327))|(1<<(PostgreSQLParserMODE-327))|(1<<(PostgreSQLParserMODIFIES-327))|(1<<(PostgreSQLParserMODULE-327))|(1<<(PostgreSQLParserMONTH-327))|(1<<(PostgreSQLParserMORE_-327))|(1<<(PostgreSQLParserMOVE-327))|(1<<(PostgreSQLParserMULTISET-327))|(1<<(PostgreSQLParserMUMPS-327))|(1<<(PostgreSQLParserNAME-327))|(1<<(PostgreSQLParserNAMES-327))|(1<<(PostgreSQLParserNATIONAL-327))|(1<<(PostgreSQLParserNCHAR-327))|(1<<(PostgreSQLParserNCLOB-327))|(1<<(PostgreSQLParserNESTING-327))|(1<<(PostgreSQLParserNEW-327)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(PostgreSQLParserNEXT-359))|(1<<(PostgreSQLParserNO-359))|(1<<(PostgreSQLParserNONE-359))|(1<<(PostgreSQLParserNORMALIZE-359))|(1<<(PostgreSQLParserNORMALIZED-359))|(1<<(PostgreSQLParserNOT-359))|(1<<(PostgreSQLParserNOTHING-359))|(1<<(PostgreSQLParserNOTIFY-359))|(1<<(PostgreSQLParserNOWAIT-359))|(1<<(PostgreSQLParserNULL-359))|(1<<(PostgreSQLParserNULLABLE-359))|(1<<(PostgreSQLParserNULLIF-359))|(1<<(PostgreSQLParserNULLS-359))|(1<<(PostgreSQLParserNUMBER-359))|(1<<(PostgreSQLParserNUMERIC-359))|(1<<(PostgreSQLParserOBJECT-359))|(1<<(PostgreSQLParserOCTET_LENGTH-359))|(1<<(PostgreSQLParserOCTETS-359))|(1<<(PostgreSQLParserOF-359))|(1<<(PostgreSQLParserOFF-359))|(1<<(PostgreSQLParserOIDS-359))|(1<<(PostgreSQLParserOLD-359))|(1<<(PostgreSQLParserOPEN-359))|(1<<(PostgreSQLParserOPERATOR-359))|(1<<(PostgreSQLParserOPTION-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(PostgreSQLParserOPTIONS-391))|(1<<(PostgreSQLParserORDERING-391))|(1<<(PostgreSQLParserORDINALITY-391))|(1<<(PostgreSQLParserOTHERS-391))|(1<<(PostgreSQLParserOUT-391))|(1<<(PostgreSQLParserOUTPUT-391))|(1<<(PostgreSQLParserOVER-391))|(1<<(PostgreSQLParserOVERLAY-391))|(1<<(PostgreSQLParserOVERRIDING-391))|(1<<(PostgreSQLParserOWNER-391))|(1<<(PostgreSQLParserPAD-391))|(1<<(PostgreSQLParserPARAMETER-391))|(1<<(PostgreSQLParserPARAMETER_MODE-391))|(1<<(PostgreSQLParserPARAMETER_NAME-391))|(1<<(PostgreSQLParserPARAMETER_ORDINAL_POSITION-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_CATALOG-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_NAME-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA-391))|(1<<(PostgreSQLParserPARTIAL-391))|(1<<(PostgreSQLParserPARTITION-391))|(1<<(PostgreSQLParserPASCAL-391))|(1<<(PostgreSQLParserPASSWORD-391))|(1<<(PostgreSQLParserPATH-391))|(1<<(PostgreSQLParserPERCENT_RANK-391))|(1<<(PostgreSQLParserPERCENTILE_CONT-391))|(1<<(PostgreSQLParserPERCENTILE_DISC-391)))) != 0) || (((_la-424)&-(0x1f+1)) == 0 && ((1<<uint((_la-424)))&((1<<(PostgreSQLParserPLAIN-424))|(1<<(PostgreSQLParserPLI-424))|(1<<(PostgreSQLParserPOSITION-424))|(1<<(PostgreSQLParserPOWER-424))|(1<<(PostgreSQLParserPRECEDING-424))|(1<<(PostgreSQLParserPRECISION-424))|(1<<(PostgreSQLParserPREPARE-424))|(1<<(PostgreSQLParserPRESERVE-424))|(1<<(PostgreSQLParserPRIOR-424))|(1<<(PostgreSQLParserPRIVILEGES-424))|(1<<(PostgreSQLParserPROCEDURAL-424))|(1<<(PostgreSQLParserPROCEDURE-424))|(1<<(PostgreSQLParserPUBLIC-424))|(1<<(PostgreSQLParserQUOTE-424))|(1<<(PostgreSQLParserRANGE-424))|(1<<(PostgreSQLParserRANK-424))|(1<<(PostgreSQLParserREAD-424))|(1<<(PostgreSQLParserREADS-424))|(1<<(PostgreSQLParserREAL-424))|(1<<(PostgreSQLParserRECHECK-424))|(1<<(PostgreSQLParserRECURSIVE-424))|(1<<(PostgreSQLParserREF-424))|(1<<(PostgreSQLParserREFERENCING-424)))) != 0) || (((_la-456)&-(0x1f+1)) == 0 && ((1<<uint((_la-456)))&((1<<(PostgreSQLParserREFRESH-456))|(1<<(PostgreSQLParserREGR_AVGX-456))|(1<<(PostgreSQLParserREGR_AVGY-456))|(1<<(PostgreSQLParserREGR_COUNT-456))|(1<<(PostgreSQLParserREGR_INTERCEPT-456))|(1<<(PostgreSQLParserREGR_SLOPE-456))|(1<<(PostgreSQLParserREGR_SXX-456))|(1<<(PostgreSQLParserREGR_SXY-456))|(1<<(PostgreSQLParserREGR_SYY-456))|(1<<(PostgreSQLParserREINDEX-456))|(1<<(PostgreSQLParserRELATIVE-456))|(1<<(PostgreSQLParserRELEASE-456))|(1<<(PostgreSQLParserRENAME-456))|(1<<(PostgreSQLParserREPEATABLE-456))|(1<<(PostgreSQLParserREPLACE-456))|(1<<(PostgreSQLParserRESET-456))|(1<<(PostgreSQLParserRESTART-456))|(1<<(PostgreSQLParserRESTRICT-456))|(1<<(PostgreSQLParserRESULT-456))|(1<<(PostgreSQLParserRETURN-456))|(1<<(PostgreSQLParserRETURNED_CARDINALITY-456))|(1<<(PostgreSQLParserRETURNED_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_OCTET_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_SQLSTATE-456))|(1<<(PostgreSQLParserRETURNS-456))|(1<<(PostgreSQLParserREVOKE-456))|(1<<(PostgreSQLParserRIGHT-456))|(1<<(PostgreSQLParserROLE-456))|(1<<(PostgreSQLParserROLLBACK-456)))) != 0) || (((_la-488)&-(0x1f+1)) == 0 && ((1<<uint((_la-488)))&((1<<(PostgreSQLParserROLLUP-488))|(1<<(PostgreSQLParserROUTINE-488))|(1<<(PostgreSQLParserROUTINE_CATALOG-488))|(1<<(PostgreSQLParserROUTINE_NAME-488))|(1<<(PostgreSQLParserROUTINE_SCHEMA-488))|(1<<(PostgreSQLParserROW-488))|(1<<(PostgreSQLParserROW_COUNT-488))|(1<<(PostgreSQLParserROW_NUMBER-488))|(1<<(PostgreSQLParserROWS-488))|(1<<(PostgreSQLParserRULE-488))|(1<<(PostgreSQLParserSAVEPOINT-488))|(1<<(PostgreSQLParserSCALE-488))|(1<<(PostgreSQLParserSCHEMA-488))|(1<<(PostgreSQLParserSCHEMA_NAME-488))|(1<<(PostgreSQLParserSCOPE-488))|(1<<(PostgreSQLParserSCOPE_CATALOG-488))|(1<<(PostgreSQLParserSCOPE_NAME-488))|(1<<(PostgreSQLParserSCOPE_SCHEMA-488))|(1<<(PostgreSQLParserSCROLL-488))|(1<<(PostgreSQLParserSEARCH-488))|(1<<(PostgreSQLParserSECOND-488))|(1<<(PostgreSQLParserSECTION-488))|(1<<(PostgreSQLParserSECURITY-488))|(1<<(PostgreSQLParserSELF-488))|(1<<(PostgreSQLParserSENSITIVE-488))|(1<<(PostgreSQLParserSEQUENCE-488))|(1<<(PostgreSQLParserSEQUENCES-488))|(1<<(PostgreSQLParserSERIALIZABLE-488))|(1<<(PostgreSQLParserSERVER_NAME-488))|(1<<(PostgreSQLParserSESSION-488)))) != 0) || (((_la-520)&-(0x1f+1)) == 0 && ((1<<uint((_la-520)))&((1<<(PostgreSQLParserSET-520))|(1<<(PostgreSQLParserSETOF-520))|(1<<(PostgreSQLParserSETS-520))|(1<<(PostgreSQLParserSHARE-520))|(1<<(PostgreSQLParserSHOW-520))|(1<<(PostgreSQLParserSIMPLE-520))|(1<<(PostgreSQLParserSIZE-520))|(1<<(PostgreSQLParserSMALLINT-520))|(1<<(PostgreSQLParserSOME-520))|(1<<(PostgreSQLParserSOURCE-520))|(1<<(PostgreSQLParserSPACE-520))|(1<<(PostgreSQLParserSPECIFIC-520))|(1<<(PostgreSQLParserSPECIFIC_NAME-520))|(1<<(PostgreSQLParserSPECIFICTYPE-520))|(1<<(PostgreSQLParserSQL-520))|(1<<(PostgreSQLParserSQLCODE-520))|(1<<(PostgreSQLParserSQLERROR-520))|(1<<(PostgreSQLParserSQLEXCEPTION-520))|(1<<(PostgreSQLParserSQLSTATE-520))|(1<<(PostgreSQLParserSQLWARNING-520))|(1<<(PostgreSQLParserSQRT-520))|(1<<(PostgreSQLParserSTABLE-520))|(1<<(PostgreSQLParserSTART-520))|(1<<(PostgreSQLParserSTATE-520))|(1<<(PostgreSQLParserSTATEMENT-520))|(1<<(PostgreSQLParserSTATIC-520))|(1<<(PostgreSQLParserSTATISTICS-520))|(1<<(PostgreSQLParserSTDDEV_POP-520))|(1<<(PostgreSQLParserSTDDEV_SAMP-520)))) != 0) || (((_la-552)&-(0x1f+1)) == 0 && ((1<<uint((_la-552)))&((1<<(PostgreSQLParserSTDIN-552))|(1<<(PostgreSQLParserSTDOUT-552))|(1<<(PostgreSQLParserSTORAGE-552))|(1<<(PostgreSQLParserSTRICT-552))|(1<<(PostgreSQLParserSTRUCTURE-552))|(1<<(PostgreSQLParserSTYLE-552))|(1<<(PostgreSQLParserSUBCLASS_ORIGIN-552))|(1<<(PostgreSQLParserSUBMULTISET-552))|(1<<(PostgreSQLParserSUBSTRING-552))|(1<<(PostgreSQLParserSUM-552))|(1<<(PostgreSQLParserSYSID-552))|(1<<(PostgreSQLParserSYSTEM-552))|(1<<(PostgreSQLParserSYSTEM_USER-552))|(1<<(PostgreSQLParserTABLE_NAME-552))|(1<<(PostgreSQLParserTABLESPACE-552))|(1<<(PostgreSQLParserTEMP-552))|(1<<(PostgreSQLParserTEMPLATE-552))|(1<<(PostgreSQLParserTEMPORARY-552))|(1<<(PostgreSQLParserTIES-552))|(1<<(PostgreSQLParserTIME-552))|(1<<(PostgreSQLParserTIMESTAMP-552))|(1<<(PostgreSQLParserTIMEZONE_HOUR-552))|(1<<(PostgreSQLParserTIMEZONE_MINUTE-552)))) != 0) || (((_la-586)&-(0x1f+1)) == 0 && ((1<<uint((_la-586)))&((1<<(PostgreSQLParserTOP_LEVEL_COUNT-586))|(1<<(PostgreSQLParserTRANSACTION-586))|(1<<(PostgreSQLParserTRANSACTION_ACTIVE-586))|(1<<(PostgreSQLParserTRANSACTIONS_COMMITTED-586))|(1<<(PostgreSQLParserTRANSACTIONS_ROLLED_BACK-586))|(1<<(PostgreSQLParserTRANSFORM-586))|(1<<(PostgreSQLParserTRANSFORMS-586))|(1<<(PostgreSQLParserTRANSLATE-586))|(1<<(PostgreSQLParserTRANSLATION-586))|(1<<(PostgreSQLParserTREAT-586))|(1<<(PostgreSQLParserTRIGGER-586))|(1<<(PostgreSQLParserTRIGGER_CATALOG-586))|(1<<(PostgreSQLParserTRIGGER_NAME-586))|(1<<(PostgreSQLParserTRIGGER_SCHEMA-586))|(1<<(PostgreSQLParserTRIM-586))|(1<<(PostgreSQLParserTRUE-586))|(1<<(PostgreSQLParserTRUNCATE-586))|(1<<(PostgreSQLParserTRUSTED-586))|(1<<(PostgreSQLParserTYPE-586))|(1<<(PostgreSQLParserUESCAPE-586))|(1<<(PostgreSQLParserUNBOUNDED-586))|(1<<(PostgreSQLParserUNCOMMITTED-586))|(1<<(PostgreSQLParserUNDER-586))|(1<<(PostgreSQLParserUNENCRYPTED-586))|(1<<(PostgreSQLParserUNKNOWN-586))|(1<<(PostgreSQLParserUNLISTEN-586))|(1<<(PostgreSQLParserUNNAMED-586))|(1<<(PostgreSQLParserUNNEST-586))|(1<<(PostgreSQLParserUNTIL-586)))) != 0) || (((_la-618)&-(0x1f+1)) == 0 && ((1<<uint((_la-618)))&((1<<(PostgreSQLParserUPDATE-618))|(1<<(PostgreSQLParserUPPER-618))|(1<<(PostgreSQLParserUSAGE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CATALOG-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CODE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_NAME-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA-618))|(1<<(PostgreSQLParserVACUUM-618))|(1<<(PostgreSQLParserVALID-618))|(1<<(PostgreSQLParserVALIDATOR-618))|(1<<(PostgreSQLParserVALUE-618))|(1<<(PostgreSQLParserVALUES-618))|(1<<(PostgreSQLParserVAR_POP-618))|(1<<(PostgreSQLParserVAR_SAMP-618))|(1<<(PostgreSQLParserVARCHAR-618))|(1<<(PostgreSQLParserVARYING-618))|(1<<(PostgreSQLParserVIEW-618))|(1<<(PostgreSQLParserVOLATILE-618))|(1<<(PostgreSQLParserWHENEVER-618))|(1<<(PostgreSQLParserWIDTH_BUCKET-618))|(1<<(PostgreSQLParserWITH-618))|(1<<(PostgreSQLParserWITHIN-618))|(1<<(PostgreSQLParserWITHOUT-618)))) != 0) || (((_la-650)&-(0x1f+1)) == 0 && ((1<<uint((_la-650)))&((1<<(PostgreSQLParserWORK-650))|(1<<(PostgreSQLParserWRITE-650))|(1<<(PostgreSQLParserYEAR-650))|(1<<(PostgreSQLParserZONE-650)))) != 0) || (((_la-720)&-(0x1f+1)) == 0 && ((1<<uint((_la-720)))&((1<<(PostgreSQLParserABSTIME-720))|(1<<(PostgreSQLParserBIGSERIAL-720))|(1<<(PostgreSQLParserBIT_VARYING-720))|(1<<(PostgreSQLParserBOOL-720))|(1<<(PostgreSQLParserBOX-720))|(1<<(PostgreSQLParserBYTEA-720))|(1<<(PostgreSQLParserCHARACTER_VARYING-720))|(1<<(PostgreSQLParserCIDR-720))|(1<<(PostgreSQLParserCIRCLE-720))|(1<<(PostgreSQLParserFLOAT4-720))|(1<<(PostgreSQLParserFLOAT8-720))|(1<<(PostgreSQLParserINET-720))|(1<<(PostgreSQLParserINT2-720))|(1<<(PostgreSQLParserINT4-720))|(1<<(PostgreSQLParserINT8-720))|(1<<(PostgreSQLParserJSON-720))|(1<<(PostgreSQLParserJSONB-720))|(1<<(PostgreSQLParserLINE-720))|(1<<(PostgreSQLParserLSEG-720))|(1<<(PostgreSQLParserMACADDR-720))|(1<<(PostgreSQLParserMACADDR8-720))|(1<<(PostgreSQLParserMONEY-720))|(1<<(PostgreSQLParserPG_LSN-720))|(1<<(PostgreSQLParserPOINT-720))|(1<<(PostgreSQLParserPOLYGON-720))|(1<<(PostgreSQLParserRELTIME-720))|(1<<(PostgreSQLParserSERIAL-720))|(1<<(PostgreSQLParserSERIAL2-720))|(1<<(PostgreSQLParserSERIAL4-720))|(1<<(PostgreSQLParserSERIAL8-720))|(1<<(PostgreSQLParserSMALLSERIAL-720)))) != 0) || (((_la-752)&-(0x1f+1)) == 0 && ((1<<uint((_la-752)))&((1<<(PostgreSQLParserTEXT-752))|(1<<(PostgreSQLParserTIMESTAMPTZ-752))|(1<<(PostgreSQLParserTIMETZ-752))|(1<<(PostgreSQLParserTSQUERY-752))|(1<<(PostgreSQLParserTSVECTOR-752))|(1<<(PostgreSQLParserTXID_SNAPSHOT-752))|(1<<(PostgreSQLParserUUID-752))|(1<<(PostgreSQLParserVARBIT-752))|(1<<(PostgreSQLParserXML-752))|(1<<(PostgreSQLParserDOLLAR-752))|(1<<(PostgreSQLParserDOLLAR_DOLLAR-752))|(1<<(PostgreSQLParserOPEN_PAREN-752))|(1<<(PostgreSQLParserBIT_STRING-752))|(1<<(PostgreSQLParserREGEX_STRING-752))|(1<<(PostgreSQLParserNUMERIC_LITERAL-752))|(1<<(PostgreSQLParserINTEGER_LITERAL-752))|(1<<(PostgreSQLParserHEX_INTEGER_LITERAL-752))|(1<<(PostgreSQLParserSINGLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserDOUBLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserIDENTIFIER-752))|(1<<(PostgreSQLParserDOLLAR_DEC-752))|(1<<(PostgreSQLParserIDENTIFIER_UNICODE-752)))) != 0) || (((_la-787)&-(0x1f+1)) == 0 && ((1<<uint((_la-787)))&((1<<(PostgreSQLParserAT_SIGN-787))|(1<<(PostgreSQLParserBANG_BANG-787))|(1<<(PostgreSQLParserMINUS-787)))) != 0) || (((_la-820)&-(0x1f+1)) == 0 && ((1<<uint((_la-820)))&((1<<(PostgreSQLParserPLUS-820))|(1<<(PostgreSQLParserQMARK_HYPHEN-820))|(1<<(PostgreSQLParserTIL-820)))) != 0) {
			{
				p.SetState(5100)
				p.expr(0)
			}
			p.SetState(5105)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == PostgreSQLParserCOMMA {
				{
					p.SetState(5101)
					p.Match(PostgreSQLParserCOMMA)
				}
				{
					p.SetState(5102)
					p.expr(0)
				}

				p.SetState(5107)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(5110)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}
		{
			p.SetState(5111)
			p.Match(PostgreSQLParserWITHIN)
		}
		{
			p.SetState(5112)
			p.Match(PostgreSQLParserGROUP)
		}
		{
			p.SetState(5113)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(5114)
			p.Order_by_clause()
		}
		{
			p.SetState(5115)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}
		p.SetState(5122)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 605, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5116)
				p.Match(PostgreSQLParserFILTER)
			}
			{
				p.SetState(5117)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(5118)
				p.Match(PostgreSQLParserWHERE)
			}
			{
				p.SetState(5119)
				p.Where_clause()
			}
			{
				p.SetState(5120)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	}

	return localctx
}

// IName_Context is an interface to support dynamic dispatch.
type IName_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsName_Context differentiates from other interfaces.
	IsName_Context()
}

type Name_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyName_Context() *Name_Context {
	var p = new(Name_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_name_
	return p
}

func (*Name_Context) IsName_Context() {}

func NewName_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Name_Context {
	var p = new(Name_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_name_

	return p
}

func (s *Name_Context) GetParser() antlr.Parser { return s.parser }

func (s *Name_Context) SINGLEQ_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSINGLEQ_STRING_LITERAL, 0)
}

func (s *Name_Context) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Name_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Name_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Name_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterName_(s)
	}
}

func (s *Name_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitName_(s)
	}
}

func (p *PostgreSQLParser) Name_() (localctx IName_Context) {
	localctx = NewName_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 462, PostgreSQLParserRULE_name_)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5128)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserSINGLEQ_STRING_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5126)
			p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)
		}

	case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5127)
			p.identifier(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IName_listContext is an interface to support dynamic dispatch.
type IName_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsName_listContext differentiates from other interfaces.
	IsName_listContext()
}

type Name_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyName_listContext() *Name_listContext {
	var p = new(Name_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_name_list
	return p
}

func (*Name_listContext) IsName_listContext() {}

func NewName_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Name_listContext {
	var p = new(Name_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_name_list

	return p
}

func (s *Name_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Name_listContext) AllName_() []IName_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IName_Context)(nil)).Elem())
	var tst = make([]IName_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IName_Context)
		}
	}

	return tst
}

func (s *Name_listContext) Name_(i int) IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Name_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Name_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Name_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Name_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Name_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterName_list(s)
	}
}

func (s *Name_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitName_list(s)
	}
}

func (p *PostgreSQLParser) Name_list() (localctx IName_listContext) {
	localctx = NewName_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 464, PostgreSQLParserRULE_name_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5130)
		p.Name_()
	}
	p.SetState(5135)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(5131)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(5132)
			p.Name_()
		}

		p.SetState(5137)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IIdentifier_listContext is an interface to support dynamic dispatch.
type IIdentifier_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifier_listContext differentiates from other interfaces.
	IsIdentifier_listContext()
}

type Identifier_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_listContext() *Identifier_listContext {
	var p = new(Identifier_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_identifier_list
	return p
}

func (*Identifier_listContext) IsIdentifier_listContext() {}

func NewIdentifier_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_listContext {
	var p = new(Identifier_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_identifier_list

	return p
}

func (s *Identifier_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_listContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Identifier_listContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Identifier_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Identifier_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Identifier_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterIdentifier_list(s)
	}
}

func (s *Identifier_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitIdentifier_list(s)
	}
}

func (p *PostgreSQLParser) Identifier_list() (localctx IIdentifier_listContext) {
	localctx = NewIdentifier_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 466, PostgreSQLParserRULE_identifier_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5138)
		p.identifier(0)
	}
	p.SetState(5143)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(5139)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(5140)
			p.identifier(0)
		}

		p.SetState(5145)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IOption_exprContext is an interface to support dynamic dispatch.
type IOption_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOption_name returns the option_name rule contexts.
	GetOption_name() IIdentifierContext

	// GetValue returns the value rule contexts.
	GetValue() IParam_valueContext

	// SetOption_name sets the option_name rule contexts.
	SetOption_name(IIdentifierContext)

	// SetValue sets the value rule contexts.
	SetValue(IParam_valueContext)

	// IsOption_exprContext differentiates from other interfaces.
	IsOption_exprContext()
}

type Option_exprContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	option_name IIdentifierContext
	value       IParam_valueContext
}

func NewEmptyOption_exprContext() *Option_exprContext {
	var p = new(Option_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_option_expr
	return p
}

func (*Option_exprContext) IsOption_exprContext() {}

func NewOption_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Option_exprContext {
	var p = new(Option_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_option_expr

	return p
}

func (s *Option_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Option_exprContext) GetOption_name() IIdentifierContext { return s.option_name }

func (s *Option_exprContext) GetValue() IParam_valueContext { return s.value }

func (s *Option_exprContext) SetOption_name(v IIdentifierContext) { s.option_name = v }

func (s *Option_exprContext) SetValue(v IParam_valueContext) { s.value = v }

func (s *Option_exprContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Option_exprContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEQUAL, 0)
}

func (s *Option_exprContext) Param_value() IParam_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParam_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParam_valueContext)
}

func (s *Option_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Option_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Option_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterOption_expr(s)
	}
}

func (s *Option_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitOption_expr(s)
	}
}

func (p *PostgreSQLParser) Option_expr() (localctx IOption_exprContext) {
	localctx = NewOption_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 468, PostgreSQLParserRULE_option_expr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5146)

		var _x = p.identifier(0)

		localctx.(*Option_exprContext).option_name = _x
	}
	p.SetState(5149)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserEQUAL {
		{
			p.SetState(5147)
			p.Match(PostgreSQLParserEQUAL)
		}
		{
			p.SetState(5148)

			var _x = p.Param_value()

			localctx.(*Option_exprContext).value = _x
		}

	}

	return localctx
}

// IOption_listContext is an interface to support dynamic dispatch.
type IOption_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOption_listContext differentiates from other interfaces.
	IsOption_listContext()
}

type Option_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOption_listContext() *Option_listContext {
	var p = new(Option_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_option_list
	return p
}

func (*Option_listContext) IsOption_listContext() {}

func NewOption_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Option_listContext {
	var p = new(Option_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_option_list

	return p
}

func (s *Option_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Option_listContext) AllOption_expr() []IOption_exprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOption_exprContext)(nil)).Elem())
	var tst = make([]IOption_exprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOption_exprContext)
		}
	}

	return tst
}

func (s *Option_listContext) Option_expr(i int) IOption_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_exprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOption_exprContext)
}

func (s *Option_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Option_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Option_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Option_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Option_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterOption_list(s)
	}
}

func (s *Option_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitOption_list(s)
	}
}

func (p *PostgreSQLParser) Option_list() (localctx IOption_listContext) {
	localctx = NewOption_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 470, PostgreSQLParserRULE_option_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5151)
		p.Option_expr()
	}
	p.SetState(5156)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(5152)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(5153)
			p.Option_expr()
		}

		p.SetState(5158)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITable_name_Context is an interface to support dynamic dispatch.
type ITable_name_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_name_Context differentiates from other interfaces.
	IsTable_name_Context()
}

type Table_name_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_name_Context() *Table_name_Context {
	var p = new(Table_name_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_table_name_
	return p
}

func (*Table_name_Context) IsTable_name_Context() {}

func NewTable_name_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_name_Context {
	var p = new(Table_name_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_table_name_

	return p
}

func (s *Table_name_Context) GetParser() antlr.Parser { return s.parser }

func (s *Table_name_Context) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Table_name_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_name_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_name_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterTable_name_(s)
	}
}

func (s *Table_name_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitTable_name_(s)
	}
}

func (p *PostgreSQLParser) Table_name_() (localctx ITable_name_Context) {
	localctx = NewTable_name_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 472, PostgreSQLParserRULE_table_name_)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5159)
		p.identifier(0)
	}

	return localctx
}

// IData_typeContext is an interface to support dynamic dispatch.
type IData_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_typeContext differentiates from other interfaces.
	IsData_typeContext()
}

type Data_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_typeContext() *Data_typeContext {
	var p = new(Data_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_data_type
	return p
}

func (*Data_typeContext) IsData_typeContext() {}

func NewData_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_typeContext {
	var p = new(Data_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_data_type

	return p
}

func (s *Data_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_typeContext) Type_name() IType_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *Data_typeContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Data_typeContext) AllOPEN_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPEN_BRACKET)
}

func (s *Data_typeContext) OPEN_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_BRACKET, i)
}

func (s *Data_typeContext) AllCLOSE_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCLOSE_BRACKET)
}

func (s *Data_typeContext) CLOSE_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_BRACKET, i)
}

func (s *Data_typeContext) AllINTEGER_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserINTEGER_LITERAL)
}

func (s *Data_typeContext) INTEGER_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, i)
}

func (s *Data_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterData_type(s)
	}
}

func (s *Data_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitData_type(s)
	}
}

func (p *PostgreSQLParser) Data_type() (localctx IData_typeContext) {
	localctx = NewData_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 474, PostgreSQLParserRULE_data_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5163)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 612, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5161)
			p.Type_name()
		}

	case 2:
		{
			p.SetState(5162)
			p.identifier(0)
		}

	}
	p.SetState(5172)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 614, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(5165)
				p.Match(PostgreSQLParserOPEN_BRACKET)
			}
			p.SetState(5167)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PostgreSQLParserINTEGER_LITERAL {
				{
					p.SetState(5166)
					p.Match(PostgreSQLParserINTEGER_LITERAL)
				}

			}
			{
				p.SetState(5169)
				p.Match(PostgreSQLParserCLOSE_BRACKET)
			}

		}
		p.SetState(5174)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 614, p.GetParserRuleContext())
	}

	return localctx
}

// IData_type_listContext is an interface to support dynamic dispatch.
type IData_type_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_type_listContext differentiates from other interfaces.
	IsData_type_listContext()
}

type Data_type_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_type_listContext() *Data_type_listContext {
	var p = new(Data_type_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_data_type_list
	return p
}

func (*Data_type_listContext) IsData_type_listContext() {}

func NewData_type_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_type_listContext {
	var p = new(Data_type_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_data_type_list

	return p
}

func (s *Data_type_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_type_listContext) AllData_type() []IData_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_typeContext)(nil)).Elem())
	var tst = make([]IData_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_typeContext)
		}
	}

	return tst
}

func (s *Data_type_listContext) Data_type(i int) IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Data_type_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Data_type_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Data_type_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_type_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_type_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterData_type_list(s)
	}
}

func (s *Data_type_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitData_type_list(s)
	}
}

func (p *PostgreSQLParser) Data_type_list() (localctx IData_type_listContext) {
	localctx = NewData_type_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 476, PostgreSQLParserRULE_data_type_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5175)
		p.Data_type()
	}
	p.SetState(5180)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(5176)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(5177)
			p.Data_type()
		}

		p.SetState(5182)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IIndex_methodContext is an interface to support dynamic dispatch.
type IIndex_methodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetBuiltin returns the builtin token.
	GetBuiltin() antlr.Token

	// SetBuiltin sets the builtin token.
	SetBuiltin(antlr.Token)

	// GetUnknown returns the unknown rule contexts.
	GetUnknown() IIdentifierContext

	// SetUnknown sets the unknown rule contexts.
	SetUnknown(IIdentifierContext)

	// IsIndex_methodContext differentiates from other interfaces.
	IsIndex_methodContext()
}

type Index_methodContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	builtin antlr.Token
	unknown IIdentifierContext
}

func NewEmptyIndex_methodContext() *Index_methodContext {
	var p = new(Index_methodContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_index_method
	return p
}

func (*Index_methodContext) IsIndex_methodContext() {}

func NewIndex_methodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_methodContext {
	var p = new(Index_methodContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_index_method

	return p
}

func (s *Index_methodContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_methodContext) GetBuiltin() antlr.Token { return s.builtin }

func (s *Index_methodContext) SetBuiltin(v antlr.Token) { s.builtin = v }

func (s *Index_methodContext) GetUnknown() IIdentifierContext { return s.unknown }

func (s *Index_methodContext) SetUnknown(v IIdentifierContext) { s.unknown = v }

func (s *Index_methodContext) BTREE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBTREE, 0)
}

func (s *Index_methodContext) HASH_() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHASH_, 0)
}

func (s *Index_methodContext) GIST() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGIST, 0)
}

func (s *Index_methodContext) SPGIST() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSPGIST, 0)
}

func (s *Index_methodContext) GIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGIN, 0)
}

func (s *Index_methodContext) BRIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBRIN, 0)
}

func (s *Index_methodContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Index_methodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_methodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_methodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterIndex_method(s)
	}
}

func (s *Index_methodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitIndex_method(s)
	}
}

func (p *PostgreSQLParser) Index_method() (localctx IIndex_methodContext) {
	localctx = NewIndex_methodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 478, PostgreSQLParserRULE_index_method)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5185)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserBTREE, PostgreSQLParserHASH_, PostgreSQLParserGIST, PostgreSQLParserSPGIST, PostgreSQLParserGIN, PostgreSQLParserBRIN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5183)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Index_methodContext).builtin = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-702)&-(0x1f+1)) == 0 && ((1<<uint((_la-702)))&((1<<(PostgreSQLParserBTREE-702))|(1<<(PostgreSQLParserHASH_-702))|(1<<(PostgreSQLParserGIST-702))|(1<<(PostgreSQLParserSPGIST-702))|(1<<(PostgreSQLParserGIN-702))|(1<<(PostgreSQLParserBRIN-702)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Index_methodContext).builtin = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5184)

			var _x = p.identifier(0)

			localctx.(*Index_methodContext).unknown = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFunc_nameContext is an interface to support dynamic dispatch.
type IFunc_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunc_nameContext differentiates from other interfaces.
	IsFunc_nameContext()
}

type Func_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunc_nameContext() *Func_nameContext {
	var p = new(Func_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_func_name
	return p
}

func (*Func_nameContext) IsFunc_nameContext() {}

func NewFunc_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Func_nameContext {
	var p = new(Func_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_func_name

	return p
}

func (s *Func_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Func_nameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Func_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Func_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Func_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterFunc_name(s)
	}
}

func (s *Func_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitFunc_name(s)
	}
}

func (p *PostgreSQLParser) Func_name() (localctx IFunc_nameContext) {
	localctx = NewFunc_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 480, PostgreSQLParserRULE_func_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5187)
		p.identifier(0)
	}

	return localctx
}

// IFunc_callContext is an interface to support dynamic dispatch.
type IFunc_callContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunc_callContext differentiates from other interfaces.
	IsFunc_callContext()
}

type Func_callContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunc_callContext() *Func_callContext {
	var p = new(Func_callContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_func_call
	return p
}

func (*Func_callContext) IsFunc_callContext() {}

func NewFunc_callContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Func_callContext {
	var p = new(Func_callContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_func_call

	return p
}

func (s *Func_callContext) GetParser() antlr.Parser { return s.parser }

func (s *Func_callContext) Func_name() IFunc_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_nameContext)
}

func (s *Func_callContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Func_callContext) VARIADIC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVARIADIC, 0)
}

func (s *Func_callContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Func_callContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Func_callContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Func_callContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Func_callContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Func_callContext) Todo_fill_in() ITodo_fill_inContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_fill_inContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITodo_fill_inContext)
}

func (s *Func_callContext) FROM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFROM, 0)
}

func (s *Func_callContext) FOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOR, 0)
}

func (s *Func_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Func_callContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Func_callContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterFunc_call(s)
	}
}

func (s *Func_callContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitFunc_call(s)
	}
}

func (p *PostgreSQLParser) Func_call() (localctx IFunc_callContext) {
	localctx = NewFunc_callContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 482, PostgreSQLParserRULE_func_call)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(5225)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 621, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5189)
			p.Func_name()
		}
		{
			p.SetState(5190)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(5191)
			p.Match(PostgreSQLParserVARIADIC)
		}
		{
			p.SetState(5192)
			p.expr(0)
		}
		{
			p.SetState(5193)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5195)
			p.Func_name()
		}
		{
			p.SetState(5196)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		p.SetState(5210)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PostgreSQLParserWHITESPACE)|(1<<PostgreSQLParserA_)|(1<<PostgreSQLParserABORT)|(1<<PostgreSQLParserABS)|(1<<PostgreSQLParserABSOLUTE)|(1<<PostgreSQLParserACCESS)|(1<<PostgreSQLParserACTION)|(1<<PostgreSQLParserADA)|(1<<PostgreSQLParserADD)|(1<<PostgreSQLParserADMIN)|(1<<PostgreSQLParserAFTER)|(1<<PostgreSQLParserAGGREGATE)|(1<<PostgreSQLParserALL)|(1<<PostgreSQLParserALLOCATE)|(1<<PostgreSQLParserALSO)|(1<<PostgreSQLParserALTER)|(1<<PostgreSQLParserALWAYS)|(1<<PostgreSQLParserANY)|(1<<PostgreSQLParserARE)|(1<<PostgreSQLParserARRAY)|(1<<PostgreSQLParserASENSITIVE)|(1<<PostgreSQLParserASSERTION)|(1<<PostgreSQLParserASSIGNMENT))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(PostgreSQLParserAT-33))|(1<<(PostgreSQLParserATOMIC-33))|(1<<(PostgreSQLParserATTRIBUTE-33))|(1<<(PostgreSQLParserATTRIBUTES-33))|(1<<(PostgreSQLParserAVG-33))|(1<<(PostgreSQLParserBACKWARD-33))|(1<<(PostgreSQLParserBEFORE-33))|(1<<(PostgreSQLParserBEGIN-33))|(1<<(PostgreSQLParserBERNOULLI-33))|(1<<(PostgreSQLParserBETWEEN-33))|(1<<(PostgreSQLParserBIGINT-33))|(1<<(PostgreSQLParserBIT-33))|(1<<(PostgreSQLParserBIT_LENGTH-33))|(1<<(PostgreSQLParserBLOB-33))|(1<<(PostgreSQLParserBOOLEAN-33))|(1<<(PostgreSQLParserBREADTH-33))|(1<<(PostgreSQLParserBY-33))|(1<<(PostgreSQLParserC_-33))|(1<<(PostgreSQLParserCACHE-33))|(1<<(PostgreSQLParserCALL-33))|(1<<(PostgreSQLParserCALLED-33))|(1<<(PostgreSQLParserCARDINALITY-33))|(1<<(PostgreSQLParserCASCADE-33))|(1<<(PostgreSQLParserCASCADED-33))|(1<<(PostgreSQLParserCASE-33))|(1<<(PostgreSQLParserCAST-33))|(1<<(PostgreSQLParserCATALOG-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PostgreSQLParserCATALOG_NAME-65))|(1<<(PostgreSQLParserCEIL-65))|(1<<(PostgreSQLParserCEILING-65))|(1<<(PostgreSQLParserCHAIN-65))|(1<<(PostgreSQLParserCHAR-65))|(1<<(PostgreSQLParserCHAR_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER-65))|(1<<(PostgreSQLParserCHARACTER_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER_SET_CATALOG-65))|(1<<(PostgreSQLParserCHARACTER_SET_NAME-65))|(1<<(PostgreSQLParserCHARACTER_SET_SCHEMA-65))|(1<<(PostgreSQLParserCHARACTERISTICS-65))|(1<<(PostgreSQLParserCHARACTERS-65))|(1<<(PostgreSQLParserCHECKPOINT-65))|(1<<(PostgreSQLParserCLASS-65))|(1<<(PostgreSQLParserCLASS_ORIGIN-65))|(1<<(PostgreSQLParserCLOB-65))|(1<<(PostgreSQLParserCLOSE-65))|(1<<(PostgreSQLParserCLUSTER-65))|(1<<(PostgreSQLParserCOALESCE-65))|(1<<(PostgreSQLParserCOBOL-65))|(1<<(PostgreSQLParserCOLLATION_CATALOG-65))|(1<<(PostgreSQLParserCOLLATION_NAME-65))|(1<<(PostgreSQLParserCOLLATION_SCHEMA-65))|(1<<(PostgreSQLParserCOLLECT-65))|(1<<(PostgreSQLParserCOLUMN_NAME-65))|(1<<(PostgreSQLParserCOMMAND_FUNCTION-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(PostgreSQLParserCOMMAND_FUNCTION_CODE-97))|(1<<(PostgreSQLParserCOMMENT-97))|(1<<(PostgreSQLParserCOMMIT-97))|(1<<(PostgreSQLParserCOMMITTED-97))|(1<<(PostgreSQLParserCONDITION-97))|(1<<(PostgreSQLParserCONDITION_NUMBER-97))|(1<<(PostgreSQLParserCONNECT-97))|(1<<(PostgreSQLParserCONNECTION-97))|(1<<(PostgreSQLParserCONNECTION_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_CATALOG-97))|(1<<(PostgreSQLParserCONSTRAINT_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_SCHEMA-97))|(1<<(PostgreSQLParserCONSTRAINTS-97))|(1<<(PostgreSQLParserCONSTRUCTOR-97))|(1<<(PostgreSQLParserCONTAINS-97))|(1<<(PostgreSQLParserCONTINUE-97))|(1<<(PostgreSQLParserCONVERSION-97))|(1<<(PostgreSQLParserCONVERT-97))|(1<<(PostgreSQLParserCOPY-97))|(1<<(PostgreSQLParserCORR-97))|(1<<(PostgreSQLParserCORRESPONDING-97))|(1<<(PostgreSQLParserCOUNT-97))|(1<<(PostgreSQLParserCOVAR_POP-97))|(1<<(PostgreSQLParserCOVAR_SAMP-97)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(PostgreSQLParserCSV-131))|(1<<(PostgreSQLParserCUBE-131))|(1<<(PostgreSQLParserCUME_DIST-131))|(1<<(PostgreSQLParserCURRENT-131))|(1<<(PostgreSQLParserCURRENT_DATE-131))|(1<<(PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP-131))|(1<<(PostgreSQLParserCURRENT_PATH-131))|(1<<(PostgreSQLParserCURRENT_ROLE-131))|(1<<(PostgreSQLParserCURRENT_TIME-131))|(1<<(PostgreSQLParserCURRENT_TIMESTAMP-131))|(1<<(PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE-131))|(1<<(PostgreSQLParserCURRENT_USER-131))|(1<<(PostgreSQLParserCURSOR-131))|(1<<(PostgreSQLParserCURSOR_NAME-131))|(1<<(PostgreSQLParserCYCLE-131))|(1<<(PostgreSQLParserDATA-131))|(1<<(PostgreSQLParserDATABASE-131))|(1<<(PostgreSQLParserDATE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_CODE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_PRECISION-131))|(1<<(PostgreSQLParserDAY-131))|(1<<(PostgreSQLParserDEALLOCATE-131))|(1<<(PostgreSQLParserDEC-131))|(1<<(PostgreSQLParserDECIMAL-131))|(1<<(PostgreSQLParserDECLARE-131))|(1<<(PostgreSQLParserDEFAULT-131))|(1<<(PostgreSQLParserDEFAULTS-131))|(1<<(PostgreSQLParserDEFERRED-131))|(1<<(PostgreSQLParserDEFINED-131))|(1<<(PostgreSQLParserDEFINER-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(PostgreSQLParserDEGREE-163))|(1<<(PostgreSQLParserDELETE-163))|(1<<(PostgreSQLParserDELIMITER-163))|(1<<(PostgreSQLParserDELIMITERS-163))|(1<<(PostgreSQLParserDENSE_RANK-163))|(1<<(PostgreSQLParserDEPTH-163))|(1<<(PostgreSQLParserDEREF-163))|(1<<(PostgreSQLParserDERIVED-163))|(1<<(PostgreSQLParserDESCRIBE-163))|(1<<(PostgreSQLParserDESCRIPTOR-163))|(1<<(PostgreSQLParserDETERMINISTIC-163))|(1<<(PostgreSQLParserDIAGNOSTICS-163))|(1<<(PostgreSQLParserDICTIONARY-163))|(1<<(PostgreSQLParserDISCONNECT-163))|(1<<(PostgreSQLParserDISPATCH-163))|(1<<(PostgreSQLParserDOMAIN-163))|(1<<(PostgreSQLParserDOUBLE-163))|(1<<(PostgreSQLParserDYNAMIC-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION_CODE-163))|(1<<(PostgreSQLParserEACH-163))|(1<<(PostgreSQLParserELEMENT-163)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(PostgreSQLParserENCODING-197))|(1<<(PostgreSQLParserENCRYPTED-197))|(1<<(PostgreSQLParserEND-197))|(1<<(PostgreSQLParserEQUALS-197))|(1<<(PostgreSQLParserESCAPE-197))|(1<<(PostgreSQLParserEVERY-197))|(1<<(PostgreSQLParserEXCEPTION-197))|(1<<(PostgreSQLParserEXCLUDE-197))|(1<<(PostgreSQLParserEXCLUDING-197))|(1<<(PostgreSQLParserEXCLUSIVE-197))|(1<<(PostgreSQLParserEXEC-197))|(1<<(PostgreSQLParserEXECUTE-197))|(1<<(PostgreSQLParserEXISTS-197))|(1<<(PostgreSQLParserEXP-197))|(1<<(PostgreSQLParserEXPLAIN-197))|(1<<(PostgreSQLParserEXTENSION-197))|(1<<(PostgreSQLParserEXTERNAL-197))|(1<<(PostgreSQLParserEXTRACT-197))|(1<<(PostgreSQLParserFALSE-197))|(1<<(PostgreSQLParserFILTER-197))|(1<<(PostgreSQLParserFINAL-197))|(1<<(PostgreSQLParserFIRST-197))|(1<<(PostgreSQLParserFLOAT-197))|(1<<(PostgreSQLParserFLOOR-197))|(1<<(PostgreSQLParserFOLLOWING-197)))) != 0) || (((_la-229)&-(0x1f+1)) == 0 && ((1<<uint((_la-229)))&((1<<(PostgreSQLParserFORCE-229))|(1<<(PostgreSQLParserFORMAT-229))|(1<<(PostgreSQLParserFORTRAN-229))|(1<<(PostgreSQLParserFORWARD-229))|(1<<(PostgreSQLParserFOUND-229))|(1<<(PostgreSQLParserFREE-229))|(1<<(PostgreSQLParserFUNCTION-229))|(1<<(PostgreSQLParserFUSION-229))|(1<<(PostgreSQLParserG_-229))|(1<<(PostgreSQLParserGENERAL-229))|(1<<(PostgreSQLParserGENERATED-229))|(1<<(PostgreSQLParserGET-229))|(1<<(PostgreSQLParserGLOBAL-229))|(1<<(PostgreSQLParserGO-229))|(1<<(PostgreSQLParserGOTO-229))|(1<<(PostgreSQLParserGRANTED-229))|(1<<(PostgreSQLParserGREATEST-229))|(1<<(PostgreSQLParserGROUPING-229))|(1<<(PostgreSQLParserHANDLER-229))|(1<<(PostgreSQLParserHIERARCHY-229))|(1<<(PostgreSQLParserHOLD-229))|(1<<(PostgreSQLParserHOST-229))|(1<<(PostgreSQLParserHOUR-229))|(1<<(PostgreSQLParserIDENTITY-229))|(1<<(PostgreSQLParserIGNORE-229)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(PostgreSQLParserIMMEDIATE-262))|(1<<(PostgreSQLParserIMMUTABLE-262))|(1<<(PostgreSQLParserIMPLEMENTATION-262))|(1<<(PostgreSQLParserIMPLICIT-262))|(1<<(PostgreSQLParserINCLUDING-262))|(1<<(PostgreSQLParserINCREMENT-262))|(1<<(PostgreSQLParserINDEX-262))|(1<<(PostgreSQLParserINDICATOR-262))|(1<<(PostgreSQLParserINHERITS-262))|(1<<(PostgreSQLParserINOUT-262))|(1<<(PostgreSQLParserINPUT-262))|(1<<(PostgreSQLParserINSENSITIVE-262))|(1<<(PostgreSQLParserINSERT-262))|(1<<(PostgreSQLParserINSTANCE-262))|(1<<(PostgreSQLParserINSTANTIABLE-262))|(1<<(PostgreSQLParserINSTEAD-262))|(1<<(PostgreSQLParserINT-262))|(1<<(PostgreSQLParserINTEGER-262))|(1<<(PostgreSQLParserINTERSECTION-262))|(1<<(PostgreSQLParserINTERVAL-262))|(1<<(PostgreSQLParserINVOKER-262))|(1<<(PostgreSQLParserISOLATION-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(PostgreSQLParserK_-294))|(1<<(PostgreSQLParserKEY-294))|(1<<(PostgreSQLParserKEY_MEMBER-294))|(1<<(PostgreSQLParserKEY_TYPE-294))|(1<<(PostgreSQLParserLANGUAGE-294))|(1<<(PostgreSQLParserLARGE-294))|(1<<(PostgreSQLParserLAST-294))|(1<<(PostgreSQLParserLEAST-294))|(1<<(PostgreSQLParserLEFT-294))|(1<<(PostgreSQLParserLENGTH-294))|(1<<(PostgreSQLParserLEVEL-294))|(1<<(PostgreSQLParserLISTEN-294))|(1<<(PostgreSQLParserLN-294))|(1<<(PostgreSQLParserLOAD-294))|(1<<(PostgreSQLParserLOCAL-294))|(1<<(PostgreSQLParserLOCATION-294))|(1<<(PostgreSQLParserLOCATOR-294))|(1<<(PostgreSQLParserLOCK-294))|(1<<(PostgreSQLParserLOCKED-294))|(1<<(PostgreSQLParserLOWER-294))|(1<<(PostgreSQLParserM_-294))|(1<<(PostgreSQLParserMAP-294)))) != 0) || (((_la-327)&-(0x1f+1)) == 0 && ((1<<uint((_la-327)))&((1<<(PostgreSQLParserMATCH-327))|(1<<(PostgreSQLParserMATCHED-327))|(1<<(PostgreSQLParserMAX-327))|(1<<(PostgreSQLParserMAXVALUE-327))|(1<<(PostgreSQLParserMEMBER-327))|(1<<(PostgreSQLParserMERGE-327))|(1<<(PostgreSQLParserMESSAGE_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_OCTET_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_TEXT-327))|(1<<(PostgreSQLParserMETHOD-327))|(1<<(PostgreSQLParserMIN-327))|(1<<(PostgreSQLParserMINUTE-327))|(1<<(PostgreSQLParserMINVALUE-327))|(1<<(PostgreSQLParserMOD-327))|(1<<(PostgreSQLParserMODE-327))|(1<<(PostgreSQLParserMODIFIES-327))|(1<<(PostgreSQLParserMODULE-327))|(1<<(PostgreSQLParserMONTH-327))|(1<<(PostgreSQLParserMORE_-327))|(1<<(PostgreSQLParserMOVE-327))|(1<<(PostgreSQLParserMULTISET-327))|(1<<(PostgreSQLParserMUMPS-327))|(1<<(PostgreSQLParserNAME-327))|(1<<(PostgreSQLParserNAMES-327))|(1<<(PostgreSQLParserNATIONAL-327))|(1<<(PostgreSQLParserNCHAR-327))|(1<<(PostgreSQLParserNCLOB-327))|(1<<(PostgreSQLParserNESTING-327))|(1<<(PostgreSQLParserNEW-327)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(PostgreSQLParserNEXT-359))|(1<<(PostgreSQLParserNO-359))|(1<<(PostgreSQLParserNONE-359))|(1<<(PostgreSQLParserNORMALIZE-359))|(1<<(PostgreSQLParserNORMALIZED-359))|(1<<(PostgreSQLParserNOT-359))|(1<<(PostgreSQLParserNOTHING-359))|(1<<(PostgreSQLParserNOTIFY-359))|(1<<(PostgreSQLParserNOWAIT-359))|(1<<(PostgreSQLParserNULL-359))|(1<<(PostgreSQLParserNULLABLE-359))|(1<<(PostgreSQLParserNULLIF-359))|(1<<(PostgreSQLParserNULLS-359))|(1<<(PostgreSQLParserNUMBER-359))|(1<<(PostgreSQLParserNUMERIC-359))|(1<<(PostgreSQLParserOBJECT-359))|(1<<(PostgreSQLParserOCTET_LENGTH-359))|(1<<(PostgreSQLParserOCTETS-359))|(1<<(PostgreSQLParserOF-359))|(1<<(PostgreSQLParserOFF-359))|(1<<(PostgreSQLParserOIDS-359))|(1<<(PostgreSQLParserOLD-359))|(1<<(PostgreSQLParserOPEN-359))|(1<<(PostgreSQLParserOPERATOR-359))|(1<<(PostgreSQLParserOPTION-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(PostgreSQLParserOPTIONS-391))|(1<<(PostgreSQLParserORDERING-391))|(1<<(PostgreSQLParserORDINALITY-391))|(1<<(PostgreSQLParserOTHERS-391))|(1<<(PostgreSQLParserOUT-391))|(1<<(PostgreSQLParserOUTPUT-391))|(1<<(PostgreSQLParserOVER-391))|(1<<(PostgreSQLParserOVERLAY-391))|(1<<(PostgreSQLParserOVERRIDING-391))|(1<<(PostgreSQLParserOWNER-391))|(1<<(PostgreSQLParserPAD-391))|(1<<(PostgreSQLParserPARAMETER-391))|(1<<(PostgreSQLParserPARAMETER_MODE-391))|(1<<(PostgreSQLParserPARAMETER_NAME-391))|(1<<(PostgreSQLParserPARAMETER_ORDINAL_POSITION-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_CATALOG-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_NAME-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA-391))|(1<<(PostgreSQLParserPARTIAL-391))|(1<<(PostgreSQLParserPARTITION-391))|(1<<(PostgreSQLParserPASCAL-391))|(1<<(PostgreSQLParserPASSWORD-391))|(1<<(PostgreSQLParserPATH-391))|(1<<(PostgreSQLParserPERCENT_RANK-391))|(1<<(PostgreSQLParserPERCENTILE_CONT-391))|(1<<(PostgreSQLParserPERCENTILE_DISC-391)))) != 0) || (((_la-424)&-(0x1f+1)) == 0 && ((1<<uint((_la-424)))&((1<<(PostgreSQLParserPLAIN-424))|(1<<(PostgreSQLParserPLI-424))|(1<<(PostgreSQLParserPOSITION-424))|(1<<(PostgreSQLParserPOWER-424))|(1<<(PostgreSQLParserPRECEDING-424))|(1<<(PostgreSQLParserPRECISION-424))|(1<<(PostgreSQLParserPREPARE-424))|(1<<(PostgreSQLParserPRESERVE-424))|(1<<(PostgreSQLParserPRIOR-424))|(1<<(PostgreSQLParserPRIVILEGES-424))|(1<<(PostgreSQLParserPROCEDURAL-424))|(1<<(PostgreSQLParserPROCEDURE-424))|(1<<(PostgreSQLParserPUBLIC-424))|(1<<(PostgreSQLParserQUOTE-424))|(1<<(PostgreSQLParserRANGE-424))|(1<<(PostgreSQLParserRANK-424))|(1<<(PostgreSQLParserREAD-424))|(1<<(PostgreSQLParserREADS-424))|(1<<(PostgreSQLParserREAL-424))|(1<<(PostgreSQLParserRECHECK-424))|(1<<(PostgreSQLParserRECURSIVE-424))|(1<<(PostgreSQLParserREF-424))|(1<<(PostgreSQLParserREFERENCING-424)))) != 0) || (((_la-456)&-(0x1f+1)) == 0 && ((1<<uint((_la-456)))&((1<<(PostgreSQLParserREFRESH-456))|(1<<(PostgreSQLParserREGR_AVGX-456))|(1<<(PostgreSQLParserREGR_AVGY-456))|(1<<(PostgreSQLParserREGR_COUNT-456))|(1<<(PostgreSQLParserREGR_INTERCEPT-456))|(1<<(PostgreSQLParserREGR_SLOPE-456))|(1<<(PostgreSQLParserREGR_SXX-456))|(1<<(PostgreSQLParserREGR_SXY-456))|(1<<(PostgreSQLParserREGR_SYY-456))|(1<<(PostgreSQLParserREINDEX-456))|(1<<(PostgreSQLParserRELATIVE-456))|(1<<(PostgreSQLParserRELEASE-456))|(1<<(PostgreSQLParserRENAME-456))|(1<<(PostgreSQLParserREPEATABLE-456))|(1<<(PostgreSQLParserREPLACE-456))|(1<<(PostgreSQLParserRESET-456))|(1<<(PostgreSQLParserRESTART-456))|(1<<(PostgreSQLParserRESTRICT-456))|(1<<(PostgreSQLParserRESULT-456))|(1<<(PostgreSQLParserRETURN-456))|(1<<(PostgreSQLParserRETURNED_CARDINALITY-456))|(1<<(PostgreSQLParserRETURNED_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_OCTET_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_SQLSTATE-456))|(1<<(PostgreSQLParserRETURNS-456))|(1<<(PostgreSQLParserREVOKE-456))|(1<<(PostgreSQLParserRIGHT-456))|(1<<(PostgreSQLParserROLE-456))|(1<<(PostgreSQLParserROLLBACK-456)))) != 0) || (((_la-488)&-(0x1f+1)) == 0 && ((1<<uint((_la-488)))&((1<<(PostgreSQLParserROLLUP-488))|(1<<(PostgreSQLParserROUTINE-488))|(1<<(PostgreSQLParserROUTINE_CATALOG-488))|(1<<(PostgreSQLParserROUTINE_NAME-488))|(1<<(PostgreSQLParserROUTINE_SCHEMA-488))|(1<<(PostgreSQLParserROW-488))|(1<<(PostgreSQLParserROW_COUNT-488))|(1<<(PostgreSQLParserROW_NUMBER-488))|(1<<(PostgreSQLParserROWS-488))|(1<<(PostgreSQLParserRULE-488))|(1<<(PostgreSQLParserSAVEPOINT-488))|(1<<(PostgreSQLParserSCALE-488))|(1<<(PostgreSQLParserSCHEMA-488))|(1<<(PostgreSQLParserSCHEMA_NAME-488))|(1<<(PostgreSQLParserSCOPE-488))|(1<<(PostgreSQLParserSCOPE_CATALOG-488))|(1<<(PostgreSQLParserSCOPE_NAME-488))|(1<<(PostgreSQLParserSCOPE_SCHEMA-488))|(1<<(PostgreSQLParserSCROLL-488))|(1<<(PostgreSQLParserSEARCH-488))|(1<<(PostgreSQLParserSECOND-488))|(1<<(PostgreSQLParserSECTION-488))|(1<<(PostgreSQLParserSECURITY-488))|(1<<(PostgreSQLParserSELF-488))|(1<<(PostgreSQLParserSENSITIVE-488))|(1<<(PostgreSQLParserSEQUENCE-488))|(1<<(PostgreSQLParserSEQUENCES-488))|(1<<(PostgreSQLParserSERIALIZABLE-488))|(1<<(PostgreSQLParserSERVER_NAME-488))|(1<<(PostgreSQLParserSESSION-488)))) != 0) || (((_la-520)&-(0x1f+1)) == 0 && ((1<<uint((_la-520)))&((1<<(PostgreSQLParserSET-520))|(1<<(PostgreSQLParserSETOF-520))|(1<<(PostgreSQLParserSETS-520))|(1<<(PostgreSQLParserSHARE-520))|(1<<(PostgreSQLParserSHOW-520))|(1<<(PostgreSQLParserSIMPLE-520))|(1<<(PostgreSQLParserSIZE-520))|(1<<(PostgreSQLParserSMALLINT-520))|(1<<(PostgreSQLParserSOME-520))|(1<<(PostgreSQLParserSOURCE-520))|(1<<(PostgreSQLParserSPACE-520))|(1<<(PostgreSQLParserSPECIFIC-520))|(1<<(PostgreSQLParserSPECIFIC_NAME-520))|(1<<(PostgreSQLParserSPECIFICTYPE-520))|(1<<(PostgreSQLParserSQL-520))|(1<<(PostgreSQLParserSQLCODE-520))|(1<<(PostgreSQLParserSQLERROR-520))|(1<<(PostgreSQLParserSQLEXCEPTION-520))|(1<<(PostgreSQLParserSQLSTATE-520))|(1<<(PostgreSQLParserSQLWARNING-520))|(1<<(PostgreSQLParserSQRT-520))|(1<<(PostgreSQLParserSTABLE-520))|(1<<(PostgreSQLParserSTART-520))|(1<<(PostgreSQLParserSTATE-520))|(1<<(PostgreSQLParserSTATEMENT-520))|(1<<(PostgreSQLParserSTATIC-520))|(1<<(PostgreSQLParserSTATISTICS-520))|(1<<(PostgreSQLParserSTDDEV_POP-520))|(1<<(PostgreSQLParserSTDDEV_SAMP-520)))) != 0) || (((_la-552)&-(0x1f+1)) == 0 && ((1<<uint((_la-552)))&((1<<(PostgreSQLParserSTDIN-552))|(1<<(PostgreSQLParserSTDOUT-552))|(1<<(PostgreSQLParserSTORAGE-552))|(1<<(PostgreSQLParserSTRICT-552))|(1<<(PostgreSQLParserSTRUCTURE-552))|(1<<(PostgreSQLParserSTYLE-552))|(1<<(PostgreSQLParserSUBCLASS_ORIGIN-552))|(1<<(PostgreSQLParserSUBMULTISET-552))|(1<<(PostgreSQLParserSUBSTRING-552))|(1<<(PostgreSQLParserSUM-552))|(1<<(PostgreSQLParserSYSID-552))|(1<<(PostgreSQLParserSYSTEM-552))|(1<<(PostgreSQLParserSYSTEM_USER-552))|(1<<(PostgreSQLParserTABLE_NAME-552))|(1<<(PostgreSQLParserTABLESPACE-552))|(1<<(PostgreSQLParserTEMP-552))|(1<<(PostgreSQLParserTEMPLATE-552))|(1<<(PostgreSQLParserTEMPORARY-552))|(1<<(PostgreSQLParserTIES-552))|(1<<(PostgreSQLParserTIME-552))|(1<<(PostgreSQLParserTIMESTAMP-552))|(1<<(PostgreSQLParserTIMEZONE_HOUR-552))|(1<<(PostgreSQLParserTIMEZONE_MINUTE-552)))) != 0) || (((_la-586)&-(0x1f+1)) == 0 && ((1<<uint((_la-586)))&((1<<(PostgreSQLParserTOP_LEVEL_COUNT-586))|(1<<(PostgreSQLParserTRANSACTION-586))|(1<<(PostgreSQLParserTRANSACTION_ACTIVE-586))|(1<<(PostgreSQLParserTRANSACTIONS_COMMITTED-586))|(1<<(PostgreSQLParserTRANSACTIONS_ROLLED_BACK-586))|(1<<(PostgreSQLParserTRANSFORM-586))|(1<<(PostgreSQLParserTRANSFORMS-586))|(1<<(PostgreSQLParserTRANSLATE-586))|(1<<(PostgreSQLParserTRANSLATION-586))|(1<<(PostgreSQLParserTREAT-586))|(1<<(PostgreSQLParserTRIGGER-586))|(1<<(PostgreSQLParserTRIGGER_CATALOG-586))|(1<<(PostgreSQLParserTRIGGER_NAME-586))|(1<<(PostgreSQLParserTRIGGER_SCHEMA-586))|(1<<(PostgreSQLParserTRIM-586))|(1<<(PostgreSQLParserTRUE-586))|(1<<(PostgreSQLParserTRUNCATE-586))|(1<<(PostgreSQLParserTRUSTED-586))|(1<<(PostgreSQLParserTYPE-586))|(1<<(PostgreSQLParserUESCAPE-586))|(1<<(PostgreSQLParserUNBOUNDED-586))|(1<<(PostgreSQLParserUNCOMMITTED-586))|(1<<(PostgreSQLParserUNDER-586))|(1<<(PostgreSQLParserUNENCRYPTED-586))|(1<<(PostgreSQLParserUNKNOWN-586))|(1<<(PostgreSQLParserUNLISTEN-586))|(1<<(PostgreSQLParserUNNAMED-586))|(1<<(PostgreSQLParserUNNEST-586))|(1<<(PostgreSQLParserUNTIL-586)))) != 0) || (((_la-618)&-(0x1f+1)) == 0 && ((1<<uint((_la-618)))&((1<<(PostgreSQLParserUPDATE-618))|(1<<(PostgreSQLParserUPPER-618))|(1<<(PostgreSQLParserUSAGE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CATALOG-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CODE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_NAME-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA-618))|(1<<(PostgreSQLParserVACUUM-618))|(1<<(PostgreSQLParserVALID-618))|(1<<(PostgreSQLParserVALIDATOR-618))|(1<<(PostgreSQLParserVALUE-618))|(1<<(PostgreSQLParserVALUES-618))|(1<<(PostgreSQLParserVAR_POP-618))|(1<<(PostgreSQLParserVAR_SAMP-618))|(1<<(PostgreSQLParserVARCHAR-618))|(1<<(PostgreSQLParserVARYING-618))|(1<<(PostgreSQLParserVIEW-618))|(1<<(PostgreSQLParserVOLATILE-618))|(1<<(PostgreSQLParserWHENEVER-618))|(1<<(PostgreSQLParserWIDTH_BUCKET-618))|(1<<(PostgreSQLParserWITH-618))|(1<<(PostgreSQLParserWITHIN-618))|(1<<(PostgreSQLParserWITHOUT-618)))) != 0) || (((_la-650)&-(0x1f+1)) == 0 && ((1<<uint((_la-650)))&((1<<(PostgreSQLParserWORK-650))|(1<<(PostgreSQLParserWRITE-650))|(1<<(PostgreSQLParserYEAR-650))|(1<<(PostgreSQLParserZONE-650)))) != 0) || (((_la-720)&-(0x1f+1)) == 0 && ((1<<uint((_la-720)))&((1<<(PostgreSQLParserABSTIME-720))|(1<<(PostgreSQLParserBIGSERIAL-720))|(1<<(PostgreSQLParserBIT_VARYING-720))|(1<<(PostgreSQLParserBOOL-720))|(1<<(PostgreSQLParserBOX-720))|(1<<(PostgreSQLParserBYTEA-720))|(1<<(PostgreSQLParserCHARACTER_VARYING-720))|(1<<(PostgreSQLParserCIDR-720))|(1<<(PostgreSQLParserCIRCLE-720))|(1<<(PostgreSQLParserFLOAT4-720))|(1<<(PostgreSQLParserFLOAT8-720))|(1<<(PostgreSQLParserINET-720))|(1<<(PostgreSQLParserINT2-720))|(1<<(PostgreSQLParserINT4-720))|(1<<(PostgreSQLParserINT8-720))|(1<<(PostgreSQLParserJSON-720))|(1<<(PostgreSQLParserJSONB-720))|(1<<(PostgreSQLParserLINE-720))|(1<<(PostgreSQLParserLSEG-720))|(1<<(PostgreSQLParserMACADDR-720))|(1<<(PostgreSQLParserMACADDR8-720))|(1<<(PostgreSQLParserMONEY-720))|(1<<(PostgreSQLParserPG_LSN-720))|(1<<(PostgreSQLParserPOINT-720))|(1<<(PostgreSQLParserPOLYGON-720))|(1<<(PostgreSQLParserRELTIME-720))|(1<<(PostgreSQLParserSERIAL-720))|(1<<(PostgreSQLParserSERIAL2-720))|(1<<(PostgreSQLParserSERIAL4-720))|(1<<(PostgreSQLParserSERIAL8-720))|(1<<(PostgreSQLParserSMALLSERIAL-720)))) != 0) || (((_la-752)&-(0x1f+1)) == 0 && ((1<<uint((_la-752)))&((1<<(PostgreSQLParserTEXT-752))|(1<<(PostgreSQLParserTIMESTAMPTZ-752))|(1<<(PostgreSQLParserTIMETZ-752))|(1<<(PostgreSQLParserTSQUERY-752))|(1<<(PostgreSQLParserTSVECTOR-752))|(1<<(PostgreSQLParserTXID_SNAPSHOT-752))|(1<<(PostgreSQLParserUUID-752))|(1<<(PostgreSQLParserVARBIT-752))|(1<<(PostgreSQLParserXML-752))|(1<<(PostgreSQLParserDOLLAR-752))|(1<<(PostgreSQLParserDOLLAR_DOLLAR-752))|(1<<(PostgreSQLParserOPEN_PAREN-752))|(1<<(PostgreSQLParserBIT_STRING-752))|(1<<(PostgreSQLParserREGEX_STRING-752))|(1<<(PostgreSQLParserNUMERIC_LITERAL-752))|(1<<(PostgreSQLParserINTEGER_LITERAL-752))|(1<<(PostgreSQLParserHEX_INTEGER_LITERAL-752))|(1<<(PostgreSQLParserSINGLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserDOUBLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserIDENTIFIER-752))|(1<<(PostgreSQLParserDOLLAR_DEC-752))|(1<<(PostgreSQLParserIDENTIFIER_UNICODE-752)))) != 0) || (((_la-787)&-(0x1f+1)) == 0 && ((1<<uint((_la-787)))&((1<<(PostgreSQLParserAT_SIGN-787))|(1<<(PostgreSQLParserBANG_BANG-787))|(1<<(PostgreSQLParserMINUS-787)))) != 0) || (((_la-820)&-(0x1f+1)) == 0 && ((1<<uint((_la-820)))&((1<<(PostgreSQLParserPLUS-820))|(1<<(PostgreSQLParserQMARK_HYPHEN-820))|(1<<(PostgreSQLParserTIL-820)))) != 0) {
			{
				p.SetState(5197)
				p.expr(0)
			}
			p.SetState(5202)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 617, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(5198)
						p.Match(PostgreSQLParserCOMMA)
					}
					{
						p.SetState(5199)
						p.expr(0)
					}

				}
				p.SetState(5204)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 617, p.GetParserRuleContext())
			}
			p.SetState(5208)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PostgreSQLParserCOMMA {
				{
					p.SetState(5205)
					p.Match(PostgreSQLParserCOMMA)
				}
				{
					p.SetState(5206)
					p.Match(PostgreSQLParserVARIADIC)
				}
				{
					p.SetState(5207)
					p.expr(0)
				}

			}

		}
		{
			p.SetState(5212)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5214)
			p.Func_name()
		}
		{
			p.SetState(5215)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(5216)
			p.Todo_fill_in()
		}
		{
			p.SetState(5217)
			p.Match(PostgreSQLParserFROM)
		}
		{
			p.SetState(5218)
			p.expr(0)
		}
		p.SetState(5221)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserFOR {
			{
				p.SetState(5219)
				p.Match(PostgreSQLParserFOR)
			}
			{
				p.SetState(5220)
				p.expr(0)
			}

		}
		{
			p.SetState(5223)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}

	return localctx
}

// IArray_cons_exprContext is an interface to support dynamic dispatch.
type IArray_cons_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArray_cons_exprContext differentiates from other interfaces.
	IsArray_cons_exprContext()
}

type Array_cons_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_cons_exprContext() *Array_cons_exprContext {
	var p = new(Array_cons_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_array_cons_expr
	return p
}

func (*Array_cons_exprContext) IsArray_cons_exprContext() {}

func NewArray_cons_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_cons_exprContext {
	var p = new(Array_cons_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_array_cons_expr

	return p
}

func (s *Array_cons_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_cons_exprContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserARRAY, 0)
}

func (s *Array_cons_exprContext) OPEN_BRACKET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_BRACKET, 0)
}

func (s *Array_cons_exprContext) CLOSE_BRACKET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_BRACKET, 0)
}

func (s *Array_cons_exprContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Array_cons_exprContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Array_cons_exprContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Array_cons_exprContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Array_cons_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_cons_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_cons_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterArray_cons_expr(s)
	}
}

func (s *Array_cons_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitArray_cons_expr(s)
	}
}

func (p *PostgreSQLParser) Array_cons_expr() (localctx IArray_cons_exprContext) {
	localctx = NewArray_cons_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 484, PostgreSQLParserRULE_array_cons_expr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5227)
		p.Match(PostgreSQLParserARRAY)
	}
	{
		p.SetState(5228)
		p.Match(PostgreSQLParserOPEN_BRACKET)
	}
	p.SetState(5237)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PostgreSQLParserWHITESPACE)|(1<<PostgreSQLParserA_)|(1<<PostgreSQLParserABORT)|(1<<PostgreSQLParserABS)|(1<<PostgreSQLParserABSOLUTE)|(1<<PostgreSQLParserACCESS)|(1<<PostgreSQLParserACTION)|(1<<PostgreSQLParserADA)|(1<<PostgreSQLParserADD)|(1<<PostgreSQLParserADMIN)|(1<<PostgreSQLParserAFTER)|(1<<PostgreSQLParserAGGREGATE)|(1<<PostgreSQLParserALL)|(1<<PostgreSQLParserALLOCATE)|(1<<PostgreSQLParserALSO)|(1<<PostgreSQLParserALTER)|(1<<PostgreSQLParserALWAYS)|(1<<PostgreSQLParserANY)|(1<<PostgreSQLParserARE)|(1<<PostgreSQLParserARRAY)|(1<<PostgreSQLParserASENSITIVE)|(1<<PostgreSQLParserASSERTION)|(1<<PostgreSQLParserASSIGNMENT))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(PostgreSQLParserAT-33))|(1<<(PostgreSQLParserATOMIC-33))|(1<<(PostgreSQLParserATTRIBUTE-33))|(1<<(PostgreSQLParserATTRIBUTES-33))|(1<<(PostgreSQLParserAVG-33))|(1<<(PostgreSQLParserBACKWARD-33))|(1<<(PostgreSQLParserBEFORE-33))|(1<<(PostgreSQLParserBEGIN-33))|(1<<(PostgreSQLParserBERNOULLI-33))|(1<<(PostgreSQLParserBETWEEN-33))|(1<<(PostgreSQLParserBIGINT-33))|(1<<(PostgreSQLParserBIT-33))|(1<<(PostgreSQLParserBIT_LENGTH-33))|(1<<(PostgreSQLParserBLOB-33))|(1<<(PostgreSQLParserBOOLEAN-33))|(1<<(PostgreSQLParserBREADTH-33))|(1<<(PostgreSQLParserBY-33))|(1<<(PostgreSQLParserC_-33))|(1<<(PostgreSQLParserCACHE-33))|(1<<(PostgreSQLParserCALL-33))|(1<<(PostgreSQLParserCALLED-33))|(1<<(PostgreSQLParserCARDINALITY-33))|(1<<(PostgreSQLParserCASCADE-33))|(1<<(PostgreSQLParserCASCADED-33))|(1<<(PostgreSQLParserCASE-33))|(1<<(PostgreSQLParserCAST-33))|(1<<(PostgreSQLParserCATALOG-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PostgreSQLParserCATALOG_NAME-65))|(1<<(PostgreSQLParserCEIL-65))|(1<<(PostgreSQLParserCEILING-65))|(1<<(PostgreSQLParserCHAIN-65))|(1<<(PostgreSQLParserCHAR-65))|(1<<(PostgreSQLParserCHAR_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER-65))|(1<<(PostgreSQLParserCHARACTER_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER_SET_CATALOG-65))|(1<<(PostgreSQLParserCHARACTER_SET_NAME-65))|(1<<(PostgreSQLParserCHARACTER_SET_SCHEMA-65))|(1<<(PostgreSQLParserCHARACTERISTICS-65))|(1<<(PostgreSQLParserCHARACTERS-65))|(1<<(PostgreSQLParserCHECKPOINT-65))|(1<<(PostgreSQLParserCLASS-65))|(1<<(PostgreSQLParserCLASS_ORIGIN-65))|(1<<(PostgreSQLParserCLOB-65))|(1<<(PostgreSQLParserCLOSE-65))|(1<<(PostgreSQLParserCLUSTER-65))|(1<<(PostgreSQLParserCOALESCE-65))|(1<<(PostgreSQLParserCOBOL-65))|(1<<(PostgreSQLParserCOLLATION_CATALOG-65))|(1<<(PostgreSQLParserCOLLATION_NAME-65))|(1<<(PostgreSQLParserCOLLATION_SCHEMA-65))|(1<<(PostgreSQLParserCOLLECT-65))|(1<<(PostgreSQLParserCOLUMN_NAME-65))|(1<<(PostgreSQLParserCOMMAND_FUNCTION-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(PostgreSQLParserCOMMAND_FUNCTION_CODE-97))|(1<<(PostgreSQLParserCOMMENT-97))|(1<<(PostgreSQLParserCOMMIT-97))|(1<<(PostgreSQLParserCOMMITTED-97))|(1<<(PostgreSQLParserCONDITION-97))|(1<<(PostgreSQLParserCONDITION_NUMBER-97))|(1<<(PostgreSQLParserCONNECT-97))|(1<<(PostgreSQLParserCONNECTION-97))|(1<<(PostgreSQLParserCONNECTION_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_CATALOG-97))|(1<<(PostgreSQLParserCONSTRAINT_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_SCHEMA-97))|(1<<(PostgreSQLParserCONSTRAINTS-97))|(1<<(PostgreSQLParserCONSTRUCTOR-97))|(1<<(PostgreSQLParserCONTAINS-97))|(1<<(PostgreSQLParserCONTINUE-97))|(1<<(PostgreSQLParserCONVERSION-97))|(1<<(PostgreSQLParserCONVERT-97))|(1<<(PostgreSQLParserCOPY-97))|(1<<(PostgreSQLParserCORR-97))|(1<<(PostgreSQLParserCORRESPONDING-97))|(1<<(PostgreSQLParserCOUNT-97))|(1<<(PostgreSQLParserCOVAR_POP-97))|(1<<(PostgreSQLParserCOVAR_SAMP-97)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(PostgreSQLParserCSV-131))|(1<<(PostgreSQLParserCUBE-131))|(1<<(PostgreSQLParserCUME_DIST-131))|(1<<(PostgreSQLParserCURRENT-131))|(1<<(PostgreSQLParserCURRENT_DATE-131))|(1<<(PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP-131))|(1<<(PostgreSQLParserCURRENT_PATH-131))|(1<<(PostgreSQLParserCURRENT_ROLE-131))|(1<<(PostgreSQLParserCURRENT_TIME-131))|(1<<(PostgreSQLParserCURRENT_TIMESTAMP-131))|(1<<(PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE-131))|(1<<(PostgreSQLParserCURRENT_USER-131))|(1<<(PostgreSQLParserCURSOR-131))|(1<<(PostgreSQLParserCURSOR_NAME-131))|(1<<(PostgreSQLParserCYCLE-131))|(1<<(PostgreSQLParserDATA-131))|(1<<(PostgreSQLParserDATABASE-131))|(1<<(PostgreSQLParserDATE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_CODE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_PRECISION-131))|(1<<(PostgreSQLParserDAY-131))|(1<<(PostgreSQLParserDEALLOCATE-131))|(1<<(PostgreSQLParserDEC-131))|(1<<(PostgreSQLParserDECIMAL-131))|(1<<(PostgreSQLParserDECLARE-131))|(1<<(PostgreSQLParserDEFAULT-131))|(1<<(PostgreSQLParserDEFAULTS-131))|(1<<(PostgreSQLParserDEFERRED-131))|(1<<(PostgreSQLParserDEFINED-131))|(1<<(PostgreSQLParserDEFINER-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(PostgreSQLParserDEGREE-163))|(1<<(PostgreSQLParserDELETE-163))|(1<<(PostgreSQLParserDELIMITER-163))|(1<<(PostgreSQLParserDELIMITERS-163))|(1<<(PostgreSQLParserDENSE_RANK-163))|(1<<(PostgreSQLParserDEPTH-163))|(1<<(PostgreSQLParserDEREF-163))|(1<<(PostgreSQLParserDERIVED-163))|(1<<(PostgreSQLParserDESCRIBE-163))|(1<<(PostgreSQLParserDESCRIPTOR-163))|(1<<(PostgreSQLParserDETERMINISTIC-163))|(1<<(PostgreSQLParserDIAGNOSTICS-163))|(1<<(PostgreSQLParserDICTIONARY-163))|(1<<(PostgreSQLParserDISCONNECT-163))|(1<<(PostgreSQLParserDISPATCH-163))|(1<<(PostgreSQLParserDOMAIN-163))|(1<<(PostgreSQLParserDOUBLE-163))|(1<<(PostgreSQLParserDYNAMIC-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION_CODE-163))|(1<<(PostgreSQLParserEACH-163))|(1<<(PostgreSQLParserELEMENT-163)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(PostgreSQLParserENCODING-197))|(1<<(PostgreSQLParserENCRYPTED-197))|(1<<(PostgreSQLParserEND-197))|(1<<(PostgreSQLParserEQUALS-197))|(1<<(PostgreSQLParserESCAPE-197))|(1<<(PostgreSQLParserEVERY-197))|(1<<(PostgreSQLParserEXCEPTION-197))|(1<<(PostgreSQLParserEXCLUDE-197))|(1<<(PostgreSQLParserEXCLUDING-197))|(1<<(PostgreSQLParserEXCLUSIVE-197))|(1<<(PostgreSQLParserEXEC-197))|(1<<(PostgreSQLParserEXECUTE-197))|(1<<(PostgreSQLParserEXISTS-197))|(1<<(PostgreSQLParserEXP-197))|(1<<(PostgreSQLParserEXPLAIN-197))|(1<<(PostgreSQLParserEXTENSION-197))|(1<<(PostgreSQLParserEXTERNAL-197))|(1<<(PostgreSQLParserEXTRACT-197))|(1<<(PostgreSQLParserFALSE-197))|(1<<(PostgreSQLParserFILTER-197))|(1<<(PostgreSQLParserFINAL-197))|(1<<(PostgreSQLParserFIRST-197))|(1<<(PostgreSQLParserFLOAT-197))|(1<<(PostgreSQLParserFLOOR-197))|(1<<(PostgreSQLParserFOLLOWING-197)))) != 0) || (((_la-229)&-(0x1f+1)) == 0 && ((1<<uint((_la-229)))&((1<<(PostgreSQLParserFORCE-229))|(1<<(PostgreSQLParserFORMAT-229))|(1<<(PostgreSQLParserFORTRAN-229))|(1<<(PostgreSQLParserFORWARD-229))|(1<<(PostgreSQLParserFOUND-229))|(1<<(PostgreSQLParserFREE-229))|(1<<(PostgreSQLParserFUNCTION-229))|(1<<(PostgreSQLParserFUSION-229))|(1<<(PostgreSQLParserG_-229))|(1<<(PostgreSQLParserGENERAL-229))|(1<<(PostgreSQLParserGENERATED-229))|(1<<(PostgreSQLParserGET-229))|(1<<(PostgreSQLParserGLOBAL-229))|(1<<(PostgreSQLParserGO-229))|(1<<(PostgreSQLParserGOTO-229))|(1<<(PostgreSQLParserGRANTED-229))|(1<<(PostgreSQLParserGREATEST-229))|(1<<(PostgreSQLParserGROUPING-229))|(1<<(PostgreSQLParserHANDLER-229))|(1<<(PostgreSQLParserHIERARCHY-229))|(1<<(PostgreSQLParserHOLD-229))|(1<<(PostgreSQLParserHOST-229))|(1<<(PostgreSQLParserHOUR-229))|(1<<(PostgreSQLParserIDENTITY-229))|(1<<(PostgreSQLParserIGNORE-229)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(PostgreSQLParserIMMEDIATE-262))|(1<<(PostgreSQLParserIMMUTABLE-262))|(1<<(PostgreSQLParserIMPLEMENTATION-262))|(1<<(PostgreSQLParserIMPLICIT-262))|(1<<(PostgreSQLParserINCLUDING-262))|(1<<(PostgreSQLParserINCREMENT-262))|(1<<(PostgreSQLParserINDEX-262))|(1<<(PostgreSQLParserINDICATOR-262))|(1<<(PostgreSQLParserINHERITS-262))|(1<<(PostgreSQLParserINOUT-262))|(1<<(PostgreSQLParserINPUT-262))|(1<<(PostgreSQLParserINSENSITIVE-262))|(1<<(PostgreSQLParserINSERT-262))|(1<<(PostgreSQLParserINSTANCE-262))|(1<<(PostgreSQLParserINSTANTIABLE-262))|(1<<(PostgreSQLParserINSTEAD-262))|(1<<(PostgreSQLParserINT-262))|(1<<(PostgreSQLParserINTEGER-262))|(1<<(PostgreSQLParserINTERSECTION-262))|(1<<(PostgreSQLParserINTERVAL-262))|(1<<(PostgreSQLParserINVOKER-262))|(1<<(PostgreSQLParserISOLATION-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(PostgreSQLParserK_-294))|(1<<(PostgreSQLParserKEY-294))|(1<<(PostgreSQLParserKEY_MEMBER-294))|(1<<(PostgreSQLParserKEY_TYPE-294))|(1<<(PostgreSQLParserLANGUAGE-294))|(1<<(PostgreSQLParserLARGE-294))|(1<<(PostgreSQLParserLAST-294))|(1<<(PostgreSQLParserLEAST-294))|(1<<(PostgreSQLParserLEFT-294))|(1<<(PostgreSQLParserLENGTH-294))|(1<<(PostgreSQLParserLEVEL-294))|(1<<(PostgreSQLParserLISTEN-294))|(1<<(PostgreSQLParserLN-294))|(1<<(PostgreSQLParserLOAD-294))|(1<<(PostgreSQLParserLOCAL-294))|(1<<(PostgreSQLParserLOCATION-294))|(1<<(PostgreSQLParserLOCATOR-294))|(1<<(PostgreSQLParserLOCK-294))|(1<<(PostgreSQLParserLOCKED-294))|(1<<(PostgreSQLParserLOWER-294))|(1<<(PostgreSQLParserM_-294))|(1<<(PostgreSQLParserMAP-294)))) != 0) || (((_la-327)&-(0x1f+1)) == 0 && ((1<<uint((_la-327)))&((1<<(PostgreSQLParserMATCH-327))|(1<<(PostgreSQLParserMATCHED-327))|(1<<(PostgreSQLParserMAX-327))|(1<<(PostgreSQLParserMAXVALUE-327))|(1<<(PostgreSQLParserMEMBER-327))|(1<<(PostgreSQLParserMERGE-327))|(1<<(PostgreSQLParserMESSAGE_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_OCTET_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_TEXT-327))|(1<<(PostgreSQLParserMETHOD-327))|(1<<(PostgreSQLParserMIN-327))|(1<<(PostgreSQLParserMINUTE-327))|(1<<(PostgreSQLParserMINVALUE-327))|(1<<(PostgreSQLParserMOD-327))|(1<<(PostgreSQLParserMODE-327))|(1<<(PostgreSQLParserMODIFIES-327))|(1<<(PostgreSQLParserMODULE-327))|(1<<(PostgreSQLParserMONTH-327))|(1<<(PostgreSQLParserMORE_-327))|(1<<(PostgreSQLParserMOVE-327))|(1<<(PostgreSQLParserMULTISET-327))|(1<<(PostgreSQLParserMUMPS-327))|(1<<(PostgreSQLParserNAME-327))|(1<<(PostgreSQLParserNAMES-327))|(1<<(PostgreSQLParserNATIONAL-327))|(1<<(PostgreSQLParserNCHAR-327))|(1<<(PostgreSQLParserNCLOB-327))|(1<<(PostgreSQLParserNESTING-327))|(1<<(PostgreSQLParserNEW-327)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(PostgreSQLParserNEXT-359))|(1<<(PostgreSQLParserNO-359))|(1<<(PostgreSQLParserNONE-359))|(1<<(PostgreSQLParserNORMALIZE-359))|(1<<(PostgreSQLParserNORMALIZED-359))|(1<<(PostgreSQLParserNOT-359))|(1<<(PostgreSQLParserNOTHING-359))|(1<<(PostgreSQLParserNOTIFY-359))|(1<<(PostgreSQLParserNOWAIT-359))|(1<<(PostgreSQLParserNULL-359))|(1<<(PostgreSQLParserNULLABLE-359))|(1<<(PostgreSQLParserNULLIF-359))|(1<<(PostgreSQLParserNULLS-359))|(1<<(PostgreSQLParserNUMBER-359))|(1<<(PostgreSQLParserNUMERIC-359))|(1<<(PostgreSQLParserOBJECT-359))|(1<<(PostgreSQLParserOCTET_LENGTH-359))|(1<<(PostgreSQLParserOCTETS-359))|(1<<(PostgreSQLParserOF-359))|(1<<(PostgreSQLParserOFF-359))|(1<<(PostgreSQLParserOIDS-359))|(1<<(PostgreSQLParserOLD-359))|(1<<(PostgreSQLParserOPEN-359))|(1<<(PostgreSQLParserOPERATOR-359))|(1<<(PostgreSQLParserOPTION-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(PostgreSQLParserOPTIONS-391))|(1<<(PostgreSQLParserORDERING-391))|(1<<(PostgreSQLParserORDINALITY-391))|(1<<(PostgreSQLParserOTHERS-391))|(1<<(PostgreSQLParserOUT-391))|(1<<(PostgreSQLParserOUTPUT-391))|(1<<(PostgreSQLParserOVER-391))|(1<<(PostgreSQLParserOVERLAY-391))|(1<<(PostgreSQLParserOVERRIDING-391))|(1<<(PostgreSQLParserOWNER-391))|(1<<(PostgreSQLParserPAD-391))|(1<<(PostgreSQLParserPARAMETER-391))|(1<<(PostgreSQLParserPARAMETER_MODE-391))|(1<<(PostgreSQLParserPARAMETER_NAME-391))|(1<<(PostgreSQLParserPARAMETER_ORDINAL_POSITION-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_CATALOG-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_NAME-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA-391))|(1<<(PostgreSQLParserPARTIAL-391))|(1<<(PostgreSQLParserPARTITION-391))|(1<<(PostgreSQLParserPASCAL-391))|(1<<(PostgreSQLParserPASSWORD-391))|(1<<(PostgreSQLParserPATH-391))|(1<<(PostgreSQLParserPERCENT_RANK-391))|(1<<(PostgreSQLParserPERCENTILE_CONT-391))|(1<<(PostgreSQLParserPERCENTILE_DISC-391)))) != 0) || (((_la-424)&-(0x1f+1)) == 0 && ((1<<uint((_la-424)))&((1<<(PostgreSQLParserPLAIN-424))|(1<<(PostgreSQLParserPLI-424))|(1<<(PostgreSQLParserPOSITION-424))|(1<<(PostgreSQLParserPOWER-424))|(1<<(PostgreSQLParserPRECEDING-424))|(1<<(PostgreSQLParserPRECISION-424))|(1<<(PostgreSQLParserPREPARE-424))|(1<<(PostgreSQLParserPRESERVE-424))|(1<<(PostgreSQLParserPRIOR-424))|(1<<(PostgreSQLParserPRIVILEGES-424))|(1<<(PostgreSQLParserPROCEDURAL-424))|(1<<(PostgreSQLParserPROCEDURE-424))|(1<<(PostgreSQLParserPUBLIC-424))|(1<<(PostgreSQLParserQUOTE-424))|(1<<(PostgreSQLParserRANGE-424))|(1<<(PostgreSQLParserRANK-424))|(1<<(PostgreSQLParserREAD-424))|(1<<(PostgreSQLParserREADS-424))|(1<<(PostgreSQLParserREAL-424))|(1<<(PostgreSQLParserRECHECK-424))|(1<<(PostgreSQLParserRECURSIVE-424))|(1<<(PostgreSQLParserREF-424))|(1<<(PostgreSQLParserREFERENCING-424)))) != 0) || (((_la-456)&-(0x1f+1)) == 0 && ((1<<uint((_la-456)))&((1<<(PostgreSQLParserREFRESH-456))|(1<<(PostgreSQLParserREGR_AVGX-456))|(1<<(PostgreSQLParserREGR_AVGY-456))|(1<<(PostgreSQLParserREGR_COUNT-456))|(1<<(PostgreSQLParserREGR_INTERCEPT-456))|(1<<(PostgreSQLParserREGR_SLOPE-456))|(1<<(PostgreSQLParserREGR_SXX-456))|(1<<(PostgreSQLParserREGR_SXY-456))|(1<<(PostgreSQLParserREGR_SYY-456))|(1<<(PostgreSQLParserREINDEX-456))|(1<<(PostgreSQLParserRELATIVE-456))|(1<<(PostgreSQLParserRELEASE-456))|(1<<(PostgreSQLParserRENAME-456))|(1<<(PostgreSQLParserREPEATABLE-456))|(1<<(PostgreSQLParserREPLACE-456))|(1<<(PostgreSQLParserRESET-456))|(1<<(PostgreSQLParserRESTART-456))|(1<<(PostgreSQLParserRESTRICT-456))|(1<<(PostgreSQLParserRESULT-456))|(1<<(PostgreSQLParserRETURN-456))|(1<<(PostgreSQLParserRETURNED_CARDINALITY-456))|(1<<(PostgreSQLParserRETURNED_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_OCTET_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_SQLSTATE-456))|(1<<(PostgreSQLParserRETURNS-456))|(1<<(PostgreSQLParserREVOKE-456))|(1<<(PostgreSQLParserRIGHT-456))|(1<<(PostgreSQLParserROLE-456))|(1<<(PostgreSQLParserROLLBACK-456)))) != 0) || (((_la-488)&-(0x1f+1)) == 0 && ((1<<uint((_la-488)))&((1<<(PostgreSQLParserROLLUP-488))|(1<<(PostgreSQLParserROUTINE-488))|(1<<(PostgreSQLParserROUTINE_CATALOG-488))|(1<<(PostgreSQLParserROUTINE_NAME-488))|(1<<(PostgreSQLParserROUTINE_SCHEMA-488))|(1<<(PostgreSQLParserROW-488))|(1<<(PostgreSQLParserROW_COUNT-488))|(1<<(PostgreSQLParserROW_NUMBER-488))|(1<<(PostgreSQLParserROWS-488))|(1<<(PostgreSQLParserRULE-488))|(1<<(PostgreSQLParserSAVEPOINT-488))|(1<<(PostgreSQLParserSCALE-488))|(1<<(PostgreSQLParserSCHEMA-488))|(1<<(PostgreSQLParserSCHEMA_NAME-488))|(1<<(PostgreSQLParserSCOPE-488))|(1<<(PostgreSQLParserSCOPE_CATALOG-488))|(1<<(PostgreSQLParserSCOPE_NAME-488))|(1<<(PostgreSQLParserSCOPE_SCHEMA-488))|(1<<(PostgreSQLParserSCROLL-488))|(1<<(PostgreSQLParserSEARCH-488))|(1<<(PostgreSQLParserSECOND-488))|(1<<(PostgreSQLParserSECTION-488))|(1<<(PostgreSQLParserSECURITY-488))|(1<<(PostgreSQLParserSELF-488))|(1<<(PostgreSQLParserSENSITIVE-488))|(1<<(PostgreSQLParserSEQUENCE-488))|(1<<(PostgreSQLParserSEQUENCES-488))|(1<<(PostgreSQLParserSERIALIZABLE-488))|(1<<(PostgreSQLParserSERVER_NAME-488))|(1<<(PostgreSQLParserSESSION-488)))) != 0) || (((_la-520)&-(0x1f+1)) == 0 && ((1<<uint((_la-520)))&((1<<(PostgreSQLParserSET-520))|(1<<(PostgreSQLParserSETOF-520))|(1<<(PostgreSQLParserSETS-520))|(1<<(PostgreSQLParserSHARE-520))|(1<<(PostgreSQLParserSHOW-520))|(1<<(PostgreSQLParserSIMPLE-520))|(1<<(PostgreSQLParserSIZE-520))|(1<<(PostgreSQLParserSMALLINT-520))|(1<<(PostgreSQLParserSOME-520))|(1<<(PostgreSQLParserSOURCE-520))|(1<<(PostgreSQLParserSPACE-520))|(1<<(PostgreSQLParserSPECIFIC-520))|(1<<(PostgreSQLParserSPECIFIC_NAME-520))|(1<<(PostgreSQLParserSPECIFICTYPE-520))|(1<<(PostgreSQLParserSQL-520))|(1<<(PostgreSQLParserSQLCODE-520))|(1<<(PostgreSQLParserSQLERROR-520))|(1<<(PostgreSQLParserSQLEXCEPTION-520))|(1<<(PostgreSQLParserSQLSTATE-520))|(1<<(PostgreSQLParserSQLWARNING-520))|(1<<(PostgreSQLParserSQRT-520))|(1<<(PostgreSQLParserSTABLE-520))|(1<<(PostgreSQLParserSTART-520))|(1<<(PostgreSQLParserSTATE-520))|(1<<(PostgreSQLParserSTATEMENT-520))|(1<<(PostgreSQLParserSTATIC-520))|(1<<(PostgreSQLParserSTATISTICS-520))|(1<<(PostgreSQLParserSTDDEV_POP-520))|(1<<(PostgreSQLParserSTDDEV_SAMP-520)))) != 0) || (((_la-552)&-(0x1f+1)) == 0 && ((1<<uint((_la-552)))&((1<<(PostgreSQLParserSTDIN-552))|(1<<(PostgreSQLParserSTDOUT-552))|(1<<(PostgreSQLParserSTORAGE-552))|(1<<(PostgreSQLParserSTRICT-552))|(1<<(PostgreSQLParserSTRUCTURE-552))|(1<<(PostgreSQLParserSTYLE-552))|(1<<(PostgreSQLParserSUBCLASS_ORIGIN-552))|(1<<(PostgreSQLParserSUBMULTISET-552))|(1<<(PostgreSQLParserSUBSTRING-552))|(1<<(PostgreSQLParserSUM-552))|(1<<(PostgreSQLParserSYSID-552))|(1<<(PostgreSQLParserSYSTEM-552))|(1<<(PostgreSQLParserSYSTEM_USER-552))|(1<<(PostgreSQLParserTABLE_NAME-552))|(1<<(PostgreSQLParserTABLESPACE-552))|(1<<(PostgreSQLParserTEMP-552))|(1<<(PostgreSQLParserTEMPLATE-552))|(1<<(PostgreSQLParserTEMPORARY-552))|(1<<(PostgreSQLParserTIES-552))|(1<<(PostgreSQLParserTIME-552))|(1<<(PostgreSQLParserTIMESTAMP-552))|(1<<(PostgreSQLParserTIMEZONE_HOUR-552))|(1<<(PostgreSQLParserTIMEZONE_MINUTE-552)))) != 0) || (((_la-586)&-(0x1f+1)) == 0 && ((1<<uint((_la-586)))&((1<<(PostgreSQLParserTOP_LEVEL_COUNT-586))|(1<<(PostgreSQLParserTRANSACTION-586))|(1<<(PostgreSQLParserTRANSACTION_ACTIVE-586))|(1<<(PostgreSQLParserTRANSACTIONS_COMMITTED-586))|(1<<(PostgreSQLParserTRANSACTIONS_ROLLED_BACK-586))|(1<<(PostgreSQLParserTRANSFORM-586))|(1<<(PostgreSQLParserTRANSFORMS-586))|(1<<(PostgreSQLParserTRANSLATE-586))|(1<<(PostgreSQLParserTRANSLATION-586))|(1<<(PostgreSQLParserTREAT-586))|(1<<(PostgreSQLParserTRIGGER-586))|(1<<(PostgreSQLParserTRIGGER_CATALOG-586))|(1<<(PostgreSQLParserTRIGGER_NAME-586))|(1<<(PostgreSQLParserTRIGGER_SCHEMA-586))|(1<<(PostgreSQLParserTRIM-586))|(1<<(PostgreSQLParserTRUE-586))|(1<<(PostgreSQLParserTRUNCATE-586))|(1<<(PostgreSQLParserTRUSTED-586))|(1<<(PostgreSQLParserTYPE-586))|(1<<(PostgreSQLParserUESCAPE-586))|(1<<(PostgreSQLParserUNBOUNDED-586))|(1<<(PostgreSQLParserUNCOMMITTED-586))|(1<<(PostgreSQLParserUNDER-586))|(1<<(PostgreSQLParserUNENCRYPTED-586))|(1<<(PostgreSQLParserUNKNOWN-586))|(1<<(PostgreSQLParserUNLISTEN-586))|(1<<(PostgreSQLParserUNNAMED-586))|(1<<(PostgreSQLParserUNNEST-586))|(1<<(PostgreSQLParserUNTIL-586)))) != 0) || (((_la-618)&-(0x1f+1)) == 0 && ((1<<uint((_la-618)))&((1<<(PostgreSQLParserUPDATE-618))|(1<<(PostgreSQLParserUPPER-618))|(1<<(PostgreSQLParserUSAGE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CATALOG-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CODE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_NAME-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA-618))|(1<<(PostgreSQLParserVACUUM-618))|(1<<(PostgreSQLParserVALID-618))|(1<<(PostgreSQLParserVALIDATOR-618))|(1<<(PostgreSQLParserVALUE-618))|(1<<(PostgreSQLParserVALUES-618))|(1<<(PostgreSQLParserVAR_POP-618))|(1<<(PostgreSQLParserVAR_SAMP-618))|(1<<(PostgreSQLParserVARCHAR-618))|(1<<(PostgreSQLParserVARYING-618))|(1<<(PostgreSQLParserVIEW-618))|(1<<(PostgreSQLParserVOLATILE-618))|(1<<(PostgreSQLParserWHENEVER-618))|(1<<(PostgreSQLParserWIDTH_BUCKET-618))|(1<<(PostgreSQLParserWITH-618))|(1<<(PostgreSQLParserWITHIN-618))|(1<<(PostgreSQLParserWITHOUT-618)))) != 0) || (((_la-650)&-(0x1f+1)) == 0 && ((1<<uint((_la-650)))&((1<<(PostgreSQLParserWORK-650))|(1<<(PostgreSQLParserWRITE-650))|(1<<(PostgreSQLParserYEAR-650))|(1<<(PostgreSQLParserZONE-650)))) != 0) || (((_la-720)&-(0x1f+1)) == 0 && ((1<<uint((_la-720)))&((1<<(PostgreSQLParserABSTIME-720))|(1<<(PostgreSQLParserBIGSERIAL-720))|(1<<(PostgreSQLParserBIT_VARYING-720))|(1<<(PostgreSQLParserBOOL-720))|(1<<(PostgreSQLParserBOX-720))|(1<<(PostgreSQLParserBYTEA-720))|(1<<(PostgreSQLParserCHARACTER_VARYING-720))|(1<<(PostgreSQLParserCIDR-720))|(1<<(PostgreSQLParserCIRCLE-720))|(1<<(PostgreSQLParserFLOAT4-720))|(1<<(PostgreSQLParserFLOAT8-720))|(1<<(PostgreSQLParserINET-720))|(1<<(PostgreSQLParserINT2-720))|(1<<(PostgreSQLParserINT4-720))|(1<<(PostgreSQLParserINT8-720))|(1<<(PostgreSQLParserJSON-720))|(1<<(PostgreSQLParserJSONB-720))|(1<<(PostgreSQLParserLINE-720))|(1<<(PostgreSQLParserLSEG-720))|(1<<(PostgreSQLParserMACADDR-720))|(1<<(PostgreSQLParserMACADDR8-720))|(1<<(PostgreSQLParserMONEY-720))|(1<<(PostgreSQLParserPG_LSN-720))|(1<<(PostgreSQLParserPOINT-720))|(1<<(PostgreSQLParserPOLYGON-720))|(1<<(PostgreSQLParserRELTIME-720))|(1<<(PostgreSQLParserSERIAL-720))|(1<<(PostgreSQLParserSERIAL2-720))|(1<<(PostgreSQLParserSERIAL4-720))|(1<<(PostgreSQLParserSERIAL8-720))|(1<<(PostgreSQLParserSMALLSERIAL-720)))) != 0) || (((_la-752)&-(0x1f+1)) == 0 && ((1<<uint((_la-752)))&((1<<(PostgreSQLParserTEXT-752))|(1<<(PostgreSQLParserTIMESTAMPTZ-752))|(1<<(PostgreSQLParserTIMETZ-752))|(1<<(PostgreSQLParserTSQUERY-752))|(1<<(PostgreSQLParserTSVECTOR-752))|(1<<(PostgreSQLParserTXID_SNAPSHOT-752))|(1<<(PostgreSQLParserUUID-752))|(1<<(PostgreSQLParserVARBIT-752))|(1<<(PostgreSQLParserXML-752))|(1<<(PostgreSQLParserDOLLAR-752))|(1<<(PostgreSQLParserDOLLAR_DOLLAR-752))|(1<<(PostgreSQLParserOPEN_PAREN-752))|(1<<(PostgreSQLParserBIT_STRING-752))|(1<<(PostgreSQLParserREGEX_STRING-752))|(1<<(PostgreSQLParserNUMERIC_LITERAL-752))|(1<<(PostgreSQLParserINTEGER_LITERAL-752))|(1<<(PostgreSQLParserHEX_INTEGER_LITERAL-752))|(1<<(PostgreSQLParserSINGLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserDOUBLEQ_STRING_LITERAL-752))|(1<<(PostgreSQLParserIDENTIFIER-752))|(1<<(PostgreSQLParserDOLLAR_DEC-752))|(1<<(PostgreSQLParserIDENTIFIER_UNICODE-752)))) != 0) || (((_la-787)&-(0x1f+1)) == 0 && ((1<<uint((_la-787)))&((1<<(PostgreSQLParserAT_SIGN-787))|(1<<(PostgreSQLParserBANG_BANG-787))|(1<<(PostgreSQLParserMINUS-787)))) != 0) || (((_la-820)&-(0x1f+1)) == 0 && ((1<<uint((_la-820)))&((1<<(PostgreSQLParserPLUS-820))|(1<<(PostgreSQLParserQMARK_HYPHEN-820))|(1<<(PostgreSQLParserTIL-820)))) != 0) {
		{
			p.SetState(5229)
			p.expr(0)
		}
		p.SetState(5234)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PostgreSQLParserCOMMA {
			{
				p.SetState(5230)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(5231)
				p.expr(0)
			}

			p.SetState(5236)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(5239)
		p.Match(PostgreSQLParserCLOSE_BRACKET)
	}

	return localctx
}

// IFrom_itemContext is an interface to support dynamic dispatch.
type IFrom_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrom_itemContext differentiates from other interfaces.
	IsFrom_itemContext()
}

type From_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_itemContext() *From_itemContext {
	var p = new(From_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_from_item
	return p
}

func (*From_itemContext) IsFrom_itemContext() {}

func NewFrom_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_itemContext {
	var p = new(From_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_from_item

	return p
}

func (s *From_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *From_itemContext) Table_name_() ITable_name_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_Context)
}

func (s *From_itemContext) ONLY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserONLY, 0)
}

func (s *From_itemContext) STAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTAR, 0)
}

func (s *From_itemContext) With_column_alias() IWith_column_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_column_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_column_aliasContext)
}

func (s *From_itemContext) TABLESAMPLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLESAMPLE, 0)
}

func (s *From_itemContext) AllTodo_fill_in() []ITodo_fill_inContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITodo_fill_inContext)(nil)).Elem())
	var tst = make([]ITodo_fill_inContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITodo_fill_inContext)
		}
	}

	return tst
}

func (s *From_itemContext) Todo_fill_in(i int) ITodo_fill_inContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITodo_fill_inContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITodo_fill_inContext)
}

func (s *From_itemContext) AllOPEN_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPEN_PAREN)
}

func (s *From_itemContext) OPEN_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, i)
}

func (s *From_itemContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *From_itemContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *From_itemContext) AllCLOSE_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCLOSE_PAREN)
}

func (s *From_itemContext) CLOSE_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, i)
}

func (s *From_itemContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *From_itemContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *From_itemContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREPEATABLE, 0)
}

func (s *From_itemContext) Stmt() IStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStmtContext)
}

func (s *From_itemContext) Alias() IAliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *From_itemContext) LATERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLATERAL, 0)
}

func (s *From_itemContext) AS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAS, 0)
}

func (s *From_itemContext) AllColumn_alias() []IColumn_aliasContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_aliasContext)(nil)).Elem())
	var tst = make([]IColumn_aliasContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_aliasContext)
		}
	}

	return tst
}

func (s *From_itemContext) Column_alias(i int) IColumn_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_aliasContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_aliasContext)
}

func (s *From_itemContext) Func_call() IFunc_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_callContext)
}

func (s *From_itemContext) WITH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITH, 0)
}

func (s *From_itemContext) ORDINALITY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserORDINALITY, 0)
}

func (s *From_itemContext) AllColumn_definition() []IColumn_definitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_definitionContext)(nil)).Elem())
	var tst = make([]IColumn_definitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_definitionContext)
		}
	}

	return tst
}

func (s *From_itemContext) Column_definition(i int) IColumn_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_definitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_definitionContext)
}

func (s *From_itemContext) ROWS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROWS, 0)
}

func (s *From_itemContext) FROM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFROM, 0)
}

func (s *From_itemContext) AllFrom_item() []IFrom_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFrom_itemContext)(nil)).Elem())
	var tst = make([]IFrom_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFrom_itemContext)
		}
	}

	return tst
}

func (s *From_itemContext) From_item(i int) IFrom_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrom_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFrom_itemContext)
}

func (s *From_itemContext) Join_type() IJoin_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoin_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoin_typeContext)
}

func (s *From_itemContext) NATURAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNATURAL, 0)
}

func (s *From_itemContext) Join_clause() IJoin_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoin_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoin_clauseContext)
}

func (s *From_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *From_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterFrom_item(s)
	}
}

func (s *From_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitFrom_item(s)
	}
}

func (p *PostgreSQLParser) From_item() (localctx IFrom_itemContext) {
	return p.from_item(0)
}

func (p *PostgreSQLParser) from_item(_p int) (localctx IFrom_itemContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewFrom_itemContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IFrom_itemContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 486
	p.EnterRecursionRule(localctx, 486, PostgreSQLParserRULE_from_item, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5347)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 642, p.GetParserRuleContext()) {
	case 1:
		p.SetState(5243)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserONLY {
			{
				p.SetState(5242)
				p.Match(PostgreSQLParserONLY)
			}

		}
		{
			p.SetState(5245)
			p.Table_name_()
		}
		p.SetState(5247)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 625, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5246)
				p.Match(PostgreSQLParserSTAR)
			}

		}
		p.SetState(5250)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 626, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5249)
				p.With_column_alias()
			}

		}
		p.SetState(5271)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 629, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5252)
				p.Match(PostgreSQLParserTABLESAMPLE)
			}
			{
				p.SetState(5253)
				p.Todo_fill_in()
			}
			{
				p.SetState(5254)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(5255)
				p.expr(0)
			}
			p.SetState(5260)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == PostgreSQLParserCOMMA {
				{
					p.SetState(5256)
					p.Match(PostgreSQLParserCOMMA)
				}
				{
					p.SetState(5257)
					p.expr(0)
				}

				p.SetState(5262)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(5263)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}
			p.SetState(5269)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 628, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(5264)
					p.Match(PostgreSQLParserREPEATABLE)
				}
				{
					p.SetState(5265)
					p.Match(PostgreSQLParserOPEN_PAREN)
				}
				{
					p.SetState(5266)
					p.Todo_fill_in()
				}
				{
					p.SetState(5267)
					p.Match(PostgreSQLParserCLOSE_PAREN)
				}

			}

		}

	case 2:
		p.SetState(5274)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserLATERAL {
			{
				p.SetState(5273)
				p.Match(PostgreSQLParserLATERAL)
			}

		}
		{
			p.SetState(5276)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(5277)
			p.Stmt()
		}
		{
			p.SetState(5278)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}
		p.SetState(5280)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserAS {
			{
				p.SetState(5279)
				p.Match(PostgreSQLParserAS)
			}

		}
		{
			p.SetState(5282)
			p.Alias()
		}
		p.SetState(5294)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 633, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5283)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(5284)
				p.Column_alias()
			}
			p.SetState(5289)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == PostgreSQLParserCOMMA {
				{
					p.SetState(5285)
					p.Match(PostgreSQLParserCOMMA)
				}
				{
					p.SetState(5286)
					p.Column_alias()
				}

				p.SetState(5291)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(5292)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case 3:
		p.SetState(5297)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserLATERAL {
			{
				p.SetState(5296)
				p.Match(PostgreSQLParserLATERAL)
			}

		}
		{
			p.SetState(5299)
			p.Func_call()
		}
		p.SetState(5302)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 635, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5300)
				p.Match(PostgreSQLParserWITH)
			}
			{
				p.SetState(5301)
				p.Match(PostgreSQLParserORDINALITY)
			}

		}
		p.SetState(5305)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 636, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5304)
				p.With_column_alias()
			}

		}

	case 4:
		p.SetState(5308)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserLATERAL {
			{
				p.SetState(5307)
				p.Match(PostgreSQLParserLATERAL)
			}

		}
		{
			p.SetState(5310)
			p.Func_call()
		}
		{
			p.SetState(5311)
			p.Match(PostgreSQLParserAS)
		}
		{
			p.SetState(5312)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(5313)
			p.Column_definition()
		}
		p.SetState(5318)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PostgreSQLParserCOMMA {
			{
				p.SetState(5314)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(5315)
				p.Column_definition()
			}

			p.SetState(5320)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(5321)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case 5:
		p.SetState(5324)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserLATERAL {
			{
				p.SetState(5323)
				p.Match(PostgreSQLParserLATERAL)
			}

		}
		{
			p.SetState(5326)
			p.Match(PostgreSQLParserROWS)
		}
		{
			p.SetState(5327)
			p.Match(PostgreSQLParserFROM)
		}
		{
			p.SetState(5328)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(5329)
			p.Func_call()
		}
		{
			p.SetState(5330)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}
		p.SetState(5343)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserAS {
			{
				p.SetState(5331)
				p.Match(PostgreSQLParserAS)
			}
			{
				p.SetState(5332)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(5333)
				p.Column_definition()
			}
			p.SetState(5338)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == PostgreSQLParserCOMMA {
				{
					p.SetState(5334)
					p.Match(PostgreSQLParserCOMMA)
				}
				{
					p.SetState(5335)
					p.Column_definition()
				}

				p.SetState(5340)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(5341)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}
		{
			p.SetState(5345)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(5366)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 647, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewFrom_itemContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_from_item)
			p.SetState(5349)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			p.SetState(5351)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PostgreSQLParserNATURAL {
				{
					p.SetState(5350)
					p.Match(PostgreSQLParserNATURAL)
				}

			}
			{
				p.SetState(5353)
				p.Join_type()
			}
			p.SetState(5355)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 644, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(5354)
					p.Match(PostgreSQLParserOPEN_PAREN)
				}

			}
			{
				p.SetState(5357)
				p.from_item(0)
			}
			p.SetState(5359)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 645, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(5358)
					p.Join_clause()
				}

			}
			p.SetState(5362)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 646, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(5361)
					p.Match(PostgreSQLParserCLOSE_PAREN)
				}

			}

		}
		p.SetState(5368)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 647, p.GetParserRuleContext())
	}

	return localctx
}

// IWith_column_aliasContext is an interface to support dynamic dispatch.
type IWith_column_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_column_aliasContext differentiates from other interfaces.
	IsWith_column_aliasContext()
}

type With_column_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_column_aliasContext() *With_column_aliasContext {
	var p = new(With_column_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_with_column_alias
	return p
}

func (*With_column_aliasContext) IsWith_column_aliasContext() {}

func NewWith_column_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_column_aliasContext {
	var p = new(With_column_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_with_column_alias

	return p
}

func (s *With_column_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *With_column_aliasContext) Alias() IAliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *With_column_aliasContext) AS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAS, 0)
}

func (s *With_column_aliasContext) AllColumn_alias() []IColumn_aliasContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_aliasContext)(nil)).Elem())
	var tst = make([]IColumn_aliasContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_aliasContext)
		}
	}

	return tst
}

func (s *With_column_aliasContext) Column_alias(i int) IColumn_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_aliasContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_aliasContext)
}

func (s *With_column_aliasContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *With_column_aliasContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *With_column_aliasContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *With_column_aliasContext) Name_list() IName_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_listContext)
}

func (s *With_column_aliasContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *With_column_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_column_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_column_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterWith_column_alias(s)
	}
}

func (s *With_column_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitWith_column_alias(s)
	}
}

func (p *PostgreSQLParser) With_column_alias() (localctx IWith_column_aliasContext) {
	localctx = NewWith_column_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 488, PostgreSQLParserRULE_with_column_alias)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(5391)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 652, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5370)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserAS {
			{
				p.SetState(5369)
				p.Match(PostgreSQLParserAS)
			}

		}
		{
			p.SetState(5372)
			p.Alias()
		}
		p.SetState(5381)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 650, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5373)
				p.Column_alias()
			}
			p.SetState(5378)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 649, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(5374)
						p.Match(PostgreSQLParserCOMMA)
					}
					{
						p.SetState(5375)
						p.Column_alias()
					}

				}
				p.SetState(5380)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 649, p.GetParserRuleContext())
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(5384)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserAS {
			{
				p.SetState(5383)
				p.Match(PostgreSQLParserAS)
			}

		}
		{
			p.SetState(5386)
			p.Alias()
		}
		{
			p.SetState(5387)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(5388)
			p.Name_list()
		}
		{
			p.SetState(5389)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}

	return localctx
}

// IJoin_typeContext is an interface to support dynamic dispatch.
type IJoin_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoin_typeContext differentiates from other interfaces.
	IsJoin_typeContext()
}

type Join_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_typeContext() *Join_typeContext {
	var p = new(Join_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_join_type
	return p
}

func (*Join_typeContext) IsJoin_typeContext() {}

func NewJoin_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_typeContext {
	var p = new(Join_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_join_type

	return p
}

func (s *Join_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_typeContext) JOIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserJOIN, 0)
}

func (s *Join_typeContext) INNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINNER, 0)
}

func (s *Join_typeContext) LEFT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLEFT, 0)
}

func (s *Join_typeContext) OUTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOUTER, 0)
}

func (s *Join_typeContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRIGHT, 0)
}

func (s *Join_typeContext) FULL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFULL, 0)
}

func (s *Join_typeContext) CROSS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCROSS, 0)
}

func (s *Join_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterJoin_type(s)
	}
}

func (s *Join_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitJoin_type(s)
	}
}

func (p *PostgreSQLParser) Join_type() (localctx IJoin_typeContext) {
	localctx = NewJoin_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 490, PostgreSQLParserRULE_join_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5414)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserINNER, PostgreSQLParserJOIN:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5394)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserINNER {
			{
				p.SetState(5393)
				p.Match(PostgreSQLParserINNER)
			}

		}
		{
			p.SetState(5396)
			p.Match(PostgreSQLParserJOIN)
		}

	case PostgreSQLParserLEFT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5397)
			p.Match(PostgreSQLParserLEFT)
		}
		p.SetState(5399)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserOUTER {
			{
				p.SetState(5398)
				p.Match(PostgreSQLParserOUTER)
			}

		}
		{
			p.SetState(5401)
			p.Match(PostgreSQLParserJOIN)
		}

	case PostgreSQLParserRIGHT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5402)
			p.Match(PostgreSQLParserRIGHT)
		}
		p.SetState(5404)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserOUTER {
			{
				p.SetState(5403)
				p.Match(PostgreSQLParserOUTER)
			}

		}
		{
			p.SetState(5406)
			p.Match(PostgreSQLParserJOIN)
		}

	case PostgreSQLParserFULL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5407)
			p.Match(PostgreSQLParserFULL)
		}
		p.SetState(5409)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserOUTER {
			{
				p.SetState(5408)
				p.Match(PostgreSQLParserOUTER)
			}

		}
		{
			p.SetState(5411)
			p.Match(PostgreSQLParserJOIN)
		}

	case PostgreSQLParserCROSS:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5412)
			p.Match(PostgreSQLParserCROSS)
		}
		{
			p.SetState(5413)
			p.Match(PostgreSQLParserJOIN)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IJoin_clauseContext is an interface to support dynamic dispatch.
type IJoin_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoin_clauseContext differentiates from other interfaces.
	IsJoin_clauseContext()
}

type Join_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_clauseContext() *Join_clauseContext {
	var p = new(Join_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_join_clause
	return p
}

func (*Join_clauseContext) IsJoin_clauseContext() {}

func NewJoin_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_clauseContext {
	var p = new(Join_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_join_clause

	return p
}

func (s *Join_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_clauseContext) ON() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserON, 0)
}

func (s *Join_clauseContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *Join_clauseContext) USING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSING, 0)
}

func (s *Join_clauseContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Join_clauseContext) AllColumn_name() []IColumn_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem())
	var tst = make([]IColumn_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_nameContext)
		}
	}

	return tst
}

func (s *Join_clauseContext) Column_name(i int) IColumn_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Join_clauseContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Join_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Join_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Join_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterJoin_clause(s)
	}
}

func (s *Join_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitJoin_clause(s)
	}
}

func (p *PostgreSQLParser) Join_clause() (localctx IJoin_clauseContext) {
	localctx = NewJoin_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 492, PostgreSQLParserRULE_join_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5430)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserON:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5416)
			p.Match(PostgreSQLParserON)
		}
		{
			p.SetState(5417)
			p.predicate(0)
		}

	case PostgreSQLParserUSING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5418)
			p.Match(PostgreSQLParserUSING)
		}
		{
			p.SetState(5419)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(5420)
			p.Column_name()
		}
		p.SetState(5425)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == PostgreSQLParserCOMMA {
			{
				p.SetState(5421)
				p.Match(PostgreSQLParserCOMMA)
			}
			{
				p.SetState(5422)
				p.Column_name()
			}

			p.SetState(5427)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(5428)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPredicateContext is an interface to support dynamic dispatch.
type IPredicateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPredicateContext differentiates from other interfaces.
	IsPredicateContext()
}

type PredicateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPredicateContext() *PredicateContext {
	var p = new(PredicateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_predicate
	return p
}

func (*PredicateContext) IsPredicateContext() {}

func NewPredicateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PredicateContext {
	var p = new(PredicateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_predicate

	return p
}

func (s *PredicateContext) GetParser() antlr.Parser { return s.parser }

func (s *PredicateContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *PredicateContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *PredicateContext) Oper() IOperContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperContext)
}

func (s *PredicateContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *PredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *PredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *PredicateContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *PredicateContext) NOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOT, 0)
}

func (s *PredicateContext) AND() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAND, 0)
}

func (s *PredicateContext) OR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOR, 0)
}

func (s *PredicateContext) IN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIN, 0)
}

func (s *PredicateContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *PredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterPredicate(s)
	}
}

func (s *PredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitPredicate(s)
	}
}

func (p *PostgreSQLParser) Predicate() (localctx IPredicateContext) {
	return p.predicate(0)
}

func (p *PostgreSQLParser) predicate(_p int) (localctx IPredicateContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPredicateContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPredicateContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 494
	p.EnterRecursionRule(localctx, 494, PostgreSQLParserRULE_predicate, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5444)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 660, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5433)
			p.expr(0)
		}

	case 2:
		{
			p.SetState(5434)
			p.expr(0)
		}
		{
			p.SetState(5435)
			p.Oper()
		}
		{
			p.SetState(5436)
			p.expr(0)
		}

	case 3:
		{
			p.SetState(5438)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(5439)
			p.predicate(0)
		}
		{
			p.SetState(5440)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case 4:
		{
			p.SetState(5442)
			p.Match(PostgreSQLParserNOT)
		}
		{
			p.SetState(5443)
			p.predicate(2)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(5466)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 664, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(5464)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 663, p.GetParserRuleContext()) {
			case 1:
				localctx = NewPredicateContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_predicate)
				p.SetState(5446)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(5447)
					p.Match(PostgreSQLParserAND)
				}
				{
					p.SetState(5448)
					p.predicate(5)
				}

			case 2:
				localctx = NewPredicateContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_predicate)
				p.SetState(5449)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(5450)
					p.Match(PostgreSQLParserOR)
				}
				{
					p.SetState(5451)
					p.predicate(4)
				}

			case 3:
				localctx = NewPredicateContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_predicate)
				p.SetState(5452)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				p.SetState(5454)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == PostgreSQLParserNOT {
					{
						p.SetState(5453)
						p.Match(PostgreSQLParserNOT)
					}

				}
				{
					p.SetState(5456)
					p.Match(PostgreSQLParserIN)
				}
				{
					p.SetState(5457)
					p.Match(PostgreSQLParserOPEN_PAREN)
				}
				p.SetState(5460)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 662, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(5458)
						p.Select_stmt()
					}

				case 2:
					{
						p.SetState(5459)
						p.expr(0)
					}

				}
				{
					p.SetState(5462)
					p.Match(PostgreSQLParserCLOSE_PAREN)
				}

			}

		}
		p.SetState(5468)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 664, p.GetParserRuleContext())
	}

	return localctx
}

// IAggregate_signatureContext is an interface to support dynamic dispatch.
type IAggregate_signatureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetArgmode returns the argmode token.
	GetArgmode() antlr.Token

	// SetArgmode sets the argmode token.
	SetArgmode(antlr.Token)

	// GetArgname returns the argname rule contexts.
	GetArgname() IIdentifierContext

	// GetArgtype returns the argtype rule contexts.
	GetArgtype() IData_type_listContext

	// SetArgname sets the argname rule contexts.
	SetArgname(IIdentifierContext)

	// SetArgtype sets the argtype rule contexts.
	SetArgtype(IData_type_listContext)

	// IsAggregate_signatureContext differentiates from other interfaces.
	IsAggregate_signatureContext()
}

type Aggregate_signatureContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	argmode antlr.Token
	argname IIdentifierContext
	argtype IData_type_listContext
}

func NewEmptyAggregate_signatureContext() *Aggregate_signatureContext {
	var p = new(Aggregate_signatureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_aggregate_signature
	return p
}

func (*Aggregate_signatureContext) IsAggregate_signatureContext() {}

func NewAggregate_signatureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aggregate_signatureContext {
	var p = new(Aggregate_signatureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_aggregate_signature

	return p
}

func (s *Aggregate_signatureContext) GetParser() antlr.Parser { return s.parser }

func (s *Aggregate_signatureContext) GetArgmode() antlr.Token { return s.argmode }

func (s *Aggregate_signatureContext) SetArgmode(v antlr.Token) { s.argmode = v }

func (s *Aggregate_signatureContext) GetArgname() IIdentifierContext { return s.argname }

func (s *Aggregate_signatureContext) GetArgtype() IData_type_listContext { return s.argtype }

func (s *Aggregate_signatureContext) SetArgname(v IIdentifierContext) { s.argname = v }

func (s *Aggregate_signatureContext) SetArgtype(v IData_type_listContext) { s.argtype = v }

func (s *Aggregate_signatureContext) STAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTAR, 0)
}

func (s *Aggregate_signatureContext) AllData_type_list() []IData_type_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_type_listContext)(nil)).Elem())
	var tst = make([]IData_type_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_type_listContext)
		}
	}

	return tst
}

func (s *Aggregate_signatureContext) Data_type_list(i int) IData_type_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_type_listContext)
}

func (s *Aggregate_signatureContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Aggregate_signatureContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Aggregate_signatureContext) AllIN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserIN)
}

func (s *Aggregate_signatureContext) IN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIN, i)
}

func (s *Aggregate_signatureContext) AllVARIADIC() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserVARIADIC)
}

func (s *Aggregate_signatureContext) VARIADIC(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVARIADIC, i)
}

func (s *Aggregate_signatureContext) ORDER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserORDER, 0)
}

func (s *Aggregate_signatureContext) BY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBY, 0)
}

func (s *Aggregate_signatureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aggregate_signatureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Aggregate_signatureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAggregate_signature(s)
	}
}

func (s *Aggregate_signatureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAggregate_signature(s)
	}
}

func (p *PostgreSQLParser) Aggregate_signature() (localctx IAggregate_signatureContext) {
	localctx = NewAggregate_signatureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 496, PostgreSQLParserRULE_aggregate_signature)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5495)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 671, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5469)
			p.Match(PostgreSQLParserSTAR)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(5471)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIN || _la == PostgreSQLParserVARIADIC {
			{
				p.SetState(5470)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*Aggregate_signatureContext).argmode = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserIN || _la == PostgreSQLParserVARIADIC) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*Aggregate_signatureContext).argmode = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(5474)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 666, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5473)

				var _x = p.identifier(0)

				localctx.(*Aggregate_signatureContext).argname = _x
			}

		}
		{
			p.SetState(5476)

			var _x = p.Data_type_list()

			localctx.(*Aggregate_signatureContext).argtype = _x
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(5478)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIN || _la == PostgreSQLParserVARIADIC {
			{
				p.SetState(5477)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*Aggregate_signatureContext).argmode = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserIN || _la == PostgreSQLParserVARIADIC) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*Aggregate_signatureContext).argmode = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(5481)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 668, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5480)

				var _x = p.identifier(0)

				localctx.(*Aggregate_signatureContext).argname = _x
			}

		}
		{
			p.SetState(5483)

			var _x = p.Data_type_list()

			localctx.(*Aggregate_signatureContext).argtype = _x
		}

		{
			p.SetState(5485)
			p.Match(PostgreSQLParserORDER)
		}
		{
			p.SetState(5486)
			p.Match(PostgreSQLParserBY)
		}
		p.SetState(5488)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserIN || _la == PostgreSQLParserVARIADIC {
			{
				p.SetState(5487)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*Aggregate_signatureContext).argmode = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == PostgreSQLParserIN || _la == PostgreSQLParserVARIADIC) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*Aggregate_signatureContext).argmode = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(5491)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 670, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5490)

				var _x = p.identifier(0)

				localctx.(*Aggregate_signatureContext).argname = _x
			}

		}
		{
			p.SetState(5493)

			var _x = p.Data_type_list()

			localctx.(*Aggregate_signatureContext).argtype = _x
		}

	}

	return localctx
}

// IColumn_constraintContext is an interface to support dynamic dispatch.
type IColumn_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_constraintContext differentiates from other interfaces.
	IsColumn_constraintContext()
}

type Column_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_constraintContext() *Column_constraintContext {
	var p = new(Column_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_column_constraint
	return p
}

func (*Column_constraintContext) IsColumn_constraintContext() {}

func NewColumn_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_constraintContext {
	var p = new(Column_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_column_constraint

	return p
}

func (s *Column_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_constraintContext) NOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOT, 0)
}

func (s *Column_constraintContext) NULL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNULL, 0)
}

func (s *Column_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterColumn_constraint(s)
	}
}

func (s *Column_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitColumn_constraint(s)
	}
}

func (p *PostgreSQLParser) Column_constraint() (localctx IColumn_constraintContext) {
	localctx = NewColumn_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 498, PostgreSQLParserRULE_column_constraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5497)
		p.Match(PostgreSQLParserNOT)
	}
	{
		p.SetState(5498)
		p.Match(PostgreSQLParserNULL)
	}

	return localctx
}

// IColumn_constraintsContext is an interface to support dynamic dispatch.
type IColumn_constraintsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_constraintsContext differentiates from other interfaces.
	IsColumn_constraintsContext()
}

type Column_constraintsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_constraintsContext() *Column_constraintsContext {
	var p = new(Column_constraintsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_column_constraints
	return p
}

func (*Column_constraintsContext) IsColumn_constraintsContext() {}

func NewColumn_constraintsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_constraintsContext {
	var p = new(Column_constraintsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_column_constraints

	return p
}

func (s *Column_constraintsContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_constraintsContext) AllColumn_constraint() []IColumn_constraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_constraintContext)(nil)).Elem())
	var tst = make([]IColumn_constraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_constraintContext)
		}
	}

	return tst
}

func (s *Column_constraintsContext) Column_constraint(i int) IColumn_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_constraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_constraintContext)
}

func (s *Column_constraintsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_constraintsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_constraintsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterColumn_constraints(s)
	}
}

func (s *Column_constraintsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitColumn_constraints(s)
	}
}

func (p *PostgreSQLParser) Column_constraints() (localctx IColumn_constraintsContext) {
	localctx = NewColumn_constraintsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 500, PostgreSQLParserRULE_column_constraints)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5501)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == PostgreSQLParserNOT {
		{
			p.SetState(5500)
			p.Column_constraint()
		}

		p.SetState(5503)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IIndex_parametersContext is an interface to support dynamic dispatch.
type IIndex_parametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTablespace returns the tablespace rule contexts.
	GetTablespace() IIdentifierContext

	// SetTablespace sets the tablespace rule contexts.
	SetTablespace(IIdentifierContext)

	// IsIndex_parametersContext differentiates from other interfaces.
	IsIndex_parametersContext()
}

type Index_parametersContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	tablespace IIdentifierContext
}

func NewEmptyIndex_parametersContext() *Index_parametersContext {
	var p = new(Index_parametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_index_parameters
	return p
}

func (*Index_parametersContext) IsIndex_parametersContext() {}

func NewIndex_parametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_parametersContext {
	var p = new(Index_parametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_index_parameters

	return p
}

func (s *Index_parametersContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_parametersContext) GetTablespace() IIdentifierContext { return s.tablespace }

func (s *Index_parametersContext) SetTablespace(v IIdentifierContext) { s.tablespace = v }

func (s *Index_parametersContext) WITH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITH, 0)
}

func (s *Index_parametersContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Index_parametersContext) Option_list() IOption_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_listContext)
}

func (s *Index_parametersContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Index_parametersContext) USING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSING, 0)
}

func (s *Index_parametersContext) INDEX() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINDEX, 0)
}

func (s *Index_parametersContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLESPACE, 0)
}

func (s *Index_parametersContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Index_parametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_parametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_parametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterIndex_parameters(s)
	}
}

func (s *Index_parametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitIndex_parameters(s)
	}
}

func (p *PostgreSQLParser) Index_parameters() (localctx IIndex_parametersContext) {
	localctx = NewIndex_parametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 502, PostgreSQLParserRULE_index_parameters)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5510)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserWITH {
		{
			p.SetState(5505)
			p.Match(PostgreSQLParserWITH)
		}
		{
			p.SetState(5506)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(5507)
			p.Option_list()
		}
		{
			p.SetState(5508)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	}
	p.SetState(5516)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserUSING {
		{
			p.SetState(5512)
			p.Match(PostgreSQLParserUSING)
		}
		{
			p.SetState(5513)
			p.Match(PostgreSQLParserINDEX)
		}
		{
			p.SetState(5514)
			p.Match(PostgreSQLParserTABLESPACE)
		}
		{
			p.SetState(5515)

			var _x = p.identifier(0)

			localctx.(*Index_parametersContext).tablespace = _x
		}

	}

	return localctx
}

// IExclude_elementContext is an interface to support dynamic dispatch.
type IExclude_elementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetColumn_name_ returns the column_name_ rule contexts.
	GetColumn_name_() IIdentifierContext

	// GetOpclass returns the opclass rule contexts.
	GetOpclass() IIdentifierContext

	// SetColumn_name_ sets the column_name_ rule contexts.
	SetColumn_name_(IIdentifierContext)

	// SetOpclass sets the opclass rule contexts.
	SetOpclass(IIdentifierContext)

	// IsExclude_elementContext differentiates from other interfaces.
	IsExclude_elementContext()
}

type Exclude_elementContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	column_name_ IIdentifierContext
	opclass      IIdentifierContext
}

func NewEmptyExclude_elementContext() *Exclude_elementContext {
	var p = new(Exclude_elementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_exclude_element
	return p
}

func (*Exclude_elementContext) IsExclude_elementContext() {}

func NewExclude_elementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Exclude_elementContext {
	var p = new(Exclude_elementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_exclude_element

	return p
}

func (s *Exclude_elementContext) GetParser() antlr.Parser { return s.parser }

func (s *Exclude_elementContext) GetColumn_name_() IIdentifierContext { return s.column_name_ }

func (s *Exclude_elementContext) GetOpclass() IIdentifierContext { return s.opclass }

func (s *Exclude_elementContext) SetColumn_name_(v IIdentifierContext) { s.column_name_ = v }

func (s *Exclude_elementContext) SetOpclass(v IIdentifierContext) { s.opclass = v }

func (s *Exclude_elementContext) OPEN_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, 0)
}

func (s *Exclude_elementContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Exclude_elementContext) CLOSE_PAREN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, 0)
}

func (s *Exclude_elementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Exclude_elementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Exclude_elementContext) NULLS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNULLS, 0)
}

func (s *Exclude_elementContext) ASC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserASC, 0)
}

func (s *Exclude_elementContext) DESC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDESC, 0)
}

func (s *Exclude_elementContext) FIRST() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFIRST, 0)
}

func (s *Exclude_elementContext) LAST() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLAST, 0)
}

func (s *Exclude_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Exclude_elementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Exclude_elementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterExclude_element(s)
	}
}

func (s *Exclude_elementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitExclude_element(s)
	}
}

func (p *PostgreSQLParser) Exclude_element() (localctx IExclude_elementContext) {
	localctx = NewExclude_elementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 504, PostgreSQLParserRULE_exclude_element)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5523)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserWHITESPACE, PostgreSQLParserA_, PostgreSQLParserABORT, PostgreSQLParserABS, PostgreSQLParserABSOLUTE, PostgreSQLParserACCESS, PostgreSQLParserACTION, PostgreSQLParserADA, PostgreSQLParserADD, PostgreSQLParserADMIN, PostgreSQLParserAFTER, PostgreSQLParserAGGREGATE, PostgreSQLParserALLOCATE, PostgreSQLParserALSO, PostgreSQLParserALTER, PostgreSQLParserALWAYS, PostgreSQLParserANY, PostgreSQLParserARE, PostgreSQLParserASENSITIVE, PostgreSQLParserASSERTION, PostgreSQLParserASSIGNMENT, PostgreSQLParserAT, PostgreSQLParserATOMIC, PostgreSQLParserATTRIBUTE, PostgreSQLParserATTRIBUTES, PostgreSQLParserAVG, PostgreSQLParserBACKWARD, PostgreSQLParserBEFORE, PostgreSQLParserBEGIN, PostgreSQLParserBERNOULLI, PostgreSQLParserBETWEEN, PostgreSQLParserBIGINT, PostgreSQLParserBIT, PostgreSQLParserBIT_LENGTH, PostgreSQLParserBLOB, PostgreSQLParserBOOLEAN, PostgreSQLParserBREADTH, PostgreSQLParserBY, PostgreSQLParserC_, PostgreSQLParserCACHE, PostgreSQLParserCALL, PostgreSQLParserCALLED, PostgreSQLParserCARDINALITY, PostgreSQLParserCASCADE, PostgreSQLParserCASCADED, PostgreSQLParserCATALOG, PostgreSQLParserCATALOG_NAME, PostgreSQLParserCEIL, PostgreSQLParserCEILING, PostgreSQLParserCHAIN, PostgreSQLParserCHAR, PostgreSQLParserCHAR_LENGTH, PostgreSQLParserCHARACTER, PostgreSQLParserCHARACTER_LENGTH, PostgreSQLParserCHARACTER_SET_CATALOG, PostgreSQLParserCHARACTER_SET_NAME, PostgreSQLParserCHARACTER_SET_SCHEMA, PostgreSQLParserCHARACTERISTICS, PostgreSQLParserCHARACTERS, PostgreSQLParserCHECKPOINT, PostgreSQLParserCLASS, PostgreSQLParserCLASS_ORIGIN, PostgreSQLParserCLOB, PostgreSQLParserCLOSE, PostgreSQLParserCLUSTER, PostgreSQLParserCOALESCE, PostgreSQLParserCOBOL, PostgreSQLParserCOLLATION_CATALOG, PostgreSQLParserCOLLATION_NAME, PostgreSQLParserCOLLATION_SCHEMA, PostgreSQLParserCOLLECT, PostgreSQLParserCOLUMN_NAME, PostgreSQLParserCOMMAND_FUNCTION, PostgreSQLParserCOMMAND_FUNCTION_CODE, PostgreSQLParserCOMMENT, PostgreSQLParserCOMMIT, PostgreSQLParserCOMMITTED, PostgreSQLParserCONDITION, PostgreSQLParserCONDITION_NUMBER, PostgreSQLParserCONNECT, PostgreSQLParserCONNECTION, PostgreSQLParserCONNECTION_NAME, PostgreSQLParserCONSTRAINT_CATALOG, PostgreSQLParserCONSTRAINT_NAME, PostgreSQLParserCONSTRAINT_SCHEMA, PostgreSQLParserCONSTRAINTS, PostgreSQLParserCONSTRUCTOR, PostgreSQLParserCONTAINS, PostgreSQLParserCONTINUE, PostgreSQLParserCONVERSION, PostgreSQLParserCONVERT, PostgreSQLParserCOPY, PostgreSQLParserCORR, PostgreSQLParserCORRESPONDING, PostgreSQLParserCOUNT, PostgreSQLParserCOVAR_POP, PostgreSQLParserCOVAR_SAMP, PostgreSQLParserCSV, PostgreSQLParserCUBE, PostgreSQLParserCUME_DIST, PostgreSQLParserCURRENT, PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, PostgreSQLParserCURRENT_PATH, PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, PostgreSQLParserCURSOR, PostgreSQLParserCURSOR_NAME, PostgreSQLParserCYCLE, PostgreSQLParserDATA, PostgreSQLParserDATABASE, PostgreSQLParserDATE, PostgreSQLParserDATETIME_INTERVAL_CODE, PostgreSQLParserDATETIME_INTERVAL_PRECISION, PostgreSQLParserDAY, PostgreSQLParserDEALLOCATE, PostgreSQLParserDEC, PostgreSQLParserDECIMAL, PostgreSQLParserDECLARE, PostgreSQLParserDEFAULTS, PostgreSQLParserDEFERRED, PostgreSQLParserDEFINED, PostgreSQLParserDEFINER, PostgreSQLParserDEGREE, PostgreSQLParserDELETE, PostgreSQLParserDELIMITER, PostgreSQLParserDELIMITERS, PostgreSQLParserDENSE_RANK, PostgreSQLParserDEPTH, PostgreSQLParserDEREF, PostgreSQLParserDERIVED, PostgreSQLParserDESCRIBE, PostgreSQLParserDESCRIPTOR, PostgreSQLParserDETERMINISTIC, PostgreSQLParserDIAGNOSTICS, PostgreSQLParserDICTIONARY, PostgreSQLParserDISCONNECT, PostgreSQLParserDISPATCH, PostgreSQLParserDOMAIN, PostgreSQLParserDOUBLE, PostgreSQLParserDYNAMIC, PostgreSQLParserDYNAMIC_FUNCTION, PostgreSQLParserDYNAMIC_FUNCTION_CODE, PostgreSQLParserEACH, PostgreSQLParserELEMENT, PostgreSQLParserENCODING, PostgreSQLParserENCRYPTED, PostgreSQLParserEND, PostgreSQLParserEQUALS, PostgreSQLParserESCAPE, PostgreSQLParserEVERY, PostgreSQLParserEXCEPTION, PostgreSQLParserEXCLUDE, PostgreSQLParserEXCLUDING, PostgreSQLParserEXCLUSIVE, PostgreSQLParserEXEC, PostgreSQLParserEXECUTE, PostgreSQLParserEXISTS, PostgreSQLParserEXP, PostgreSQLParserEXPLAIN, PostgreSQLParserEXTENSION, PostgreSQLParserEXTERNAL, PostgreSQLParserEXTRACT, PostgreSQLParserFILTER, PostgreSQLParserFINAL, PostgreSQLParserFIRST, PostgreSQLParserFLOAT, PostgreSQLParserFLOOR, PostgreSQLParserFOLLOWING, PostgreSQLParserFORCE, PostgreSQLParserFORMAT, PostgreSQLParserFORTRAN, PostgreSQLParserFORWARD, PostgreSQLParserFOUND, PostgreSQLParserFREE, PostgreSQLParserFUNCTION, PostgreSQLParserFUSION, PostgreSQLParserG_, PostgreSQLParserGENERAL, PostgreSQLParserGENERATED, PostgreSQLParserGET, PostgreSQLParserGLOBAL, PostgreSQLParserGO, PostgreSQLParserGOTO, PostgreSQLParserGRANTED, PostgreSQLParserGREATEST, PostgreSQLParserGROUPING, PostgreSQLParserHANDLER, PostgreSQLParserHIERARCHY, PostgreSQLParserHOLD, PostgreSQLParserHOST, PostgreSQLParserHOUR, PostgreSQLParserIDENTITY, PostgreSQLParserIGNORE, PostgreSQLParserIMMEDIATE, PostgreSQLParserIMMUTABLE, PostgreSQLParserIMPLEMENTATION, PostgreSQLParserIMPLICIT, PostgreSQLParserINCLUDING, PostgreSQLParserINCREMENT, PostgreSQLParserINDEX, PostgreSQLParserINDICATOR, PostgreSQLParserINHERITS, PostgreSQLParserINOUT, PostgreSQLParserINPUT, PostgreSQLParserINSENSITIVE, PostgreSQLParserINSERT, PostgreSQLParserINSTANCE, PostgreSQLParserINSTANTIABLE, PostgreSQLParserINSTEAD, PostgreSQLParserINT, PostgreSQLParserINTEGER, PostgreSQLParserINTERSECTION, PostgreSQLParserINTERVAL, PostgreSQLParserINVOKER, PostgreSQLParserISOLATION, PostgreSQLParserK_, PostgreSQLParserKEY, PostgreSQLParserKEY_MEMBER, PostgreSQLParserKEY_TYPE, PostgreSQLParserLANGUAGE, PostgreSQLParserLARGE, PostgreSQLParserLAST, PostgreSQLParserLEAST, PostgreSQLParserLEFT, PostgreSQLParserLENGTH, PostgreSQLParserLEVEL, PostgreSQLParserLISTEN, PostgreSQLParserLN, PostgreSQLParserLOAD, PostgreSQLParserLOCAL, PostgreSQLParserLOCATION, PostgreSQLParserLOCATOR, PostgreSQLParserLOCK, PostgreSQLParserLOCKED, PostgreSQLParserLOWER, PostgreSQLParserM_, PostgreSQLParserMAP, PostgreSQLParserMATCH, PostgreSQLParserMATCHED, PostgreSQLParserMAX, PostgreSQLParserMAXVALUE, PostgreSQLParserMEMBER, PostgreSQLParserMERGE, PostgreSQLParserMESSAGE_LENGTH, PostgreSQLParserMESSAGE_OCTET_LENGTH, PostgreSQLParserMESSAGE_TEXT, PostgreSQLParserMETHOD, PostgreSQLParserMIN, PostgreSQLParserMINUTE, PostgreSQLParserMINVALUE, PostgreSQLParserMOD, PostgreSQLParserMODE, PostgreSQLParserMODIFIES, PostgreSQLParserMODULE, PostgreSQLParserMONTH, PostgreSQLParserMORE_, PostgreSQLParserMOVE, PostgreSQLParserMULTISET, PostgreSQLParserMUMPS, PostgreSQLParserNAME, PostgreSQLParserNAMES, PostgreSQLParserNATIONAL, PostgreSQLParserNCHAR, PostgreSQLParserNCLOB, PostgreSQLParserNESTING, PostgreSQLParserNEW, PostgreSQLParserNEXT, PostgreSQLParserNO, PostgreSQLParserNONE, PostgreSQLParserNORMALIZE, PostgreSQLParserNORMALIZED, PostgreSQLParserNOTHING, PostgreSQLParserNOTIFY, PostgreSQLParserNOWAIT, PostgreSQLParserNULLABLE, PostgreSQLParserNULLIF, PostgreSQLParserNULLS, PostgreSQLParserNUMBER, PostgreSQLParserNUMERIC, PostgreSQLParserOBJECT, PostgreSQLParserOCTET_LENGTH, PostgreSQLParserOCTETS, PostgreSQLParserOF, PostgreSQLParserOFF, PostgreSQLParserOIDS, PostgreSQLParserOLD, PostgreSQLParserOPEN, PostgreSQLParserOPERATOR, PostgreSQLParserOPTION, PostgreSQLParserOPTIONS, PostgreSQLParserORDERING, PostgreSQLParserORDINALITY, PostgreSQLParserOTHERS, PostgreSQLParserOUT, PostgreSQLParserOUTPUT, PostgreSQLParserOVER, PostgreSQLParserOVERLAY, PostgreSQLParserOVERRIDING, PostgreSQLParserOWNER, PostgreSQLParserPAD, PostgreSQLParserPARAMETER, PostgreSQLParserPARAMETER_MODE, PostgreSQLParserPARAMETER_NAME, PostgreSQLParserPARAMETER_ORDINAL_POSITION, PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, PostgreSQLParserPARAMETER_SPECIFIC_NAME, PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, PostgreSQLParserPARTIAL, PostgreSQLParserPARTITION, PostgreSQLParserPASCAL, PostgreSQLParserPASSWORD, PostgreSQLParserPATH, PostgreSQLParserPERCENT_RANK, PostgreSQLParserPERCENTILE_CONT, PostgreSQLParserPERCENTILE_DISC, PostgreSQLParserPLAIN, PostgreSQLParserPLI, PostgreSQLParserPOSITION, PostgreSQLParserPOWER, PostgreSQLParserPRECEDING, PostgreSQLParserPRECISION, PostgreSQLParserPREPARE, PostgreSQLParserPRESERVE, PostgreSQLParserPRIOR, PostgreSQLParserPRIVILEGES, PostgreSQLParserPROCEDURAL, PostgreSQLParserPROCEDURE, PostgreSQLParserPUBLIC, PostgreSQLParserQUOTE, PostgreSQLParserRANGE, PostgreSQLParserRANK, PostgreSQLParserREAD, PostgreSQLParserREADS, PostgreSQLParserREAL, PostgreSQLParserRECHECK, PostgreSQLParserRECURSIVE, PostgreSQLParserREF, PostgreSQLParserREFERENCING, PostgreSQLParserREFRESH, PostgreSQLParserREGR_AVGX, PostgreSQLParserREGR_AVGY, PostgreSQLParserREGR_COUNT, PostgreSQLParserREGR_INTERCEPT, PostgreSQLParserREGR_SLOPE, PostgreSQLParserREGR_SXX, PostgreSQLParserREGR_SXY, PostgreSQLParserREGR_SYY, PostgreSQLParserREINDEX, PostgreSQLParserRELATIVE, PostgreSQLParserRELEASE, PostgreSQLParserRENAME, PostgreSQLParserREPEATABLE, PostgreSQLParserREPLACE, PostgreSQLParserRESET, PostgreSQLParserRESTART, PostgreSQLParserRESTRICT, PostgreSQLParserRESULT, PostgreSQLParserRETURN, PostgreSQLParserRETURNED_CARDINALITY, PostgreSQLParserRETURNED_LENGTH, PostgreSQLParserRETURNED_OCTET_LENGTH, PostgreSQLParserRETURNED_SQLSTATE, PostgreSQLParserRETURNS, PostgreSQLParserREVOKE, PostgreSQLParserRIGHT, PostgreSQLParserROLE, PostgreSQLParserROLLBACK, PostgreSQLParserROLLUP, PostgreSQLParserROUTINE, PostgreSQLParserROUTINE_CATALOG, PostgreSQLParserROUTINE_NAME, PostgreSQLParserROUTINE_SCHEMA, PostgreSQLParserROW, PostgreSQLParserROW_COUNT, PostgreSQLParserROW_NUMBER, PostgreSQLParserROWS, PostgreSQLParserRULE, PostgreSQLParserSAVEPOINT, PostgreSQLParserSCALE, PostgreSQLParserSCHEMA, PostgreSQLParserSCHEMA_NAME, PostgreSQLParserSCOPE, PostgreSQLParserSCOPE_CATALOG, PostgreSQLParserSCOPE_NAME, PostgreSQLParserSCOPE_SCHEMA, PostgreSQLParserSCROLL, PostgreSQLParserSEARCH, PostgreSQLParserSECOND, PostgreSQLParserSECTION, PostgreSQLParserSECURITY, PostgreSQLParserSELF, PostgreSQLParserSENSITIVE, PostgreSQLParserSEQUENCE, PostgreSQLParserSEQUENCES, PostgreSQLParserSERIALIZABLE, PostgreSQLParserSERVER_NAME, PostgreSQLParserSESSION, PostgreSQLParserSET, PostgreSQLParserSETOF, PostgreSQLParserSETS, PostgreSQLParserSHARE, PostgreSQLParserSHOW, PostgreSQLParserSIMPLE, PostgreSQLParserSIZE, PostgreSQLParserSMALLINT, PostgreSQLParserSOME, PostgreSQLParserSOURCE, PostgreSQLParserSPACE, PostgreSQLParserSPECIFIC, PostgreSQLParserSPECIFIC_NAME, PostgreSQLParserSPECIFICTYPE, PostgreSQLParserSQL, PostgreSQLParserSQLCODE, PostgreSQLParserSQLERROR, PostgreSQLParserSQLEXCEPTION, PostgreSQLParserSQLSTATE, PostgreSQLParserSQLWARNING, PostgreSQLParserSQRT, PostgreSQLParserSTABLE, PostgreSQLParserSTART, PostgreSQLParserSTATE, PostgreSQLParserSTATEMENT, PostgreSQLParserSTATIC, PostgreSQLParserSTATISTICS, PostgreSQLParserSTDDEV_POP, PostgreSQLParserSTDDEV_SAMP, PostgreSQLParserSTDIN, PostgreSQLParserSTDOUT, PostgreSQLParserSTORAGE, PostgreSQLParserSTRICT, PostgreSQLParserSTRUCTURE, PostgreSQLParserSTYLE, PostgreSQLParserSUBCLASS_ORIGIN, PostgreSQLParserSUBMULTISET, PostgreSQLParserSUBSTRING, PostgreSQLParserSUM, PostgreSQLParserSYSID, PostgreSQLParserSYSTEM, PostgreSQLParserSYSTEM_USER, PostgreSQLParserTABLE_NAME, PostgreSQLParserTABLESPACE, PostgreSQLParserTEMP, PostgreSQLParserTEMPLATE, PostgreSQLParserTEMPORARY, PostgreSQLParserTIES, PostgreSQLParserTIME, PostgreSQLParserTIMESTAMP, PostgreSQLParserTIMEZONE_HOUR, PostgreSQLParserTIMEZONE_MINUTE, PostgreSQLParserTOP_LEVEL_COUNT, PostgreSQLParserTRANSACTION, PostgreSQLParserTRANSACTION_ACTIVE, PostgreSQLParserTRANSACTIONS_COMMITTED, PostgreSQLParserTRANSACTIONS_ROLLED_BACK, PostgreSQLParserTRANSFORM, PostgreSQLParserTRANSFORMS, PostgreSQLParserTRANSLATE, PostgreSQLParserTRANSLATION, PostgreSQLParserTREAT, PostgreSQLParserTRIGGER, PostgreSQLParserTRIGGER_CATALOG, PostgreSQLParserTRIGGER_NAME, PostgreSQLParserTRIGGER_SCHEMA, PostgreSQLParserTRIM, PostgreSQLParserTRUE, PostgreSQLParserTRUNCATE, PostgreSQLParserTRUSTED, PostgreSQLParserTYPE, PostgreSQLParserUESCAPE, PostgreSQLParserUNBOUNDED, PostgreSQLParserUNCOMMITTED, PostgreSQLParserUNDER, PostgreSQLParserUNENCRYPTED, PostgreSQLParserUNKNOWN, PostgreSQLParserUNLISTEN, PostgreSQLParserUNNAMED, PostgreSQLParserUNNEST, PostgreSQLParserUNTIL, PostgreSQLParserUPDATE, PostgreSQLParserUPPER, PostgreSQLParserUSAGE, PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, PostgreSQLParserUSER_DEFINED_TYPE_CODE, PostgreSQLParserUSER_DEFINED_TYPE_NAME, PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, PostgreSQLParserVACUUM, PostgreSQLParserVALID, PostgreSQLParserVALIDATOR, PostgreSQLParserVALUE, PostgreSQLParserVALUES, PostgreSQLParserVAR_POP, PostgreSQLParserVAR_SAMP, PostgreSQLParserVARCHAR, PostgreSQLParserVARYING, PostgreSQLParserVIEW, PostgreSQLParserVOLATILE, PostgreSQLParserWHENEVER, PostgreSQLParserWIDTH_BUCKET, PostgreSQLParserWITHIN, PostgreSQLParserWITHOUT, PostgreSQLParserWORK, PostgreSQLParserWRITE, PostgreSQLParserYEAR, PostgreSQLParserZONE, PostgreSQLParserABSTIME, PostgreSQLParserBIGSERIAL, PostgreSQLParserBIT_VARYING, PostgreSQLParserBOOL, PostgreSQLParserBOX, PostgreSQLParserBYTEA, PostgreSQLParserCHARACTER_VARYING, PostgreSQLParserCIDR, PostgreSQLParserCIRCLE, PostgreSQLParserFLOAT4, PostgreSQLParserFLOAT8, PostgreSQLParserINET, PostgreSQLParserINT2, PostgreSQLParserINT4, PostgreSQLParserINT8, PostgreSQLParserJSON, PostgreSQLParserJSONB, PostgreSQLParserLINE, PostgreSQLParserLSEG, PostgreSQLParserMACADDR, PostgreSQLParserMACADDR8, PostgreSQLParserMONEY, PostgreSQLParserPG_LSN, PostgreSQLParserPOINT, PostgreSQLParserPOLYGON, PostgreSQLParserRELTIME, PostgreSQLParserSERIAL, PostgreSQLParserSERIAL2, PostgreSQLParserSERIAL4, PostgreSQLParserSERIAL8, PostgreSQLParserSMALLSERIAL, PostgreSQLParserTEXT, PostgreSQLParserTIMESTAMPTZ, PostgreSQLParserTIMETZ, PostgreSQLParserTSQUERY, PostgreSQLParserTSVECTOR, PostgreSQLParserTXID_SNAPSHOT, PostgreSQLParserUUID, PostgreSQLParserVARBIT, PostgreSQLParserXML, PostgreSQLParserDOUBLEQ_STRING_LITERAL, PostgreSQLParserIDENTIFIER, PostgreSQLParserIDENTIFIER_UNICODE:
		{
			p.SetState(5518)

			var _x = p.identifier(0)

			localctx.(*Exclude_elementContext).column_name_ = _x
		}

	case PostgreSQLParserOPEN_PAREN:
		{
			p.SetState(5519)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(5520)
			p.expr(0)
		}
		{
			p.SetState(5521)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(5526)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 676, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5525)

			var _x = p.identifier(0)

			localctx.(*Exclude_elementContext).opclass = _x
		}

	}
	p.SetState(5529)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserASC || _la == PostgreSQLParserDESC {
		{
			p.SetState(5528)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserASC || _la == PostgreSQLParserDESC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(5533)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserNULLS {
		{
			p.SetState(5531)
			p.Match(PostgreSQLParserNULLS)
		}
		{
			p.SetState(5532)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserFIRST || _la == PostgreSQLParserLAST) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// ITable_constraintContext is an interface to support dynamic dispatch.
type ITable_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConstraint_name returns the constraint_name rule contexts.
	GetConstraint_name() IName_Context

	// GetColumns returns the columns rule contexts.
	GetColumns() IIdentifier_listContext

	// GetOperators returns the operators rule contexts.
	GetOperators() IIdentifier_listContext

	// GetReftable returns the reftable rule contexts.
	GetReftable() IIdentifierContext

	// GetAction returns the action rule contexts.
	GetAction() IIdentifierContext

	// SetConstraint_name sets the constraint_name rule contexts.
	SetConstraint_name(IName_Context)

	// SetColumns sets the columns rule contexts.
	SetColumns(IIdentifier_listContext)

	// SetOperators sets the operators rule contexts.
	SetOperators(IIdentifier_listContext)

	// SetReftable sets the reftable rule contexts.
	SetReftable(IIdentifierContext)

	// SetAction sets the action rule contexts.
	SetAction(IIdentifierContext)

	// IsTable_constraintContext differentiates from other interfaces.
	IsTable_constraintContext()
}

type Table_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	constraint_name IName_Context
	columns         IIdentifier_listContext
	operators       IIdentifier_listContext
	reftable        IIdentifierContext
	action          IIdentifierContext
}

func NewEmptyTable_constraintContext() *Table_constraintContext {
	var p = new(Table_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_table_constraint
	return p
}

func (*Table_constraintContext) IsTable_constraintContext() {}

func NewTable_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_constraintContext {
	var p = new(Table_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_table_constraint

	return p
}

func (s *Table_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_constraintContext) GetConstraint_name() IName_Context { return s.constraint_name }

func (s *Table_constraintContext) GetColumns() IIdentifier_listContext { return s.columns }

func (s *Table_constraintContext) GetOperators() IIdentifier_listContext { return s.operators }

func (s *Table_constraintContext) GetReftable() IIdentifierContext { return s.reftable }

func (s *Table_constraintContext) GetAction() IIdentifierContext { return s.action }

func (s *Table_constraintContext) SetConstraint_name(v IName_Context) { s.constraint_name = v }

func (s *Table_constraintContext) SetColumns(v IIdentifier_listContext) { s.columns = v }

func (s *Table_constraintContext) SetOperators(v IIdentifier_listContext) { s.operators = v }

func (s *Table_constraintContext) SetReftable(v IIdentifierContext) { s.reftable = v }

func (s *Table_constraintContext) SetAction(v IIdentifierContext) { s.action = v }

func (s *Table_constraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONSTRAINT, 0)
}

func (s *Table_constraintContext) DEFERABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEFERABLE, 0)
}

func (s *Table_constraintContext) INITIALLY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINITIALLY, 0)
}

func (s *Table_constraintContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Table_constraintContext) CHECK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHECK, 0)
}

func (s *Table_constraintContext) AllOPEN_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserOPEN_PAREN)
}

func (s *Table_constraintContext) OPEN_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN_PAREN, i)
}

func (s *Table_constraintContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Table_constraintContext) AllCLOSE_PAREN() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCLOSE_PAREN)
}

func (s *Table_constraintContext) CLOSE_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE_PAREN, i)
}

func (s *Table_constraintContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNIQUE, 0)
}

func (s *Table_constraintContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPRIMARY, 0)
}

func (s *Table_constraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserKEY, 0)
}

func (s *Table_constraintContext) Index_parameters() IIndex_parametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_parametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_parametersContext)
}

func (s *Table_constraintContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOREIGN, 0)
}

func (s *Table_constraintContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREFERENCES, 0)
}

func (s *Table_constraintContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Table_constraintContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Table_constraintContext) DEFERRED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEFERRED, 0)
}

func (s *Table_constraintContext) IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIMMEDIATE, 0)
}

func (s *Table_constraintContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Table_constraintContext) EXCLUDE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXCLUDE, 0)
}

func (s *Table_constraintContext) Exclude_element() IExclude_elementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExclude_elementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExclude_elementContext)
}

func (s *Table_constraintContext) WITH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITH, 0)
}

func (s *Table_constraintContext) NOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOT, 0)
}

func (s *Table_constraintContext) NO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNO, 0)
}

func (s *Table_constraintContext) INHERIT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINHERIT, 0)
}

func (s *Table_constraintContext) WHERE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWHERE, 0)
}

func (s *Table_constraintContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *Table_constraintContext) MATCH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMATCH, 0)
}

func (s *Table_constraintContext) FULL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFULL, 0)
}

func (s *Table_constraintContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPARTIAL, 0)
}

func (s *Table_constraintContext) MATCH_SIMPLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMATCH_SIMPLE, 0)
}

func (s *Table_constraintContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserON)
}

func (s *Table_constraintContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserON, i)
}

func (s *Table_constraintContext) DELETE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDELETE, 0)
}

func (s *Table_constraintContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUPDATE, 0)
}

func (s *Table_constraintContext) USING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSING, 0)
}

func (s *Table_constraintContext) Index_method() IIndex_methodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_methodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_methodContext)
}

func (s *Table_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterTable_constraint(s)
	}
}

func (s *Table_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitTable_constraint(s)
	}
}

func (p *PostgreSQLParser) Table_constraint() (localctx ITable_constraintContext) {
	localctx = NewTable_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 506, PostgreSQLParserRULE_table_constraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5537)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserCONSTRAINT {
		{
			p.SetState(5535)
			p.Match(PostgreSQLParserCONSTRAINT)
		}
		{
			p.SetState(5536)

			var _x = p.Name_()

			localctx.(*Table_constraintContext).constraint_name = _x
		}

	}
	p.SetState(5604)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PostgreSQLParserCHECK:
		{
			p.SetState(5539)
			p.Match(PostgreSQLParserCHECK)
		}
		{
			p.SetState(5540)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(5541)
			p.expr(0)
		}
		{
			p.SetState(5542)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}
		p.SetState(5545)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserNO {
			{
				p.SetState(5543)
				p.Match(PostgreSQLParserNO)
			}
			{
				p.SetState(5544)
				p.Match(PostgreSQLParserINHERIT)
			}

		}

	case PostgreSQLParserUNIQUE:
		{
			p.SetState(5547)
			p.Match(PostgreSQLParserUNIQUE)
		}
		{
			p.SetState(5548)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(5549)

			var _x = p.Identifier_list()

			localctx.(*Table_constraintContext).columns = _x
		}
		{
			p.SetState(5550)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}

	case PostgreSQLParserPRIMARY:
		{
			p.SetState(5552)
			p.Match(PostgreSQLParserPRIMARY)
		}
		{
			p.SetState(5553)
			p.Match(PostgreSQLParserKEY)
		}
		{
			p.SetState(5554)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(5555)

			var _x = p.Identifier_list()

			localctx.(*Table_constraintContext).columns = _x
		}
		{
			p.SetState(5556)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}
		{
			p.SetState(5557)
			p.Index_parameters()
		}

	case PostgreSQLParserEOF, PostgreSQLParserDEFERABLE, PostgreSQLParserEXCLUDE, PostgreSQLParserINITIALLY, PostgreSQLParserNOT, PostgreSQLParserCOMMA, PostgreSQLParserCLOSE_PAREN, PostgreSQLParserSEMI:
		p.SetState(5575)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserEXCLUDE {
			{
				p.SetState(5559)
				p.Match(PostgreSQLParserEXCLUDE)
			}
			p.SetState(5562)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == PostgreSQLParserUSING {
				{
					p.SetState(5560)
					p.Match(PostgreSQLParserUSING)
				}
				{
					p.SetState(5561)
					p.Index_method()
				}

			}
			{
				p.SetState(5564)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(5565)
				p.Exclude_element()
			}
			{
				p.SetState(5566)
				p.Match(PostgreSQLParserWITH)
			}
			{
				p.SetState(5567)

				var _x = p.Identifier_list()

				localctx.(*Table_constraintContext).operators = _x
			}
			{
				p.SetState(5568)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}
			{
				p.SetState(5569)
				p.Index_parameters()
			}

			{
				p.SetState(5570)
				p.Match(PostgreSQLParserWHERE)
			}
			{
				p.SetState(5571)
				p.Match(PostgreSQLParserOPEN_PAREN)
			}
			{
				p.SetState(5572)
				p.predicate(0)
			}
			{
				p.SetState(5573)
				p.Match(PostgreSQLParserCLOSE_PAREN)
			}

		}

	case PostgreSQLParserFOREIGN:
		{
			p.SetState(5577)
			p.Match(PostgreSQLParserFOREIGN)
		}
		{
			p.SetState(5578)
			p.Match(PostgreSQLParserKEY)
		}
		{
			p.SetState(5579)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(5580)

			var _x = p.Identifier_list()

			localctx.(*Table_constraintContext).columns = _x
		}
		{
			p.SetState(5581)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}
		{
			p.SetState(5582)
			p.Match(PostgreSQLParserREFERENCES)
		}
		{
			p.SetState(5583)

			var _x = p.identifier(0)

			localctx.(*Table_constraintContext).reftable = _x
		}
		{
			p.SetState(5584)
			p.Match(PostgreSQLParserOPEN_PAREN)
		}
		{
			p.SetState(5585)
			p.identifier(0)
		}
		{
			p.SetState(5586)
			p.Match(PostgreSQLParserCLOSE_PAREN)
		}
		p.SetState(5592)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 683, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5587)
				p.Match(PostgreSQLParserMATCH)
			}
			{
				p.SetState(5588)
				p.Match(PostgreSQLParserFULL)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 683, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(5589)
				p.Match(PostgreSQLParserMATCH)
			}
			{
				p.SetState(5590)
				p.Match(PostgreSQLParserPARTIAL)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 683, p.GetParserRuleContext()) == 3 {
			{
				p.SetState(5591)
				p.Match(PostgreSQLParserMATCH_SIMPLE)
			}

		}
		p.SetState(5597)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 684, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5594)
				p.Match(PostgreSQLParserON)
			}
			{
				p.SetState(5595)
				p.Match(PostgreSQLParserDELETE)
			}
			{
				p.SetState(5596)

				var _x = p.identifier(0)

				localctx.(*Table_constraintContext).action = _x
			}

		}
		p.SetState(5602)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserON {
			{
				p.SetState(5599)
				p.Match(PostgreSQLParserON)
			}
			{
				p.SetState(5600)
				p.Match(PostgreSQLParserUPDATE)
			}
			{
				p.SetState(5601)

				var _x = p.identifier(0)

				localctx.(*Table_constraintContext).action = _x
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(5610)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 688, p.GetParserRuleContext()) == 1 {
		p.SetState(5607)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == PostgreSQLParserNOT {
			{
				p.SetState(5606)
				p.Match(PostgreSQLParserNOT)
			}

		}
		{
			p.SetState(5609)
			p.Match(PostgreSQLParserDEFERABLE)
		}

	}
	p.SetState(5614)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == PostgreSQLParserINITIALLY {
		{
			p.SetState(5612)
			p.Match(PostgreSQLParserINITIALLY)
		}
		{
			p.SetState(5613)
			_la = p.GetTokenStream().LA(1)

			if !(_la == PostgreSQLParserDEFERRED || _la == PostgreSQLParserIMMEDIATE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IRole_nameContext is an interface to support dynamic dispatch.
type IRole_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IName_Context

	// SetName sets the name rule contexts.
	SetName(IName_Context)

	// IsRole_nameContext differentiates from other interfaces.
	IsRole_nameContext()
}

type Role_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IName_Context
}

func NewEmptyRole_nameContext() *Role_nameContext {
	var p = new(Role_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_role_name
	return p
}

func (*Role_nameContext) IsRole_nameContext() {}

func NewRole_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Role_nameContext {
	var p = new(Role_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_role_name

	return p
}

func (s *Role_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Role_nameContext) GetName() IName_Context { return s.name }

func (s *Role_nameContext) SetName(v IName_Context) { s.name = v }

func (s *Role_nameContext) Name_() IName_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IName_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IName_Context)
}

func (s *Role_nameContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT_USER, 0)
}

func (s *Role_nameContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSESSION_USER, 0)
}

func (s *Role_nameContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPUBLIC, 0)
}

func (s *Role_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Role_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Role_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterRole_name(s)
	}
}

func (s *Role_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitRole_name(s)
	}
}

func (p *PostgreSQLParser) Role_name() (localctx IRole_nameContext) {
	localctx = NewRole_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 508, PostgreSQLParserRULE_role_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5620)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 690, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5616)

			var _x = p.Name_()

			localctx.(*Role_nameContext).name = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5617)
			p.Match(PostgreSQLParserCURRENT_USER)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5618)
			p.Match(PostgreSQLParserSESSION_USER)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5619)
			p.Match(PostgreSQLParserPUBLIC)
		}

	}

	return localctx
}

// IRole_name_listContext is an interface to support dynamic dispatch.
type IRole_name_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRole_name_listContext differentiates from other interfaces.
	IsRole_name_listContext()
}

type Role_name_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRole_name_listContext() *Role_name_listContext {
	var p = new(Role_name_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_role_name_list
	return p
}

func (*Role_name_listContext) IsRole_name_listContext() {}

func NewRole_name_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Role_name_listContext {
	var p = new(Role_name_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_role_name_list

	return p
}

func (s *Role_name_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Role_name_listContext) AllRole_name() []IRole_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRole_nameContext)(nil)).Elem())
	var tst = make([]IRole_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRole_nameContext)
		}
	}

	return tst
}

func (s *Role_name_listContext) Role_name(i int) IRole_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRole_nameContext)
}

func (s *Role_name_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(PostgreSQLParserCOMMA)
}

func (s *Role_name_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMA, i)
}

func (s *Role_name_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Role_name_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Role_name_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterRole_name_list(s)
	}
}

func (s *Role_name_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitRole_name_list(s)
	}
}

func (p *PostgreSQLParser) Role_name_list() (localctx IRole_name_listContext) {
	localctx = NewRole_name_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 510, PostgreSQLParserRULE_role_name_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5622)
		p.Role_name()
	}
	p.SetState(5627)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == PostgreSQLParserCOMMA {
		{
			p.SetState(5623)
			p.Match(PostgreSQLParserCOMMA)
		}
		{
			p.SetState(5624)
			p.Role_name()
		}

		p.SetState(5629)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IParam_valueContext is an interface to support dynamic dispatch.
type IParam_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParam_valueContext differentiates from other interfaces.
	IsParam_valueContext()
}

type Param_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParam_valueContext() *Param_valueContext {
	var p = new(Param_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_param_value
	return p
}

func (*Param_valueContext) IsParam_valueContext() {}

func NewParam_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Param_valueContext {
	var p = new(Param_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_param_value

	return p
}

func (s *Param_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Param_valueContext) ON() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserON, 0)
}

func (s *Param_valueContext) OFF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOFF, 0)
}

func (s *Param_valueContext) TRUE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRUE, 0)
}

func (s *Param_valueContext) FALSE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFALSE, 0)
}

func (s *Param_valueContext) YES() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserYES, 0)
}

func (s *Param_valueContext) NO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNO, 0)
}

func (s *Param_valueContext) NONE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNONE, 0)
}

func (s *Param_valueContext) SINGLEQ_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSINGLEQ_STRING_LITERAL, 0)
}

func (s *Param_valueContext) NUMERIC_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNUMERIC_LITERAL, 0)
}

func (s *Param_valueContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER_LITERAL, 0)
}

func (s *Param_valueContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Param_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Param_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Param_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterParam_value(s)
	}
}

func (s *Param_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitParam_value(s)
	}
}

func (p *PostgreSQLParser) Param_value() (localctx IParam_valueContext) {
	localctx = NewParam_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 512, PostgreSQLParserRULE_param_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5641)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 692, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5630)
			p.Match(PostgreSQLParserON)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5631)
			p.Match(PostgreSQLParserOFF)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5632)
			p.Match(PostgreSQLParserTRUE)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5633)
			p.Match(PostgreSQLParserFALSE)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5634)
			p.Match(PostgreSQLParserYES)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5635)
			p.Match(PostgreSQLParserNO)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5636)
			p.Match(PostgreSQLParserNONE)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5637)
			p.Match(PostgreSQLParserSINGLEQ_STRING_LITERAL)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5638)
			p.Match(PostgreSQLParserNUMERIC_LITERAL)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5639)
			p.Match(PostgreSQLParserINTEGER_LITERAL)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5640)
			p.identifier(0)
		}

	}

	return localctx
}

// INon_reserved_keywordContext is an interface to support dynamic dispatch.
type INon_reserved_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNon_reserved_keywordContext differentiates from other interfaces.
	IsNon_reserved_keywordContext()
}

type Non_reserved_keywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNon_reserved_keywordContext() *Non_reserved_keywordContext {
	var p = new(Non_reserved_keywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_non_reserved_keyword
	return p
}

func (*Non_reserved_keywordContext) IsNon_reserved_keywordContext() {}

func NewNon_reserved_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Non_reserved_keywordContext {
	var p = new(Non_reserved_keywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_non_reserved_keyword

	return p
}

func (s *Non_reserved_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Non_reserved_keywordContext) A_() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserA_, 0)
}

func (s *Non_reserved_keywordContext) ABORT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserABORT, 0)
}

func (s *Non_reserved_keywordContext) ABS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserABS, 0)
}

func (s *Non_reserved_keywordContext) ABSOLUTE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserABSOLUTE, 0)
}

func (s *Non_reserved_keywordContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserACCESS, 0)
}

func (s *Non_reserved_keywordContext) ACTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserACTION, 0)
}

func (s *Non_reserved_keywordContext) ADA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserADA, 0)
}

func (s *Non_reserved_keywordContext) ADD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserADD, 0)
}

func (s *Non_reserved_keywordContext) ADMIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserADMIN, 0)
}

func (s *Non_reserved_keywordContext) AFTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAFTER, 0)
}

func (s *Non_reserved_keywordContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAGGREGATE, 0)
}

func (s *Non_reserved_keywordContext) ALLOCATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALLOCATE, 0)
}

func (s *Non_reserved_keywordContext) ALSO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALSO, 0)
}

func (s *Non_reserved_keywordContext) ALTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALTER, 0)
}

func (s *Non_reserved_keywordContext) ALWAYS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserALWAYS, 0)
}

func (s *Non_reserved_keywordContext) ANY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserANY, 0)
}

func (s *Non_reserved_keywordContext) ARE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserARE, 0)
}

func (s *Non_reserved_keywordContext) ASENSITIVE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserASENSITIVE, 0)
}

func (s *Non_reserved_keywordContext) ASSERTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserASSERTION, 0)
}

func (s *Non_reserved_keywordContext) ASSIGNMENT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserASSIGNMENT, 0)
}

func (s *Non_reserved_keywordContext) AT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAT, 0)
}

func (s *Non_reserved_keywordContext) ATOMIC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserATOMIC, 0)
}

func (s *Non_reserved_keywordContext) ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserATTRIBUTE, 0)
}

func (s *Non_reserved_keywordContext) ATTRIBUTES() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserATTRIBUTES, 0)
}

func (s *Non_reserved_keywordContext) AVG() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserAVG, 0)
}

func (s *Non_reserved_keywordContext) BACKWARD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBACKWARD, 0)
}

func (s *Non_reserved_keywordContext) BEFORE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBEFORE, 0)
}

func (s *Non_reserved_keywordContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBEGIN, 0)
}

func (s *Non_reserved_keywordContext) BERNOULLI() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBERNOULLI, 0)
}

func (s *Non_reserved_keywordContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBETWEEN, 0)
}

func (s *Non_reserved_keywordContext) BIGINT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBIGINT, 0)
}

func (s *Non_reserved_keywordContext) BIT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBIT, 0)
}

func (s *Non_reserved_keywordContext) BIT_LENGTH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBIT_LENGTH, 0)
}

func (s *Non_reserved_keywordContext) BLOB() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBLOB, 0)
}

func (s *Non_reserved_keywordContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBOOLEAN, 0)
}

func (s *Non_reserved_keywordContext) BREADTH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBREADTH, 0)
}

func (s *Non_reserved_keywordContext) BY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserBY, 0)
}

func (s *Non_reserved_keywordContext) C_() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserC_, 0)
}

func (s *Non_reserved_keywordContext) CACHE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCACHE, 0)
}

func (s *Non_reserved_keywordContext) CALL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCALL, 0)
}

func (s *Non_reserved_keywordContext) CALLED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCALLED, 0)
}

func (s *Non_reserved_keywordContext) CARDINALITY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCARDINALITY, 0)
}

func (s *Non_reserved_keywordContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADE, 0)
}

func (s *Non_reserved_keywordContext) CASCADED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCASCADED, 0)
}

func (s *Non_reserved_keywordContext) CATALOG() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCATALOG, 0)
}

func (s *Non_reserved_keywordContext) CATALOG_NAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCATALOG_NAME, 0)
}

func (s *Non_reserved_keywordContext) CEIL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCEIL, 0)
}

func (s *Non_reserved_keywordContext) CEILING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCEILING, 0)
}

func (s *Non_reserved_keywordContext) CHAIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHAIN, 0)
}

func (s *Non_reserved_keywordContext) CHAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHAR, 0)
}

func (s *Non_reserved_keywordContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHARACTER, 0)
}

func (s *Non_reserved_keywordContext) CHARACTERISTICS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHARACTERISTICS, 0)
}

func (s *Non_reserved_keywordContext) CHARACTERS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHARACTERS, 0)
}

func (s *Non_reserved_keywordContext) CHARACTER_LENGTH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHARACTER_LENGTH, 0)
}

func (s *Non_reserved_keywordContext) CHARACTER_SET_CATALOG() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHARACTER_SET_CATALOG, 0)
}

func (s *Non_reserved_keywordContext) CHARACTER_SET_NAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHARACTER_SET_NAME, 0)
}

func (s *Non_reserved_keywordContext) CHARACTER_SET_SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHARACTER_SET_SCHEMA, 0)
}

func (s *Non_reserved_keywordContext) CHAR_LENGTH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHAR_LENGTH, 0)
}

func (s *Non_reserved_keywordContext) CHECKPOINT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCHECKPOINT, 0)
}

func (s *Non_reserved_keywordContext) CLASS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLASS, 0)
}

func (s *Non_reserved_keywordContext) CLASS_ORIGIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLASS_ORIGIN, 0)
}

func (s *Non_reserved_keywordContext) CLOB() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOB, 0)
}

func (s *Non_reserved_keywordContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLOSE, 0)
}

func (s *Non_reserved_keywordContext) CLUSTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCLUSTER, 0)
}

func (s *Non_reserved_keywordContext) COALESCE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOALESCE, 0)
}

func (s *Non_reserved_keywordContext) COBOL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOBOL, 0)
}

func (s *Non_reserved_keywordContext) COLLATION_CATALOG() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOLLATION_CATALOG, 0)
}

func (s *Non_reserved_keywordContext) COLLATION_NAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOLLATION_NAME, 0)
}

func (s *Non_reserved_keywordContext) COLLATION_SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOLLATION_SCHEMA, 0)
}

func (s *Non_reserved_keywordContext) COLLECT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOLLECT, 0)
}

func (s *Non_reserved_keywordContext) COLUMN_NAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOLUMN_NAME, 0)
}

func (s *Non_reserved_keywordContext) COMMAND_FUNCTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMAND_FUNCTION, 0)
}

func (s *Non_reserved_keywordContext) COMMAND_FUNCTION_CODE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMAND_FUNCTION_CODE, 0)
}

func (s *Non_reserved_keywordContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMENT, 0)
}

func (s *Non_reserved_keywordContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMIT, 0)
}

func (s *Non_reserved_keywordContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOMMITTED, 0)
}

func (s *Non_reserved_keywordContext) CONDITION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONDITION, 0)
}

func (s *Non_reserved_keywordContext) CONDITION_NUMBER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONDITION_NUMBER, 0)
}

func (s *Non_reserved_keywordContext) CONNECT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONNECT, 0)
}

func (s *Non_reserved_keywordContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONNECTION, 0)
}

func (s *Non_reserved_keywordContext) CONNECTION_NAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONNECTION_NAME, 0)
}

func (s *Non_reserved_keywordContext) CONSTRAINTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONSTRAINTS, 0)
}

func (s *Non_reserved_keywordContext) CONSTRAINT_CATALOG() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONSTRAINT_CATALOG, 0)
}

func (s *Non_reserved_keywordContext) CONSTRAINT_NAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONSTRAINT_NAME, 0)
}

func (s *Non_reserved_keywordContext) CONSTRAINT_SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONSTRAINT_SCHEMA, 0)
}

func (s *Non_reserved_keywordContext) CONSTRUCTOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONSTRUCTOR, 0)
}

func (s *Non_reserved_keywordContext) CONTAINS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONTAINS, 0)
}

func (s *Non_reserved_keywordContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONTINUE, 0)
}

func (s *Non_reserved_keywordContext) CONVERSION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONVERSION, 0)
}

func (s *Non_reserved_keywordContext) CONVERT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCONVERT, 0)
}

func (s *Non_reserved_keywordContext) COPY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOPY, 0)
}

func (s *Non_reserved_keywordContext) CORR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCORR, 0)
}

func (s *Non_reserved_keywordContext) CORRESPONDING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCORRESPONDING, 0)
}

func (s *Non_reserved_keywordContext) COUNT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOUNT, 0)
}

func (s *Non_reserved_keywordContext) COVAR_POP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOVAR_POP, 0)
}

func (s *Non_reserved_keywordContext) COVAR_SAMP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCOVAR_SAMP, 0)
}

func (s *Non_reserved_keywordContext) CSV() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCSV, 0)
}

func (s *Non_reserved_keywordContext) CUBE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCUBE, 0)
}

func (s *Non_reserved_keywordContext) CUME_DIST() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCUME_DIST, 0)
}

func (s *Non_reserved_keywordContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT, 0)
}

func (s *Non_reserved_keywordContext) CURRENT_DEFAULT_TRANSFORM_GROUP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP, 0)
}

func (s *Non_reserved_keywordContext) CURRENT_PATH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT_PATH, 0)
}

func (s *Non_reserved_keywordContext) CURRENT_TRANSFORM_GROUP_FOR_TYPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE, 0)
}

func (s *Non_reserved_keywordContext) CURSOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURSOR, 0)
}

func (s *Non_reserved_keywordContext) CURSOR_NAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCURSOR_NAME, 0)
}

func (s *Non_reserved_keywordContext) CYCLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserCYCLE, 0)
}

func (s *Non_reserved_keywordContext) DATA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDATA, 0)
}

func (s *Non_reserved_keywordContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDATABASE, 0)
}

func (s *Non_reserved_keywordContext) DATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDATE, 0)
}

func (s *Non_reserved_keywordContext) DATETIME_INTERVAL_CODE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDATETIME_INTERVAL_CODE, 0)
}

func (s *Non_reserved_keywordContext) DATETIME_INTERVAL_PRECISION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDATETIME_INTERVAL_PRECISION, 0)
}

func (s *Non_reserved_keywordContext) DAY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDAY, 0)
}

func (s *Non_reserved_keywordContext) DEALLOCATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEALLOCATE, 0)
}

func (s *Non_reserved_keywordContext) DEC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEC, 0)
}

func (s *Non_reserved_keywordContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDECIMAL, 0)
}

func (s *Non_reserved_keywordContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDECLARE, 0)
}

func (s *Non_reserved_keywordContext) DEFAULTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEFAULTS, 0)
}

func (s *Non_reserved_keywordContext) DEFERRED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEFERRED, 0)
}

func (s *Non_reserved_keywordContext) DEFINED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEFINED, 0)
}

func (s *Non_reserved_keywordContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEFINER, 0)
}

func (s *Non_reserved_keywordContext) DEGREE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEGREE, 0)
}

func (s *Non_reserved_keywordContext) DELETE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDELETE, 0)
}

func (s *Non_reserved_keywordContext) DELIMITER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDELIMITER, 0)
}

func (s *Non_reserved_keywordContext) DELIMITERS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDELIMITERS, 0)
}

func (s *Non_reserved_keywordContext) DENSE_RANK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDENSE_RANK, 0)
}

func (s *Non_reserved_keywordContext) DEPTH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEPTH, 0)
}

func (s *Non_reserved_keywordContext) DEREF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDEREF, 0)
}

func (s *Non_reserved_keywordContext) DERIVED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDERIVED, 0)
}

func (s *Non_reserved_keywordContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDESCRIBE, 0)
}

func (s *Non_reserved_keywordContext) DESCRIPTOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDESCRIPTOR, 0)
}

func (s *Non_reserved_keywordContext) DETERMINISTIC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDETERMINISTIC, 0)
}

func (s *Non_reserved_keywordContext) DIAGNOSTICS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDIAGNOSTICS, 0)
}

func (s *Non_reserved_keywordContext) DICTIONARY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDICTIONARY, 0)
}

func (s *Non_reserved_keywordContext) DISCONNECT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDISCONNECT, 0)
}

func (s *Non_reserved_keywordContext) DISPATCH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDISPATCH, 0)
}

func (s *Non_reserved_keywordContext) DOMAIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDOMAIN, 0)
}

func (s *Non_reserved_keywordContext) DOUBLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDOUBLE, 0)
}

func (s *Non_reserved_keywordContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDYNAMIC, 0)
}

func (s *Non_reserved_keywordContext) DYNAMIC_FUNCTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDYNAMIC_FUNCTION, 0)
}

func (s *Non_reserved_keywordContext) DYNAMIC_FUNCTION_CODE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDYNAMIC_FUNCTION_CODE, 0)
}

func (s *Non_reserved_keywordContext) EACH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEACH, 0)
}

func (s *Non_reserved_keywordContext) ELEMENT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserELEMENT, 0)
}

func (s *Non_reserved_keywordContext) ENCODING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserENCODING, 0)
}

func (s *Non_reserved_keywordContext) ENCRYPTED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserENCRYPTED, 0)
}

func (s *Non_reserved_keywordContext) END() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEND, 0)
}

func (s *Non_reserved_keywordContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEQUALS, 0)
}

func (s *Non_reserved_keywordContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserESCAPE, 0)
}

func (s *Non_reserved_keywordContext) EVERY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEVERY, 0)
}

func (s *Non_reserved_keywordContext) EXCEPTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXCEPTION, 0)
}

func (s *Non_reserved_keywordContext) EXCLUDE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXCLUDE, 0)
}

func (s *Non_reserved_keywordContext) EXCLUDING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXCLUDING, 0)
}

func (s *Non_reserved_keywordContext) EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXCLUSIVE, 0)
}

func (s *Non_reserved_keywordContext) EXEC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXEC, 0)
}

func (s *Non_reserved_keywordContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXECUTE, 0)
}

func (s *Non_reserved_keywordContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXISTS, 0)
}

func (s *Non_reserved_keywordContext) EXP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXP, 0)
}

func (s *Non_reserved_keywordContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXPLAIN, 0)
}

func (s *Non_reserved_keywordContext) EXTENSION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXTENSION, 0)
}

func (s *Non_reserved_keywordContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXTERNAL, 0)
}

func (s *Non_reserved_keywordContext) EXTRACT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserEXTRACT, 0)
}

func (s *Non_reserved_keywordContext) FILTER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFILTER, 0)
}

func (s *Non_reserved_keywordContext) FINAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFINAL, 0)
}

func (s *Non_reserved_keywordContext) FIRST() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFIRST, 0)
}

func (s *Non_reserved_keywordContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFLOAT, 0)
}

func (s *Non_reserved_keywordContext) FLOOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFLOOR, 0)
}

func (s *Non_reserved_keywordContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOLLOWING, 0)
}

func (s *Non_reserved_keywordContext) FORCE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFORCE, 0)
}

func (s *Non_reserved_keywordContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFORMAT, 0)
}

func (s *Non_reserved_keywordContext) FORTRAN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFORTRAN, 0)
}

func (s *Non_reserved_keywordContext) FORWARD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFORWARD, 0)
}

func (s *Non_reserved_keywordContext) FOUND() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFOUND, 0)
}

func (s *Non_reserved_keywordContext) FREE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFREE, 0)
}

func (s *Non_reserved_keywordContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFUNCTION, 0)
}

func (s *Non_reserved_keywordContext) FUSION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserFUSION, 0)
}

func (s *Non_reserved_keywordContext) G_() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserG_, 0)
}

func (s *Non_reserved_keywordContext) GENERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGENERAL, 0)
}

func (s *Non_reserved_keywordContext) GENERATED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGENERATED, 0)
}

func (s *Non_reserved_keywordContext) GET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGET, 0)
}

func (s *Non_reserved_keywordContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGLOBAL, 0)
}

func (s *Non_reserved_keywordContext) GO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGO, 0)
}

func (s *Non_reserved_keywordContext) GOTO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGOTO, 0)
}

func (s *Non_reserved_keywordContext) GREATEST() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGREATEST, 0)
}

func (s *Non_reserved_keywordContext) GRANTED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGRANTED, 0)
}

func (s *Non_reserved_keywordContext) GROUPING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserGROUPING, 0)
}

func (s *Non_reserved_keywordContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHANDLER, 0)
}

func (s *Non_reserved_keywordContext) HIERARCHY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHIERARCHY, 0)
}

func (s *Non_reserved_keywordContext) HOLD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHOLD, 0)
}

func (s *Non_reserved_keywordContext) HOST() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHOST, 0)
}

func (s *Non_reserved_keywordContext) HOUR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserHOUR, 0)
}

func (s *Non_reserved_keywordContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIDENTITY, 0)
}

func (s *Non_reserved_keywordContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIGNORE, 0)
}

func (s *Non_reserved_keywordContext) IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIMMEDIATE, 0)
}

func (s *Non_reserved_keywordContext) IMMUTABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIMMUTABLE, 0)
}

func (s *Non_reserved_keywordContext) IMPLEMENTATION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIMPLEMENTATION, 0)
}

func (s *Non_reserved_keywordContext) IMPLICIT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIMPLICIT, 0)
}

func (s *Non_reserved_keywordContext) INCLUDING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINCLUDING, 0)
}

func (s *Non_reserved_keywordContext) INCREMENT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINCREMENT, 0)
}

func (s *Non_reserved_keywordContext) INDEX() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINDEX, 0)
}

func (s *Non_reserved_keywordContext) INDICATOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINDICATOR, 0)
}

func (s *Non_reserved_keywordContext) INHERITS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINHERITS, 0)
}

func (s *Non_reserved_keywordContext) INOUT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINOUT, 0)
}

func (s *Non_reserved_keywordContext) INPUT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINPUT, 0)
}

func (s *Non_reserved_keywordContext) INSENSITIVE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINSENSITIVE, 0)
}

func (s *Non_reserved_keywordContext) INSERT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINSERT, 0)
}

func (s *Non_reserved_keywordContext) INSTANCE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINSTANCE, 0)
}

func (s *Non_reserved_keywordContext) INSTANTIABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINSTANTIABLE, 0)
}

func (s *Non_reserved_keywordContext) INSTEAD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINSTEAD, 0)
}

func (s *Non_reserved_keywordContext) INT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINT, 0)
}

func (s *Non_reserved_keywordContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTEGER, 0)
}

func (s *Non_reserved_keywordContext) INTERSECTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTERSECTION, 0)
}

func (s *Non_reserved_keywordContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINTERVAL, 0)
}

func (s *Non_reserved_keywordContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserINVOKER, 0)
}

func (s *Non_reserved_keywordContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserISOLATION, 0)
}

func (s *Non_reserved_keywordContext) K_() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserK_, 0)
}

func (s *Non_reserved_keywordContext) KEY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserKEY, 0)
}

func (s *Non_reserved_keywordContext) KEY_MEMBER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserKEY_MEMBER, 0)
}

func (s *Non_reserved_keywordContext) KEY_TYPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserKEY_TYPE, 0)
}

func (s *Non_reserved_keywordContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLANGUAGE, 0)
}

func (s *Non_reserved_keywordContext) LARGE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLARGE, 0)
}

func (s *Non_reserved_keywordContext) LAST() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLAST, 0)
}

func (s *Non_reserved_keywordContext) LEAST() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLEAST, 0)
}

func (s *Non_reserved_keywordContext) LEFT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLEFT, 0)
}

func (s *Non_reserved_keywordContext) LENGTH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLENGTH, 0)
}

func (s *Non_reserved_keywordContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLEVEL, 0)
}

func (s *Non_reserved_keywordContext) LISTEN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLISTEN, 0)
}

func (s *Non_reserved_keywordContext) LN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLN, 0)
}

func (s *Non_reserved_keywordContext) LOAD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLOAD, 0)
}

func (s *Non_reserved_keywordContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLOCAL, 0)
}

func (s *Non_reserved_keywordContext) LOCATION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLOCATION, 0)
}

func (s *Non_reserved_keywordContext) LOCATOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLOCATOR, 0)
}

func (s *Non_reserved_keywordContext) LOCK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLOCK, 0)
}

func (s *Non_reserved_keywordContext) LOCKED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLOCKED, 0)
}

func (s *Non_reserved_keywordContext) LOWER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserLOWER, 0)
}

func (s *Non_reserved_keywordContext) M_() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserM_, 0)
}

func (s *Non_reserved_keywordContext) MAP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMAP, 0)
}

func (s *Non_reserved_keywordContext) MATCH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMATCH, 0)
}

func (s *Non_reserved_keywordContext) MATCHED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMATCHED, 0)
}

func (s *Non_reserved_keywordContext) MAX() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMAX, 0)
}

func (s *Non_reserved_keywordContext) MAXVALUE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMAXVALUE, 0)
}

func (s *Non_reserved_keywordContext) MEMBER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMEMBER, 0)
}

func (s *Non_reserved_keywordContext) MERGE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMERGE, 0)
}

func (s *Non_reserved_keywordContext) MESSAGE_LENGTH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMESSAGE_LENGTH, 0)
}

func (s *Non_reserved_keywordContext) MESSAGE_OCTET_LENGTH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMESSAGE_OCTET_LENGTH, 0)
}

func (s *Non_reserved_keywordContext) MESSAGE_TEXT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMESSAGE_TEXT, 0)
}

func (s *Non_reserved_keywordContext) METHOD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMETHOD, 0)
}

func (s *Non_reserved_keywordContext) MIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMIN, 0)
}

func (s *Non_reserved_keywordContext) MINUTE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMINUTE, 0)
}

func (s *Non_reserved_keywordContext) MINVALUE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMINVALUE, 0)
}

func (s *Non_reserved_keywordContext) MOD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMOD, 0)
}

func (s *Non_reserved_keywordContext) MODE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMODE, 0)
}

func (s *Non_reserved_keywordContext) MODIFIES() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMODIFIES, 0)
}

func (s *Non_reserved_keywordContext) MODULE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMODULE, 0)
}

func (s *Non_reserved_keywordContext) MONTH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMONTH, 0)
}

func (s *Non_reserved_keywordContext) MORE_() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMORE_, 0)
}

func (s *Non_reserved_keywordContext) MOVE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMOVE, 0)
}

func (s *Non_reserved_keywordContext) MULTISET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMULTISET, 0)
}

func (s *Non_reserved_keywordContext) MUMPS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserMUMPS, 0)
}

func (s *Non_reserved_keywordContext) NAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNAME, 0)
}

func (s *Non_reserved_keywordContext) NAMES() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNAMES, 0)
}

func (s *Non_reserved_keywordContext) NATIONAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNATIONAL, 0)
}

func (s *Non_reserved_keywordContext) NCHAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNCHAR, 0)
}

func (s *Non_reserved_keywordContext) NCLOB() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNCLOB, 0)
}

func (s *Non_reserved_keywordContext) NESTING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNESTING, 0)
}

func (s *Non_reserved_keywordContext) NEW() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNEW, 0)
}

func (s *Non_reserved_keywordContext) NEXT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNEXT, 0)
}

func (s *Non_reserved_keywordContext) NO() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNO, 0)
}

func (s *Non_reserved_keywordContext) NONE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNONE, 0)
}

func (s *Non_reserved_keywordContext) NORMALIZE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNORMALIZE, 0)
}

func (s *Non_reserved_keywordContext) NORMALIZED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNORMALIZED, 0)
}

func (s *Non_reserved_keywordContext) NOTHING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOTHING, 0)
}

func (s *Non_reserved_keywordContext) NOTIFY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOTIFY, 0)
}

func (s *Non_reserved_keywordContext) NOWAIT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNOWAIT, 0)
}

func (s *Non_reserved_keywordContext) NULLABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNULLABLE, 0)
}

func (s *Non_reserved_keywordContext) NULLIF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNULLIF, 0)
}

func (s *Non_reserved_keywordContext) NULLS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNULLS, 0)
}

func (s *Non_reserved_keywordContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNUMBER, 0)
}

func (s *Non_reserved_keywordContext) NUMERIC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserNUMERIC, 0)
}

func (s *Non_reserved_keywordContext) OBJECT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOBJECT, 0)
}

func (s *Non_reserved_keywordContext) OCTETS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOCTETS, 0)
}

func (s *Non_reserved_keywordContext) OCTET_LENGTH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOCTET_LENGTH, 0)
}

func (s *Non_reserved_keywordContext) OF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOF, 0)
}

func (s *Non_reserved_keywordContext) OFF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOFF, 0)
}

func (s *Non_reserved_keywordContext) OIDS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOIDS, 0)
}

func (s *Non_reserved_keywordContext) OLD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOLD, 0)
}

func (s *Non_reserved_keywordContext) OPEN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPEN, 0)
}

func (s *Non_reserved_keywordContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPERATOR, 0)
}

func (s *Non_reserved_keywordContext) OPTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPTION, 0)
}

func (s *Non_reserved_keywordContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOPTIONS, 0)
}

func (s *Non_reserved_keywordContext) ORDERING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserORDERING, 0)
}

func (s *Non_reserved_keywordContext) ORDINALITY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserORDINALITY, 0)
}

func (s *Non_reserved_keywordContext) OTHERS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOTHERS, 0)
}

func (s *Non_reserved_keywordContext) OUT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOUT, 0)
}

func (s *Non_reserved_keywordContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOUTPUT, 0)
}

func (s *Non_reserved_keywordContext) OVER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOVER, 0)
}

func (s *Non_reserved_keywordContext) OVERLAY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOVERLAY, 0)
}

func (s *Non_reserved_keywordContext) OVERRIDING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOVERRIDING, 0)
}

func (s *Non_reserved_keywordContext) OWNER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserOWNER, 0)
}

func (s *Non_reserved_keywordContext) PAD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPAD, 0)
}

func (s *Non_reserved_keywordContext) PARAMETER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPARAMETER, 0)
}

func (s *Non_reserved_keywordContext) PARAMETER_MODE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPARAMETER_MODE, 0)
}

func (s *Non_reserved_keywordContext) PARAMETER_NAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPARAMETER_NAME, 0)
}

func (s *Non_reserved_keywordContext) PARAMETER_ORDINAL_POSITION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPARAMETER_ORDINAL_POSITION, 0)
}

func (s *Non_reserved_keywordContext) PARAMETER_SPECIFIC_CATALOG() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPARAMETER_SPECIFIC_CATALOG, 0)
}

func (s *Non_reserved_keywordContext) PARAMETER_SPECIFIC_NAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPARAMETER_SPECIFIC_NAME, 0)
}

func (s *Non_reserved_keywordContext) PARAMETER_SPECIFIC_SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA, 0)
}

func (s *Non_reserved_keywordContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPARTIAL, 0)
}

func (s *Non_reserved_keywordContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPARTITION, 0)
}

func (s *Non_reserved_keywordContext) PASCAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPASCAL, 0)
}

func (s *Non_reserved_keywordContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPASSWORD, 0)
}

func (s *Non_reserved_keywordContext) PATH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPATH, 0)
}

func (s *Non_reserved_keywordContext) PERCENTILE_CONT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPERCENTILE_CONT, 0)
}

func (s *Non_reserved_keywordContext) PERCENTILE_DISC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPERCENTILE_DISC, 0)
}

func (s *Non_reserved_keywordContext) PERCENT_RANK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPERCENT_RANK, 0)
}

func (s *Non_reserved_keywordContext) PLAIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPLAIN, 0)
}

func (s *Non_reserved_keywordContext) PLI() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPLI, 0)
}

func (s *Non_reserved_keywordContext) POSITION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPOSITION, 0)
}

func (s *Non_reserved_keywordContext) POWER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPOWER, 0)
}

func (s *Non_reserved_keywordContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPRECEDING, 0)
}

func (s *Non_reserved_keywordContext) PRECISION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPRECISION, 0)
}

func (s *Non_reserved_keywordContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPREPARE, 0)
}

func (s *Non_reserved_keywordContext) PRESERVE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPRESERVE, 0)
}

func (s *Non_reserved_keywordContext) PRIOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPRIOR, 0)
}

func (s *Non_reserved_keywordContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPRIVILEGES, 0)
}

func (s *Non_reserved_keywordContext) PROCEDURAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPROCEDURAL, 0)
}

func (s *Non_reserved_keywordContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPROCEDURE, 0)
}

func (s *Non_reserved_keywordContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserPUBLIC, 0)
}

func (s *Non_reserved_keywordContext) QUOTE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserQUOTE, 0)
}

func (s *Non_reserved_keywordContext) RANGE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRANGE, 0)
}

func (s *Non_reserved_keywordContext) RANK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRANK, 0)
}

func (s *Non_reserved_keywordContext) READ() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREAD, 0)
}

func (s *Non_reserved_keywordContext) READS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREADS, 0)
}

func (s *Non_reserved_keywordContext) REAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREAL, 0)
}

func (s *Non_reserved_keywordContext) RECHECK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRECHECK, 0)
}

func (s *Non_reserved_keywordContext) RECURSIVE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRECURSIVE, 0)
}

func (s *Non_reserved_keywordContext) REF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREF, 0)
}

func (s *Non_reserved_keywordContext) REFERENCING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREFERENCING, 0)
}

func (s *Non_reserved_keywordContext) REFRESH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREFRESH, 0)
}

func (s *Non_reserved_keywordContext) REGR_AVGX() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREGR_AVGX, 0)
}

func (s *Non_reserved_keywordContext) REGR_AVGY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREGR_AVGY, 0)
}

func (s *Non_reserved_keywordContext) REGR_COUNT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREGR_COUNT, 0)
}

func (s *Non_reserved_keywordContext) REGR_INTERCEPT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREGR_INTERCEPT, 0)
}

func (s *Non_reserved_keywordContext) REGR_SLOPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREGR_SLOPE, 0)
}

func (s *Non_reserved_keywordContext) REGR_SXX() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREGR_SXX, 0)
}

func (s *Non_reserved_keywordContext) REGR_SXY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREGR_SXY, 0)
}

func (s *Non_reserved_keywordContext) REGR_SYY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREGR_SYY, 0)
}

func (s *Non_reserved_keywordContext) REINDEX() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREINDEX, 0)
}

func (s *Non_reserved_keywordContext) RELATIVE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRELATIVE, 0)
}

func (s *Non_reserved_keywordContext) RELEASE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRELEASE, 0)
}

func (s *Non_reserved_keywordContext) RENAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRENAME, 0)
}

func (s *Non_reserved_keywordContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREPEATABLE, 0)
}

func (s *Non_reserved_keywordContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREPLACE, 0)
}

func (s *Non_reserved_keywordContext) RESET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESET, 0)
}

func (s *Non_reserved_keywordContext) RESTART() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTART, 0)
}

func (s *Non_reserved_keywordContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESTRICT, 0)
}

func (s *Non_reserved_keywordContext) RESULT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRESULT, 0)
}

func (s *Non_reserved_keywordContext) RETURN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRETURN, 0)
}

func (s *Non_reserved_keywordContext) RETURNED_CARDINALITY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRETURNED_CARDINALITY, 0)
}

func (s *Non_reserved_keywordContext) RETURNED_LENGTH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRETURNED_LENGTH, 0)
}

func (s *Non_reserved_keywordContext) RETURNED_OCTET_LENGTH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRETURNED_OCTET_LENGTH, 0)
}

func (s *Non_reserved_keywordContext) RETURNED_SQLSTATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRETURNED_SQLSTATE, 0)
}

func (s *Non_reserved_keywordContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRETURNS, 0)
}

func (s *Non_reserved_keywordContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserREVOKE, 0)
}

func (s *Non_reserved_keywordContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRIGHT, 0)
}

func (s *Non_reserved_keywordContext) ROLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROLE, 0)
}

func (s *Non_reserved_keywordContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROLLBACK, 0)
}

func (s *Non_reserved_keywordContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROLLUP, 0)
}

func (s *Non_reserved_keywordContext) ROUTINE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROUTINE, 0)
}

func (s *Non_reserved_keywordContext) ROUTINE_CATALOG() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROUTINE_CATALOG, 0)
}

func (s *Non_reserved_keywordContext) ROUTINE_NAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROUTINE_NAME, 0)
}

func (s *Non_reserved_keywordContext) ROUTINE_SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROUTINE_SCHEMA, 0)
}

func (s *Non_reserved_keywordContext) ROW() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROW, 0)
}

func (s *Non_reserved_keywordContext) ROWS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROWS, 0)
}

func (s *Non_reserved_keywordContext) ROW_COUNT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROW_COUNT, 0)
}

func (s *Non_reserved_keywordContext) ROW_NUMBER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserROW_NUMBER, 0)
}

func (s *Non_reserved_keywordContext) RULE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserRULE, 0)
}

func (s *Non_reserved_keywordContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSAVEPOINT, 0)
}

func (s *Non_reserved_keywordContext) SCALE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCALE, 0)
}

func (s *Non_reserved_keywordContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCHEMA, 0)
}

func (s *Non_reserved_keywordContext) SCHEMA_NAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCHEMA_NAME, 0)
}

func (s *Non_reserved_keywordContext) SCOPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCOPE, 0)
}

func (s *Non_reserved_keywordContext) SCOPE_CATALOG() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCOPE_CATALOG, 0)
}

func (s *Non_reserved_keywordContext) SCOPE_NAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCOPE_NAME, 0)
}

func (s *Non_reserved_keywordContext) SCOPE_SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCOPE_SCHEMA, 0)
}

func (s *Non_reserved_keywordContext) SCROLL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSCROLL, 0)
}

func (s *Non_reserved_keywordContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSEARCH, 0)
}

func (s *Non_reserved_keywordContext) SECOND() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSECOND, 0)
}

func (s *Non_reserved_keywordContext) SECTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSECTION, 0)
}

func (s *Non_reserved_keywordContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSECURITY, 0)
}

func (s *Non_reserved_keywordContext) SELF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSELF, 0)
}

func (s *Non_reserved_keywordContext) SENSITIVE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSENSITIVE, 0)
}

func (s *Non_reserved_keywordContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSEQUENCE, 0)
}

func (s *Non_reserved_keywordContext) SEQUENCES() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSEQUENCES, 0)
}

func (s *Non_reserved_keywordContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSERIALIZABLE, 0)
}

func (s *Non_reserved_keywordContext) SERVER_NAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSERVER_NAME, 0)
}

func (s *Non_reserved_keywordContext) SESSION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSESSION, 0)
}

func (s *Non_reserved_keywordContext) SET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSET, 0)
}

func (s *Non_reserved_keywordContext) SETOF() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSETOF, 0)
}

func (s *Non_reserved_keywordContext) SETS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSETS, 0)
}

func (s *Non_reserved_keywordContext) SHARE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSHARE, 0)
}

func (s *Non_reserved_keywordContext) SHOW() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSHOW, 0)
}

func (s *Non_reserved_keywordContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSIMPLE, 0)
}

func (s *Non_reserved_keywordContext) SIZE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSIZE, 0)
}

func (s *Non_reserved_keywordContext) SMALLINT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSMALLINT, 0)
}

func (s *Non_reserved_keywordContext) SOME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSOME, 0)
}

func (s *Non_reserved_keywordContext) SOURCE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSOURCE, 0)
}

func (s *Non_reserved_keywordContext) SPACE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSPACE, 0)
}

func (s *Non_reserved_keywordContext) SPECIFIC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSPECIFIC, 0)
}

func (s *Non_reserved_keywordContext) SPECIFICTYPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSPECIFICTYPE, 0)
}

func (s *Non_reserved_keywordContext) SPECIFIC_NAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSPECIFIC_NAME, 0)
}

func (s *Non_reserved_keywordContext) SQL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSQL, 0)
}

func (s *Non_reserved_keywordContext) SQLCODE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSQLCODE, 0)
}

func (s *Non_reserved_keywordContext) SQLERROR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSQLERROR, 0)
}

func (s *Non_reserved_keywordContext) SQLEXCEPTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSQLEXCEPTION, 0)
}

func (s *Non_reserved_keywordContext) SQLSTATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSQLSTATE, 0)
}

func (s *Non_reserved_keywordContext) SQLWARNING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSQLWARNING, 0)
}

func (s *Non_reserved_keywordContext) SQRT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSQRT, 0)
}

func (s *Non_reserved_keywordContext) STABLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTABLE, 0)
}

func (s *Non_reserved_keywordContext) START() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTART, 0)
}

func (s *Non_reserved_keywordContext) STATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTATE, 0)
}

func (s *Non_reserved_keywordContext) STATEMENT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTATEMENT, 0)
}

func (s *Non_reserved_keywordContext) STATIC() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTATIC, 0)
}

func (s *Non_reserved_keywordContext) STATISTICS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTATISTICS, 0)
}

func (s *Non_reserved_keywordContext) STDDEV_POP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTDDEV_POP, 0)
}

func (s *Non_reserved_keywordContext) STDDEV_SAMP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTDDEV_SAMP, 0)
}

func (s *Non_reserved_keywordContext) STDIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTDIN, 0)
}

func (s *Non_reserved_keywordContext) STDOUT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTDOUT, 0)
}

func (s *Non_reserved_keywordContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTORAGE, 0)
}

func (s *Non_reserved_keywordContext) STRICT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTRICT, 0)
}

func (s *Non_reserved_keywordContext) STRUCTURE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTRUCTURE, 0)
}

func (s *Non_reserved_keywordContext) STYLE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSTYLE, 0)
}

func (s *Non_reserved_keywordContext) SUBCLASS_ORIGIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSUBCLASS_ORIGIN, 0)
}

func (s *Non_reserved_keywordContext) SUBMULTISET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSUBMULTISET, 0)
}

func (s *Non_reserved_keywordContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSUBSTRING, 0)
}

func (s *Non_reserved_keywordContext) SUM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSUM, 0)
}

func (s *Non_reserved_keywordContext) SYSID() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSYSID, 0)
}

func (s *Non_reserved_keywordContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSYSTEM, 0)
}

func (s *Non_reserved_keywordContext) SYSTEM_USER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserSYSTEM_USER, 0)
}

func (s *Non_reserved_keywordContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLESPACE, 0)
}

func (s *Non_reserved_keywordContext) TABLE_NAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTABLE_NAME, 0)
}

func (s *Non_reserved_keywordContext) TEMP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEMP, 0)
}

func (s *Non_reserved_keywordContext) TEMPLATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEMPLATE, 0)
}

func (s *Non_reserved_keywordContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEMPORARY, 0)
}

func (s *Non_reserved_keywordContext) TEXT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTEXT, 0)
}

func (s *Non_reserved_keywordContext) TIES() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIES, 0)
}

func (s *Non_reserved_keywordContext) TIME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIME, 0)
}

func (s *Non_reserved_keywordContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIMESTAMP, 0)
}

func (s *Non_reserved_keywordContext) TIMEZONE_HOUR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIMEZONE_HOUR, 0)
}

func (s *Non_reserved_keywordContext) TIMEZONE_MINUTE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTIMEZONE_MINUTE, 0)
}

func (s *Non_reserved_keywordContext) TOP_LEVEL_COUNT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTOP_LEVEL_COUNT, 0)
}

func (s *Non_reserved_keywordContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRANSACTION, 0)
}

func (s *Non_reserved_keywordContext) TRANSACTIONS_COMMITTED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRANSACTIONS_COMMITTED, 0)
}

func (s *Non_reserved_keywordContext) TRANSACTIONS_ROLLED_BACK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRANSACTIONS_ROLLED_BACK, 0)
}

func (s *Non_reserved_keywordContext) TRANSACTION_ACTIVE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRANSACTION_ACTIVE, 0)
}

func (s *Non_reserved_keywordContext) TRANSFORM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRANSFORM, 0)
}

func (s *Non_reserved_keywordContext) TRANSFORMS() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRANSFORMS, 0)
}

func (s *Non_reserved_keywordContext) TRANSLATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRANSLATE, 0)
}

func (s *Non_reserved_keywordContext) TRANSLATION() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRANSLATION, 0)
}

func (s *Non_reserved_keywordContext) TREAT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTREAT, 0)
}

func (s *Non_reserved_keywordContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRIGGER, 0)
}

func (s *Non_reserved_keywordContext) TRIGGER_CATALOG() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRIGGER_CATALOG, 0)
}

func (s *Non_reserved_keywordContext) TRIGGER_NAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRIGGER_NAME, 0)
}

func (s *Non_reserved_keywordContext) TRIGGER_SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRIGGER_SCHEMA, 0)
}

func (s *Non_reserved_keywordContext) TRIM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRIM, 0)
}

func (s *Non_reserved_keywordContext) TRUE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRUE, 0)
}

func (s *Non_reserved_keywordContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRUNCATE, 0)
}

func (s *Non_reserved_keywordContext) TRUSTED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTRUSTED, 0)
}

func (s *Non_reserved_keywordContext) TYPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserTYPE, 0)
}

func (s *Non_reserved_keywordContext) UESCAPE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUESCAPE, 0)
}

func (s *Non_reserved_keywordContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNBOUNDED, 0)
}

func (s *Non_reserved_keywordContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNCOMMITTED, 0)
}

func (s *Non_reserved_keywordContext) UNDER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNDER, 0)
}

func (s *Non_reserved_keywordContext) UNENCRYPTED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNENCRYPTED, 0)
}

func (s *Non_reserved_keywordContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNKNOWN, 0)
}

func (s *Non_reserved_keywordContext) UNLISTEN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNLISTEN, 0)
}

func (s *Non_reserved_keywordContext) UNNAMED() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNNAMED, 0)
}

func (s *Non_reserved_keywordContext) UNNEST() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNNEST, 0)
}

func (s *Non_reserved_keywordContext) UNTIL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUNTIL, 0)
}

func (s *Non_reserved_keywordContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUPDATE, 0)
}

func (s *Non_reserved_keywordContext) UPPER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUPPER, 0)
}

func (s *Non_reserved_keywordContext) USAGE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSAGE, 0)
}

func (s *Non_reserved_keywordContext) USER_DEFINED_TYPE_CATALOG() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSER_DEFINED_TYPE_CATALOG, 0)
}

func (s *Non_reserved_keywordContext) USER_DEFINED_TYPE_CODE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSER_DEFINED_TYPE_CODE, 0)
}

func (s *Non_reserved_keywordContext) USER_DEFINED_TYPE_NAME() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSER_DEFINED_TYPE_NAME, 0)
}

func (s *Non_reserved_keywordContext) USER_DEFINED_TYPE_SCHEMA() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA, 0)
}

func (s *Non_reserved_keywordContext) VACUUM() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVACUUM, 0)
}

func (s *Non_reserved_keywordContext) VALID() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVALID, 0)
}

func (s *Non_reserved_keywordContext) VALIDATOR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVALIDATOR, 0)
}

func (s *Non_reserved_keywordContext) VALUE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVALUE, 0)
}

func (s *Non_reserved_keywordContext) VALUES() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVALUES, 0)
}

func (s *Non_reserved_keywordContext) VARCHAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVARCHAR, 0)
}

func (s *Non_reserved_keywordContext) VARYING() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVARYING, 0)
}

func (s *Non_reserved_keywordContext) VAR_POP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVAR_POP, 0)
}

func (s *Non_reserved_keywordContext) VAR_SAMP() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVAR_SAMP, 0)
}

func (s *Non_reserved_keywordContext) VIEW() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVIEW, 0)
}

func (s *Non_reserved_keywordContext) VOLATILE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserVOLATILE, 0)
}

func (s *Non_reserved_keywordContext) WHENEVER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWHENEVER, 0)
}

func (s *Non_reserved_keywordContext) WHITESPACE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWHITESPACE, 0)
}

func (s *Non_reserved_keywordContext) WIDTH_BUCKET() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWIDTH_BUCKET, 0)
}

func (s *Non_reserved_keywordContext) WITHIN() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITHIN, 0)
}

func (s *Non_reserved_keywordContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWITHOUT, 0)
}

func (s *Non_reserved_keywordContext) WORK() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWORK, 0)
}

func (s *Non_reserved_keywordContext) WRITE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserWRITE, 0)
}

func (s *Non_reserved_keywordContext) YEAR() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserYEAR, 0)
}

func (s *Non_reserved_keywordContext) ZONE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserZONE, 0)
}

func (s *Non_reserved_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Non_reserved_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Non_reserved_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterNon_reserved_keyword(s)
	}
}

func (s *Non_reserved_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitNon_reserved_keyword(s)
	}
}

func (p *PostgreSQLParser) Non_reserved_keyword() (localctx INon_reserved_keywordContext) {
	localctx = NewNon_reserved_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 514, PostgreSQLParserRULE_non_reserved_keyword)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5643)
		_la = p.GetTokenStream().LA(1)

		if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<PostgreSQLParserWHITESPACE)|(1<<PostgreSQLParserA_)|(1<<PostgreSQLParserABORT)|(1<<PostgreSQLParserABS)|(1<<PostgreSQLParserABSOLUTE)|(1<<PostgreSQLParserACCESS)|(1<<PostgreSQLParserACTION)|(1<<PostgreSQLParserADA)|(1<<PostgreSQLParserADD)|(1<<PostgreSQLParserADMIN)|(1<<PostgreSQLParserAFTER)|(1<<PostgreSQLParserAGGREGATE)|(1<<PostgreSQLParserALLOCATE)|(1<<PostgreSQLParserALSO)|(1<<PostgreSQLParserALTER)|(1<<PostgreSQLParserALWAYS)|(1<<PostgreSQLParserANY)|(1<<PostgreSQLParserARE)|(1<<PostgreSQLParserASENSITIVE)|(1<<PostgreSQLParserASSERTION)|(1<<PostgreSQLParserASSIGNMENT))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(PostgreSQLParserAT-33))|(1<<(PostgreSQLParserATOMIC-33))|(1<<(PostgreSQLParserATTRIBUTE-33))|(1<<(PostgreSQLParserATTRIBUTES-33))|(1<<(PostgreSQLParserAVG-33))|(1<<(PostgreSQLParserBACKWARD-33))|(1<<(PostgreSQLParserBEFORE-33))|(1<<(PostgreSQLParserBEGIN-33))|(1<<(PostgreSQLParserBERNOULLI-33))|(1<<(PostgreSQLParserBETWEEN-33))|(1<<(PostgreSQLParserBIGINT-33))|(1<<(PostgreSQLParserBIT-33))|(1<<(PostgreSQLParserBIT_LENGTH-33))|(1<<(PostgreSQLParserBLOB-33))|(1<<(PostgreSQLParserBOOLEAN-33))|(1<<(PostgreSQLParserBREADTH-33))|(1<<(PostgreSQLParserBY-33))|(1<<(PostgreSQLParserC_-33))|(1<<(PostgreSQLParserCACHE-33))|(1<<(PostgreSQLParserCALL-33))|(1<<(PostgreSQLParserCALLED-33))|(1<<(PostgreSQLParserCARDINALITY-33))|(1<<(PostgreSQLParserCASCADE-33))|(1<<(PostgreSQLParserCASCADED-33))|(1<<(PostgreSQLParserCATALOG-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(PostgreSQLParserCATALOG_NAME-65))|(1<<(PostgreSQLParserCEIL-65))|(1<<(PostgreSQLParserCEILING-65))|(1<<(PostgreSQLParserCHAIN-65))|(1<<(PostgreSQLParserCHAR-65))|(1<<(PostgreSQLParserCHAR_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER-65))|(1<<(PostgreSQLParserCHARACTER_LENGTH-65))|(1<<(PostgreSQLParserCHARACTER_SET_CATALOG-65))|(1<<(PostgreSQLParserCHARACTER_SET_NAME-65))|(1<<(PostgreSQLParserCHARACTER_SET_SCHEMA-65))|(1<<(PostgreSQLParserCHARACTERISTICS-65))|(1<<(PostgreSQLParserCHARACTERS-65))|(1<<(PostgreSQLParserCHECKPOINT-65))|(1<<(PostgreSQLParserCLASS-65))|(1<<(PostgreSQLParserCLASS_ORIGIN-65))|(1<<(PostgreSQLParserCLOB-65))|(1<<(PostgreSQLParserCLOSE-65))|(1<<(PostgreSQLParserCLUSTER-65))|(1<<(PostgreSQLParserCOALESCE-65))|(1<<(PostgreSQLParserCOBOL-65))|(1<<(PostgreSQLParserCOLLATION_CATALOG-65))|(1<<(PostgreSQLParserCOLLATION_NAME-65))|(1<<(PostgreSQLParserCOLLATION_SCHEMA-65))|(1<<(PostgreSQLParserCOLLECT-65))|(1<<(PostgreSQLParserCOLUMN_NAME-65))|(1<<(PostgreSQLParserCOMMAND_FUNCTION-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(PostgreSQLParserCOMMAND_FUNCTION_CODE-97))|(1<<(PostgreSQLParserCOMMENT-97))|(1<<(PostgreSQLParserCOMMIT-97))|(1<<(PostgreSQLParserCOMMITTED-97))|(1<<(PostgreSQLParserCONDITION-97))|(1<<(PostgreSQLParserCONDITION_NUMBER-97))|(1<<(PostgreSQLParserCONNECT-97))|(1<<(PostgreSQLParserCONNECTION-97))|(1<<(PostgreSQLParserCONNECTION_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_CATALOG-97))|(1<<(PostgreSQLParserCONSTRAINT_NAME-97))|(1<<(PostgreSQLParserCONSTRAINT_SCHEMA-97))|(1<<(PostgreSQLParserCONSTRAINTS-97))|(1<<(PostgreSQLParserCONSTRUCTOR-97))|(1<<(PostgreSQLParserCONTAINS-97))|(1<<(PostgreSQLParserCONTINUE-97))|(1<<(PostgreSQLParserCONVERSION-97))|(1<<(PostgreSQLParserCONVERT-97))|(1<<(PostgreSQLParserCOPY-97))|(1<<(PostgreSQLParserCORR-97))|(1<<(PostgreSQLParserCORRESPONDING-97))|(1<<(PostgreSQLParserCOUNT-97))|(1<<(PostgreSQLParserCOVAR_POP-97))|(1<<(PostgreSQLParserCOVAR_SAMP-97)))) != 0) || (((_la-131)&-(0x1f+1)) == 0 && ((1<<uint((_la-131)))&((1<<(PostgreSQLParserCSV-131))|(1<<(PostgreSQLParserCUBE-131))|(1<<(PostgreSQLParserCUME_DIST-131))|(1<<(PostgreSQLParserCURRENT-131))|(1<<(PostgreSQLParserCURRENT_DEFAULT_TRANSFORM_GROUP-131))|(1<<(PostgreSQLParserCURRENT_PATH-131))|(1<<(PostgreSQLParserCURRENT_TRANSFORM_GROUP_FOR_TYPE-131))|(1<<(PostgreSQLParserCURSOR-131))|(1<<(PostgreSQLParserCURSOR_NAME-131))|(1<<(PostgreSQLParserCYCLE-131))|(1<<(PostgreSQLParserDATA-131))|(1<<(PostgreSQLParserDATABASE-131))|(1<<(PostgreSQLParserDATE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_CODE-131))|(1<<(PostgreSQLParserDATETIME_INTERVAL_PRECISION-131))|(1<<(PostgreSQLParserDAY-131))|(1<<(PostgreSQLParserDEALLOCATE-131))|(1<<(PostgreSQLParserDEC-131))|(1<<(PostgreSQLParserDECIMAL-131))|(1<<(PostgreSQLParserDECLARE-131))|(1<<(PostgreSQLParserDEFAULTS-131))|(1<<(PostgreSQLParserDEFERRED-131))|(1<<(PostgreSQLParserDEFINED-131))|(1<<(PostgreSQLParserDEFINER-131)))) != 0) || (((_la-163)&-(0x1f+1)) == 0 && ((1<<uint((_la-163)))&((1<<(PostgreSQLParserDEGREE-163))|(1<<(PostgreSQLParserDELETE-163))|(1<<(PostgreSQLParserDELIMITER-163))|(1<<(PostgreSQLParserDELIMITERS-163))|(1<<(PostgreSQLParserDENSE_RANK-163))|(1<<(PostgreSQLParserDEPTH-163))|(1<<(PostgreSQLParserDEREF-163))|(1<<(PostgreSQLParserDERIVED-163))|(1<<(PostgreSQLParserDESCRIBE-163))|(1<<(PostgreSQLParserDESCRIPTOR-163))|(1<<(PostgreSQLParserDETERMINISTIC-163))|(1<<(PostgreSQLParserDIAGNOSTICS-163))|(1<<(PostgreSQLParserDICTIONARY-163))|(1<<(PostgreSQLParserDISCONNECT-163))|(1<<(PostgreSQLParserDISPATCH-163))|(1<<(PostgreSQLParserDOMAIN-163))|(1<<(PostgreSQLParserDOUBLE-163))|(1<<(PostgreSQLParserDYNAMIC-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION-163))|(1<<(PostgreSQLParserDYNAMIC_FUNCTION_CODE-163))|(1<<(PostgreSQLParserEACH-163))|(1<<(PostgreSQLParserELEMENT-163)))) != 0) || (((_la-197)&-(0x1f+1)) == 0 && ((1<<uint((_la-197)))&((1<<(PostgreSQLParserENCODING-197))|(1<<(PostgreSQLParserENCRYPTED-197))|(1<<(PostgreSQLParserEND-197))|(1<<(PostgreSQLParserEQUALS-197))|(1<<(PostgreSQLParserESCAPE-197))|(1<<(PostgreSQLParserEVERY-197))|(1<<(PostgreSQLParserEXCEPTION-197))|(1<<(PostgreSQLParserEXCLUDE-197))|(1<<(PostgreSQLParserEXCLUDING-197))|(1<<(PostgreSQLParserEXCLUSIVE-197))|(1<<(PostgreSQLParserEXEC-197))|(1<<(PostgreSQLParserEXECUTE-197))|(1<<(PostgreSQLParserEXISTS-197))|(1<<(PostgreSQLParserEXP-197))|(1<<(PostgreSQLParserEXPLAIN-197))|(1<<(PostgreSQLParserEXTENSION-197))|(1<<(PostgreSQLParserEXTERNAL-197))|(1<<(PostgreSQLParserEXTRACT-197))|(1<<(PostgreSQLParserFILTER-197))|(1<<(PostgreSQLParserFINAL-197))|(1<<(PostgreSQLParserFIRST-197))|(1<<(PostgreSQLParserFLOAT-197))|(1<<(PostgreSQLParserFLOOR-197))|(1<<(PostgreSQLParserFOLLOWING-197)))) != 0) || (((_la-229)&-(0x1f+1)) == 0 && ((1<<uint((_la-229)))&((1<<(PostgreSQLParserFORCE-229))|(1<<(PostgreSQLParserFORMAT-229))|(1<<(PostgreSQLParserFORTRAN-229))|(1<<(PostgreSQLParserFORWARD-229))|(1<<(PostgreSQLParserFOUND-229))|(1<<(PostgreSQLParserFREE-229))|(1<<(PostgreSQLParserFUNCTION-229))|(1<<(PostgreSQLParserFUSION-229))|(1<<(PostgreSQLParserG_-229))|(1<<(PostgreSQLParserGENERAL-229))|(1<<(PostgreSQLParserGENERATED-229))|(1<<(PostgreSQLParserGET-229))|(1<<(PostgreSQLParserGLOBAL-229))|(1<<(PostgreSQLParserGO-229))|(1<<(PostgreSQLParserGOTO-229))|(1<<(PostgreSQLParserGRANTED-229))|(1<<(PostgreSQLParserGREATEST-229))|(1<<(PostgreSQLParserGROUPING-229))|(1<<(PostgreSQLParserHANDLER-229))|(1<<(PostgreSQLParserHIERARCHY-229))|(1<<(PostgreSQLParserHOLD-229))|(1<<(PostgreSQLParserHOST-229))|(1<<(PostgreSQLParserHOUR-229))|(1<<(PostgreSQLParserIDENTITY-229))|(1<<(PostgreSQLParserIGNORE-229)))) != 0) || (((_la-262)&-(0x1f+1)) == 0 && ((1<<uint((_la-262)))&((1<<(PostgreSQLParserIMMEDIATE-262))|(1<<(PostgreSQLParserIMMUTABLE-262))|(1<<(PostgreSQLParserIMPLEMENTATION-262))|(1<<(PostgreSQLParserIMPLICIT-262))|(1<<(PostgreSQLParserINCLUDING-262))|(1<<(PostgreSQLParserINCREMENT-262))|(1<<(PostgreSQLParserINDEX-262))|(1<<(PostgreSQLParserINDICATOR-262))|(1<<(PostgreSQLParserINHERITS-262))|(1<<(PostgreSQLParserINOUT-262))|(1<<(PostgreSQLParserINPUT-262))|(1<<(PostgreSQLParserINSENSITIVE-262))|(1<<(PostgreSQLParserINSERT-262))|(1<<(PostgreSQLParserINSTANCE-262))|(1<<(PostgreSQLParserINSTANTIABLE-262))|(1<<(PostgreSQLParserINSTEAD-262))|(1<<(PostgreSQLParserINT-262))|(1<<(PostgreSQLParserINTEGER-262))|(1<<(PostgreSQLParserINTERSECTION-262))|(1<<(PostgreSQLParserINTERVAL-262))|(1<<(PostgreSQLParserINVOKER-262))|(1<<(PostgreSQLParserISOLATION-262)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(PostgreSQLParserK_-294))|(1<<(PostgreSQLParserKEY-294))|(1<<(PostgreSQLParserKEY_MEMBER-294))|(1<<(PostgreSQLParserKEY_TYPE-294))|(1<<(PostgreSQLParserLANGUAGE-294))|(1<<(PostgreSQLParserLARGE-294))|(1<<(PostgreSQLParserLAST-294))|(1<<(PostgreSQLParserLEAST-294))|(1<<(PostgreSQLParserLEFT-294))|(1<<(PostgreSQLParserLENGTH-294))|(1<<(PostgreSQLParserLEVEL-294))|(1<<(PostgreSQLParserLISTEN-294))|(1<<(PostgreSQLParserLN-294))|(1<<(PostgreSQLParserLOAD-294))|(1<<(PostgreSQLParserLOCAL-294))|(1<<(PostgreSQLParserLOCATION-294))|(1<<(PostgreSQLParserLOCATOR-294))|(1<<(PostgreSQLParserLOCK-294))|(1<<(PostgreSQLParserLOCKED-294))|(1<<(PostgreSQLParserLOWER-294))|(1<<(PostgreSQLParserM_-294))|(1<<(PostgreSQLParserMAP-294)))) != 0) || (((_la-327)&-(0x1f+1)) == 0 && ((1<<uint((_la-327)))&((1<<(PostgreSQLParserMATCH-327))|(1<<(PostgreSQLParserMATCHED-327))|(1<<(PostgreSQLParserMAX-327))|(1<<(PostgreSQLParserMAXVALUE-327))|(1<<(PostgreSQLParserMEMBER-327))|(1<<(PostgreSQLParserMERGE-327))|(1<<(PostgreSQLParserMESSAGE_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_OCTET_LENGTH-327))|(1<<(PostgreSQLParserMESSAGE_TEXT-327))|(1<<(PostgreSQLParserMETHOD-327))|(1<<(PostgreSQLParserMIN-327))|(1<<(PostgreSQLParserMINUTE-327))|(1<<(PostgreSQLParserMINVALUE-327))|(1<<(PostgreSQLParserMOD-327))|(1<<(PostgreSQLParserMODE-327))|(1<<(PostgreSQLParserMODIFIES-327))|(1<<(PostgreSQLParserMODULE-327))|(1<<(PostgreSQLParserMONTH-327))|(1<<(PostgreSQLParserMORE_-327))|(1<<(PostgreSQLParserMOVE-327))|(1<<(PostgreSQLParserMULTISET-327))|(1<<(PostgreSQLParserMUMPS-327))|(1<<(PostgreSQLParserNAME-327))|(1<<(PostgreSQLParserNAMES-327))|(1<<(PostgreSQLParserNATIONAL-327))|(1<<(PostgreSQLParserNCHAR-327))|(1<<(PostgreSQLParserNCLOB-327))|(1<<(PostgreSQLParserNESTING-327))|(1<<(PostgreSQLParserNEW-327)))) != 0) || (((_la-359)&-(0x1f+1)) == 0 && ((1<<uint((_la-359)))&((1<<(PostgreSQLParserNEXT-359))|(1<<(PostgreSQLParserNO-359))|(1<<(PostgreSQLParserNONE-359))|(1<<(PostgreSQLParserNORMALIZE-359))|(1<<(PostgreSQLParserNORMALIZED-359))|(1<<(PostgreSQLParserNOTHING-359))|(1<<(PostgreSQLParserNOTIFY-359))|(1<<(PostgreSQLParserNOWAIT-359))|(1<<(PostgreSQLParserNULLABLE-359))|(1<<(PostgreSQLParserNULLIF-359))|(1<<(PostgreSQLParserNULLS-359))|(1<<(PostgreSQLParserNUMBER-359))|(1<<(PostgreSQLParserNUMERIC-359))|(1<<(PostgreSQLParserOBJECT-359))|(1<<(PostgreSQLParserOCTET_LENGTH-359))|(1<<(PostgreSQLParserOCTETS-359))|(1<<(PostgreSQLParserOF-359))|(1<<(PostgreSQLParserOFF-359))|(1<<(PostgreSQLParserOIDS-359))|(1<<(PostgreSQLParserOLD-359))|(1<<(PostgreSQLParserOPEN-359))|(1<<(PostgreSQLParserOPERATOR-359))|(1<<(PostgreSQLParserOPTION-359)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(PostgreSQLParserOPTIONS-391))|(1<<(PostgreSQLParserORDERING-391))|(1<<(PostgreSQLParserORDINALITY-391))|(1<<(PostgreSQLParserOTHERS-391))|(1<<(PostgreSQLParserOUT-391))|(1<<(PostgreSQLParserOUTPUT-391))|(1<<(PostgreSQLParserOVER-391))|(1<<(PostgreSQLParserOVERLAY-391))|(1<<(PostgreSQLParserOVERRIDING-391))|(1<<(PostgreSQLParserOWNER-391))|(1<<(PostgreSQLParserPAD-391))|(1<<(PostgreSQLParserPARAMETER-391))|(1<<(PostgreSQLParserPARAMETER_MODE-391))|(1<<(PostgreSQLParserPARAMETER_NAME-391))|(1<<(PostgreSQLParserPARAMETER_ORDINAL_POSITION-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_CATALOG-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_NAME-391))|(1<<(PostgreSQLParserPARAMETER_SPECIFIC_SCHEMA-391))|(1<<(PostgreSQLParserPARTIAL-391))|(1<<(PostgreSQLParserPARTITION-391))|(1<<(PostgreSQLParserPASCAL-391))|(1<<(PostgreSQLParserPASSWORD-391))|(1<<(PostgreSQLParserPATH-391))|(1<<(PostgreSQLParserPERCENT_RANK-391))|(1<<(PostgreSQLParserPERCENTILE_CONT-391))|(1<<(PostgreSQLParserPERCENTILE_DISC-391)))) != 0) || (((_la-424)&-(0x1f+1)) == 0 && ((1<<uint((_la-424)))&((1<<(PostgreSQLParserPLAIN-424))|(1<<(PostgreSQLParserPLI-424))|(1<<(PostgreSQLParserPOSITION-424))|(1<<(PostgreSQLParserPOWER-424))|(1<<(PostgreSQLParserPRECEDING-424))|(1<<(PostgreSQLParserPRECISION-424))|(1<<(PostgreSQLParserPREPARE-424))|(1<<(PostgreSQLParserPRESERVE-424))|(1<<(PostgreSQLParserPRIOR-424))|(1<<(PostgreSQLParserPRIVILEGES-424))|(1<<(PostgreSQLParserPROCEDURAL-424))|(1<<(PostgreSQLParserPROCEDURE-424))|(1<<(PostgreSQLParserPUBLIC-424))|(1<<(PostgreSQLParserQUOTE-424))|(1<<(PostgreSQLParserRANGE-424))|(1<<(PostgreSQLParserRANK-424))|(1<<(PostgreSQLParserREAD-424))|(1<<(PostgreSQLParserREADS-424))|(1<<(PostgreSQLParserREAL-424))|(1<<(PostgreSQLParserRECHECK-424))|(1<<(PostgreSQLParserRECURSIVE-424))|(1<<(PostgreSQLParserREF-424))|(1<<(PostgreSQLParserREFERENCING-424)))) != 0) || (((_la-456)&-(0x1f+1)) == 0 && ((1<<uint((_la-456)))&((1<<(PostgreSQLParserREFRESH-456))|(1<<(PostgreSQLParserREGR_AVGX-456))|(1<<(PostgreSQLParserREGR_AVGY-456))|(1<<(PostgreSQLParserREGR_COUNT-456))|(1<<(PostgreSQLParserREGR_INTERCEPT-456))|(1<<(PostgreSQLParserREGR_SLOPE-456))|(1<<(PostgreSQLParserREGR_SXX-456))|(1<<(PostgreSQLParserREGR_SXY-456))|(1<<(PostgreSQLParserREGR_SYY-456))|(1<<(PostgreSQLParserREINDEX-456))|(1<<(PostgreSQLParserRELATIVE-456))|(1<<(PostgreSQLParserRELEASE-456))|(1<<(PostgreSQLParserRENAME-456))|(1<<(PostgreSQLParserREPEATABLE-456))|(1<<(PostgreSQLParserREPLACE-456))|(1<<(PostgreSQLParserRESET-456))|(1<<(PostgreSQLParserRESTART-456))|(1<<(PostgreSQLParserRESTRICT-456))|(1<<(PostgreSQLParserRESULT-456))|(1<<(PostgreSQLParserRETURN-456))|(1<<(PostgreSQLParserRETURNED_CARDINALITY-456))|(1<<(PostgreSQLParserRETURNED_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_OCTET_LENGTH-456))|(1<<(PostgreSQLParserRETURNED_SQLSTATE-456))|(1<<(PostgreSQLParserRETURNS-456))|(1<<(PostgreSQLParserREVOKE-456))|(1<<(PostgreSQLParserRIGHT-456))|(1<<(PostgreSQLParserROLE-456))|(1<<(PostgreSQLParserROLLBACK-456)))) != 0) || (((_la-488)&-(0x1f+1)) == 0 && ((1<<uint((_la-488)))&((1<<(PostgreSQLParserROLLUP-488))|(1<<(PostgreSQLParserROUTINE-488))|(1<<(PostgreSQLParserROUTINE_CATALOG-488))|(1<<(PostgreSQLParserROUTINE_NAME-488))|(1<<(PostgreSQLParserROUTINE_SCHEMA-488))|(1<<(PostgreSQLParserROW-488))|(1<<(PostgreSQLParserROW_COUNT-488))|(1<<(PostgreSQLParserROW_NUMBER-488))|(1<<(PostgreSQLParserROWS-488))|(1<<(PostgreSQLParserRULE-488))|(1<<(PostgreSQLParserSAVEPOINT-488))|(1<<(PostgreSQLParserSCALE-488))|(1<<(PostgreSQLParserSCHEMA-488))|(1<<(PostgreSQLParserSCHEMA_NAME-488))|(1<<(PostgreSQLParserSCOPE-488))|(1<<(PostgreSQLParserSCOPE_CATALOG-488))|(1<<(PostgreSQLParserSCOPE_NAME-488))|(1<<(PostgreSQLParserSCOPE_SCHEMA-488))|(1<<(PostgreSQLParserSCROLL-488))|(1<<(PostgreSQLParserSEARCH-488))|(1<<(PostgreSQLParserSECOND-488))|(1<<(PostgreSQLParserSECTION-488))|(1<<(PostgreSQLParserSECURITY-488))|(1<<(PostgreSQLParserSELF-488))|(1<<(PostgreSQLParserSENSITIVE-488))|(1<<(PostgreSQLParserSEQUENCE-488))|(1<<(PostgreSQLParserSEQUENCES-488))|(1<<(PostgreSQLParserSERIALIZABLE-488))|(1<<(PostgreSQLParserSERVER_NAME-488))|(1<<(PostgreSQLParserSESSION-488)))) != 0) || (((_la-520)&-(0x1f+1)) == 0 && ((1<<uint((_la-520)))&((1<<(PostgreSQLParserSET-520))|(1<<(PostgreSQLParserSETOF-520))|(1<<(PostgreSQLParserSETS-520))|(1<<(PostgreSQLParserSHARE-520))|(1<<(PostgreSQLParserSHOW-520))|(1<<(PostgreSQLParserSIMPLE-520))|(1<<(PostgreSQLParserSIZE-520))|(1<<(PostgreSQLParserSMALLINT-520))|(1<<(PostgreSQLParserSOME-520))|(1<<(PostgreSQLParserSOURCE-520))|(1<<(PostgreSQLParserSPACE-520))|(1<<(PostgreSQLParserSPECIFIC-520))|(1<<(PostgreSQLParserSPECIFIC_NAME-520))|(1<<(PostgreSQLParserSPECIFICTYPE-520))|(1<<(PostgreSQLParserSQL-520))|(1<<(PostgreSQLParserSQLCODE-520))|(1<<(PostgreSQLParserSQLERROR-520))|(1<<(PostgreSQLParserSQLEXCEPTION-520))|(1<<(PostgreSQLParserSQLSTATE-520))|(1<<(PostgreSQLParserSQLWARNING-520))|(1<<(PostgreSQLParserSQRT-520))|(1<<(PostgreSQLParserSTABLE-520))|(1<<(PostgreSQLParserSTART-520))|(1<<(PostgreSQLParserSTATE-520))|(1<<(PostgreSQLParserSTATEMENT-520))|(1<<(PostgreSQLParserSTATIC-520))|(1<<(PostgreSQLParserSTATISTICS-520))|(1<<(PostgreSQLParserSTDDEV_POP-520))|(1<<(PostgreSQLParserSTDDEV_SAMP-520)))) != 0) || (((_la-552)&-(0x1f+1)) == 0 && ((1<<uint((_la-552)))&((1<<(PostgreSQLParserSTDIN-552))|(1<<(PostgreSQLParserSTDOUT-552))|(1<<(PostgreSQLParserSTORAGE-552))|(1<<(PostgreSQLParserSTRICT-552))|(1<<(PostgreSQLParserSTRUCTURE-552))|(1<<(PostgreSQLParserSTYLE-552))|(1<<(PostgreSQLParserSUBCLASS_ORIGIN-552))|(1<<(PostgreSQLParserSUBMULTISET-552))|(1<<(PostgreSQLParserSUBSTRING-552))|(1<<(PostgreSQLParserSUM-552))|(1<<(PostgreSQLParserSYSID-552))|(1<<(PostgreSQLParserSYSTEM-552))|(1<<(PostgreSQLParserSYSTEM_USER-552))|(1<<(PostgreSQLParserTABLE_NAME-552))|(1<<(PostgreSQLParserTABLESPACE-552))|(1<<(PostgreSQLParserTEMP-552))|(1<<(PostgreSQLParserTEMPLATE-552))|(1<<(PostgreSQLParserTEMPORARY-552))|(1<<(PostgreSQLParserTIES-552))|(1<<(PostgreSQLParserTIME-552))|(1<<(PostgreSQLParserTIMESTAMP-552))|(1<<(PostgreSQLParserTIMEZONE_HOUR-552))|(1<<(PostgreSQLParserTIMEZONE_MINUTE-552)))) != 0) || (((_la-586)&-(0x1f+1)) == 0 && ((1<<uint((_la-586)))&((1<<(PostgreSQLParserTOP_LEVEL_COUNT-586))|(1<<(PostgreSQLParserTRANSACTION-586))|(1<<(PostgreSQLParserTRANSACTION_ACTIVE-586))|(1<<(PostgreSQLParserTRANSACTIONS_COMMITTED-586))|(1<<(PostgreSQLParserTRANSACTIONS_ROLLED_BACK-586))|(1<<(PostgreSQLParserTRANSFORM-586))|(1<<(PostgreSQLParserTRANSFORMS-586))|(1<<(PostgreSQLParserTRANSLATE-586))|(1<<(PostgreSQLParserTRANSLATION-586))|(1<<(PostgreSQLParserTREAT-586))|(1<<(PostgreSQLParserTRIGGER-586))|(1<<(PostgreSQLParserTRIGGER_CATALOG-586))|(1<<(PostgreSQLParserTRIGGER_NAME-586))|(1<<(PostgreSQLParserTRIGGER_SCHEMA-586))|(1<<(PostgreSQLParserTRIM-586))|(1<<(PostgreSQLParserTRUE-586))|(1<<(PostgreSQLParserTRUNCATE-586))|(1<<(PostgreSQLParserTRUSTED-586))|(1<<(PostgreSQLParserTYPE-586))|(1<<(PostgreSQLParserUESCAPE-586))|(1<<(PostgreSQLParserUNBOUNDED-586))|(1<<(PostgreSQLParserUNCOMMITTED-586))|(1<<(PostgreSQLParserUNDER-586))|(1<<(PostgreSQLParserUNENCRYPTED-586))|(1<<(PostgreSQLParserUNKNOWN-586))|(1<<(PostgreSQLParserUNLISTEN-586))|(1<<(PostgreSQLParserUNNAMED-586))|(1<<(PostgreSQLParserUNNEST-586))|(1<<(PostgreSQLParserUNTIL-586)))) != 0) || (((_la-618)&-(0x1f+1)) == 0 && ((1<<uint((_la-618)))&((1<<(PostgreSQLParserUPDATE-618))|(1<<(PostgreSQLParserUPPER-618))|(1<<(PostgreSQLParserUSAGE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CATALOG-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_CODE-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_NAME-618))|(1<<(PostgreSQLParserUSER_DEFINED_TYPE_SCHEMA-618))|(1<<(PostgreSQLParserVACUUM-618))|(1<<(PostgreSQLParserVALID-618))|(1<<(PostgreSQLParserVALIDATOR-618))|(1<<(PostgreSQLParserVALUE-618))|(1<<(PostgreSQLParserVALUES-618))|(1<<(PostgreSQLParserVAR_POP-618))|(1<<(PostgreSQLParserVAR_SAMP-618))|(1<<(PostgreSQLParserVARCHAR-618))|(1<<(PostgreSQLParserVARYING-618))|(1<<(PostgreSQLParserVIEW-618))|(1<<(PostgreSQLParserVOLATILE-618))|(1<<(PostgreSQLParserWHENEVER-618))|(1<<(PostgreSQLParserWIDTH_BUCKET-618))|(1<<(PostgreSQLParserWITHIN-618))|(1<<(PostgreSQLParserWITHOUT-618)))) != 0) || (((_la-650)&-(0x1f+1)) == 0 && ((1<<uint((_la-650)))&((1<<(PostgreSQLParserWORK-650))|(1<<(PostgreSQLParserWRITE-650))|(1<<(PostgreSQLParserYEAR-650))|(1<<(PostgreSQLParserZONE-650)))) != 0) || _la == PostgreSQLParserTEXT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) Non_reserved_keyword() INon_reserved_keywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INon_reserved_keywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INon_reserved_keywordContext)
}

func (s *IdentifierContext) DOUBLEQ_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDOUBLEQ_STRING_LITERAL, 0)
}

func (s *IdentifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIDENTIFIER, 0)
}

func (s *IdentifierContext) Type_name() IType_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *IdentifierContext) IDENTIFIER_UNICODE() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserIDENTIFIER_UNICODE, 0)
}

func (s *IdentifierContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *IdentifierContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *IdentifierContext) DOT() antlr.TerminalNode {
	return s.GetToken(PostgreSQLParserDOT, 0)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (p *PostgreSQLParser) Identifier() (localctx IIdentifierContext) {
	return p.identifier(0)
}

func (p *PostgreSQLParser) identifier(_p int) (localctx IIdentifierContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IIdentifierContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 516
	p.EnterRecursionRule(localctx, 516, PostgreSQLParserRULE_identifier, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5651)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 693, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5646)
			p.Non_reserved_keyword()
		}

	case 2:
		{
			p.SetState(5647)
			p.Match(PostgreSQLParserDOUBLEQ_STRING_LITERAL)
		}

	case 3:
		{
			p.SetState(5648)
			p.Match(PostgreSQLParserIDENTIFIER)
		}

	case 4:
		{
			p.SetState(5649)
			p.Type_name()
		}

	case 5:
		{
			p.SetState(5650)
			p.Match(PostgreSQLParserIDENTIFIER_UNICODE)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(5658)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 694, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewIdentifierContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, PostgreSQLParserRULE_identifier)
			p.SetState(5653)

			if !(p.Precpred(p.GetParserRuleContext(), 3)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
			}
			{
				p.SetState(5654)
				p.Match(PostgreSQLParserDOT)
			}
			{
				p.SetState(5655)
				p.identifier(4)
			}

		}
		p.SetState(5660)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 694, p.GetParserRuleContext())
	}

	return localctx
}

// ITodo_fill_inContext is an interface to support dynamic dispatch.
type ITodo_fill_inContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTodo_fill_inContext differentiates from other interfaces.
	IsTodo_fill_inContext()
}

type Todo_fill_inContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTodo_fill_inContext() *Todo_fill_inContext {
	var p = new(Todo_fill_inContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_todo_fill_in
	return p
}

func (*Todo_fill_inContext) IsTodo_fill_inContext() {}

func NewTodo_fill_inContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Todo_fill_inContext {
	var p = new(Todo_fill_inContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_todo_fill_in

	return p
}

func (s *Todo_fill_inContext) GetParser() antlr.Parser { return s.parser }
func (s *Todo_fill_inContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Todo_fill_inContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Todo_fill_inContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterTodo_fill_in(s)
	}
}

func (s *Todo_fill_inContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitTodo_fill_in(s)
	}
}

func (p *PostgreSQLParser) Todo_fill_in() (localctx ITodo_fill_inContext) {
	localctx = NewTodo_fill_inContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 518, PostgreSQLParserRULE_todo_fill_in)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5661)
	p.MatchWildcard()

	return localctx
}

// ITodo_implementContext is an interface to support dynamic dispatch.
type ITodo_implementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTodo_implementContext differentiates from other interfaces.
	IsTodo_implementContext()
}

type Todo_implementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTodo_implementContext() *Todo_implementContext {
	var p = new(Todo_implementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_todo_implement
	return p
}

func (*Todo_implementContext) IsTodo_implementContext() {}

func NewTodo_implementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Todo_implementContext {
	var p = new(Todo_implementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_todo_implement

	return p
}

func (s *Todo_implementContext) GetParser() antlr.Parser { return s.parser }

func (s *Todo_implementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Todo_implementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Todo_implementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Todo_implementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterTodo_implement(s)
	}
}

func (s *Todo_implementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitTodo_implement(s)
	}
}

func (p *PostgreSQLParser) Todo_implement() (localctx ITodo_implementContext) {
	localctx = NewTodo_implementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 520, PostgreSQLParserRULE_todo_implement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5663)
		p.identifier(0)
	}

	return localctx
}

// ICorrelation_nameContext is an interface to support dynamic dispatch.
type ICorrelation_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCorrelation_nameContext differentiates from other interfaces.
	IsCorrelation_nameContext()
}

type Correlation_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCorrelation_nameContext() *Correlation_nameContext {
	var p = new(Correlation_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_correlation_name
	return p
}

func (*Correlation_nameContext) IsCorrelation_nameContext() {}

func NewCorrelation_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Correlation_nameContext {
	var p = new(Correlation_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_correlation_name

	return p
}

func (s *Correlation_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Correlation_nameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Correlation_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Correlation_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Correlation_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterCorrelation_name(s)
	}
}

func (s *Correlation_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitCorrelation_name(s)
	}
}

func (p *PostgreSQLParser) Correlation_name() (localctx ICorrelation_nameContext) {
	localctx = NewCorrelation_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 522, PostgreSQLParserRULE_correlation_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5665)
		p.identifier(0)
	}

	return localctx
}

// IColumn_nameContext is an interface to support dynamic dispatch.
type IColumn_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_nameContext differentiates from other interfaces.
	IsColumn_nameContext()
}

type Column_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_nameContext() *Column_nameContext {
	var p = new(Column_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_column_name
	return p
}

func (*Column_nameContext) IsColumn_nameContext() {}

func NewColumn_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_nameContext {
	var p = new(Column_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_column_name

	return p
}

func (s *Column_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_nameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterColumn_name(s)
	}
}

func (s *Column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitColumn_name(s)
	}
}

func (p *PostgreSQLParser) Column_name() (localctx IColumn_nameContext) {
	localctx = NewColumn_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 524, PostgreSQLParserRULE_column_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5667)
		p.identifier(0)
	}

	return localctx
}

// IAliasContext is an interface to support dynamic dispatch.
type IAliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAliasContext differentiates from other interfaces.
	IsAliasContext()
}

type AliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliasContext() *AliasContext {
	var p = new(AliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_alias
	return p
}

func (*AliasContext) IsAliasContext() {}

func NewAliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AliasContext {
	var p = new(AliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_alias

	return p
}

func (s *AliasContext) GetParser() antlr.Parser { return s.parser }

func (s *AliasContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterAlias(s)
	}
}

func (s *AliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitAlias(s)
	}
}

func (p *PostgreSQLParser) Alias() (localctx IAliasContext) {
	localctx = NewAliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 526, PostgreSQLParserRULE_alias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5669)
		p.identifier(0)
	}

	return localctx
}

// IColumn_aliasContext is an interface to support dynamic dispatch.
type IColumn_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_aliasContext differentiates from other interfaces.
	IsColumn_aliasContext()
}

type Column_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_aliasContext() *Column_aliasContext {
	var p = new(Column_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_column_alias
	return p
}

func (*Column_aliasContext) IsColumn_aliasContext() {}

func NewColumn_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_aliasContext {
	var p = new(Column_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_column_alias

	return p
}

func (s *Column_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_aliasContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Column_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterColumn_alias(s)
	}
}

func (s *Column_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitColumn_alias(s)
	}
}

func (p *PostgreSQLParser) Column_alias() (localctx IColumn_aliasContext) {
	localctx = NewColumn_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 528, PostgreSQLParserRULE_column_alias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5671)
		p.identifier(0)
	}

	return localctx
}

// IColumn_definitionContext is an interface to support dynamic dispatch.
type IColumn_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_definitionContext differentiates from other interfaces.
	IsColumn_definitionContext()
}

type Column_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_definitionContext() *Column_definitionContext {
	var p = new(Column_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_column_definition
	return p
}

func (*Column_definitionContext) IsColumn_definitionContext() {}

func NewColumn_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_definitionContext {
	var p = new(Column_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_column_definition

	return p
}

func (s *Column_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_definitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Column_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterColumn_definition(s)
	}
}

func (s *Column_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitColumn_definition(s)
	}
}

func (p *PostgreSQLParser) Column_definition() (localctx IColumn_definitionContext) {
	localctx = NewColumn_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 530, PostgreSQLParserRULE_column_definition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5673)
		p.identifier(0)
	}

	return localctx
}

// IWindow_nameContext is an interface to support dynamic dispatch.
type IWindow_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_nameContext differentiates from other interfaces.
	IsWindow_nameContext()
}

type Window_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_nameContext() *Window_nameContext {
	var p = new(Window_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PostgreSQLParserRULE_window_name
	return p
}

func (*Window_nameContext) IsWindow_nameContext() {}

func NewWindow_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_nameContext {
	var p = new(Window_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PostgreSQLParserRULE_window_name

	return p
}

func (s *Window_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_nameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Window_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.EnterWindow_name(s)
	}
}

func (s *Window_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PostgreSQLParserListener); ok {
		listenerT.ExitWindow_name(s)
	}
}

func (p *PostgreSQLParser) Window_name() (localctx IWindow_nameContext) {
	localctx = NewWindow_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 532, PostgreSQLParserRULE_window_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5675)
		p.identifier(0)
	}

	return localctx
}

func (p *PostgreSQLParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 218:
		var t *ExprContext = nil
		if localctx != nil {
			t = localctx.(*ExprContext)
		}
		return p.Expr_Sempred(t, predIndex)

	case 219:
		var t *Bool_exprContext = nil
		if localctx != nil {
			t = localctx.(*Bool_exprContext)
		}
		return p.Bool_expr_Sempred(t, predIndex)

	case 243:
		var t *From_itemContext = nil
		if localctx != nil {
			t = localctx.(*From_itemContext)
		}
		return p.From_item_Sempred(t, predIndex)

	case 247:
		var t *PredicateContext = nil
		if localctx != nil {
			t = localctx.(*PredicateContext)
		}
		return p.Predicate_Sempred(t, predIndex)

	case 258:
		var t *IdentifierContext = nil
		if localctx != nil {
			t = localctx.(*IdentifierContext)
		}
		return p.Identifier_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *PostgreSQLParser) Expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 28)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 27)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 26)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 25)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 24)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 23)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 22)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 21)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 20)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 34)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 29)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 19)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PostgreSQLParser) Bool_expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 18:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 19:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PostgreSQLParser) From_item_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 20:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PostgreSQLParser) Predicate_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 21:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 22:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 23:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *PostgreSQLParser) Identifier_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 24:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
